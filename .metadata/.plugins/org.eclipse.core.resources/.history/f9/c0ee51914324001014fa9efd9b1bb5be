/**
 * @file secure_uart.h
 * @brief Заголовочный файл для защищенного протокола UART
 */

#ifndef SECURE_UART_H
#define SECURE_UART_H

#include "main.h"
#include <stdint.h>
#include <string.h>
#include <stdio.h>

/* Константы протокола */
#define SECURE_UART_SOF                  0xAA55    // Начало фрейма (Start of Frame)
#define SECURE_UART_EOF                  0x55AA    // Конец фрейма (End of Frame)
#define SECURE_UART_MAX_DATA_SIZE        256       // Максимальный размер данных
#define SECURE_UART_HEADER_SIZE          10        // Размер заголовка (SOF+DST+SRC+SEQ+LEN)
#define SECURE_UART_FOOTER_SIZE          6         // Размер концевика (CRC+EOF)
#define SECURE_UART_MAX_FRAME_SIZE       (SECURE_UART_HEADER_SIZE + SECURE_UART_MAX_DATA_SIZE + SECURE_UART_FOOTER_SIZE)

/* Определения структур */

/**
 * @brief Структура заголовка пакета
 */
typedef struct {
    uint16_t sof;          // Начало фрейма (Start of Frame)
    uint8_t  dst;          // Адрес получателя
    uint8_t  src;          // Адрес отправителя
    uint32_t seq;          // Порядковый номер пакета
    uint16_t len;          // Длина данных
} SecureUartHeader;

/**
 * @brief Структура концевика пакета
 */
typedef struct {
    uint32_t crc;          // Контрольная сумма
    uint16_t eof;          // Конец фрейма (End of Frame)
} SecureUartFooter;

/**
 * @brief Структура фрейма целиком
 */
typedef struct {
    SecureUartHeader header;                    // Заголовок
    uint8_t data[SECURE_UART_MAX_DATA_SIZE];    // Данные
    SecureUartFooter footer;                    // Концевик
} SecureUartFrame;

/**
 * @brief Состояния парсера пакетов
 */
typedef enum {
    SECURE_UART_STATE_WAIT_SOF_1,    // Ожидание первого байта SOF
    SECURE_UART_STATE_WAIT_SOF_2,    // Ожидание второго байта SOF
    SECURE_UART_STATE_RECEIVE_HEADER, // Прием оставшейся части заголовка
    SECURE_UART_STATE_RECEIVE_DATA,   // Прием данных
    SECURE_UART_STATE_RECEIVE_FOOTER  // Прием концевика
} SecureUartParserState;

/**
 * @brief Структура контекста парсера
 */
typedef struct {
    SecureUartParserState state;            // Текущее состояние парсера
    uint16_t headerBytesReceived;           // Количество принятых байт заголовка
    uint16_t dataBytesReceived;             // Количество принятых байт данных
    uint16_t footerBytesReceived;           // Количество принятых байт концевика
    SecureUartFrame frame;                  // Принимаемый фрейм
    uint8_t rawBuffer[SECURE_UART_MAX_FRAME_SIZE]; // Буфер для сырых данных
    uint16_t rawBufferIndex;                // Индекс в сыром буфере
} SecureUartParser;

/**
 * @brief Структура контекста протокола
 */
typedef struct {
    UART_HandleTypeDef* uartTx;          // UART для передачи
    UART_HandleTypeDef* uartRx;          // UART для приема
    UART_HandleTypeDef* uartDebug;       // UART для отладки
    uint8_t localAddress;                // Собственный адрес устройства
    uint32_t txSequence;                 // Счетчик исходящих пакетов
    uint32_t rxLastSequence;             // Последний принятый порядковый номер пакета
    uint8_t txBuffer[SECURE_UART_MAX_FRAME_SIZE]; // Буфер для передачи
    uint8_t rxBuffer[1];                 // Буфер для приема (один байт в режиме DMA circular)
    SecureUartParser parser;             // Парсер входящих пакетов
} SecureUartContext;

/* Прототипы функций */

/**
 * @brief Инициализация контекста протокола
 * @param ctx Указатель на структуру контекста
 * @param uartTx UART для передачи
 * @param uartRx UART для приема
 * @param uartDebug UART для отладки
 * @param localAddress Собственный адрес устройства
 * @return HAL_OK при успешной инициализации
 */
HAL_StatusTypeDef SecureUart_Init(SecureUartContext* ctx,
                                 UART_HandleTypeDef* uartTx,
                                 UART_HandleTypeDef* uartRx,
                                 UART_HandleTypeDef* uartDebug,
                                 uint8_t localAddress);

/**
 * @brief Запуск приема данных по UART
 * @param ctx Указатель на структуру контекста
 * @return HAL_OK при успешном запуске
 */
HAL_StatusTypeDef SecureUart_StartReceive(SecureUartContext* ctx);

/**
 * @brief Обработка принятого байта
 * @param ctx Указатель на структуру контекста
 * @param byte Принятый байт
 * @return 1, если пакет успешно принят и обработан, 0 в противном случае
 */
uint8_t SecureUart_ProcessByte(SecureUartContext* ctx, uint8_t byte);

/**
 * @brief Отправка данных защищенным протоколом
 * @param ctx Указатель на структуру контекста
 * @param dstAddress Адрес получателя
 * @param data Указатель на данные
 * @param length Длина данных
 * @return HAL_OK при успешной отправке
 */
HAL_StatusTypeDef SecureUart_Send(SecureUartContext* ctx,
                                 uint8_t dstAddress,
                                 const uint8_t* data,
                                 uint16_t length);

/**
 * @brief Вычисление CRC32 для данных
 * @param data Указатель на данные
 * @param length Длина данных
 * @return Значение CRC32
 */
uint32_t SecureUart_CalculateCRC32(const uint8_t* data, uint32_t length);

/**
 * @brief Callback-функция приема UART в режиме DMA
 * @param ctx Указатель на структуру контекста
 */
void SecureUart_RxCpltCallback(SecureUartContext* ctx);

/**
 * @brief Обработка таймаута UART
 * @param ctx Указатель на структуру контекста
 */
void SecureUart_HandleTimeout(SecureUartContext* ctx);

/**
 * @brief Отладочный вывод в консоль
 * @param ctx Указатель на структуру контекста
 * @param format Форматная строка
 * @param ... Аргументы форматной строки
 */
void SecureUart_Debug(SecureUartContext* ctx, const char* format, ...);

#endif /* SECURE_UART_H */
