/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Реализация защищенного протокола поверх UART
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>
#include <stdio.h>
#include "packet.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
#define RX_BUFFER_SIZE 256
#define TX_BUFFER_SIZE 256

typedef struct {
    uint8_t buffer[RX_BUFFER_SIZE];
    uint16_t position;
    uint8_t ready;
} UART_RxBuffer;

typedef struct {
    uint8_t buffer[TX_BUFFER_SIZE];
    uint16_t position;
    uint16_t size;
} UART_TxBuffer;

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart6;

/* USER CODE BEGIN PV */
UART_RxBuffer uart1_rx = {0};
UART_RxBuffer uart6_rx = {0};
UART_TxBuffer uart1_tx = {0};
UART_TxBuffer uart6_tx = {0};

uint8_t uart1_rx_byte;
uint8_t uart6_rx_byte;

char debug_buffer[256];
uint8_t tx_buffer[256];
static uint8_t next_packet_id = 0;

// Парсеры пакетов для каждого UART
PacketParser uart1_packet_parser;
PacketParser uart6_packet_parser;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART6_UART_Init(void);
/* USER CODE BEGIN PFP */
void Debug_Print(const char* message);
void UART_SendRawData(UART_HandleTypeDef *huart, const uint8_t *data, uint16_t size);
void UART_SendPacket(UART_HandleTypeDef *huart, PacketType type, const uint8_t *data, uint16_t size);
void ProcessPacket(uint8_t source, Packet *packet);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/**
 * @brief Отправка сообщения в мониторинг через USART2
 * @param message Сообщение для отправки
 */
void Debug_Print(const char* message) {
    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 100);
}

/**
 * @brief Отправка "сырых" данных через указанный UART
 * @param huart Дескриптор UART
 * @param data Данные для отправки
 * @param size Размер данных
 */
void UART_SendRawData(UART_HandleTypeDef *huart, const uint8_t *data, uint16_t size) {
    HAL_UART_Transmit(huart, (uint8_t*)data, size, 100);
}

/**
 * @brief Отправка пакета данных через указанный UART
 * @param huart Дескриптор UART
 * @param type Тип пакета
 * @param data Данные для отправки
 * @param size Размер данных
 */
void UART_SendPacket(UART_HandleTypeDef *huart, PacketType type, const uint8_t *data, uint16_t size) {
    Packet packet;

    // Создание пакета с данными
    Packet_Create(&packet, type, next_packet_id++, data, size);

    // Сериализация пакета
    uint16_t packet_size = Packet_Serialize(&packet, tx_buffer, sizeof(tx_buffer));

    if (packet_size > 0) {
        // Отправка сериализованного пакета
        UART_SendRawData(huart, tx_buffer, packet_size);

        // Вывод информации о пакете в отладочный UART
        const char *type_str;
        switch (type) {
            case PACKET_TYPE_DATA:  type_str = "DATA"; break;
            case PACKET_TYPE_ACK:   type_str = "ACK"; break;
            case PACKET_TYPE_NACK:  type_str = "NACK"; break;
            case PACKET_TYPE_PING:  type_str = "PING"; break;
            case PACKET_TYPE_RESET: type_str = "RESET"; break;
            default:                type_str = "UNKNOWN"; break;
        }

        snprintf(debug_buffer, sizeof(debug_buffer),
                 "[INFO] Отправлен пакет типа %s, ID: %d, размер данных: %d байт\r\n",
                 type_str, packet.header.packet_id, packet.header.data_length);
        Debug_Print(debug_buffer);
    } else {
        Debug_Print("[ERROR] Не удалось сериализовать пакет\r\n");
    }
}

/**
 * @brief Обработка принятого пакета
 * @param source Идентификатор источника (1 для USART1, 6 для USART6)
 * @param packet Указатель на пакет
 */
void ProcessPacket(uint8_t source, Packet *packet) {
    const char *type_str;
    switch (packet->header.packet_type) {
        case PACKET_TYPE_DATA:  type_str = "DATA"; break;
        case PACKET_TYPE_ACK:   type_str = "ACK"; break;
        case PACKET_TYPE_NACK:  type_str = "NACK"; break;
        case PACKET_TYPE_PING:  type_str = "PING"; break;
        case PACKET_TYPE_RESET: type_str = "RESET"; break;
        default:                type_str = "UNKNOWN"; break;
    }

    snprintf(debug_buffer, sizeof(debug_buffer),
             "[INFO] Получен пакет от USART%d, тип: %s, ID: %d, размер данных: %d байт\r\n",
             source, type_str, packet->header.packet_id, packet->header.data_length);
    Debug_Print(debug_buffer);

    if (packet->header.data_length > 0) {
        snprintf(debug_buffer, sizeof(debug_buffer), "[DATA] Содержимое: ");
        Debug_Print(debug_buffer);

        // Выводим содержимое пакета в HEX
        for (uint16_t i = 0; i < packet->header.data_length; i++) {
            snprintf(debug_buffer, sizeof(debug_buffer), "%02X ", packet->data[i]);
            Debug_Print(debug_buffer);
        }
        Debug_Print("\r\n");
    }

    // Если источник USART1, отправляем ответ через USART6
    if (source == 1) {
        Debug_Print("[INFO] Отправляем ответ через USART6\r\n");
        UART_SendPacket(&huart6, PACKET_TYPE_DATA, packet->data, packet->header.data_length);
    }
    // Если источник USART6, отправляем ответ через USART1
    else if (source == 6) {
        Debug_Print("[INFO] Отправляем ответ через USART1\r\n");
        UART_SendPacket(&huart1, PACKET_TYPE_DATA, packet->data, packet->header.data_length);
    }
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  MX_USART6_UART_Init();
  /* USER CODE BEGIN 2 */

  // Инициализация парсеров пакетов
  Packet_InitParser(&uart1_packet_parser);
  Packet_InitParser(&uart6_packet_parser);

  // Проверка инициализации парсеров
  snprintf(debug_buffer, sizeof(debug_buffer),
           "[DEBUG] Парсер USART1 state=%d, Парсер USART6 state=%d\r\n",
           uart1_packet_parser.state, uart6_packet_parser.state);
  Debug_Print(debug_buffer);

  // Запускаем прием по прерыванию на USART1 и USART6
  HAL_UART_Receive_IT(&huart1, &uart1_rx_byte, 1);
  HAL_UART_Receive_IT(&huart6, &uart6_rx_byte, 1);

  Debug_Print("\r\n\r\n===== Запуск программы =====\r\n");
  Debug_Print("[INFO] Инициализация USART завершена\r\n");
  Debug_Print("[INFO] Инициализация парсеров пакетов завершена\r\n");

  // Вывод информации о настройках пакетов
  snprintf(debug_buffer, sizeof(debug_buffer),
           "[INFO] Настройки пакетов: START=0x%02X, END=0x%02X, MAX_SIZE=%d\r\n",
           PACKET_START_MARKER, PACKET_END_MARKER, PACKET_MAX_DATA_SIZE);
  Debug_Print(debug_buffer);

  // Тестовые данные для отправки
  uint8_t test_packet[] = "Тестовый пакет данных для проверки связи";
  uint16_t packet_size = strlen((char*)test_packet);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    // Первая отправка и прием (задержка 2 секунды)
    Debug_Print("\r\n[INFO] Первая отправка пакета через USART1\r\n");
    UART_SendPacket(&huart1, PACKET_TYPE_DATA, test_packet, packet_size);

    // Добавим отправку тестового сообщения через USART6
    Debug_Print("\r\n[INFO] Отправка проверочного сообщения через USART6\r\n");
    uint8_t ping_packet[] = "PING-USART6";
    UART_SendPacket(&huart6, PACKET_TYPE_PING, ping_packet, strlen((char*)ping_packet));

    HAL_Delay(2000); // Ждем 2 секунды

    // Вторая отправка и прием (задержка 30 секунд)
    Debug_Print("\r\n[INFO] Вторая отправка пакета через USART1\r\n");
    UART_SendPacket(&huart1, PACKET_TYPE_DATA, test_packet, packet_size);

    // Проверка физического соединения
    Debug_Print("\r\n[INFO] Отправка байтов напрямую для проверки соединения...\r\n");
    uint8_t test_bytes[] = {0xA5, 0x01, 0x02, 0x03, 0x04, 0x05, 0x5A};
    UART_SendRawData(&huart1, test_bytes, sizeof(test_bytes));

    HAL_Delay(30000); // Ждем 30 секунд
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
  huart6.Init.BaudRate = 115200;
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart6) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/**
 * @brief Обратный вызов для обработки приема данных UART
 * @param huart Дескриптор UART, по которому произошло прерывание
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
    // Обработка прерывания от USART1
    if (huart->Instance == USART1) {
        // Отображаем принятый байт в HEX для отладки
        snprintf(debug_buffer, sizeof(debug_buffer), "[DEBUG] USART1 RX: 0x%02X\r\n", uart1_rx_byte);
        HAL_UART_Transmit(&huart2, (uint8_t*)debug_buffer, strlen(debug_buffer), 10);

        // Отображаем состояние парсера до обработки байта
        snprintf(debug_buffer, sizeof(debug_buffer), "[PARSER] State before: %d\r\n", uart1_packet_parser.state);
        HAL_UART_Transmit(&huart2, (uint8_t*)debug_buffer, strlen(debug_buffer), 10);

        // Обрабатываем байт через парсер пакетов
        uint8_t packet_complete = Packet_ParseByte(&uart1_packet_parser, uart1_rx_byte);

        // Отображаем состояние парсера после обработки байта
        snprintf(debug_buffer, sizeof(debug_buffer), "[PARSER] State after: %d\r\n", uart1_packet_parser.state);
        HAL_UART_Transmit(&huart2, (uint8_t*)debug_buffer, strlen(debug_buffer), 10);

        // Если пакет полностью получен, обрабатываем его
        if (packet_complete) {
            snprintf(debug_buffer, sizeof(debug_buffer), "[DEBUG] Пакет получен на USART1, ID: %d\r\n",
                    uart1_packet_parser.current_packet.header.packet_id);
            HAL_UART_Transmit(&huart2, (uint8_t*)debug_buffer, strlen(debug_buffer), 10);

            ProcessPacket(1, &uart1_packet_parser.current_packet);
        }

        // Продолжаем прием
        HAL_UART_Receive_IT(&huart1, &uart1_rx_byte, 1);
    }

    // Обработка прерывания от USART6
    else if (huart->Instance == USART6) {
        // Отображаем принятый байт в HEX для отладки
        snprintf(debug_buffer, sizeof(debug_buffer), "[DEBUG] USART6 RX: 0x%02X\r\n", uart6_rx_byte);
        HAL_UART_Transmit(&huart2, (uint8_t*)debug_buffer, strlen(debug_buffer), 10);

        // Отображаем состояние парсера до обработки байта
        snprintf(debug_buffer, sizeof(debug_buffer), "[PARSER] State before: %d\r\n", uart6_packet_parser.state);
        HAL_UART_Transmit(&huart2, (uint8_t*)debug_buffer, strlen(debug_buffer), 10);

        // Обрабатываем байт через парсер пакетов
        uint8_t packet_complete = Packet_ParseByte(&uart6_packet_parser, uart6_rx_byte);

        // Отображаем состояние парсера после обработки байта
        snprintf(debug_buffer, sizeof(debug_buffer), "[PARSER] State after: %d\r\n", uart6_packet_parser.state);
        HAL_UART_Transmit(&huart2, (uint8_t*)debug_buffer, strlen(debug_buffer), 10);

        // Если пакет полностью получен, обрабатываем его
        if (packet_complete) {
            snprintf(debug_buffer, sizeof(debug_buffer), "[DEBUG] Пакет получен на USART6, ID: %d\r\n",
                    uart6_packet_parser.current_packet.header.packet_id);
            HAL_UART_Transmit(&huart2, (uint8_t*)debug_buffer, strlen(debug_buffer), 10);

            ProcessPacket(6, &uart6_packet_parser.current_packet);
        }

        // Продолжаем прием
        HAL_UART_Receive_IT(&huart6, &uart6_rx_byte, 1);
    }
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
