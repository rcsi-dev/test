
work.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b80  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08005d20  08005d20  00006d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ef0  08005ef0  00007084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005ef0  08005ef0  00006ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ef8  08005ef8  00007084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ef8  08005ef8  00006ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005efc  08005efc  00006efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08005f00  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000081c  20000084  08005f84  00007084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008a0  08005f84  000078a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b0e3  00000000  00000000  000070b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000247f  00000000  00000000  00012197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000918  00000000  00000000  00014618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006cf  00000000  00000000  00014f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001777b  00000000  00000000  000155ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d915  00000000  00000000  0002cd7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088257  00000000  00000000  0003a68f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c28e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a00  00000000  00000000  000c292c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  000c532c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005d08 	.word	0x08005d08

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	08005d08 	.word	0x08005d08

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80005b0:	4b06      	ldr	r3, [pc, #24]	@ (80005cc <MX_CRC_Init+0x20>)
 80005b2:	4a07      	ldr	r2, [pc, #28]	@ (80005d0 <MX_CRC_Init+0x24>)
 80005b4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80005b6:	4805      	ldr	r0, [pc, #20]	@ (80005cc <MX_CRC_Init+0x20>)
 80005b8:	f001 ffa7 	bl	800250a <HAL_CRC_Init>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80005c2:	f000 f949 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	200000a0 	.word	0x200000a0
 80005d0:	40023000 	.word	0x40023000

080005d4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a0b      	ldr	r2, [pc, #44]	@ (8000610 <HAL_CRC_MspInit+0x3c>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d10d      	bne.n	8000602 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000614 <HAL_CRC_MspInit+0x40>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ee:	4a09      	ldr	r2, [pc, #36]	@ (8000614 <HAL_CRC_MspInit+0x40>)
 80005f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80005f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f6:	4b07      	ldr	r3, [pc, #28]	@ (8000614 <HAL_CRC_MspInit+0x40>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	40023000 	.word	0x40023000
 8000614:	40023800 	.word	0x40023800

08000618 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	4b10      	ldr	r3, [pc, #64]	@ (8000664 <MX_DMA_Init+0x4c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	4a0f      	ldr	r2, [pc, #60]	@ (8000664 <MX_DMA_Init+0x4c>)
 8000628:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800062c:	6313      	str	r3, [r2, #48]	@ 0x30
 800062e:	4b0d      	ldr	r3, [pc, #52]	@ (8000664 <MX_DMA_Init+0x4c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	2100      	movs	r1, #0
 800063e:	2039      	movs	r0, #57	@ 0x39
 8000640:	f001 ff2d 	bl	800249e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000644:	2039      	movs	r0, #57	@ 0x39
 8000646:	f001 ff46 	bl	80024d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2100      	movs	r1, #0
 800064e:	203a      	movs	r0, #58	@ 0x3a
 8000650:	f001 ff25 	bl	800249e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000654:	203a      	movs	r0, #58	@ 0x3a
 8000656:	f001 ff3e 	bl	80024d6 <HAL_NVIC_EnableIRQ>

}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800

08000668 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	4b10      	ldr	r3, [pc, #64]	@ (80006b4 <MX_GPIO_Init+0x4c>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	4a0f      	ldr	r2, [pc, #60]	@ (80006b4 <MX_GPIO_Init+0x4c>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6313      	str	r3, [r2, #48]	@ 0x30
 800067e:	4b0d      	ldr	r3, [pc, #52]	@ (80006b4 <MX_GPIO_Init+0x4c>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	4b09      	ldr	r3, [pc, #36]	@ (80006b4 <MX_GPIO_Init+0x4c>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	4a08      	ldr	r2, [pc, #32]	@ (80006b4 <MX_GPIO_Init+0x4c>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	6313      	str	r3, [r2, #48]	@ 0x30
 800069a:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <MX_GPIO_Init+0x4c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	683b      	ldr	r3, [r7, #0]

}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800

080006b8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b0ba      	sub	sp, #232	@ 0xe8
 80006bc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006be:	f001 fd7d 	bl	80021bc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006c2:	f000 f85f 	bl	8000784 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006c6:	f7ff ffcf 	bl	8000668 <MX_GPIO_Init>
	MX_DMA_Init();
 80006ca:	f7ff ffa5 	bl	8000618 <MX_DMA_Init>
	MX_USART1_UART_Init();
 80006ce:	f001 fba7 	bl	8001e20 <MX_USART1_UART_Init>
	MX_USART6_UART_Init();
 80006d2:	f001 fbf9 	bl	8001ec8 <MX_USART6_UART_Init>
	MX_USART2_UART_Init();
 80006d6:	f001 fbcd 	bl	8001e74 <MX_USART2_UART_Init>
	MX_CRC_Init();
 80006da:	f7ff ff67 	bl	80005ac <MX_CRC_Init>
	/* USER CODE BEGIN 2 */

	printf("BOOT\r\n");
 80006de:	4822      	ldr	r0, [pc, #136]	@ (8000768 <main+0xb0>)
 80006e0:	f004 fc88 	bl	8004ff4 <puts>

	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx1_dma, RX1_LEN);
 80006e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006e8:	4920      	ldr	r1, [pc, #128]	@ (800076c <main+0xb4>)
 80006ea:	4821      	ldr	r0, [pc, #132]	@ (8000770 <main+0xb8>)
 80006ec:	f003 fa15 	bl	8003b1a <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, rx6_dma, RX6_LEN);
 80006f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006f4:	491f      	ldr	r1, [pc, #124]	@ (8000774 <main+0xbc>)
 80006f6:	4820      	ldr	r0, [pc, #128]	@ (8000778 <main+0xc0>)
 80006f8:	f003 fa0f 	bl	8003b1a <HAL_UARTEx_ReceiveToIdle_DMA>

	__HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT);
 80006fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <main+0xb8>)
 80006fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	4b1a      	ldr	r3, [pc, #104]	@ (8000770 <main+0xb8>)
 8000706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f022 0208 	bic.w	r2, r2, #8
 800070e:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huart6.hdmarx, DMA_IT_HT);
 8000710:	4b19      	ldr	r3, [pc, #100]	@ (8000778 <main+0xc0>)
 8000712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	4b17      	ldr	r3, [pc, #92]	@ (8000778 <main+0xc0>)
 800071a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f022 0208 	bic.w	r2, r2, #8
 8000722:	601a      	str	r2, [r3, #0]

	HAL_Delay(2000);
 8000724:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000728:	f001 fdba 	bl	80022a0 <HAL_Delay>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		const char msgA[] = "Lorem ipsum dolor sit amet, " \
 800072c:	4a13      	ldr	r2, [pc, #76]	@ (800077c <main+0xc4>)
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	4611      	mov	r1, r2
 8000732:	22e2      	movs	r2, #226	@ 0xe2
 8000734:	4618      	mov	r0, r3
 8000736:	f004 fdd2 	bl	80052de <memcpy>
				"consectetur adipiscing elit. Nullam ut maximus massa. " \
				"Aenean ut dapibus quam. Curabitur a turpis quam. " \
				"Fusce commodo molestie congue. Fusce iaculis odio eu " \
				"purus tincidunt, id laoreet leo rutrum.\r\n";
		uint8_t flen;
		secure_uart_build((uint8_t*)msgA, sizeof msgA-1, tx_frame, &flen);
 800073a:	f107 03e7 	add.w	r3, r7, #231	@ 0xe7
 800073e:	1d38      	adds	r0, r7, #4
 8000740:	4a0f      	ldr	r2, [pc, #60]	@ (8000780 <main+0xc8>)
 8000742:	21e1      	movs	r1, #225	@ 0xe1
 8000744:	f000 ff56 	bl	80015f4 <secure_uart_build>
		HAL_UART_Transmit(&huart1, tx_frame, flen, HAL_MAX_DELAY);
 8000748:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800074c:	461a      	mov	r2, r3
 800074e:	f04f 33ff 	mov.w	r3, #4294967295
 8000752:	490b      	ldr	r1, [pc, #44]	@ (8000780 <main+0xc8>)
 8000754:	4806      	ldr	r0, [pc, #24]	@ (8000770 <main+0xb8>)
 8000756:	f003 f955 	bl	8003a04 <HAL_UART_Transmit>

		HAL_Delay(10000);
 800075a:	f242 7010 	movw	r0, #10000	@ 0x2710
 800075e:	f001 fd9f 	bl	80022a0 <HAL_Delay>
	{
 8000762:	bf00      	nop
 8000764:	e7e2      	b.n	800072c <main+0x74>
 8000766:	bf00      	nop
 8000768:	08005d20 	.word	0x08005d20
 800076c:	200000a8 	.word	0x200000a8
 8000770:	200005b8 	.word	0x200005b8
 8000774:	200001a8 	.word	0x200001a8
 8000778:	20000648 	.word	0x20000648
 800077c:	08005d28 	.word	0x08005d28
 8000780:	200002a8 	.word	0x200002a8

08000784 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b094      	sub	sp, #80	@ 0x50
 8000788:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 0320 	add.w	r3, r7, #32
 800078e:	2230      	movs	r2, #48	@ 0x30
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f004 fd28 	bl	80051e8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80007a8:	2300      	movs	r3, #0
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	4b28      	ldr	r3, [pc, #160]	@ (8000850 <SystemClock_Config+0xcc>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b0:	4a27      	ldr	r2, [pc, #156]	@ (8000850 <SystemClock_Config+0xcc>)
 80007b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007b8:	4b25      	ldr	r3, [pc, #148]	@ (8000850 <SystemClock_Config+0xcc>)
 80007ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c4:	2300      	movs	r3, #0
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	4b22      	ldr	r3, [pc, #136]	@ (8000854 <SystemClock_Config+0xd0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a21      	ldr	r2, [pc, #132]	@ (8000854 <SystemClock_Config+0xd0>)
 80007ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007d2:	6013      	str	r3, [r2, #0]
 80007d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000854 <SystemClock_Config+0xd0>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e0:	2302      	movs	r3, #2
 80007e2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e4:	2301      	movs	r3, #1
 80007e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e8:	2310      	movs	r3, #16
 80007ea:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ec:	2302      	movs	r3, #2
 80007ee:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007f0:	2300      	movs	r3, #0
 80007f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 80007f4:	2310      	movs	r3, #16
 80007f6:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 400;
 80007f8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80007fc:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007fe:	2304      	movs	r3, #4
 8000800:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000802:	2304      	movs	r3, #4
 8000804:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000806:	f107 0320 	add.w	r3, r7, #32
 800080a:	4618      	mov	r0, r3
 800080c:	f002 fc52 	bl	80030b4 <HAL_RCC_OscConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0x96>
	{
		Error_Handler();
 8000816:	f000 f81f 	bl	8000858 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081a:	230f      	movs	r3, #15
 800081c:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081e:	2302      	movs	r3, #2
 8000820:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000826:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800082a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	2103      	movs	r1, #3
 8000836:	4618      	mov	r0, r3
 8000838:	f002 feb4 	bl	80035a4 <HAL_RCC_ClockConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8000842:	f000 f809 	bl	8000858 <Error_Handler>
	}
}
 8000846:	bf00      	nop
 8000848:	3750      	adds	r7, #80	@ 0x50
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800
 8000854:	40007000 	.word	0x40007000

08000858 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <Error_Handler+0x8>

08000864 <_write>:
#include "stm32f4xx_hal.h"
#include "usart.h"

/* Перенаправление printf → USART2 */
int _write(int file, char *ptr, int len)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	b29a      	uxth	r2, r3
 8000874:	f04f 33ff 	mov.w	r3, #4294967295
 8000878:	68b9      	ldr	r1, [r7, #8]
 800087a:	4804      	ldr	r0, [pc, #16]	@ (800088c <_write+0x28>)
 800087c:	f003 f8c2 	bl	8003a04 <HAL_UART_Transmit>
    return len;
 8000880:	687b      	ldr	r3, [r7, #4]
}
 8000882:	4618      	mov	r0, r3
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000600 	.word	0x20000600

08000890 <speck64_key_schedule>:
#if SECURE_UART_USE_ENCRYPTION
#define ROR32(x,r)  ( ((x) >> (r)) | ((x) << (32U-(r))) )
#define ROL32(x,r)  ( ((x) << (r)) | ((x) >> (32U-(r))) )

static void speck64_key_schedule(const uint32_t k[3], uint32_t rk[26])
{
 8000890:	b480      	push	{r7}
 8000892:	b087      	sub	sp, #28
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	6039      	str	r1, [r7, #0]
	uint32_t x = k[2];
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	3308      	adds	r3, #8
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	617b      	str	r3, [r7, #20]
	uint32_t y = k[1];
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3304      	adds	r3, #4
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	613b      	str	r3, [r7, #16]
	rk[0] = k[0];
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 25; ++i){           /* produce rk[1]..rk[25] */
 80008b2:	2300      	movs	r3, #0
 80008b4:	73fb      	strb	r3, [r7, #15]
 80008b6:	e017      	b.n	80008e8 <speck64_key_schedule+0x58>
		x = (ROR32(x,8) + y) ^ i;
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	ea4f 2233 	mov.w	r2, r3, ror #8
 80008be:	693b      	ldr	r3, [r7, #16]
 80008c0:	441a      	add	r2, r3
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	4053      	eors	r3, r2
 80008c6:	617b      	str	r3, [r7, #20]
		y =  ROR32(y,3) ^ x;
 80008c8:	693b      	ldr	r3, [r7, #16]
 80008ca:	ea4f 03f3 	mov.w	r3, r3, ror #3
 80008ce:	697a      	ldr	r2, [r7, #20]
 80008d0:	4053      	eors	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]
		rk[i+1] = x;
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	3301      	adds	r3, #1
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	683a      	ldr	r2, [r7, #0]
 80008dc:	4413      	add	r3, r2
 80008de:	697a      	ldr	r2, [r7, #20]
 80008e0:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 25; ++i){           /* produce rk[1]..rk[25] */
 80008e2:	7bfb      	ldrb	r3, [r7, #15]
 80008e4:	3301      	adds	r3, #1
 80008e6:	73fb      	strb	r3, [r7, #15]
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
 80008ea:	2b18      	cmp	r3, #24
 80008ec:	d9e4      	bls.n	80008b8 <speck64_key_schedule+0x28>
	}
}
 80008ee:	bf00      	nop
 80008f0:	bf00      	nop
 80008f2:	371c      	adds	r7, #28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <speck64_encrypt>:

static void speck64_encrypt(const uint32_t rk[26], uint32_t b[2])
{
 80008fc:	b480      	push	{r7}
 80008fe:	b087      	sub	sp, #28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]
	uint32_t x = b[1], y = b[0];
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	613b      	str	r3, [r7, #16]
	for(uint8_t i = 0; i < 26; ++i){
 8000912:	2300      	movs	r3, #0
 8000914:	73fb      	strb	r3, [r7, #15]
 8000916:	e014      	b.n	8000942 <speck64_encrypt+0x46>
		x = (ROR32(x,8) + y) ^ rk[i];
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	ea4f 2233 	mov.w	r2, r3, ror #8
 800091e:	693b      	ldr	r3, [r7, #16]
 8000920:	441a      	add	r2, r3
 8000922:	7bfb      	ldrb	r3, [r7, #15]
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	6879      	ldr	r1, [r7, #4]
 8000928:	440b      	add	r3, r1
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4053      	eors	r3, r2
 800092e:	617b      	str	r3, [r7, #20]
		y =  ROR32(y,3) ^ x;
 8000930:	693b      	ldr	r3, [r7, #16]
 8000932:	ea4f 03f3 	mov.w	r3, r3, ror #3
 8000936:	697a      	ldr	r2, [r7, #20]
 8000938:	4053      	eors	r3, r2
 800093a:	613b      	str	r3, [r7, #16]
	for(uint8_t i = 0; i < 26; ++i){
 800093c:	7bfb      	ldrb	r3, [r7, #15]
 800093e:	3301      	adds	r3, #1
 8000940:	73fb      	strb	r3, [r7, #15]
 8000942:	7bfb      	ldrb	r3, [r7, #15]
 8000944:	2b19      	cmp	r3, #25
 8000946:	d9e7      	bls.n	8000918 <speck64_encrypt+0x1c>
	}
	b[1] = x;  b[0] = y;
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	3304      	adds	r3, #4
 800094c:	697a      	ldr	r2, [r7, #20]
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	601a      	str	r2, [r3, #0]
}
 8000956:	bf00      	nop
 8000958:	371c      	adds	r7, #28
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <speck64_ctr_crypt>:

/* SPECK-CTR helper */
static void speck64_ctr_crypt(uint32_t rk[26],
		uint8_t *buf, uint8_t len,
		uint32_t iv_low)
{
 8000962:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000966:	b08a      	sub	sp, #40	@ 0x28
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	4613      	mov	r3, r2
 8000972:	71fb      	strb	r3, [r7, #7]
	uint64_t ctr = iv_low;            /* 64-битный счётчик */
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	2200      	movs	r2, #0
 8000978:	4698      	mov	r8, r3
 800097a:	4691      	mov	r9, r2
 800097c:	e9c7 8908 	strd	r8, r9, [r7, #32]
	for (uint8_t off=0; off < len; off += 8, ++ctr) {
 8000980:	2300      	movs	r3, #0
 8000982:	77fb      	strb	r3, [r7, #31]
 8000984:	e03f      	b.n	8000a06 <speck64_ctr_crypt+0xa4>
		uint32_t blk[2] = { (uint32_t)ctr, (uint32_t)(ctr>>32) };
 8000986:	6a3b      	ldr	r3, [r7, #32]
 8000988:	617b      	str	r3, [r7, #20]
 800098a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800098e:	f04f 0200 	mov.w	r2, #0
 8000992:	f04f 0300 	mov.w	r3, #0
 8000996:	000a      	movs	r2, r1
 8000998:	2300      	movs	r3, #0
 800099a:	4613      	mov	r3, r2
 800099c:	61bb      	str	r3, [r7, #24]
		speck64_encrypt(rk, blk);     /* keystream = E_K(ctr) */
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	68f8      	ldr	r0, [r7, #12]
 80009a6:	f7ff ffa9 	bl	80008fc <speck64_encrypt>
		for (uint8_t i=0; i<8 && (off+i)<len; ++i)
 80009aa:	2300      	movs	r3, #0
 80009ac:	77bb      	strb	r3, [r7, #30]
 80009ae:	e017      	b.n	80009e0 <speck64_ctr_crypt+0x7e>
			buf[off+i] ^= ((uint8_t*)blk)[i];
 80009b0:	7ffa      	ldrb	r2, [r7, #31]
 80009b2:	7fbb      	ldrb	r3, [r7, #30]
 80009b4:	4413      	add	r3, r2
 80009b6:	461a      	mov	r2, r3
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	4413      	add	r3, r2
 80009bc:	7819      	ldrb	r1, [r3, #0]
 80009be:	7fbb      	ldrb	r3, [r7, #30]
 80009c0:	f107 0214 	add.w	r2, r7, #20
 80009c4:	4413      	add	r3, r2
 80009c6:	781a      	ldrb	r2, [r3, #0]
 80009c8:	7ff8      	ldrb	r0, [r7, #31]
 80009ca:	7fbb      	ldrb	r3, [r7, #30]
 80009cc:	4403      	add	r3, r0
 80009ce:	4618      	mov	r0, r3
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	4403      	add	r3, r0
 80009d4:	404a      	eors	r2, r1
 80009d6:	b2d2      	uxtb	r2, r2
 80009d8:	701a      	strb	r2, [r3, #0]
		for (uint8_t i=0; i<8 && (off+i)<len; ++i)
 80009da:	7fbb      	ldrb	r3, [r7, #30]
 80009dc:	3301      	adds	r3, #1
 80009de:	77bb      	strb	r3, [r7, #30]
 80009e0:	7fbb      	ldrb	r3, [r7, #30]
 80009e2:	2b07      	cmp	r3, #7
 80009e4:	d805      	bhi.n	80009f2 <speck64_ctr_crypt+0x90>
 80009e6:	7ffa      	ldrb	r2, [r7, #31]
 80009e8:	7fbb      	ldrb	r3, [r7, #30]
 80009ea:	441a      	add	r2, r3
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	dbde      	blt.n	80009b0 <speck64_ctr_crypt+0x4e>
	for (uint8_t off=0; off < len; off += 8, ++ctr) {
 80009f2:	7ffb      	ldrb	r3, [r7, #31]
 80009f4:	3308      	adds	r3, #8
 80009f6:	77fb      	strb	r3, [r7, #31]
 80009f8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80009fc:	1c54      	adds	r4, r2, #1
 80009fe:	f143 0500 	adc.w	r5, r3, #0
 8000a02:	e9c7 4508 	strd	r4, r5, [r7, #32]
 8000a06:	7ffa      	ldrb	r2, [r7, #31]
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d3bb      	bcc.n	8000986 <speck64_ctr_crypt+0x24>
	}
}
 8000a0e:	bf00      	nop
 8000a10:	bf00      	nop
 8000a12:	3728      	adds	r7, #40	@ 0x28
 8000a14:	46bd      	mov	sp, r7
 8000a16:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08000a1c <crc32>:

#endif /* ENC */

static uint32_t crc32(const uint8_t *buf, uint16_t len)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b0c6      	sub	sp, #280	@ 0x118
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a26:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000a2a:	6018      	str	r0, [r3, #0]
 8000a2c:	460a      	mov	r2, r1
 8000a2e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a32:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 8000a36:	801a      	strh	r2, [r3, #0]
    // 1) сколько 32-битных слов нам нужно:
    uint16_t words = (len + 3) / 4;                  // ceil(len/4)
 8000a38:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a3c:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	3303      	adds	r3, #3
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	da00      	bge.n	8000a4a <crc32+0x2e>
 8000a48:	3303      	adds	r3, #3
 8000a4a:	109b      	asrs	r3, r3, #2
 8000a4c:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114

    // 2) временный массив на стеке (максимум: (256+3)/4 = 65, OK):
    uint32_t tmp[65];                                // 65*4 = 260 B

    // 3) обнуляем весь буфер и копируем байты:
    for(uint16_t i=0; i<words; ++i) tmp[i] = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
 8000a56:	e00d      	b.n	8000a74 <crc32+0x58>
 8000a58:	f8b7 2116 	ldrh.w	r2, [r7, #278]	@ 0x116
 8000a5c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a60:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a64:	2100      	movs	r1, #0
 8000a66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000a6a:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 8000a6e:	3301      	adds	r3, #1
 8000a70:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
 8000a74:	f8b7 2116 	ldrh.w	r2, [r7, #278]	@ 0x116
 8000a78:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d3eb      	bcc.n	8000a58 <crc32+0x3c>
    memcpy(tmp, buf, len);
 8000a80:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a84:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 8000a88:	881a      	ldrh	r2, [r3, #0]
 8000a8a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a8e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000a92:	f107 000c 	add.w	r0, r7, #12
 8000a96:	6819      	ldr	r1, [r3, #0]
 8000a98:	f004 fc21 	bl	80052de <memcpy>

    // 4) считаем аппаратным CRC над этими словами:
    uint32_t crc = HAL_CRC_Calculate(&hcrc, tmp, words);
 8000a9c:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4806      	ldr	r0, [pc, #24]	@ (8000ac0 <crc32+0xa4>)
 8000aa8:	f001 fd4b 	bl	8002542 <HAL_CRC_Calculate>
 8000aac:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    return crc;
 8000ab0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	200000a0 	.word	0x200000a0
 8000ac4:	00000000 	.word	0x00000000

08000ac8 <siphash24>:
		((uint64_t)(p)[4]<<32) | ((uint64_t)(p)[5]<<40) | \
		((uint64_t)(p)[6]<<48) | ((uint64_t)(p)[7]<<56) )
#define ROTL64(x,b)  ( ((x) << (b)) | ((x) >> (64-(b))) )

static uint64_t siphash24(const uint8_t *in, size_t inlen)
{
 8000ac8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000acc:	f5ad 7d3f 	sub.w	sp, sp, #764	@ 0x2fc
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	f8c7 029c 	str.w	r0, [r7, #668]	@ 0x29c
 8000ad6:	f8c7 1298 	str.w	r1, [r7, #664]	@ 0x298
	uint64_t k0 = ((const uint64_t*)siphash_key)[0];
 8000ada:	4ba7      	ldr	r3, [pc, #668]	@ (8000d78 <siphash24+0x2b0>)
 8000adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ae0:	e9c7 23ae 	strd	r2, r3, [r7, #696]	@ 0x2b8
	uint64_t k1 = ((const uint64_t*)siphash_key)[1];
 8000ae4:	4ba5      	ldr	r3, [pc, #660]	@ (8000d7c <siphash24+0x2b4>)
 8000ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aea:	e9c7 23ac 	strd	r2, r3, [r7, #688]	@ 0x2b0
	uint64_t v0 = 0x736f6d6570736575ULL ^ k0;
 8000aee:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8000af2:	a399      	add	r3, pc, #612	@ (adr r3, 8000d58 <siphash24+0x290>)
 8000af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000af8:	ea80 0402 	eor.w	r4, r0, r2
 8000afc:	ea81 0503 	eor.w	r5, r1, r3
 8000b00:	e9c7 45bc 	strd	r4, r5, [r7, #752]	@ 0x2f0
	uint64_t v1 = 0x646f72616e646f6dULL ^ k1;
 8000b04:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	@ 0x2b0
 8000b08:	a395      	add	r3, pc, #596	@ (adr r3, 8000d60 <siphash24+0x298>)
 8000b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b0e:	ea80 0802 	eor.w	r8, r0, r2
 8000b12:	ea81 0903 	eor.w	r9, r1, r3
 8000b16:	e9c7 89ba 	strd	r8, r9, [r7, #744]	@ 0x2e8
	uint64_t v2 = 0x6c7967656e657261ULL ^ k0;
 8000b1a:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8000b1e:	a392      	add	r3, pc, #584	@ (adr r3, 8000d68 <siphash24+0x2a0>)
 8000b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b24:	ea80 0a02 	eor.w	sl, r0, r2
 8000b28:	ea81 0b03 	eor.w	fp, r1, r3
 8000b2c:	e9c7 abb8 	strd	sl, fp, [r7, #736]	@ 0x2e0
	uint64_t v3 = 0x7465646279746573ULL ^ k1;
 8000b30:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	@ 0x2b0
 8000b34:	a38e      	add	r3, pc, #568	@ (adr r3, 8000d70 <siphash24+0x2a8>)
 8000b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b3a:	ea80 0402 	eor.w	r4, r0, r2
 8000b3e:	f8c7 41b8 	str.w	r4, [r7, #440]	@ 0x1b8
 8000b42:	404b      	eors	r3, r1
 8000b44:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8000b48:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	@ 0x1b8
 8000b4c:	e9c7 34b6 	strd	r3, r4, [r7, #728]	@ 0x2d8

	const uint8_t *end = in + inlen - (inlen & 7);
 8000b50:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8000b54:	f023 0207 	bic.w	r2, r3, #7
 8000b58:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8000b5c:	4413      	add	r3, r2
 8000b5e:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
	while(in != end){
 8000b62:	e20e      	b.n	8000f82 <siphash24+0x4ba>
		uint64_t m = U8TO64_LE(in); in += 8;
 8000b64:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8000b72:	f8c7 2294 	str.w	r2, [r7, #660]	@ 0x294
 8000b76:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	2200      	movs	r2, #0
 8000b82:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 8000b86:	f8c7 228c 	str.w	r2, [r7, #652]	@ 0x28c
 8000b8a:	f04f 0200 	mov.w	r2, #0
 8000b8e:	f04f 0300 	mov.w	r3, #0
 8000b92:	e9d7 45a2 	ldrd	r4, r5, [r7, #648]	@ 0x288
 8000b96:	4629      	mov	r1, r5
 8000b98:	020b      	lsls	r3, r1, #8
 8000b9a:	4621      	mov	r1, r4
 8000b9c:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8000ba0:	4621      	mov	r1, r4
 8000ba2:	020a      	lsls	r2, r1, #8
 8000ba4:	e9d7 45a4 	ldrd	r4, r5, [r7, #656]	@ 0x290
 8000ba8:	4621      	mov	r1, r4
 8000baa:	4311      	orrs	r1, r2
 8000bac:	f8c7 1280 	str.w	r1, [r7, #640]	@ 0x280
 8000bb0:	4629      	mov	r1, r5
 8000bb2:	430b      	orrs	r3, r1
 8000bb4:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8000bb8:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8000bbc:	3302      	adds	r3, #2
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
 8000bc8:	f8c7 227c 	str.w	r2, [r7, #636]	@ 0x27c
 8000bcc:	f04f 0200 	mov.w	r2, #0
 8000bd0:	f04f 0300 	mov.w	r3, #0
 8000bd4:	e9d7 459e 	ldrd	r4, r5, [r7, #632]	@ 0x278
 8000bd8:	4629      	mov	r1, r5
 8000bda:	040b      	lsls	r3, r1, #16
 8000bdc:	4621      	mov	r1, r4
 8000bde:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8000be2:	4621      	mov	r1, r4
 8000be4:	040a      	lsls	r2, r1, #16
 8000be6:	e9d7 45a0 	ldrd	r4, r5, [r7, #640]	@ 0x280
 8000bea:	4621      	mov	r1, r4
 8000bec:	4311      	orrs	r1, r2
 8000bee:	f8c7 1270 	str.w	r1, [r7, #624]	@ 0x270
 8000bf2:	4629      	mov	r1, r5
 8000bf4:	430b      	orrs	r3, r1
 8000bf6:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
 8000bfa:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8000bfe:	3303      	adds	r3, #3
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	2200      	movs	r2, #0
 8000c06:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 8000c0a:	f8c7 226c 	str.w	r2, [r7, #620]	@ 0x26c
 8000c0e:	e9d7 129a 	ldrd	r1, r2, [r7, #616]	@ 0x268
 8000c12:	460b      	mov	r3, r1
 8000c14:	0a1b      	lsrs	r3, r3, #8
 8000c16:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	061b      	lsls	r3, r3, #24
 8000c1e:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
 8000c22:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	@ 0x270
 8000c26:	4623      	mov	r3, r4
 8000c28:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	@ 0x260
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
 8000c34:	462b      	mov	r3, r5
 8000c36:	460a      	mov	r2, r1
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 8000c3e:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8000c42:	3304      	adds	r3, #4
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 8000c4e:	f8c7 2254 	str.w	r2, [r7, #596]	@ 0x254
 8000c52:	f04f 0200 	mov.w	r2, #0
 8000c56:	f04f 0300 	mov.w	r3, #0
 8000c5a:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 8000c5e:	000b      	movs	r3, r1
 8000c60:	2200      	movs	r2, #0
 8000c62:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	@ 0x258
 8000c66:	4621      	mov	r1, r4
 8000c68:	4311      	orrs	r1, r2
 8000c6a:	f8c7 1248 	str.w	r1, [r7, #584]	@ 0x248
 8000c6e:	4629      	mov	r1, r5
 8000c70:	430b      	orrs	r3, r1
 8000c72:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 8000c76:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8000c7a:	3305      	adds	r3, #5
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	2200      	movs	r2, #0
 8000c82:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 8000c86:	f8c7 2244 	str.w	r2, [r7, #580]	@ 0x244
 8000c8a:	f04f 0200 	mov.w	r2, #0
 8000c8e:	f04f 0300 	mov.w	r3, #0
 8000c92:	f8d7 1240 	ldr.w	r1, [r7, #576]	@ 0x240
 8000c96:	020b      	lsls	r3, r1, #8
 8000c98:	2200      	movs	r2, #0
 8000c9a:	e9d7 4592 	ldrd	r4, r5, [r7, #584]	@ 0x248
 8000c9e:	4621      	mov	r1, r4
 8000ca0:	4311      	orrs	r1, r2
 8000ca2:	f8c7 1238 	str.w	r1, [r7, #568]	@ 0x238
 8000ca6:	4629      	mov	r1, r5
 8000ca8:	430b      	orrs	r3, r1
 8000caa:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 8000cae:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8000cb2:	3306      	adds	r3, #6
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
 8000cbe:	f8c7 2234 	str.w	r2, [r7, #564]	@ 0x234
 8000cc2:	f04f 0200 	mov.w	r2, #0
 8000cc6:	f04f 0300 	mov.w	r3, #0
 8000cca:	f8d7 1230 	ldr.w	r1, [r7, #560]	@ 0x230
 8000cce:	040b      	lsls	r3, r1, #16
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	e9d7 458e 	ldrd	r4, r5, [r7, #568]	@ 0x238
 8000cd6:	4621      	mov	r1, r4
 8000cd8:	4311      	orrs	r1, r2
 8000cda:	f8c7 1228 	str.w	r1, [r7, #552]	@ 0x228
 8000cde:	4629      	mov	r1, r5
 8000ce0:	430b      	orrs	r3, r1
 8000ce2:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
 8000ce6:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8000cea:	3307      	adds	r3, #7
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
 8000cf6:	f8c7 2224 	str.w	r2, [r7, #548]	@ 0x224
 8000cfa:	f04f 0200 	mov.w	r2, #0
 8000cfe:	f04f 0300 	mov.w	r3, #0
 8000d02:	f8d7 1220 	ldr.w	r1, [r7, #544]	@ 0x220
 8000d06:	060b      	lsls	r3, r1, #24
 8000d08:	2200      	movs	r2, #0
 8000d0a:	e9d7 458a 	ldrd	r4, r5, [r7, #552]	@ 0x228
 8000d0e:	4621      	mov	r1, r4
 8000d10:	4311      	orrs	r1, r2
 8000d12:	f8c7 11b0 	str.w	r1, [r7, #432]	@ 0x1b0
 8000d16:	4629      	mov	r1, r5
 8000d18:	430b      	orrs	r3, r1
 8000d1a:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8000d1e:	e9d7 346c 	ldrd	r3, r4, [r7, #432]	@ 0x1b0
 8000d22:	e9c7 34a8 	strd	r3, r4, [r7, #672]	@ 0x2a0
 8000d26:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8000d2a:	3308      	adds	r3, #8
 8000d2c:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
		v3 ^= m;
 8000d30:	e9d7 01b6 	ldrd	r0, r1, [r7, #728]	@ 0x2d8
 8000d34:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	@ 0x2a0
 8000d38:	ea80 0402 	eor.w	r4, r0, r2
 8000d3c:	f8c7 41a8 	str.w	r4, [r7, #424]	@ 0x1a8
 8000d40:	404b      	eors	r3, r1
 8000d42:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8000d46:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	@ 0x1a8
 8000d4a:	e9c7 34b6 	strd	r3, r4, [r7, #728]	@ 0x2d8
		for(uint8_t r=0;r<2;r++){
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f887 32d7 	strb.w	r3, [r7, #727]	@ 0x2d7
 8000d54:	e101      	b.n	8000f5a <siphash24+0x492>
 8000d56:	bf00      	nop
 8000d58:	70736575 	.word	0x70736575
 8000d5c:	736f6d65 	.word	0x736f6d65
 8000d60:	6e646f6d 	.word	0x6e646f6d
 8000d64:	646f7261 	.word	0x646f7261
 8000d68:	6e657261 	.word	0x6e657261
 8000d6c:	6c796765 	.word	0x6c796765
 8000d70:	79746573 	.word	0x79746573
 8000d74:	74656462 	.word	0x74656462
 8000d78:	08005e80 	.word	0x08005e80
 8000d7c:	08005e88 	.word	0x08005e88
			v0+=v1; v1=ROTL64(v1,13); v1^=v0; v0=ROTL64(v0,32);
 8000d80:	e9d7 01bc 	ldrd	r0, r1, [r7, #752]	@ 0x2f0
 8000d84:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	@ 0x2e8
 8000d88:	1884      	adds	r4, r0, r2
 8000d8a:	f8c7 41a0 	str.w	r4, [r7, #416]	@ 0x1a0
 8000d8e:	eb41 0303 	adc.w	r3, r1, r3
 8000d92:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000d96:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	@ 0x1a0
 8000d9a:	e9c7 34bc 	strd	r3, r4, [r7, #752]	@ 0x2f0
 8000d9e:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8000da2:	0cda      	lsrs	r2, r3, #19
 8000da4:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8000da8:	035b      	lsls	r3, r3, #13
 8000daa:	4313      	orrs	r3, r2
 8000dac:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8000db0:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8000db4:	0cda      	lsrs	r2, r3, #19
 8000db6:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8000dba:	035b      	lsls	r3, r3, #13
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8000dc2:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	@ 0x198
 8000dc6:	e9c7 34ba 	strd	r3, r4, [r7, #744]	@ 0x2e8
 8000dca:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 8000dce:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	@ 0x2f0
 8000dd2:	ea80 0402 	eor.w	r4, r0, r2
 8000dd6:	f8c7 4190 	str.w	r4, [r7, #400]	@ 0x190
 8000dda:	404b      	eors	r3, r1
 8000ddc:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8000de0:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	@ 0x190
 8000de4:	e9c7 34ba 	strd	r3, r4, [r7, #744]	@ 0x2e8
 8000de8:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8000dec:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8000df0:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 8000df4:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8000df8:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	@ 0x188
 8000dfc:	e9c7 34bc 	strd	r3, r4, [r7, #752]	@ 0x2f0
			v2+=v3; v3=ROTL64(v3,16); v3^=v2;
 8000e00:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	@ 0x2e0
 8000e04:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	@ 0x2d8
 8000e08:	1884      	adds	r4, r0, r2
 8000e0a:	f8c7 4180 	str.w	r4, [r7, #384]	@ 0x180
 8000e0e:	eb41 0303 	adc.w	r3, r1, r3
 8000e12:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8000e16:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	@ 0x180
 8000e1a:	e9c7 34b8 	strd	r3, r4, [r7, #736]	@ 0x2e0
 8000e1e:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 8000e22:	0c1a      	lsrs	r2, r3, #16
 8000e24:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8000e28:	041b      	lsls	r3, r3, #16
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8000e30:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8000e34:	0c1a      	lsrs	r2, r3, #16
 8000e36:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 8000e3a:	041b      	lsls	r3, r3, #16
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8000e42:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 8000e46:	e9c7 34b6 	strd	r3, r4, [r7, #728]	@ 0x2d8
 8000e4a:	e9d7 01b6 	ldrd	r0, r1, [r7, #728]	@ 0x2d8
 8000e4e:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	@ 0x2e0
 8000e52:	ea80 0402 	eor.w	r4, r0, r2
 8000e56:	f8c7 4170 	str.w	r4, [r7, #368]	@ 0x170
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8000e60:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	@ 0x170
 8000e64:	e9c7 34b6 	strd	r3, r4, [r7, #728]	@ 0x2d8
			v0+=v3; v3=ROTL64(v3,21); v3^=v0;
 8000e68:	e9d7 01bc 	ldrd	r0, r1, [r7, #752]	@ 0x2f0
 8000e6c:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	@ 0x2d8
 8000e70:	1884      	adds	r4, r0, r2
 8000e72:	f8c7 4168 	str.w	r4, [r7, #360]	@ 0x168
 8000e76:	eb41 0303 	adc.w	r3, r1, r3
 8000e7a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8000e7e:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	@ 0x168
 8000e82:	e9c7 34bc 	strd	r3, r4, [r7, #752]	@ 0x2f0
 8000e86:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 8000e8a:	0ada      	lsrs	r2, r3, #11
 8000e8c:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8000e90:	055b      	lsls	r3, r3, #21
 8000e92:	4313      	orrs	r3, r2
 8000e94:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8000e98:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8000e9c:	0ada      	lsrs	r2, r3, #11
 8000e9e:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 8000ea2:	055b      	lsls	r3, r3, #21
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8000eaa:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	@ 0x160
 8000eae:	e9c7 34b6 	strd	r3, r4, [r7, #728]	@ 0x2d8
 8000eb2:	e9d7 01b6 	ldrd	r0, r1, [r7, #728]	@ 0x2d8
 8000eb6:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	@ 0x2f0
 8000eba:	ea80 0402 	eor.w	r4, r0, r2
 8000ebe:	f8c7 4158 	str.w	r4, [r7, #344]	@ 0x158
 8000ec2:	404b      	eors	r3, r1
 8000ec4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8000ec8:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	@ 0x158
 8000ecc:	e9c7 34b6 	strd	r3, r4, [r7, #728]	@ 0x2d8
			v2+=v1; v1=ROTL64(v1,17); v1^=v2; v2=ROTL64(v2,32);
 8000ed0:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	@ 0x2e0
 8000ed4:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	@ 0x2e8
 8000ed8:	1884      	adds	r4, r0, r2
 8000eda:	f8c7 4150 	str.w	r4, [r7, #336]	@ 0x150
 8000ede:	eb41 0303 	adc.w	r3, r1, r3
 8000ee2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8000ee6:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 8000eea:	e9c7 34b8 	strd	r3, r4, [r7, #736]	@ 0x2e0
 8000eee:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8000ef2:	0bda      	lsrs	r2, r3, #15
 8000ef4:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8000ef8:	045b      	lsls	r3, r3, #17
 8000efa:	4313      	orrs	r3, r2
 8000efc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8000f00:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8000f04:	0bda      	lsrs	r2, r3, #15
 8000f06:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8000f0a:	045b      	lsls	r3, r3, #17
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8000f12:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	@ 0x148
 8000f16:	e9c7 34ba 	strd	r3, r4, [r7, #744]	@ 0x2e8
 8000f1a:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 8000f1e:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	@ 0x2e0
 8000f22:	ea80 0402 	eor.w	r4, r0, r2
 8000f26:	f8c7 4140 	str.w	r4, [r7, #320]	@ 0x140
 8000f2a:	404b      	eors	r3, r1
 8000f2c:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8000f30:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 8000f34:	e9c7 34ba 	strd	r3, r4, [r7, #744]	@ 0x2e8
 8000f38:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8000f3c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8000f40:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8000f44:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8000f48:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	@ 0x138
 8000f4c:	e9c7 34b8 	strd	r3, r4, [r7, #736]	@ 0x2e0
		for(uint8_t r=0;r<2;r++){
 8000f50:	f897 32d7 	ldrb.w	r3, [r7, #727]	@ 0x2d7
 8000f54:	3301      	adds	r3, #1
 8000f56:	f887 32d7 	strb.w	r3, [r7, #727]	@ 0x2d7
 8000f5a:	f897 32d7 	ldrb.w	r3, [r7, #727]	@ 0x2d7
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	f67f af0e 	bls.w	8000d80 <siphash24+0x2b8>
		}
		v0 ^= m;
 8000f64:	e9d7 01bc 	ldrd	r0, r1, [r7, #752]	@ 0x2f0
 8000f68:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	@ 0x2a0
 8000f6c:	ea80 0402 	eor.w	r4, r0, r2
 8000f70:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 8000f74:	404b      	eors	r3, r1
 8000f76:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8000f7a:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 8000f7e:	e9c7 34bc 	strd	r3, r4, [r7, #752]	@ 0x2f0
	while(in != end){
 8000f82:	f8d7 229c 	ldr.w	r2, [r7, #668]	@ 0x29c
 8000f86:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	f47f adea 	bne.w	8000b64 <siphash24+0x9c>
	}
	uint64_t b = ((uint64_t)inlen) << 56;
 8000f90:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8000f94:	2200      	movs	r2, #0
 8000f96:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 8000f9a:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 8000f9e:	f04f 0200 	mov.w	r2, #0
 8000fa2:	f04f 0300 	mov.w	r3, #0
 8000fa6:	f8d7 1218 	ldr.w	r1, [r7, #536]	@ 0x218
 8000faa:	060b      	lsls	r3, r1, #24
 8000fac:	2200      	movs	r2, #0
 8000fae:	e9c7 23b2 	strd	r2, r3, [r7, #712]	@ 0x2c8
	switch(inlen & 7){
 8000fb2:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	2b06      	cmp	r3, #6
 8000fbe:	f200 80f4 	bhi.w	80011aa <siphash24+0x6e2>
 8000fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8000fc8 <siphash24+0x500>)
 8000fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc8:	08001177 	.word	0x08001177
 8000fcc:	0800112f 	.word	0x0800112f
 8000fd0:	080010e7 	.word	0x080010e7
 8000fd4:	0800109f 	.word	0x0800109f
 8000fd8:	08001061 	.word	0x08001061
 8000fdc:	08001023 	.word	0x08001023
 8000fe0:	08000fe5 	.word	0x08000fe5
	case 7: b |= ((uint64_t)in[6]) << 48;
 8000fe4:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8000fe8:	3306      	adds	r3, #6
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8000ff4:	f8c7 2214 	str.w	r2, [r7, #532]	@ 0x214
 8000ff8:	f04f 0000 	mov.w	r0, #0
 8000ffc:	f04f 0100 	mov.w	r1, #0
 8001000:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8001004:	0419      	lsls	r1, r3, #16
 8001006:	2000      	movs	r0, #0
 8001008:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	@ 0x2c8
 800100c:	ea42 0400 	orr.w	r4, r2, r0
 8001010:	f8c7 4128 	str.w	r4, [r7, #296]	@ 0x128
 8001014:	430b      	orrs	r3, r1
 8001016:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800101a:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	@ 0x128
 800101e:	e9c7 34b2 	strd	r3, r4, [r7, #712]	@ 0x2c8
	case 6: b |= ((uint64_t)in[5]) << 40;
 8001022:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8001026:	3305      	adds	r3, #5
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2200      	movs	r2, #0
 800102e:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 8001032:	f8c7 220c 	str.w	r2, [r7, #524]	@ 0x20c
 8001036:	f04f 0000 	mov.w	r0, #0
 800103a:	f04f 0100 	mov.w	r1, #0
 800103e:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8001042:	0219      	lsls	r1, r3, #8
 8001044:	2000      	movs	r0, #0
 8001046:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	@ 0x2c8
 800104a:	ea42 0400 	orr.w	r4, r2, r0
 800104e:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 8001052:	430b      	orrs	r3, r1
 8001054:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001058:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 800105c:	e9c7 34b2 	strd	r3, r4, [r7, #712]	@ 0x2c8
	case 5: b |= ((uint64_t)in[4]) << 32;
 8001060:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8001064:	3304      	adds	r3, #4
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2200      	movs	r2, #0
 800106c:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 8001070:	f8c7 2204 	str.w	r2, [r7, #516]	@ 0x204
 8001074:	f04f 0000 	mov.w	r0, #0
 8001078:	f04f 0100 	mov.w	r1, #0
 800107c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001080:	0019      	movs	r1, r3
 8001082:	2000      	movs	r0, #0
 8001084:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	@ 0x2c8
 8001088:	ea42 0400 	orr.w	r4, r2, r0
 800108c:	f8c7 4118 	str.w	r4, [r7, #280]	@ 0x118
 8001090:	430b      	orrs	r3, r1
 8001092:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001096:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	@ 0x118
 800109a:	e9c7 34b2 	strd	r3, r4, [r7, #712]	@ 0x2c8
	case 4: b |= ((uint64_t)in[3]) << 24;
 800109e:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 80010a2:	3303      	adds	r3, #3
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2200      	movs	r2, #0
 80010aa:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 80010ae:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 80010b2:	e9d7 127e 	ldrd	r1, r2, [r7, #504]	@ 0x1f8
 80010b6:	460b      	mov	r3, r1
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 80010be:	460b      	mov	r3, r1
 80010c0:	061b      	lsls	r3, r3, #24
 80010c2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 80010c6:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	@ 0x2c8
 80010ca:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 80010ce:	4621      	mov	r1, r4
 80010d0:	4311      	orrs	r1, r2
 80010d2:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 80010d6:	4629      	mov	r1, r5
 80010d8:	4319      	orrs	r1, r3
 80010da:	f8c7 1114 	str.w	r1, [r7, #276]	@ 0x114
 80010de:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 80010e2:	e9c7 34b2 	strd	r3, r4, [r7, #712]	@ 0x2c8
	case 3: b |= ((uint64_t)in[2]) << 16;
 80010e6:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 80010ea:	3302      	adds	r3, #2
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2200      	movs	r2, #0
 80010f2:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80010f6:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	f04f 0100 	mov.w	r1, #0
 8001102:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	@ 0x1e8
 8001106:	462b      	mov	r3, r5
 8001108:	0419      	lsls	r1, r3, #16
 800110a:	4623      	mov	r3, r4
 800110c:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 8001110:	4623      	mov	r3, r4
 8001112:	0418      	lsls	r0, r3, #16
 8001114:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	@ 0x2c8
 8001118:	ea42 0400 	orr.w	r4, r2, r0
 800111c:	f8c7 4108 	str.w	r4, [r7, #264]	@ 0x108
 8001120:	430b      	orrs	r3, r1
 8001122:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8001126:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 800112a:	e9c7 34b2 	strd	r3, r4, [r7, #712]	@ 0x2c8
	case 2: b |= ((uint64_t)in[1]) <<  8;
 800112e:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8001132:	3301      	adds	r3, #1
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2200      	movs	r2, #0
 800113a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800113e:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 8001142:	f04f 0000 	mov.w	r0, #0
 8001146:	f04f 0100 	mov.w	r1, #0
 800114a:	e9d7 4578 	ldrd	r4, r5, [r7, #480]	@ 0x1e0
 800114e:	462b      	mov	r3, r5
 8001150:	0219      	lsls	r1, r3, #8
 8001152:	4623      	mov	r3, r4
 8001154:	ea41 6113 	orr.w	r1, r1, r3, lsr #24
 8001158:	4623      	mov	r3, r4
 800115a:	0218      	lsls	r0, r3, #8
 800115c:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	@ 0x2c8
 8001160:	ea42 0400 	orr.w	r4, r2, r0
 8001164:	f8c7 4100 	str.w	r4, [r7, #256]	@ 0x100
 8001168:	430b      	orrs	r3, r1
 800116a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800116e:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8001172:	e9c7 34b2 	strd	r3, r4, [r7, #712]	@ 0x2c8
	case 1: b |= ((uint64_t)in[0]);        break;
 8001176:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2200      	movs	r2, #0
 8001180:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8001184:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001188:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	@ 0x2c8
 800118c:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	@ 0x1d8
 8001190:	4621      	mov	r1, r4
 8001192:	4311      	orrs	r1, r2
 8001194:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8001198:	4629      	mov	r1, r5
 800119a:	4319      	orrs	r1, r3
 800119c:	f8c7 10fc 	str.w	r1, [r7, #252]	@ 0xfc
 80011a0:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 80011a4:	e9c7 34b2 	strd	r3, r4, [r7, #712]	@ 0x2c8
 80011a8:	e000      	b.n	80011ac <siphash24+0x6e4>
	default: break;
 80011aa:	bf00      	nop
	}
	v3 ^= b;
 80011ac:	e9d7 01b6 	ldrd	r0, r1, [r7, #728]	@ 0x2d8
 80011b0:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	@ 0x2c8
 80011b4:	ea80 0402 	eor.w	r4, r0, r2
 80011b8:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 80011bc:	404b      	eors	r3, r1
 80011be:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80011c2:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 80011c6:	e9c7 34b6 	strd	r3, r4, [r7, #728]	@ 0x2d8
	for(uint8_t r=0;r<2;r++){
 80011ca:	2300      	movs	r3, #0
 80011cc:	f887 32c7 	strb.w	r3, [r7, #711]	@ 0x2c7
 80011d0:	e0ec      	b.n	80013ac <siphash24+0x8e4>
		v0+=v1; v1=ROTL64(v1,13); v1^=v0; v0=ROTL64(v0,32);
 80011d2:	e9d7 01bc 	ldrd	r0, r1, [r7, #752]	@ 0x2f0
 80011d6:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	@ 0x2e8
 80011da:	1884      	adds	r4, r0, r2
 80011dc:	f8c7 40e8 	str.w	r4, [r7, #232]	@ 0xe8
 80011e0:	eb41 0303 	adc.w	r3, r1, r3
 80011e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80011e8:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	@ 0xe8
 80011ec:	e9c7 34bc 	strd	r3, r4, [r7, #752]	@ 0x2f0
 80011f0:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 80011f4:	0cda      	lsrs	r2, r3, #19
 80011f6:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 80011fa:	035b      	lsls	r3, r3, #13
 80011fc:	4313      	orrs	r3, r2
 80011fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001202:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8001206:	0cda      	lsrs	r2, r3, #19
 8001208:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 800120c:	035b      	lsls	r3, r3, #13
 800120e:	4313      	orrs	r3, r2
 8001210:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001214:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 8001218:	e9c7 34ba 	strd	r3, r4, [r7, #744]	@ 0x2e8
 800121c:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 8001220:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	@ 0x2f0
 8001224:	ea80 0402 	eor.w	r4, r0, r2
 8001228:	f8c7 40d8 	str.w	r4, [r7, #216]	@ 0xd8
 800122c:	404b      	eors	r3, r1
 800122e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001232:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	@ 0xd8
 8001236:	e9c7 34ba 	strd	r3, r4, [r7, #744]	@ 0x2e8
 800123a:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 800123e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001242:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 8001246:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800124a:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 800124e:	e9c7 34bc 	strd	r3, r4, [r7, #752]	@ 0x2f0
		v2+=v3; v3=ROTL64(v3,16); v3^=v2;
 8001252:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	@ 0x2e0
 8001256:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	@ 0x2d8
 800125a:	1884      	adds	r4, r0, r2
 800125c:	f8c7 40c8 	str.w	r4, [r7, #200]	@ 0xc8
 8001260:	eb41 0303 	adc.w	r3, r1, r3
 8001264:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001268:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 800126c:	e9c7 34b8 	strd	r3, r4, [r7, #736]	@ 0x2e0
 8001270:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 8001274:	0c1a      	lsrs	r2, r3, #16
 8001276:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 800127a:	041b      	lsls	r3, r3, #16
 800127c:	4313      	orrs	r3, r2
 800127e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001282:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8001286:	0c1a      	lsrs	r2, r3, #16
 8001288:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 800128c:	041b      	lsls	r3, r3, #16
 800128e:	4313      	orrs	r3, r2
 8001290:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001294:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8001298:	e9c7 34b6 	strd	r3, r4, [r7, #728]	@ 0x2d8
 800129c:	e9d7 01b6 	ldrd	r0, r1, [r7, #728]	@ 0x2d8
 80012a0:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	@ 0x2e0
 80012a4:	ea80 0402 	eor.w	r4, r0, r2
 80012a8:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 80012ac:	404b      	eors	r3, r1
 80012ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80012b2:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 80012b6:	e9c7 34b6 	strd	r3, r4, [r7, #728]	@ 0x2d8
		v0+=v3; v3=ROTL64(v3,21); v3^=v0;
 80012ba:	e9d7 01bc 	ldrd	r0, r1, [r7, #752]	@ 0x2f0
 80012be:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	@ 0x2d8
 80012c2:	1884      	adds	r4, r0, r2
 80012c4:	f8c7 40b0 	str.w	r4, [r7, #176]	@ 0xb0
 80012c8:	eb41 0303 	adc.w	r3, r1, r3
 80012cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80012d0:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	@ 0xb0
 80012d4:	e9c7 34bc 	strd	r3, r4, [r7, #752]	@ 0x2f0
 80012d8:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 80012dc:	0ada      	lsrs	r2, r3, #11
 80012de:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 80012e2:	055b      	lsls	r3, r3, #21
 80012e4:	4313      	orrs	r3, r2
 80012e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80012ea:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 80012ee:	0ada      	lsrs	r2, r3, #11
 80012f0:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 80012f4:	055b      	lsls	r3, r3, #21
 80012f6:	4313      	orrs	r3, r2
 80012f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80012fc:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8001300:	e9c7 34b6 	strd	r3, r4, [r7, #728]	@ 0x2d8
 8001304:	e9d7 01b6 	ldrd	r0, r1, [r7, #728]	@ 0x2d8
 8001308:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	@ 0x2f0
 800130c:	ea80 0402 	eor.w	r4, r0, r2
 8001310:	f8c7 40a0 	str.w	r4, [r7, #160]	@ 0xa0
 8001314:	404b      	eors	r3, r1
 8001316:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800131a:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	@ 0xa0
 800131e:	e9c7 34b6 	strd	r3, r4, [r7, #728]	@ 0x2d8
		v2+=v1; v1=ROTL64(v1,17); v1^=v2; v2=ROTL64(v2,32);
 8001322:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	@ 0x2e0
 8001326:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	@ 0x2e8
 800132a:	1884      	adds	r4, r0, r2
 800132c:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 8001330:	eb41 0303 	adc.w	r3, r1, r3
 8001334:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001338:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 800133c:	e9c7 34b8 	strd	r3, r4, [r7, #736]	@ 0x2e0
 8001340:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8001344:	0bda      	lsrs	r2, r3, #15
 8001346:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 800134a:	045b      	lsls	r3, r3, #17
 800134c:	4313      	orrs	r3, r2
 800134e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001352:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8001356:	0bda      	lsrs	r2, r3, #15
 8001358:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 800135c:	045b      	lsls	r3, r3, #17
 800135e:	4313      	orrs	r3, r2
 8001360:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001364:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 8001368:	e9c7 34ba 	strd	r3, r4, [r7, #744]	@ 0x2e8
 800136c:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 8001370:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	@ 0x2e0
 8001374:	ea80 0402 	eor.w	r4, r0, r2
 8001378:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 800137c:	404b      	eors	r3, r1
 800137e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001382:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 8001386:	e9c7 34ba 	strd	r3, r4, [r7, #744]	@ 0x2e8
 800138a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 800138e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001392:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8001396:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800139a:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 800139e:	e9c7 34b8 	strd	r3, r4, [r7, #736]	@ 0x2e0
	for(uint8_t r=0;r<2;r++){
 80013a2:	f897 32c7 	ldrb.w	r3, [r7, #711]	@ 0x2c7
 80013a6:	3301      	adds	r3, #1
 80013a8:	f887 32c7 	strb.w	r3, [r7, #711]	@ 0x2c7
 80013ac:	f897 32c7 	ldrb.w	r3, [r7, #711]	@ 0x2c7
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	f67f af0e 	bls.w	80011d2 <siphash24+0x70a>
	}
	v0 ^= b;
 80013b6:	e9d7 01bc 	ldrd	r0, r1, [r7, #752]	@ 0x2f0
 80013ba:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	@ 0x2c8
 80013be:	ea80 0402 	eor.w	r4, r0, r2
 80013c2:	67bc      	str	r4, [r7, #120]	@ 0x78
 80013c4:	404b      	eors	r3, r1
 80013c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80013c8:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 80013cc:	e9c7 34bc 	strd	r3, r4, [r7, #752]	@ 0x2f0
	v2 ^= 0xff;
 80013d0:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	@ 0x2e0
 80013d4:	f082 01ff 	eor.w	r1, r2, #255	@ 0xff
 80013d8:	6739      	str	r1, [r7, #112]	@ 0x70
 80013da:	677b      	str	r3, [r7, #116]	@ 0x74
 80013dc:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	@ 0x70
 80013e0:	e9c7 34b8 	strd	r3, r4, [r7, #736]	@ 0x2e0
	for(uint8_t r=0;r<4;r++){
 80013e4:	2300      	movs	r3, #0
 80013e6:	f887 32c6 	strb.w	r3, [r7, #710]	@ 0x2c6
 80013ea:	e0d0      	b.n	800158e <siphash24+0xac6>
		v0+=v1; v1=ROTL64(v1,13); v1^=v0; v0=ROTL64(v0,32);
 80013ec:	e9d7 01bc 	ldrd	r0, r1, [r7, #752]	@ 0x2f0
 80013f0:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	@ 0x2e8
 80013f4:	1884      	adds	r4, r0, r2
 80013f6:	66bc      	str	r4, [r7, #104]	@ 0x68
 80013f8:	eb41 0303 	adc.w	r3, r1, r3
 80013fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80013fe:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8001402:	e9c7 34bc 	strd	r3, r4, [r7, #752]	@ 0x2f0
 8001406:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 800140a:	0cda      	lsrs	r2, r3, #19
 800140c:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8001410:	035b      	lsls	r3, r3, #13
 8001412:	4313      	orrs	r3, r2
 8001414:	667b      	str	r3, [r7, #100]	@ 0x64
 8001416:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 800141a:	0cda      	lsrs	r2, r3, #19
 800141c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8001420:	035b      	lsls	r3, r3, #13
 8001422:	4313      	orrs	r3, r2
 8001424:	663b      	str	r3, [r7, #96]	@ 0x60
 8001426:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	@ 0x60
 800142a:	e9c7 34ba 	strd	r3, r4, [r7, #744]	@ 0x2e8
 800142e:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 8001432:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	@ 0x2f0
 8001436:	ea80 0402 	eor.w	r4, r0, r2
 800143a:	65bc      	str	r4, [r7, #88]	@ 0x58
 800143c:	404b      	eors	r3, r1
 800143e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001440:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 8001444:	e9c7 34ba 	strd	r3, r4, [r7, #744]	@ 0x2e8
 8001448:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 800144c:	653b      	str	r3, [r7, #80]	@ 0x50
 800144e:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 8001452:	657b      	str	r3, [r7, #84]	@ 0x54
 8001454:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 8001458:	e9c7 34bc 	strd	r3, r4, [r7, #752]	@ 0x2f0
		v2+=v3; v3=ROTL64(v3,16); v3^=v2;
 800145c:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	@ 0x2e0
 8001460:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	@ 0x2d8
 8001464:	1884      	adds	r4, r0, r2
 8001466:	64bc      	str	r4, [r7, #72]	@ 0x48
 8001468:	eb41 0303 	adc.w	r3, r1, r3
 800146c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800146e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8001472:	e9c7 34b8 	strd	r3, r4, [r7, #736]	@ 0x2e0
 8001476:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 800147a:	0c1a      	lsrs	r2, r3, #16
 800147c:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8001480:	041b      	lsls	r3, r3, #16
 8001482:	4313      	orrs	r3, r2
 8001484:	647b      	str	r3, [r7, #68]	@ 0x44
 8001486:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 800148a:	0c1a      	lsrs	r2, r3, #16
 800148c:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 8001490:	041b      	lsls	r3, r3, #16
 8001492:	4313      	orrs	r3, r2
 8001494:	643b      	str	r3, [r7, #64]	@ 0x40
 8001496:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800149a:	e9c7 34b6 	strd	r3, r4, [r7, #728]	@ 0x2d8
 800149e:	e9d7 01b6 	ldrd	r0, r1, [r7, #728]	@ 0x2d8
 80014a2:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	@ 0x2e0
 80014a6:	ea80 0402 	eor.w	r4, r0, r2
 80014aa:	63bc      	str	r4, [r7, #56]	@ 0x38
 80014ac:	404b      	eors	r3, r1
 80014ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80014b0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80014b4:	e9c7 34b6 	strd	r3, r4, [r7, #728]	@ 0x2d8
		v0+=v3; v3=ROTL64(v3,21); v3^=v0;
 80014b8:	e9d7 01bc 	ldrd	r0, r1, [r7, #752]	@ 0x2f0
 80014bc:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	@ 0x2d8
 80014c0:	1884      	adds	r4, r0, r2
 80014c2:	633c      	str	r4, [r7, #48]	@ 0x30
 80014c4:	eb41 0303 	adc.w	r3, r1, r3
 80014c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80014ca:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80014ce:	e9c7 34bc 	strd	r3, r4, [r7, #752]	@ 0x2f0
 80014d2:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 80014d6:	0ada      	lsrs	r2, r3, #11
 80014d8:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 80014dc:	055b      	lsls	r3, r3, #21
 80014de:	4313      	orrs	r3, r2
 80014e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014e2:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 80014e6:	0ada      	lsrs	r2, r3, #11
 80014e8:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 80014ec:	055b      	lsls	r3, r3, #21
 80014ee:	4313      	orrs	r3, r2
 80014f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014f2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80014f6:	e9c7 34b6 	strd	r3, r4, [r7, #728]	@ 0x2d8
 80014fa:	e9d7 01b6 	ldrd	r0, r1, [r7, #728]	@ 0x2d8
 80014fe:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	@ 0x2f0
 8001502:	ea80 0402 	eor.w	r4, r0, r2
 8001506:	623c      	str	r4, [r7, #32]
 8001508:	404b      	eors	r3, r1
 800150a:	627b      	str	r3, [r7, #36]	@ 0x24
 800150c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001510:	e9c7 34b6 	strd	r3, r4, [r7, #728]	@ 0x2d8
		v2+=v1; v1=ROTL64(v1,17); v1^=v2; v2=ROTL64(v2,32);
 8001514:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	@ 0x2e0
 8001518:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	@ 0x2e8
 800151c:	1884      	adds	r4, r0, r2
 800151e:	61bc      	str	r4, [r7, #24]
 8001520:	eb41 0303 	adc.w	r3, r1, r3
 8001524:	61fb      	str	r3, [r7, #28]
 8001526:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800152a:	e9c7 34b8 	strd	r3, r4, [r7, #736]	@ 0x2e0
 800152e:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8001532:	0bda      	lsrs	r2, r3, #15
 8001534:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8001538:	045b      	lsls	r3, r3, #17
 800153a:	4313      	orrs	r3, r2
 800153c:	617b      	str	r3, [r7, #20]
 800153e:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8001542:	0bda      	lsrs	r2, r3, #15
 8001544:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8001548:	045b      	lsls	r3, r3, #17
 800154a:	4313      	orrs	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001552:	e9c7 34ba 	strd	r3, r4, [r7, #744]	@ 0x2e8
 8001556:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 800155a:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	@ 0x2e0
 800155e:	ea80 0402 	eor.w	r4, r0, r2
 8001562:	60bc      	str	r4, [r7, #8]
 8001564:	404b      	eors	r3, r1
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800156c:	e9c7 34ba 	strd	r3, r4, [r7, #744]	@ 0x2e8
 8001570:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8001574:	603b      	str	r3, [r7, #0]
 8001576:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001580:	e9c7 34b8 	strd	r3, r4, [r7, #736]	@ 0x2e0
	for(uint8_t r=0;r<4;r++){
 8001584:	f897 32c6 	ldrb.w	r3, [r7, #710]	@ 0x2c6
 8001588:	3301      	adds	r3, #1
 800158a:	f887 32c6 	strb.w	r3, [r7, #710]	@ 0x2c6
 800158e:	f897 32c6 	ldrb.w	r3, [r7, #710]	@ 0x2c6
 8001592:	2b03      	cmp	r3, #3
 8001594:	f67f af2a 	bls.w	80013ec <siphash24+0x924>
	}
	return v0 ^ v1 ^ v2 ^ v3;
 8001598:	e9d7 01bc 	ldrd	r0, r1, [r7, #752]	@ 0x2f0
 800159c:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	@ 0x2e8
 80015a0:	ea80 0402 	eor.w	r4, r0, r2
 80015a4:	f8c7 41d0 	str.w	r4, [r7, #464]	@ 0x1d0
 80015a8:	404b      	eors	r3, r1
 80015aa:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80015ae:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	@ 0x2e0
 80015b2:	e9d7 4574 	ldrd	r4, r5, [r7, #464]	@ 0x1d0
 80015b6:	4621      	mov	r1, r4
 80015b8:	4051      	eors	r1, r2
 80015ba:	f8c7 11c8 	str.w	r1, [r7, #456]	@ 0x1c8
 80015be:	4629      	mov	r1, r5
 80015c0:	4059      	eors	r1, r3
 80015c2:	f8c7 11cc 	str.w	r1, [r7, #460]	@ 0x1cc
 80015c6:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	@ 0x2d8
 80015ca:	e9d7 4572 	ldrd	r4, r5, [r7, #456]	@ 0x1c8
 80015ce:	4621      	mov	r1, r4
 80015d0:	4051      	eors	r1, r2
 80015d2:	f8c7 11c0 	str.w	r1, [r7, #448]	@ 0x1c0
 80015d6:	4629      	mov	r1, r5
 80015d8:	4059      	eors	r1, r3
 80015da:	f8c7 11c4 	str.w	r1, [r7, #452]	@ 0x1c4
 80015de:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
}
 80015e2:	4610      	mov	r0, r2
 80015e4:	4619      	mov	r1, r3
 80015e6:	f507 773f 	add.w	r7, r7, #764	@ 0x2fc
 80015ea:	46bd      	mov	sp, r7
 80015ec:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop

080015f4 <secure_uart_build>:
 *  secure_uart_build  –  TX side
 * ==============================*/
secure_uart_status_t
secure_uart_build(const uint8_t *payload, uint8_t plen,
		uint8_t *frame,  uint8_t *framelen)
{
 80015f4:	b590      	push	{r4, r7, lr}
 80015f6:	b0e1      	sub	sp, #388	@ 0x184
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	f507 74c0 	add.w	r4, r7, #384	@ 0x180
 80015fe:	f5a4 74ba 	sub.w	r4, r4, #372	@ 0x174
 8001602:	6020      	str	r0, [r4, #0]
 8001604:	4608      	mov	r0, r1
 8001606:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 800160a:	f5a1 71be 	sub.w	r1, r1, #380	@ 0x17c
 800160e:	600a      	str	r2, [r1, #0]
 8001610:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8001614:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800161e:	f2a3 1375 	subw	r3, r3, #373	@ 0x175
 8001622:	4602      	mov	r2, r0
 8001624:	701a      	strb	r2, [r3, #0]
	if(plen > SECURE_UART_MAX_PAYLOAD) return SECURE_UART_LEN_ERR;
 8001626:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800162a:	f2a3 1375 	subw	r3, r3, #373	@ 0x175
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2bf0      	cmp	r3, #240	@ 0xf0
 8001632:	d901      	bls.n	8001638 <secure_uart_build+0x44>
 8001634:	2302      	movs	r3, #2
 8001636:	e0c2      	b.n	80017be <secure_uart_build+0x1ca>

	uint8_t *p = frame;
 8001638:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800163c:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
	*p++ = SYNC_HIGH;                 /* SYNC */
 8001646:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800164a:	1c5a      	adds	r2, r3, #1
 800164c:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001650:	2255      	movs	r2, #85	@ 0x55
 8001652:	701a      	strb	r2, [r3, #0]
	*p++ = SYNC_LOW;
 8001654:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001658:	1c5a      	adds	r2, r3, #1
 800165a:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800165e:	22aa      	movs	r2, #170	@ 0xaa
 8001660:	701a      	strb	r2, [r3, #0]
	*p++ = plen + CNT_LEN + CRC_LEN + MAC_LEN;   /* LEN */
 8001662:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001666:	1c5a      	adds	r2, r3, #1
 8001668:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800166c:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8001670:	f2a2 1275 	subw	r2, r2, #373	@ 0x175
 8001674:	7812      	ldrb	r2, [r2, #0]
 8001676:	320d      	adds	r2, #13
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	701a      	strb	r2, [r3, #0]
	*p++ = cnt_tx++;                                 /* CNT */
 800167c:	4b52      	ldr	r3, [pc, #328]	@ (80017c8 <secure_uart_build+0x1d4>)
 800167e:	781a      	ldrb	r2, [r3, #0]
 8001680:	1c53      	adds	r3, r2, #1
 8001682:	b2d9      	uxtb	r1, r3
 8001684:	4b50      	ldr	r3, [pc, #320]	@ (80017c8 <secure_uart_build+0x1d4>)
 8001686:	7019      	strb	r1, [r3, #0]
 8001688:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800168c:	1c59      	adds	r1, r3, #1
 800168e:	f8c7 117c 	str.w	r1, [r7, #380]	@ 0x17c
 8001692:	701a      	strb	r2, [r3, #0]

#if SECURE_UART_USE_ENCRYPTION
	uint32_t rk[26];
	speck64_key_schedule(speck_k96, rk);
 8001694:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001698:	4619      	mov	r1, r3
 800169a:	484c      	ldr	r0, [pc, #304]	@ (80017cc <secure_uart_build+0x1d8>)
 800169c:	f7ff f8f8 	bl	8000890 <speck64_key_schedule>

	uint8_t enc[SECURE_UART_MAX_PAYLOAD];
	memcpy(enc, payload, plen);
 80016a0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80016a4:	f2a3 1375 	subw	r3, r3, #373	@ 0x175
 80016a8:	781a      	ldrb	r2, [r3, #0]
 80016aa:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80016ae:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80016b2:	f107 0020 	add.w	r0, r7, #32
 80016b6:	6819      	ldr	r1, [r3, #0]
 80016b8:	f003 fe11 	bl	80052de <memcpy>
	speck64_ctr_crypt(rk, enc, plen, frame[3]);   /* iv = CNT */
 80016bc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80016c0:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	3303      	adds	r3, #3
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	461c      	mov	r4, r3
 80016cc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80016d0:	f2a3 1375 	subw	r3, r3, #373	@ 0x175
 80016d4:	781a      	ldrb	r2, [r3, #0]
 80016d6:	f107 0120 	add.w	r1, r7, #32
 80016da:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80016de:	4623      	mov	r3, r4
 80016e0:	f7ff f93f 	bl	8000962 <speck64_ctr_crypt>

	/* enc уже зашифрован – копируем в кадр */
	memcpy(p, enc, plen);
 80016e4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80016e8:	f2a3 1375 	subw	r3, r3, #373	@ 0x175
 80016ec:	781a      	ldrb	r2, [r3, #0]
 80016ee:	f107 0320 	add.w	r3, r7, #32
 80016f2:	4619      	mov	r1, r3
 80016f4:	f8d7 017c 	ldr.w	r0, [r7, #380]	@ 0x17c
 80016f8:	f003 fdf1 	bl	80052de <memcpy>
#else
	memcpy(p, payload, plen);
#endif
	p += plen;
 80016fc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001700:	f2a3 1375 	subw	r3, r3, #373	@ 0x175
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800170a:	4413      	add	r3, r2
 800170c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c

	/* CRC32 over LEN..CRC‑1 (i.e., CNT+PAYLOAD) */
	uint16_t crc_region = LEN_LEN + CNT_LEN + plen;     // = 1 +1 + payload-length
 8001710:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001714:	f2a3 1375 	subw	r3, r3, #373	@ 0x175
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	b29b      	uxth	r3, r3
 800171c:	3302      	adds	r3, #2
 800171e:	f8a7 317a 	strh.w	r3, [r7, #378]	@ 0x17a
	uint32_t crc = crc32(frame + SYNC_LEN, crc_region);
 8001722:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001726:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	3302      	adds	r3, #2
 800172e:	f8b7 217a 	ldrh.w	r2, [r7, #378]	@ 0x17a
 8001732:	4611      	mov	r1, r2
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff f971 	bl	8000a1c <crc32>
 800173a:	4602      	mov	r2, r0
 800173c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001740:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001744:	601a      	str	r2, [r3, #0]
	memcpy(p, &crc, CRC_LEN);
 8001746:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800174a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001754:	601a      	str	r2, [r3, #0]
	p += CRC_LEN;
 8001756:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800175a:	3304      	adds	r3, #4
 800175c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c

	/* MAC over LEN..CRC */
	uint64_t mac = siphash24(frame+SYNC_LEN+LEN_LEN,
 8001760:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001764:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	1cda      	adds	r2, r3, #3
 800176c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001770:	f2a3 1375 	subw	r3, r3, #373	@ 0x175
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	3305      	adds	r3, #5
 8001778:	4619      	mov	r1, r3
 800177a:	4610      	mov	r0, r2
 800177c:	f7ff f9a4 	bl	8000ac8 <siphash24>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	e9c7 2304 	strd	r2, r3, [r7, #16]
			plen + CNT_LEN + CRC_LEN);
	memcpy(p, &mac, MAC_LEN); p += MAC_LEN;
 8001788:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800178c:	f8d7 117c 	ldr.w	r1, [r7, #380]	@ 0x17c
 8001790:	600a      	str	r2, [r1, #0]
 8001792:	604b      	str	r3, [r1, #4]
 8001794:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001798:	3308      	adds	r3, #8
 800179a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c

	*framelen = (uint8_t)(p - frame);
 800179e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80017a2:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80017a6:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80017b4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	701a      	strb	r2, [r3, #0]
	return SECURE_UART_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	f507 77c2 	add.w	r7, r7, #388	@ 0x184
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd90      	pop	{r4, r7, pc}
 80017c8:	200003a8 	.word	0x200003a8
 80017cc:	08005e90 	.word	0x08005e90

080017d0 <secure_uart_parse>:
 *  secure_uart_parse  –  RX side
 * ==============================*/
secure_uart_status_t
secure_uart_parse(uint8_t *frame, uint16_t size,
		uint8_t *out,   uint8_t *out_len)
{
 80017d0:	b5b0      	push	{r4, r5, r7, lr}
 80017d2:	b0ac      	sub	sp, #176	@ 0xb0
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	607a      	str	r2, [r7, #4]
 80017da:	603b      	str	r3, [r7, #0]
 80017dc:	460b      	mov	r3, r1
 80017de:	817b      	strh	r3, [r7, #10]
	if(size < (SYNC_LEN+LEN_LEN+CNT_LEN+CRC_LEN+MAC_LEN))
 80017e0:	897b      	ldrh	r3, [r7, #10]
 80017e2:	2b0f      	cmp	r3, #15
 80017e4:	d801      	bhi.n	80017ea <secure_uart_parse+0x1a>
		return SECURE_UART_LEN_ERR;
 80017e6:	2302      	movs	r3, #2
 80017e8:	e0a1      	b.n	800192e <secure_uart_parse+0x15e>
	if(frame[0]!=SYNC_HIGH || frame[1]!=SYNC_LOW)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b55      	cmp	r3, #85	@ 0x55
 80017f0:	d104      	bne.n	80017fc <secure_uart_parse+0x2c>
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	3301      	adds	r3, #1
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2baa      	cmp	r3, #170	@ 0xaa
 80017fa:	d001      	beq.n	8001800 <secure_uart_parse+0x30>
		return SECURE_UART_SYNC_ERR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e096      	b.n	800192e <secure_uart_parse+0x15e>

	uint8_t len = frame[2];
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	789b      	ldrb	r3, [r3, #2]
 8001804:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	if(len + SYNC_LEN + LEN_LEN > size)
 8001808:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800180c:	1cda      	adds	r2, r3, #3
 800180e:	897b      	ldrh	r3, [r7, #10]
 8001810:	429a      	cmp	r2, r3
 8001812:	d901      	bls.n	8001818 <secure_uart_parse+0x48>
		return SECURE_UART_LEN_ERR;
 8001814:	2302      	movs	r3, #2
 8001816:	e08a      	b.n	800192e <secure_uart_parse+0x15e>

	uint8_t *payload = &frame[4];
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	3304      	adds	r3, #4
 800181c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	uint8_t plen     = len - (CNT_LEN+CRC_LEN+MAC_LEN);
 8001820:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8001824:	3b0d      	subs	r3, #13
 8001826:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	uint8_t *crc_ptr = payload + plen;
 800182a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800182e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001832:	4413      	add	r3, r2
 8001834:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	uint8_t *mac_ptr = crc_ptr + CRC_LEN;
 8001838:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800183c:	3304      	adds	r3, #4
 800183e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

	/* CRC */
//	uint8_t const payload_len  = frame[2];
	uint16_t crc_region = LEN_LEN + CNT_LEN + plen;
 8001842:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8001846:	b29b      	uxth	r3, r3
 8001848:	3302      	adds	r3, #2
 800184a:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
	uint32_t calc_crc = crc32(frame + SYNC_LEN, crc_region);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	3302      	adds	r3, #2
 8001852:	f8b7 209a 	ldrh.w	r2, [r7, #154]	@ 0x9a
 8001856:	4611      	mov	r1, r2
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff f8df 	bl	8000a1c <crc32>
 800185e:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
	uint32_t  recv_crc;      memcpy(&recv_crc, crc_ptr, 4);
 8001862:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	memcpy(&recv_crc, crc_ptr, 4);
 800186c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	if (calc_crc != recv_crc) return SECURE_UART_CRC_ERR;
 8001876:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800187a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800187e:	429a      	cmp	r2, r3
 8001880:	d001      	beq.n	8001886 <secure_uart_parse+0xb6>
 8001882:	2303      	movs	r3, #3
 8001884:	e053      	b.n	800192e <secure_uart_parse+0x15e>

	/* MAC */
	uint64_t calc_mac = siphash24(frame+SYNC_LEN+LEN_LEN,
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	1cda      	adds	r2, r3, #3
 800188a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800188e:	3305      	adds	r3, #5
 8001890:	4619      	mov	r1, r3
 8001892:	4610      	mov	r0, r2
 8001894:	f7ff f918 	bl	8000ac8 <siphash24>
 8001898:	e9c7 0122 	strd	r0, r1, [r7, #136]	@ 0x88
			plen + CNT_LEN + CRC_LEN);
	uint64_t recv_mac; memcpy(&recv_mac, mac_ptr, 8);
 800189c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80018a0:	681c      	ldr	r4, [r3, #0]
 80018a2:	685d      	ldr	r5, [r3, #4]
 80018a4:	4622      	mov	r2, r4
 80018a6:	462b      	mov	r3, r5
 80018a8:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	if(calc_mac != recv_mac) return SECURE_UART_MAC_ERR;
 80018ac:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80018b0:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80018b4:	4299      	cmp	r1, r3
 80018b6:	bf08      	it	eq
 80018b8:	4290      	cmpeq	r0, r2
 80018ba:	d001      	beq.n	80018c0 <secure_uart_parse+0xf0>
 80018bc:	2304      	movs	r3, #4
 80018be:	e036      	b.n	800192e <secure_uart_parse+0x15e>

	/* CNT / replay */
	uint8_t cnt_in = frame[3];
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	78db      	ldrb	r3, [r3, #3]
 80018c4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	uint8_t diff   = cnt_in - cnt_rx_last;
 80018c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001938 <secure_uart_parse+0x168>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
	if(diff == 0 || diff > SECURE_UART_CNT_WINDOW)
 80018d6:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <secure_uart_parse+0x116>
 80018de:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80018e2:	2b08      	cmp	r3, #8
 80018e4:	d901      	bls.n	80018ea <secure_uart_parse+0x11a>
		return SECURE_UART_REPLAY_ERR;
 80018e6:	2305      	movs	r3, #5
 80018e8:	e021      	b.n	800192e <secure_uart_parse+0x15e>
	cnt_rx_last = cnt_in;
 80018ea:	4a13      	ldr	r2, [pc, #76]	@ (8001938 <secure_uart_parse+0x168>)
 80018ec:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80018f0:	7013      	strb	r3, [r2, #0]

#if SECURE_UART_USE_ENCRYPTION
	uint32_t rk[26];
	speck64_key_schedule(speck_k96, rk);
 80018f2:	f107 0310 	add.w	r3, r7, #16
 80018f6:	4619      	mov	r1, r3
 80018f8:	4810      	ldr	r0, [pc, #64]	@ (800193c <secure_uart_parse+0x16c>)
 80018fa:	f7fe ffc9 	bl	8000890 <speck64_key_schedule>
	speck64_ctr_crypt(rk, payload, plen, frame[3]);   /* iv = CNT */
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	3303      	adds	r3, #3
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 8001908:	f107 0010 	add.w	r0, r7, #16
 800190c:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8001910:	f7ff f827 	bl	8000962 <speck64_ctr_crypt>

	memcpy(out, payload, plen);
 8001914:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8001918:	461a      	mov	r2, r3
 800191a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f003 fcdd 	bl	80052de <memcpy>

#else
	memcpy(out, payload, plen);
#endif

	*out_len = plen;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 800192a:	701a      	strb	r2, [r3, #0]
	return SECURE_UART_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	37b0      	adds	r7, #176	@ 0xb0
 8001932:	46bd      	mov	sp, r7
 8001934:	bdb0      	pop	{r4, r5, r7, pc}
 8001936:	bf00      	nop
 8001938:	20000000 	.word	0x20000000
 800193c:	08005e90 	.word	0x08005e90

08001940 <secure_uart_status_str>:

/* helper for logs */
const char *secure_uart_status_str(secure_uart_status_t s)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	71fb      	strb	r3, [r7, #7]
	static const char *tbl[] = {"OK","SYNC","LEN","CRC","MAC","REPLAY"};
	return (s<=SECURE_UART_REPLAY_ERR)? tbl[s] : "?";
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	2b05      	cmp	r3, #5
 800194e:	d804      	bhi.n	800195a <secure_uart_status_str+0x1a>
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	4a05      	ldr	r2, [pc, #20]	@ (8001968 <secure_uart_status_str+0x28>)
 8001954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001958:	e000      	b.n	800195c <secure_uart_status_str+0x1c>
 800195a:	4b04      	ldr	r3, [pc, #16]	@ (800196c <secure_uart_status_str+0x2c>)
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	20000004 	.word	0x20000004
 800196c:	08005e0c 	.word	0x08005e0c

08001970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	4b10      	ldr	r3, [pc, #64]	@ (80019bc <HAL_MspInit+0x4c>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197e:	4a0f      	ldr	r2, [pc, #60]	@ (80019bc <HAL_MspInit+0x4c>)
 8001980:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001984:	6453      	str	r3, [r2, #68]	@ 0x44
 8001986:	4b0d      	ldr	r3, [pc, #52]	@ (80019bc <HAL_MspInit+0x4c>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800198e:	607b      	str	r3, [r7, #4]
 8001990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	603b      	str	r3, [r7, #0]
 8001996:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <HAL_MspInit+0x4c>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199a:	4a08      	ldr	r2, [pc, #32]	@ (80019bc <HAL_MspInit+0x4c>)
 800199c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019a2:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <HAL_MspInit+0x4c>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019aa:	603b      	str	r3, [r7, #0]
 80019ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800

080019c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <NMI_Handler+0x4>

080019c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <HardFault_Handler+0x4>

080019d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <MemManage_Handler+0x4>

080019d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019dc:	bf00      	nop
 80019de:	e7fd      	b.n	80019dc <BusFault_Handler+0x4>

080019e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e4:	bf00      	nop
 80019e6:	e7fd      	b.n	80019e4 <UsageFault_Handler+0x4>

080019e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a16:	f000 fc23 	bl	8002260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a24:	4802      	ldr	r0, [pc, #8]	@ (8001a30 <USART1_IRQHandler+0x10>)
 8001a26:	f002 f8d5 	bl	8003bd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200005b8 	.word	0x200005b8

08001a34 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001a38:	4802      	ldr	r0, [pc, #8]	@ (8001a44 <DMA2_Stream1_IRQHandler+0x10>)
 8001a3a:	f000 ff4d 	bl	80028d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200006f0 	.word	0x200006f0

08001a48 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001a4c:	4802      	ldr	r0, [pc, #8]	@ (8001a58 <DMA2_Stream2_IRQHandler+0x10>)
 8001a4e:	f000 ff43 	bl	80028d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000690 	.word	0x20000690

08001a5c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001a60:	4802      	ldr	r0, [pc, #8]	@ (8001a6c <USART6_IRQHandler+0x10>)
 8001a62:	f002 f8b7 	bl	8003bd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000648 	.word	0x20000648

08001a70 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	e00a      	b.n	8001a98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a82:	f3af 8000 	nop.w
 8001a86:	4601      	mov	r1, r0
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	60ba      	str	r2, [r7, #8]
 8001a8e:	b2ca      	uxtb	r2, r1
 8001a90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	3301      	adds	r3, #1
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	dbf0      	blt.n	8001a82 <_read+0x12>
  }

  return len;
 8001aa0:	687b      	ldr	r3, [r7, #4]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <_close>:
  return len;
}
*/

int _close(int file)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ab2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
 8001aca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ad2:	605a      	str	r2, [r3, #4]
  return 0;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <_isatty>:

int _isatty(int file)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001aea:	2301      	movs	r3, #1
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
	...

08001b14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b1c:	4a14      	ldr	r2, [pc, #80]	@ (8001b70 <_sbrk+0x5c>)
 8001b1e:	4b15      	ldr	r3, [pc, #84]	@ (8001b74 <_sbrk+0x60>)
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b28:	4b13      	ldr	r3, [pc, #76]	@ (8001b78 <_sbrk+0x64>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d102      	bne.n	8001b36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b30:	4b11      	ldr	r3, [pc, #68]	@ (8001b78 <_sbrk+0x64>)
 8001b32:	4a12      	ldr	r2, [pc, #72]	@ (8001b7c <_sbrk+0x68>)
 8001b34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b36:	4b10      	ldr	r3, [pc, #64]	@ (8001b78 <_sbrk+0x64>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d207      	bcs.n	8001b54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b44:	f003 fb9e 	bl	8005284 <__errno>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	220c      	movs	r2, #12
 8001b4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b52:	e009      	b.n	8001b68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b54:	4b08      	ldr	r3, [pc, #32]	@ (8001b78 <_sbrk+0x64>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b5a:	4b07      	ldr	r3, [pc, #28]	@ (8001b78 <_sbrk+0x64>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4413      	add	r3, r2
 8001b62:	4a05      	ldr	r2, [pc, #20]	@ (8001b78 <_sbrk+0x64>)
 8001b64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b66:	68fb      	ldr	r3, [r7, #12]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20020000 	.word	0x20020000
 8001b74:	00000400 	.word	0x00000400
 8001b78:	200003ac 	.word	0x200003ac
 8001b7c:	200008a0 	.word	0x200008a0

08001b80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b84:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <SystemInit+0x20>)
 8001b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b8a:	4a05      	ldr	r2, [pc, #20]	@ (8001ba0 <SystemInit+0x20>)
 8001b8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <dump_hex>:
static rx_state_t rx1 = { .wr = 0 };
static rx_state_t rx6 = { .wr = 0 };

static void dump_hex(const char *tag,
                     const uint8_t *buf, uint16_t len)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	80fb      	strh	r3, [r7, #6]
    printf("%s (%u B): ", tag, len);
 8001bb2:	88fb      	ldrh	r3, [r7, #6]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	68f9      	ldr	r1, [r7, #12]
 8001bb8:	480d      	ldr	r0, [pc, #52]	@ (8001bf0 <dump_hex+0x4c>)
 8001bba:	f003 f9b3 	bl	8004f24 <iprintf>
    for (uint16_t i = 0; i < len; ++i)
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	82fb      	strh	r3, [r7, #22]
 8001bc2:	e00a      	b.n	8001bda <dump_hex+0x36>
        printf("%02X ", buf[i]);
 8001bc4:	8afb      	ldrh	r3, [r7, #22]
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	4413      	add	r3, r2
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4809      	ldr	r0, [pc, #36]	@ (8001bf4 <dump_hex+0x50>)
 8001bd0:	f003 f9a8 	bl	8004f24 <iprintf>
    for (uint16_t i = 0; i < len; ++i)
 8001bd4:	8afb      	ldrh	r3, [r7, #22]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	82fb      	strh	r3, [r7, #22]
 8001bda:	8afa      	ldrh	r2, [r7, #22]
 8001bdc:	88fb      	ldrh	r3, [r7, #6]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d3f0      	bcc.n	8001bc4 <dump_hex+0x20>
    printf("\r\n");
 8001be2:	4805      	ldr	r0, [pc, #20]	@ (8001bf8 <dump_hex+0x54>)
 8001be4:	f003 fa06 	bl	8004ff4 <puts>
}
 8001be8:	bf00      	nop
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	08005e30 	.word	0x08005e30
 8001bf4:	08005e3c 	.word	0x08005e3c
 8001bf8:	08005e44 	.word	0x08005e44

08001bfc <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001bfc:	b590      	push	{r4, r7, lr}
 8001bfe:	b0c3      	sub	sp, #268	@ 0x10c
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001c06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001c0a:	6018      	str	r0, [r3, #0]
 8001c0c:	460a      	mov	r2, r1
 8001c0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001c12:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8001c16:	801a      	strh	r2, [r3, #0]
    rx_state_t *st    = (huart == &huart1) ? &rx1 : &rx6;
 8001c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001c1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a75      	ldr	r2, [pc, #468]	@ (8001df8 <HAL_UARTEx_RxEventCallback+0x1fc>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d101      	bne.n	8001c2c <HAL_UARTEx_RxEventCallback+0x30>
 8001c28:	4b74      	ldr	r3, [pc, #464]	@ (8001dfc <HAL_UARTEx_RxEventCallback+0x200>)
 8001c2a:	e000      	b.n	8001c2e <HAL_UARTEx_RxEventCallback+0x32>
 8001c2c:	4b74      	ldr	r3, [pc, #464]	@ (8001e00 <HAL_UARTEx_RxEventCallback+0x204>)
 8001c2e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    uint8_t    *dma   = (huart == &huart1) ? rx1_dma : rx6_dma;
 8001c32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001c36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a6e      	ldr	r2, [pc, #440]	@ (8001df8 <HAL_UARTEx_RxEventCallback+0x1fc>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d101      	bne.n	8001c46 <HAL_UARTEx_RxEventCallback+0x4a>
 8001c42:	4b70      	ldr	r3, [pc, #448]	@ (8001e04 <HAL_UARTEx_RxEventCallback+0x208>)
 8001c44:	e000      	b.n	8001c48 <HAL_UARTEx_RxEventCallback+0x4c>
 8001c46:	4b70      	ldr	r3, [pc, #448]	@ (8001e08 <HAL_UARTEx_RxEventCallback+0x20c>)
 8001c48:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    uint16_t    total = st->wr + Size;
 8001c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001c50:	f8b3 2100 	ldrh.w	r2, [r3, #256]	@ 0x100
 8001c54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001c58:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	4413      	add	r3, r2
 8001c60:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe

    /* 1. дописываем свежую порцию в конец буфера */
    memcpy(st->buf + st->wr, dma, Size);
 8001c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001c68:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8001c6c:	f8b2 2100 	ldrh.w	r2, [r2, #256]	@ 0x100
 8001c70:	1898      	adds	r0, r3, r2
 8001c72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001c76:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 8001c82:	f003 fb2c 	bl	80052de <memcpy>
    st->wr = total;
 8001c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001c8a:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	@ 0xfe
 8001c8e:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100

    /* 2. пока в буфере достаточно данных для полного кадра */
    while (st->wr >= 4) {                         /* минимум SYNC+LEN+CNT */
 8001c92:	e085      	b.n	8001da0 <HAL_UARTEx_RxEventCallback+0x1a4>
        if (st->buf[0] != 0x55 || st->buf[1] != 0xAA) {
 8001c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b55      	cmp	r3, #85	@ 0x55
 8001c9c:	d104      	bne.n	8001ca8 <HAL_UARTEx_RxEventCallback+0xac>
 8001c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001ca2:	785b      	ldrb	r3, [r3, #1]
 8001ca4:	2baa      	cmp	r3, #170	@ 0xaa
 8001ca6:	d016      	beq.n	8001cd6 <HAL_UARTEx_RxEventCallback+0xda>
            /* сдвигаем до следующего SYNC */
            memmove(st->buf, st->buf + 1, --st->wr);
 8001ca8:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 8001cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001cb0:	1c59      	adds	r1, r3, #1
 8001cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001cb6:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001cc2:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
 8001cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001cca:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8001cce:	461a      	mov	r2, r3
 8001cd0:	f003 fa70 	bl	80051b4 <memmove>
 8001cd4:	e064      	b.n	8001da0 <HAL_UARTEx_RxEventCallback+0x1a4>
            continue;
        }
        uint8_t need = st->buf[2] + 3;            /* полная длина кадра */
 8001cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001cda:	789b      	ldrb	r3, [r3, #2]
 8001cdc:	3303      	adds	r3, #3
 8001cde:	f887 30fd 	strb.w	r3, [r7, #253]	@ 0xfd
        if (st->wr < need) break;                 /* ждём ещё байты */
 8001ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001ce6:	f8b3 2100 	ldrh.w	r2, [r3, #256]	@ 0x100
 8001cea:	f897 30fd 	ldrb.w	r3, [r7, #253]	@ 0xfd
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d35d      	bcc.n	8001db0 <HAL_UARTEx_RxEventCallback+0x1b4>

        /* --- у нас полноценный кадр --- */
        uint8_t plain[SECURE_UART_MAX_PAYLOAD];
        uint8_t plen;
        secure_uart_status_t s =
            secure_uart_parse(st->buf, need, plain, &plen);
 8001cf4:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 8001cf8:	f897 30fd 	ldrb.w	r3, [r7, #253]	@ 0xfd
 8001cfc:	b299      	uxth	r1, r3
 8001cfe:	f107 03fb 	add.w	r3, r7, #251	@ 0xfb
 8001d02:	f107 0208 	add.w	r2, r7, #8
 8001d06:	f7ff fd63 	bl	80017d0 <secure_uart_parse>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	f887 30fc 	strb.w	r3, [r7, #252]	@ 0xfc

        dump_hex("RAW ", st->buf, need);
 8001d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001d14:	f897 20fd 	ldrb.w	r2, [r7, #253]	@ 0xfd
 8001d18:	b292      	uxth	r2, r2
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	483b      	ldr	r0, [pc, #236]	@ (8001e0c <HAL_UARTEx_RxEventCallback+0x210>)
 8001d1e:	f7ff ff41 	bl	8001ba4 <dump_hex>
        printf("%s: %s, %u B\r\n",
 8001d22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001d26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a32      	ldr	r2, [pc, #200]	@ (8001df8 <HAL_UARTEx_RxEventCallback+0x1fc>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d101      	bne.n	8001d36 <HAL_UARTEx_RxEventCallback+0x13a>
 8001d32:	4c37      	ldr	r4, [pc, #220]	@ (8001e10 <HAL_UARTEx_RxEventCallback+0x214>)
 8001d34:	e000      	b.n	8001d38 <HAL_UARTEx_RxEventCallback+0x13c>
 8001d36:	4c37      	ldr	r4, [pc, #220]	@ (8001e14 <HAL_UARTEx_RxEventCallback+0x218>)
 8001d38:	f897 30fc 	ldrb.w	r3, [r7, #252]	@ 0xfc
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff fdff 	bl	8001940 <secure_uart_status_str>
 8001d42:	4602      	mov	r2, r0
 8001d44:	f897 30fb 	ldrb.w	r3, [r7, #251]	@ 0xfb
 8001d48:	4621      	mov	r1, r4
 8001d4a:	4833      	ldr	r0, [pc, #204]	@ (8001e18 <HAL_UARTEx_RxEventCallback+0x21c>)
 8001d4c:	f003 f8ea 	bl	8004f24 <iprintf>
               (huart==&huart1)?"USART1":"USART6",
               secure_uart_status_str(s), plen);
        if (s == SECURE_UART_OK)
 8001d50:	f897 30fc 	ldrb.w	r3, [r7, #252]	@ 0xfc
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d108      	bne.n	8001d6a <HAL_UARTEx_RxEventCallback+0x16e>
            printf("Payload: %.*s\r\n", plen, plain);
 8001d58:	f897 30fb 	ldrb.w	r3, [r7, #251]	@ 0xfb
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f107 0308 	add.w	r3, r7, #8
 8001d62:	461a      	mov	r2, r3
 8001d64:	482d      	ldr	r0, [pc, #180]	@ (8001e1c <HAL_UARTEx_RxEventCallback+0x220>)
 8001d66:	f003 f8dd 	bl	8004f24 <iprintf>

        /* 3. выбрасываем обработанный кадр, сдвигаем хвост в начало */
        st->wr -= need;
 8001d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001d6e:	f8b3 2100 	ldrh.w	r2, [r3, #256]	@ 0x100
 8001d72:	f897 30fd 	ldrb.w	r3, [r7, #253]	@ 0xfd
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001d80:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
        memmove(st->buf, st->buf + need, st->wr);
 8001d84:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 8001d88:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8001d8c:	f897 30fd 	ldrb.w	r3, [r7, #253]	@ 0xfd
 8001d90:	18d1      	adds	r1, r2, r3
 8001d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001d96:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	f003 fa0a 	bl	80051b4 <memmove>
    while (st->wr >= 4) {                         /* минимум SYNC+LEN+CNT */
 8001da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001da4:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8001da8:	2b03      	cmp	r3, #3
 8001daa:	f63f af73 	bhi.w	8001c94 <HAL_UARTEx_RxEventCallback+0x98>
 8001dae:	e000      	b.n	8001db2 <HAL_UARTEx_RxEventCallback+0x1b6>
        if (st->wr < need) break;                 /* ждём ещё байты */
 8001db0:	bf00      	nop
    }

    /* перезапуск DMA */
    HAL_UARTEx_ReceiveToIdle_DMA(huart, dma,
 8001db2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001db6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001dba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dbe:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 8001dc2:	6818      	ldr	r0, [r3, #0]
 8001dc4:	f001 fea9 	bl	8003b1a <HAL_UARTEx_ReceiveToIdle_DMA>
                                 (huart==&huart1)?RX1_LEN:RX6_LEN);
    __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8001dc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001dcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001ddc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0208 	bic.w	r2, r2, #8
 8001dea:	601a      	str	r2, [r3, #0]
}
 8001dec:	bf00      	nop
 8001dee:	f507 7786 	add.w	r7, r7, #268	@ 0x10c
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd90      	pop	{r4, r7, pc}
 8001df6:	bf00      	nop
 8001df8:	200005b8 	.word	0x200005b8
 8001dfc:	200003b0 	.word	0x200003b0
 8001e00:	200004b4 	.word	0x200004b4
 8001e04:	200000a8 	.word	0x200000a8
 8001e08:	200001a8 	.word	0x200001a8
 8001e0c:	08005e48 	.word	0x08005e48
 8001e10:	08005e50 	.word	0x08005e50
 8001e14:	08005e58 	.word	0x08005e58
 8001e18:	08005e60 	.word	0x08005e60
 8001e1c:	08005e70 	.word	0x08005e70

08001e20 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e24:	4b11      	ldr	r3, [pc, #68]	@ (8001e6c <MX_USART1_UART_Init+0x4c>)
 8001e26:	4a12      	ldr	r2, [pc, #72]	@ (8001e70 <MX_USART1_UART_Init+0x50>)
 8001e28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e2a:	4b10      	ldr	r3, [pc, #64]	@ (8001e6c <MX_USART1_UART_Init+0x4c>)
 8001e2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e32:	4b0e      	ldr	r3, [pc, #56]	@ (8001e6c <MX_USART1_UART_Init+0x4c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e38:	4b0c      	ldr	r3, [pc, #48]	@ (8001e6c <MX_USART1_UART_Init+0x4c>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e6c <MX_USART1_UART_Init+0x4c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e44:	4b09      	ldr	r3, [pc, #36]	@ (8001e6c <MX_USART1_UART_Init+0x4c>)
 8001e46:	220c      	movs	r2, #12
 8001e48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e4a:	4b08      	ldr	r3, [pc, #32]	@ (8001e6c <MX_USART1_UART_Init+0x4c>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e50:	4b06      	ldr	r3, [pc, #24]	@ (8001e6c <MX_USART1_UART_Init+0x4c>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e56:	4805      	ldr	r0, [pc, #20]	@ (8001e6c <MX_USART1_UART_Init+0x4c>)
 8001e58:	f001 fd84 	bl	8003964 <HAL_UART_Init>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e62:	f7fe fcf9 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	200005b8 	.word	0x200005b8
 8001e70:	40011000 	.word	0x40011000

08001e74 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e78:	4b11      	ldr	r3, [pc, #68]	@ (8001ec0 <MX_USART2_UART_Init+0x4c>)
 8001e7a:	4a12      	ldr	r2, [pc, #72]	@ (8001ec4 <MX_USART2_UART_Init+0x50>)
 8001e7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e7e:	4b10      	ldr	r3, [pc, #64]	@ (8001ec0 <MX_USART2_UART_Init+0x4c>)
 8001e80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e86:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec0 <MX_USART2_UART_Init+0x4c>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec0 <MX_USART2_UART_Init+0x4c>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e92:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec0 <MX_USART2_UART_Init+0x4c>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8001e98:	4b09      	ldr	r3, [pc, #36]	@ (8001ec0 <MX_USART2_UART_Init+0x4c>)
 8001e9a:	2208      	movs	r2, #8
 8001e9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e9e:	4b08      	ldr	r3, [pc, #32]	@ (8001ec0 <MX_USART2_UART_Init+0x4c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea4:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <MX_USART2_UART_Init+0x4c>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eaa:	4805      	ldr	r0, [pc, #20]	@ (8001ec0 <MX_USART2_UART_Init+0x4c>)
 8001eac:	f001 fd5a 	bl	8003964 <HAL_UART_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001eb6:	f7fe fccf 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000600 	.word	0x20000600
 8001ec4:	40004400 	.word	0x40004400

08001ec8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001ecc:	4b11      	ldr	r3, [pc, #68]	@ (8001f14 <MX_USART6_UART_Init+0x4c>)
 8001ece:	4a12      	ldr	r2, [pc, #72]	@ (8001f18 <MX_USART6_UART_Init+0x50>)
 8001ed0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001ed2:	4b10      	ldr	r3, [pc, #64]	@ (8001f14 <MX_USART6_UART_Init+0x4c>)
 8001ed4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ed8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001eda:	4b0e      	ldr	r3, [pc, #56]	@ (8001f14 <MX_USART6_UART_Init+0x4c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f14 <MX_USART6_UART_Init+0x4c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8001f14 <MX_USART6_UART_Init+0x4c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001eec:	4b09      	ldr	r3, [pc, #36]	@ (8001f14 <MX_USART6_UART_Init+0x4c>)
 8001eee:	220c      	movs	r2, #12
 8001ef0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ef2:	4b08      	ldr	r3, [pc, #32]	@ (8001f14 <MX_USART6_UART_Init+0x4c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ef8:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <MX_USART6_UART_Init+0x4c>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001efe:	4805      	ldr	r0, [pc, #20]	@ (8001f14 <MX_USART6_UART_Init+0x4c>)
 8001f00:	f001 fd30 	bl	8003964 <HAL_UART_Init>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001f0a:	f7fe fca5 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000648 	.word	0x20000648
 8001f18:	40011400 	.word	0x40011400

08001f1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08e      	sub	sp, #56	@ 0x38
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a81      	ldr	r2, [pc, #516]	@ (8002140 <HAL_UART_MspInit+0x224>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d163      	bne.n	8002006 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	623b      	str	r3, [r7, #32]
 8001f42:	4b80      	ldr	r3, [pc, #512]	@ (8002144 <HAL_UART_MspInit+0x228>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f46:	4a7f      	ldr	r2, [pc, #508]	@ (8002144 <HAL_UART_MspInit+0x228>)
 8001f48:	f043 0310 	orr.w	r3, r3, #16
 8001f4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f4e:	4b7d      	ldr	r3, [pc, #500]	@ (8002144 <HAL_UART_MspInit+0x228>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	623b      	str	r3, [r7, #32]
 8001f58:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61fb      	str	r3, [r7, #28]
 8001f5e:	4b79      	ldr	r3, [pc, #484]	@ (8002144 <HAL_UART_MspInit+0x228>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f62:	4a78      	ldr	r2, [pc, #480]	@ (8002144 <HAL_UART_MspInit+0x228>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f6a:	4b76      	ldr	r3, [pc, #472]	@ (8002144 <HAL_UART_MspInit+0x228>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	61fb      	str	r3, [r7, #28]
 8001f74:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f76:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001f7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f84:	2303      	movs	r3, #3
 8001f86:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f88:	2307      	movs	r3, #7
 8001f8a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f90:	4619      	mov	r1, r3
 8001f92:	486d      	ldr	r0, [pc, #436]	@ (8002148 <HAL_UART_MspInit+0x22c>)
 8001f94:	f000 ff0a 	bl	8002dac <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001f98:	4b6c      	ldr	r3, [pc, #432]	@ (800214c <HAL_UART_MspInit+0x230>)
 8001f9a:	4a6d      	ldr	r2, [pc, #436]	@ (8002150 <HAL_UART_MspInit+0x234>)
 8001f9c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001f9e:	4b6b      	ldr	r3, [pc, #428]	@ (800214c <HAL_UART_MspInit+0x230>)
 8001fa0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001fa4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fa6:	4b69      	ldr	r3, [pc, #420]	@ (800214c <HAL_UART_MspInit+0x230>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fac:	4b67      	ldr	r3, [pc, #412]	@ (800214c <HAL_UART_MspInit+0x230>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fb2:	4b66      	ldr	r3, [pc, #408]	@ (800214c <HAL_UART_MspInit+0x230>)
 8001fb4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fb8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fba:	4b64      	ldr	r3, [pc, #400]	@ (800214c <HAL_UART_MspInit+0x230>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fc0:	4b62      	ldr	r3, [pc, #392]	@ (800214c <HAL_UART_MspInit+0x230>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001fc6:	4b61      	ldr	r3, [pc, #388]	@ (800214c <HAL_UART_MspInit+0x230>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fcc:	4b5f      	ldr	r3, [pc, #380]	@ (800214c <HAL_UART_MspInit+0x230>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fd2:	4b5e      	ldr	r3, [pc, #376]	@ (800214c <HAL_UART_MspInit+0x230>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001fd8:	485c      	ldr	r0, [pc, #368]	@ (800214c <HAL_UART_MspInit+0x230>)
 8001fda:	f000 fae5 	bl	80025a8 <HAL_DMA_Init>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001fe4:	f7fe fc38 	bl	8000858 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a58      	ldr	r2, [pc, #352]	@ (800214c <HAL_UART_MspInit+0x230>)
 8001fec:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001fee:	4a57      	ldr	r2, [pc, #348]	@ (800214c <HAL_UART_MspInit+0x230>)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	2025      	movs	r0, #37	@ 0x25
 8001ffa:	f000 fa50 	bl	800249e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ffe:	2025      	movs	r0, #37	@ 0x25
 8002000:	f000 fa69 	bl	80024d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002004:	e098      	b.n	8002138 <HAL_UART_MspInit+0x21c>
  else if(uartHandle->Instance==USART2)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a52      	ldr	r2, [pc, #328]	@ (8002154 <HAL_UART_MspInit+0x238>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d12c      	bne.n	800206a <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002010:	2300      	movs	r3, #0
 8002012:	61bb      	str	r3, [r7, #24]
 8002014:	4b4b      	ldr	r3, [pc, #300]	@ (8002144 <HAL_UART_MspInit+0x228>)
 8002016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002018:	4a4a      	ldr	r2, [pc, #296]	@ (8002144 <HAL_UART_MspInit+0x228>)
 800201a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800201e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002020:	4b48      	ldr	r3, [pc, #288]	@ (8002144 <HAL_UART_MspInit+0x228>)
 8002022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002028:	61bb      	str	r3, [r7, #24]
 800202a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	4b44      	ldr	r3, [pc, #272]	@ (8002144 <HAL_UART_MspInit+0x228>)
 8002032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002034:	4a43      	ldr	r2, [pc, #268]	@ (8002144 <HAL_UART_MspInit+0x228>)
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	6313      	str	r3, [r2, #48]	@ 0x30
 800203c:	4b41      	ldr	r3, [pc, #260]	@ (8002144 <HAL_UART_MspInit+0x228>)
 800203e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002048:	230c      	movs	r3, #12
 800204a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204c:	2302      	movs	r3, #2
 800204e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	2300      	movs	r3, #0
 8002052:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002054:	2303      	movs	r3, #3
 8002056:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002058:	2307      	movs	r3, #7
 800205a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002060:	4619      	mov	r1, r3
 8002062:	4839      	ldr	r0, [pc, #228]	@ (8002148 <HAL_UART_MspInit+0x22c>)
 8002064:	f000 fea2 	bl	8002dac <HAL_GPIO_Init>
}
 8002068:	e066      	b.n	8002138 <HAL_UART_MspInit+0x21c>
  else if(uartHandle->Instance==USART6)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a3a      	ldr	r2, [pc, #232]	@ (8002158 <HAL_UART_MspInit+0x23c>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d161      	bne.n	8002138 <HAL_UART_MspInit+0x21c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002074:	2300      	movs	r3, #0
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	4b32      	ldr	r3, [pc, #200]	@ (8002144 <HAL_UART_MspInit+0x228>)
 800207a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207c:	4a31      	ldr	r2, [pc, #196]	@ (8002144 <HAL_UART_MspInit+0x228>)
 800207e:	f043 0320 	orr.w	r3, r3, #32
 8002082:	6453      	str	r3, [r2, #68]	@ 0x44
 8002084:	4b2f      	ldr	r3, [pc, #188]	@ (8002144 <HAL_UART_MspInit+0x228>)
 8002086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002088:	f003 0320 	and.w	r3, r3, #32
 800208c:	613b      	str	r3, [r7, #16]
 800208e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002090:	2300      	movs	r3, #0
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	4b2b      	ldr	r3, [pc, #172]	@ (8002144 <HAL_UART_MspInit+0x228>)
 8002096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002098:	4a2a      	ldr	r2, [pc, #168]	@ (8002144 <HAL_UART_MspInit+0x228>)
 800209a:	f043 0304 	orr.w	r3, r3, #4
 800209e:	6313      	str	r3, [r2, #48]	@ 0x30
 80020a0:	4b28      	ldr	r3, [pc, #160]	@ (8002144 <HAL_UART_MspInit+0x228>)
 80020a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020ac:	23c0      	movs	r3, #192	@ 0xc0
 80020ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b0:	2302      	movs	r3, #2
 80020b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b8:	2303      	movs	r3, #3
 80020ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80020bc:	2308      	movs	r3, #8
 80020be:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020c4:	4619      	mov	r1, r3
 80020c6:	4825      	ldr	r0, [pc, #148]	@ (800215c <HAL_UART_MspInit+0x240>)
 80020c8:	f000 fe70 	bl	8002dac <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80020cc:	4b24      	ldr	r3, [pc, #144]	@ (8002160 <HAL_UART_MspInit+0x244>)
 80020ce:	4a25      	ldr	r2, [pc, #148]	@ (8002164 <HAL_UART_MspInit+0x248>)
 80020d0:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80020d2:	4b23      	ldr	r3, [pc, #140]	@ (8002160 <HAL_UART_MspInit+0x244>)
 80020d4:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80020d8:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020da:	4b21      	ldr	r3, [pc, #132]	@ (8002160 <HAL_UART_MspInit+0x244>)
 80020dc:	2200      	movs	r2, #0
 80020de:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002160 <HAL_UART_MspInit+0x244>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002160 <HAL_UART_MspInit+0x244>)
 80020e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020ec:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002160 <HAL_UART_MspInit+0x244>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002160 <HAL_UART_MspInit+0x244>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80020fa:	4b19      	ldr	r3, [pc, #100]	@ (8002160 <HAL_UART_MspInit+0x244>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002100:	4b17      	ldr	r3, [pc, #92]	@ (8002160 <HAL_UART_MspInit+0x244>)
 8002102:	2200      	movs	r2, #0
 8002104:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002106:	4b16      	ldr	r3, [pc, #88]	@ (8002160 <HAL_UART_MspInit+0x244>)
 8002108:	2200      	movs	r2, #0
 800210a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800210c:	4814      	ldr	r0, [pc, #80]	@ (8002160 <HAL_UART_MspInit+0x244>)
 800210e:	f000 fa4b 	bl	80025a8 <HAL_DMA_Init>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <HAL_UART_MspInit+0x200>
      Error_Handler();
 8002118:	f7fe fb9e 	bl	8000858 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a10      	ldr	r2, [pc, #64]	@ (8002160 <HAL_UART_MspInit+0x244>)
 8002120:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002122:	4a0f      	ldr	r2, [pc, #60]	@ (8002160 <HAL_UART_MspInit+0x244>)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002128:	2200      	movs	r2, #0
 800212a:	2100      	movs	r1, #0
 800212c:	2047      	movs	r0, #71	@ 0x47
 800212e:	f000 f9b6 	bl	800249e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002132:	2047      	movs	r0, #71	@ 0x47
 8002134:	f000 f9cf 	bl	80024d6 <HAL_NVIC_EnableIRQ>
}
 8002138:	bf00      	nop
 800213a:	3738      	adds	r7, #56	@ 0x38
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40011000 	.word	0x40011000
 8002144:	40023800 	.word	0x40023800
 8002148:	40020000 	.word	0x40020000
 800214c:	20000690 	.word	0x20000690
 8002150:	40026440 	.word	0x40026440
 8002154:	40004400 	.word	0x40004400
 8002158:	40011400 	.word	0x40011400
 800215c:	40020800 	.word	0x40020800
 8002160:	200006f0 	.word	0x200006f0
 8002164:	40026428 	.word	0x40026428

08002168 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002168:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800216c:	f7ff fd08 	bl	8001b80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002170:	480c      	ldr	r0, [pc, #48]	@ (80021a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002172:	490d      	ldr	r1, [pc, #52]	@ (80021a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002174:	4a0d      	ldr	r2, [pc, #52]	@ (80021ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002178:	e002      	b.n	8002180 <LoopCopyDataInit>

0800217a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800217a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800217c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800217e:	3304      	adds	r3, #4

08002180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002184:	d3f9      	bcc.n	800217a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002186:	4a0a      	ldr	r2, [pc, #40]	@ (80021b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002188:	4c0a      	ldr	r4, [pc, #40]	@ (80021b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800218a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800218c:	e001      	b.n	8002192 <LoopFillZerobss>

0800218e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800218e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002190:	3204      	adds	r2, #4

08002192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002194:	d3fb      	bcc.n	800218e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002196:	f003 f87b 	bl	8005290 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800219a:	f7fe fa8d 	bl	80006b8 <main>
  bx  lr    
 800219e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80021a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021a8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80021ac:	08005f00 	.word	0x08005f00
  ldr r2, =_sbss
 80021b0:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80021b4:	200008a0 	.word	0x200008a0

080021b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021b8:	e7fe      	b.n	80021b8 <ADC_IRQHandler>
	...

080021bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021c0:	4b0e      	ldr	r3, [pc, #56]	@ (80021fc <HAL_Init+0x40>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a0d      	ldr	r2, [pc, #52]	@ (80021fc <HAL_Init+0x40>)
 80021c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021cc:	4b0b      	ldr	r3, [pc, #44]	@ (80021fc <HAL_Init+0x40>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a0a      	ldr	r2, [pc, #40]	@ (80021fc <HAL_Init+0x40>)
 80021d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021d8:	4b08      	ldr	r3, [pc, #32]	@ (80021fc <HAL_Init+0x40>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a07      	ldr	r2, [pc, #28]	@ (80021fc <HAL_Init+0x40>)
 80021de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021e4:	2003      	movs	r0, #3
 80021e6:	f000 f94f 	bl	8002488 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ea:	200f      	movs	r0, #15
 80021ec:	f000 f808 	bl	8002200 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021f0:	f7ff fbbe 	bl	8001970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40023c00 	.word	0x40023c00

08002200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002208:	4b12      	ldr	r3, [pc, #72]	@ (8002254 <HAL_InitTick+0x54>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4b12      	ldr	r3, [pc, #72]	@ (8002258 <HAL_InitTick+0x58>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	4619      	mov	r1, r3
 8002212:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002216:	fbb3 f3f1 	udiv	r3, r3, r1
 800221a:	fbb2 f3f3 	udiv	r3, r2, r3
 800221e:	4618      	mov	r0, r3
 8002220:	f000 f967 	bl	80024f2 <HAL_SYSTICK_Config>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e00e      	b.n	800224c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b0f      	cmp	r3, #15
 8002232:	d80a      	bhi.n	800224a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002234:	2200      	movs	r2, #0
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	f04f 30ff 	mov.w	r0, #4294967295
 800223c:	f000 f92f 	bl	800249e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002240:	4a06      	ldr	r2, [pc, #24]	@ (800225c <HAL_InitTick+0x5c>)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002246:	2300      	movs	r3, #0
 8002248:	e000      	b.n	800224c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
}
 800224c:	4618      	mov	r0, r3
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	2000001c 	.word	0x2000001c
 8002258:	20000024 	.word	0x20000024
 800225c:	20000020 	.word	0x20000020

08002260 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002264:	4b06      	ldr	r3, [pc, #24]	@ (8002280 <HAL_IncTick+0x20>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	461a      	mov	r2, r3
 800226a:	4b06      	ldr	r3, [pc, #24]	@ (8002284 <HAL_IncTick+0x24>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4413      	add	r3, r2
 8002270:	4a04      	ldr	r2, [pc, #16]	@ (8002284 <HAL_IncTick+0x24>)
 8002272:	6013      	str	r3, [r2, #0]
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	20000024 	.word	0x20000024
 8002284:	20000750 	.word	0x20000750

08002288 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  return uwTick;
 800228c:	4b03      	ldr	r3, [pc, #12]	@ (800229c <HAL_GetTick+0x14>)
 800228e:	681b      	ldr	r3, [r3, #0]
}
 8002290:	4618      	mov	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	20000750 	.word	0x20000750

080022a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022a8:	f7ff ffee 	bl	8002288 <HAL_GetTick>
 80022ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b8:	d005      	beq.n	80022c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ba:	4b0a      	ldr	r3, [pc, #40]	@ (80022e4 <HAL_Delay+0x44>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	461a      	mov	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4413      	add	r3, r2
 80022c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022c6:	bf00      	nop
 80022c8:	f7ff ffde 	bl	8002288 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d8f7      	bhi.n	80022c8 <HAL_Delay+0x28>
  {
  }
}
 80022d8:	bf00      	nop
 80022da:	bf00      	nop
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000024 	.word	0x20000024

080022e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022f8:	4b0c      	ldr	r3, [pc, #48]	@ (800232c <__NVIC_SetPriorityGrouping+0x44>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002304:	4013      	ands	r3, r2
 8002306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002310:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002314:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800231a:	4a04      	ldr	r2, [pc, #16]	@ (800232c <__NVIC_SetPriorityGrouping+0x44>)
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	60d3      	str	r3, [r2, #12]
}
 8002320:	bf00      	nop
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002334:	4b04      	ldr	r3, [pc, #16]	@ (8002348 <__NVIC_GetPriorityGrouping+0x18>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	0a1b      	lsrs	r3, r3, #8
 800233a:	f003 0307 	and.w	r3, r3, #7
}
 800233e:	4618      	mov	r0, r3
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235a:	2b00      	cmp	r3, #0
 800235c:	db0b      	blt.n	8002376 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	f003 021f 	and.w	r2, r3, #31
 8002364:	4907      	ldr	r1, [pc, #28]	@ (8002384 <__NVIC_EnableIRQ+0x38>)
 8002366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236a:	095b      	lsrs	r3, r3, #5
 800236c:	2001      	movs	r0, #1
 800236e:	fa00 f202 	lsl.w	r2, r0, r2
 8002372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	e000e100 	.word	0xe000e100

08002388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	6039      	str	r1, [r7, #0]
 8002392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002398:	2b00      	cmp	r3, #0
 800239a:	db0a      	blt.n	80023b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	490c      	ldr	r1, [pc, #48]	@ (80023d4 <__NVIC_SetPriority+0x4c>)
 80023a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a6:	0112      	lsls	r2, r2, #4
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	440b      	add	r3, r1
 80023ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023b0:	e00a      	b.n	80023c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	4908      	ldr	r1, [pc, #32]	@ (80023d8 <__NVIC_SetPriority+0x50>)
 80023b8:	79fb      	ldrb	r3, [r7, #7]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	3b04      	subs	r3, #4
 80023c0:	0112      	lsls	r2, r2, #4
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	440b      	add	r3, r1
 80023c6:	761a      	strb	r2, [r3, #24]
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	e000e100 	.word	0xe000e100
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023dc:	b480      	push	{r7}
 80023de:	b089      	sub	sp, #36	@ 0x24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f1c3 0307 	rsb	r3, r3, #7
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	bf28      	it	cs
 80023fa:	2304      	movcs	r3, #4
 80023fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	3304      	adds	r3, #4
 8002402:	2b06      	cmp	r3, #6
 8002404:	d902      	bls.n	800240c <NVIC_EncodePriority+0x30>
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	3b03      	subs	r3, #3
 800240a:	e000      	b.n	800240e <NVIC_EncodePriority+0x32>
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002410:	f04f 32ff 	mov.w	r2, #4294967295
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43da      	mvns	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	401a      	ands	r2, r3
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002424:	f04f 31ff 	mov.w	r1, #4294967295
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	fa01 f303 	lsl.w	r3, r1, r3
 800242e:	43d9      	mvns	r1, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002434:	4313      	orrs	r3, r2
         );
}
 8002436:	4618      	mov	r0, r3
 8002438:	3724      	adds	r7, #36	@ 0x24
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
	...

08002444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3b01      	subs	r3, #1
 8002450:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002454:	d301      	bcc.n	800245a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002456:	2301      	movs	r3, #1
 8002458:	e00f      	b.n	800247a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800245a:	4a0a      	ldr	r2, [pc, #40]	@ (8002484 <SysTick_Config+0x40>)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3b01      	subs	r3, #1
 8002460:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002462:	210f      	movs	r1, #15
 8002464:	f04f 30ff 	mov.w	r0, #4294967295
 8002468:	f7ff ff8e 	bl	8002388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800246c:	4b05      	ldr	r3, [pc, #20]	@ (8002484 <SysTick_Config+0x40>)
 800246e:	2200      	movs	r2, #0
 8002470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002472:	4b04      	ldr	r3, [pc, #16]	@ (8002484 <SysTick_Config+0x40>)
 8002474:	2207      	movs	r2, #7
 8002476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	e000e010 	.word	0xe000e010

08002488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f7ff ff29 	bl	80022e8 <__NVIC_SetPriorityGrouping>
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800249e:	b580      	push	{r7, lr}
 80024a0:	b086      	sub	sp, #24
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	4603      	mov	r3, r0
 80024a6:	60b9      	str	r1, [r7, #8]
 80024a8:	607a      	str	r2, [r7, #4]
 80024aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024b0:	f7ff ff3e 	bl	8002330 <__NVIC_GetPriorityGrouping>
 80024b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	68b9      	ldr	r1, [r7, #8]
 80024ba:	6978      	ldr	r0, [r7, #20]
 80024bc:	f7ff ff8e 	bl	80023dc <NVIC_EncodePriority>
 80024c0:	4602      	mov	r2, r0
 80024c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024c6:	4611      	mov	r1, r2
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff ff5d 	bl	8002388 <__NVIC_SetPriority>
}
 80024ce:	bf00      	nop
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	4603      	mov	r3, r0
 80024de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff ff31 	bl	800234c <__NVIC_EnableIRQ>
}
 80024ea:	bf00      	nop
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b082      	sub	sp, #8
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7ff ffa2 	bl	8002444 <SysTick_Config>
 8002500:	4603      	mov	r3, r0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e00e      	b.n	800253a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	795b      	ldrb	r3, [r3, #5]
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d105      	bne.n	8002532 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7fe f851 	bl	80005d4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002542:	b480      	push	{r7}
 8002544:	b087      	sub	sp, #28
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800254e:	2300      	movs	r3, #0
 8002550:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2202      	movs	r2, #2
 8002556:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0201 	orr.w	r2, r2, #1
 8002566:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8002568:	2300      	movs	r3, #0
 800256a:	617b      	str	r3, [r7, #20]
 800256c:	e00a      	b.n	8002584 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	441a      	add	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	3301      	adds	r3, #1
 8002582:	617b      	str	r3, [r7, #20]
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	429a      	cmp	r2, r3
 800258a:	d3f0      	bcc.n	800256e <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2201      	movs	r2, #1
 8002598:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800259a:	693b      	ldr	r3, [r7, #16]
}
 800259c:	4618      	mov	r0, r3
 800259e:	371c      	adds	r7, #28
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025b4:	f7ff fe68 	bl	8002288 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e099      	b.n	80026f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2202      	movs	r2, #2
 80025c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0201 	bic.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025e4:	e00f      	b.n	8002606 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025e6:	f7ff fe4f 	bl	8002288 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b05      	cmp	r3, #5
 80025f2:	d908      	bls.n	8002606 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2220      	movs	r2, #32
 80025f8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2203      	movs	r2, #3
 80025fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e078      	b.n	80026f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1e8      	bne.n	80025e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	4b38      	ldr	r3, [pc, #224]	@ (8002700 <HAL_DMA_Init+0x158>)
 8002620:	4013      	ands	r3, r2
 8002622:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002632:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800263e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800264a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	4313      	orrs	r3, r2
 8002656:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265c:	2b04      	cmp	r3, #4
 800265e:	d107      	bne.n	8002670 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002668:	4313      	orrs	r3, r2
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	4313      	orrs	r3, r2
 800266e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f023 0307 	bic.w	r3, r3, #7
 8002686:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	4313      	orrs	r3, r2
 8002690:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002696:	2b04      	cmp	r3, #4
 8002698:	d117      	bne.n	80026ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00e      	beq.n	80026ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 fb01 	bl	8002cb4 <DMA_CheckFifoParam>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d008      	beq.n	80026ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2240      	movs	r2, #64	@ 0x40
 80026bc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80026c6:	2301      	movs	r3, #1
 80026c8:	e016      	b.n	80026f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 fab8 	bl	8002c48 <DMA_CalcBaseAndBitshift>
 80026d8:	4603      	mov	r3, r0
 80026da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e0:	223f      	movs	r2, #63	@ 0x3f
 80026e2:	409a      	lsls	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	f010803f 	.word	0xf010803f

08002704 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
 8002710:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002712:	2300      	movs	r3, #0
 8002714:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800271a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002722:	2b01      	cmp	r3, #1
 8002724:	d101      	bne.n	800272a <HAL_DMA_Start_IT+0x26>
 8002726:	2302      	movs	r3, #2
 8002728:	e040      	b.n	80027ac <HAL_DMA_Start_IT+0xa8>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b01      	cmp	r3, #1
 800273c:	d12f      	bne.n	800279e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2202      	movs	r2, #2
 8002742:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	68b9      	ldr	r1, [r7, #8]
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 fa4a 	bl	8002bec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800275c:	223f      	movs	r2, #63	@ 0x3f
 800275e:	409a      	lsls	r2, r3
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0216 	orr.w	r2, r2, #22
 8002772:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002778:	2b00      	cmp	r3, #0
 800277a:	d007      	beq.n	800278c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0208 	orr.w	r2, r2, #8
 800278a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f042 0201 	orr.w	r2, r2, #1
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	e005      	b.n	80027aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80027a6:	2302      	movs	r3, #2
 80027a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80027aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80027c2:	f7ff fd61 	bl	8002288 <HAL_GetTick>
 80027c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d008      	beq.n	80027e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2280      	movs	r2, #128	@ 0x80
 80027d8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e052      	b.n	800288c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0216 	bic.w	r2, r2, #22
 80027f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	695a      	ldr	r2, [r3, #20]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002804:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280a:	2b00      	cmp	r3, #0
 800280c:	d103      	bne.n	8002816 <HAL_DMA_Abort+0x62>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002812:	2b00      	cmp	r3, #0
 8002814:	d007      	beq.n	8002826 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0208 	bic.w	r2, r2, #8
 8002824:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0201 	bic.w	r2, r2, #1
 8002834:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002836:	e013      	b.n	8002860 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002838:	f7ff fd26 	bl	8002288 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b05      	cmp	r3, #5
 8002844:	d90c      	bls.n	8002860 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2220      	movs	r2, #32
 800284a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2203      	movs	r2, #3
 8002850:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e015      	b.n	800288c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1e4      	bne.n	8002838 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002872:	223f      	movs	r2, #63	@ 0x3f
 8002874:	409a      	lsls	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d004      	beq.n	80028b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2280      	movs	r2, #128	@ 0x80
 80028ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e00c      	b.n	80028cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2205      	movs	r2, #5
 80028b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0201 	bic.w	r2, r2, #1
 80028c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028e4:	4b8e      	ldr	r3, [pc, #568]	@ (8002b20 <HAL_DMA_IRQHandler+0x248>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a8e      	ldr	r2, [pc, #568]	@ (8002b24 <HAL_DMA_IRQHandler+0x24c>)
 80028ea:	fba2 2303 	umull	r2, r3, r2, r3
 80028ee:	0a9b      	lsrs	r3, r3, #10
 80028f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002902:	2208      	movs	r2, #8
 8002904:	409a      	lsls	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4013      	ands	r3, r2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d01a      	beq.n	8002944 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d013      	beq.n	8002944 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0204 	bic.w	r2, r2, #4
 800292a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002930:	2208      	movs	r2, #8
 8002932:	409a      	lsls	r2, r3
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800293c:	f043 0201 	orr.w	r2, r3, #1
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002948:	2201      	movs	r2, #1
 800294a:	409a      	lsls	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4013      	ands	r3, r2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d012      	beq.n	800297a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00b      	beq.n	800297a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002966:	2201      	movs	r2, #1
 8002968:	409a      	lsls	r2, r3
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002972:	f043 0202 	orr.w	r2, r3, #2
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800297e:	2204      	movs	r2, #4
 8002980:	409a      	lsls	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4013      	ands	r3, r2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d012      	beq.n	80029b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00b      	beq.n	80029b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800299c:	2204      	movs	r2, #4
 800299e:	409a      	lsls	r2, r3
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a8:	f043 0204 	orr.w	r2, r3, #4
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b4:	2210      	movs	r2, #16
 80029b6:	409a      	lsls	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4013      	ands	r3, r2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d043      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d03c      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d2:	2210      	movs	r2, #16
 80029d4:	409a      	lsls	r2, r3
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d018      	beq.n	8002a1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d108      	bne.n	8002a08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d024      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	4798      	blx	r3
 8002a06:	e01f      	b.n	8002a48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d01b      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	4798      	blx	r3
 8002a18:	e016      	b.n	8002a48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d107      	bne.n	8002a38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0208 	bic.w	r2, r2, #8
 8002a36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a4c:	2220      	movs	r2, #32
 8002a4e:	409a      	lsls	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4013      	ands	r3, r2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 808f 	beq.w	8002b78 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0310 	and.w	r3, r3, #16
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 8087 	beq.w	8002b78 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a6e:	2220      	movs	r2, #32
 8002a70:	409a      	lsls	r2, r3
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b05      	cmp	r3, #5
 8002a80:	d136      	bne.n	8002af0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0216 	bic.w	r2, r2, #22
 8002a90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	695a      	ldr	r2, [r3, #20]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002aa0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d103      	bne.n	8002ab2 <HAL_DMA_IRQHandler+0x1da>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d007      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 0208 	bic.w	r2, r2, #8
 8002ac0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac6:	223f      	movs	r2, #63	@ 0x3f
 8002ac8:	409a      	lsls	r2, r3
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d07e      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	4798      	blx	r3
        }
        return;
 8002aee:	e079      	b.n	8002be4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d01d      	beq.n	8002b3a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10d      	bne.n	8002b28 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d031      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	4798      	blx	r3
 8002b1c:	e02c      	b.n	8002b78 <HAL_DMA_IRQHandler+0x2a0>
 8002b1e:	bf00      	nop
 8002b20:	2000001c 	.word	0x2000001c
 8002b24:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d023      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	4798      	blx	r3
 8002b38:	e01e      	b.n	8002b78 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d10f      	bne.n	8002b68 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0210 	bic.w	r2, r2, #16
 8002b56:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d032      	beq.n	8002be6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d022      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2205      	movs	r2, #5
 8002b90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0201 	bic.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	60bb      	str	r3, [r7, #8]
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d307      	bcc.n	8002bc0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f2      	bne.n	8002ba4 <HAL_DMA_IRQHandler+0x2cc>
 8002bbe:	e000      	b.n	8002bc2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002bc0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d005      	beq.n	8002be6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	4798      	blx	r3
 8002be2:	e000      	b.n	8002be6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002be4:	bf00      	nop
    }
  }
}
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
 8002bf8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002c08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	2b40      	cmp	r3, #64	@ 0x40
 8002c18:	d108      	bne.n	8002c2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c2a:	e007      	b.n	8002c3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	60da      	str	r2, [r3, #12]
}
 8002c3c:	bf00      	nop
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	3b10      	subs	r3, #16
 8002c58:	4a14      	ldr	r2, [pc, #80]	@ (8002cac <DMA_CalcBaseAndBitshift+0x64>)
 8002c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5e:	091b      	lsrs	r3, r3, #4
 8002c60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c62:	4a13      	ldr	r2, [pc, #76]	@ (8002cb0 <DMA_CalcBaseAndBitshift+0x68>)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	4413      	add	r3, r2
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d909      	bls.n	8002c8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c7e:	f023 0303 	bic.w	r3, r3, #3
 8002c82:	1d1a      	adds	r2, r3, #4
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c88:	e007      	b.n	8002c9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c92:	f023 0303 	bic.w	r3, r3, #3
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	aaaaaaab 	.word	0xaaaaaaab
 8002cb0:	08005eb4 	.word	0x08005eb4

08002cb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d11f      	bne.n	8002d0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	d856      	bhi.n	8002d82 <DMA_CheckFifoParam+0xce>
 8002cd4:	a201      	add	r2, pc, #4	@ (adr r2, 8002cdc <DMA_CheckFifoParam+0x28>)
 8002cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cda:	bf00      	nop
 8002cdc:	08002ced 	.word	0x08002ced
 8002ce0:	08002cff 	.word	0x08002cff
 8002ce4:	08002ced 	.word	0x08002ced
 8002ce8:	08002d83 	.word	0x08002d83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d046      	beq.n	8002d86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cfc:	e043      	b.n	8002d86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d02:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d06:	d140      	bne.n	8002d8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d0c:	e03d      	b.n	8002d8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d16:	d121      	bne.n	8002d5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2b03      	cmp	r3, #3
 8002d1c:	d837      	bhi.n	8002d8e <DMA_CheckFifoParam+0xda>
 8002d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8002d24 <DMA_CheckFifoParam+0x70>)
 8002d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d24:	08002d35 	.word	0x08002d35
 8002d28:	08002d3b 	.word	0x08002d3b
 8002d2c:	08002d35 	.word	0x08002d35
 8002d30:	08002d4d 	.word	0x08002d4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	73fb      	strb	r3, [r7, #15]
      break;
 8002d38:	e030      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d025      	beq.n	8002d92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d4a:	e022      	b.n	8002d92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d50:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d54:	d11f      	bne.n	8002d96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d5a:	e01c      	b.n	8002d96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d903      	bls.n	8002d6a <DMA_CheckFifoParam+0xb6>
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d003      	beq.n	8002d70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d68:	e018      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	73fb      	strb	r3, [r7, #15]
      break;
 8002d6e:	e015      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00e      	beq.n	8002d9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d80:	e00b      	b.n	8002d9a <DMA_CheckFifoParam+0xe6>
      break;
 8002d82:	bf00      	nop
 8002d84:	e00a      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
      break;
 8002d86:	bf00      	nop
 8002d88:	e008      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
      break;
 8002d8a:	bf00      	nop
 8002d8c:	e006      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
      break;
 8002d8e:	bf00      	nop
 8002d90:	e004      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
      break;
 8002d92:	bf00      	nop
 8002d94:	e002      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
      break;   
 8002d96:	bf00      	nop
 8002d98:	e000      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
      break;
 8002d9a:	bf00      	nop
    }
  } 
  
  return status; 
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop

08002dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b089      	sub	sp, #36	@ 0x24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61fb      	str	r3, [r7, #28]
 8002dc6:	e159      	b.n	800307c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dc8:	2201      	movs	r2, #1
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	f040 8148 	bne.w	8003076 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d005      	beq.n	8002dfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d130      	bne.n	8002e60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	2203      	movs	r2, #3
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4013      	ands	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68da      	ldr	r2, [r3, #12]
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e34:	2201      	movs	r2, #1
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4013      	ands	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	091b      	lsrs	r3, r3, #4
 8002e4a:	f003 0201 	and.w	r2, r3, #1
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f003 0303 	and.w	r3, r3, #3
 8002e68:	2b03      	cmp	r3, #3
 8002e6a:	d017      	beq.n	8002e9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	2203      	movs	r2, #3
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	4013      	ands	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 0303 	and.w	r3, r3, #3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d123      	bne.n	8002ef0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	08da      	lsrs	r2, r3, #3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3208      	adds	r2, #8
 8002eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	220f      	movs	r2, #15
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	691a      	ldr	r2, [r3, #16]
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	08da      	lsrs	r2, r3, #3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	3208      	adds	r2, #8
 8002eea:	69b9      	ldr	r1, [r7, #24]
 8002eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	2203      	movs	r2, #3
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4013      	ands	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 0203 	and.w	r2, r3, #3
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 80a2 	beq.w	8003076 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f32:	2300      	movs	r3, #0
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	4b57      	ldr	r3, [pc, #348]	@ (8003094 <HAL_GPIO_Init+0x2e8>)
 8002f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3a:	4a56      	ldr	r2, [pc, #344]	@ (8003094 <HAL_GPIO_Init+0x2e8>)
 8002f3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f40:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f42:	4b54      	ldr	r3, [pc, #336]	@ (8003094 <HAL_GPIO_Init+0x2e8>)
 8002f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f4e:	4a52      	ldr	r2, [pc, #328]	@ (8003098 <HAL_GPIO_Init+0x2ec>)
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	089b      	lsrs	r3, r3, #2
 8002f54:	3302      	adds	r3, #2
 8002f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	220f      	movs	r2, #15
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a49      	ldr	r2, [pc, #292]	@ (800309c <HAL_GPIO_Init+0x2f0>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d019      	beq.n	8002fae <HAL_GPIO_Init+0x202>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a48      	ldr	r2, [pc, #288]	@ (80030a0 <HAL_GPIO_Init+0x2f4>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d013      	beq.n	8002faa <HAL_GPIO_Init+0x1fe>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a47      	ldr	r2, [pc, #284]	@ (80030a4 <HAL_GPIO_Init+0x2f8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d00d      	beq.n	8002fa6 <HAL_GPIO_Init+0x1fa>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a46      	ldr	r2, [pc, #280]	@ (80030a8 <HAL_GPIO_Init+0x2fc>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d007      	beq.n	8002fa2 <HAL_GPIO_Init+0x1f6>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a45      	ldr	r2, [pc, #276]	@ (80030ac <HAL_GPIO_Init+0x300>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d101      	bne.n	8002f9e <HAL_GPIO_Init+0x1f2>
 8002f9a:	2304      	movs	r3, #4
 8002f9c:	e008      	b.n	8002fb0 <HAL_GPIO_Init+0x204>
 8002f9e:	2307      	movs	r3, #7
 8002fa0:	e006      	b.n	8002fb0 <HAL_GPIO_Init+0x204>
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e004      	b.n	8002fb0 <HAL_GPIO_Init+0x204>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	e002      	b.n	8002fb0 <HAL_GPIO_Init+0x204>
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <HAL_GPIO_Init+0x204>
 8002fae:	2300      	movs	r3, #0
 8002fb0:	69fa      	ldr	r2, [r7, #28]
 8002fb2:	f002 0203 	and.w	r2, r2, #3
 8002fb6:	0092      	lsls	r2, r2, #2
 8002fb8:	4093      	lsls	r3, r2
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fc0:	4935      	ldr	r1, [pc, #212]	@ (8003098 <HAL_GPIO_Init+0x2ec>)
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	089b      	lsrs	r3, r3, #2
 8002fc6:	3302      	adds	r3, #2
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fce:	4b38      	ldr	r3, [pc, #224]	@ (80030b0 <HAL_GPIO_Init+0x304>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ff2:	4a2f      	ldr	r2, [pc, #188]	@ (80030b0 <HAL_GPIO_Init+0x304>)
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ff8:	4b2d      	ldr	r3, [pc, #180]	@ (80030b0 <HAL_GPIO_Init+0x304>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	43db      	mvns	r3, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4313      	orrs	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800301c:	4a24      	ldr	r2, [pc, #144]	@ (80030b0 <HAL_GPIO_Init+0x304>)
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003022:	4b23      	ldr	r3, [pc, #140]	@ (80030b0 <HAL_GPIO_Init+0x304>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	43db      	mvns	r3, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4013      	ands	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003046:	4a1a      	ldr	r2, [pc, #104]	@ (80030b0 <HAL_GPIO_Init+0x304>)
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800304c:	4b18      	ldr	r3, [pc, #96]	@ (80030b0 <HAL_GPIO_Init+0x304>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	43db      	mvns	r3, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4013      	ands	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	4313      	orrs	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003070:	4a0f      	ldr	r2, [pc, #60]	@ (80030b0 <HAL_GPIO_Init+0x304>)
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	3301      	adds	r3, #1
 800307a:	61fb      	str	r3, [r7, #28]
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	2b0f      	cmp	r3, #15
 8003080:	f67f aea2 	bls.w	8002dc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003084:	bf00      	nop
 8003086:	bf00      	nop
 8003088:	3724      	adds	r7, #36	@ 0x24
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40023800 	.word	0x40023800
 8003098:	40013800 	.word	0x40013800
 800309c:	40020000 	.word	0x40020000
 80030a0:	40020400 	.word	0x40020400
 80030a4:	40020800 	.word	0x40020800
 80030a8:	40020c00 	.word	0x40020c00
 80030ac:	40021000 	.word	0x40021000
 80030b0:	40013c00 	.word	0x40013c00

080030b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e267      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d075      	beq.n	80031be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030d2:	4b88      	ldr	r3, [pc, #544]	@ (80032f4 <HAL_RCC_OscConfig+0x240>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 030c 	and.w	r3, r3, #12
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d00c      	beq.n	80030f8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030de:	4b85      	ldr	r3, [pc, #532]	@ (80032f4 <HAL_RCC_OscConfig+0x240>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d112      	bne.n	8003110 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ea:	4b82      	ldr	r3, [pc, #520]	@ (80032f4 <HAL_RCC_OscConfig+0x240>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030f6:	d10b      	bne.n	8003110 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f8:	4b7e      	ldr	r3, [pc, #504]	@ (80032f4 <HAL_RCC_OscConfig+0x240>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d05b      	beq.n	80031bc <HAL_RCC_OscConfig+0x108>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d157      	bne.n	80031bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e242      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003118:	d106      	bne.n	8003128 <HAL_RCC_OscConfig+0x74>
 800311a:	4b76      	ldr	r3, [pc, #472]	@ (80032f4 <HAL_RCC_OscConfig+0x240>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a75      	ldr	r2, [pc, #468]	@ (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003120:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	e01d      	b.n	8003164 <HAL_RCC_OscConfig+0xb0>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003130:	d10c      	bne.n	800314c <HAL_RCC_OscConfig+0x98>
 8003132:	4b70      	ldr	r3, [pc, #448]	@ (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a6f      	ldr	r2, [pc, #444]	@ (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003138:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	4b6d      	ldr	r3, [pc, #436]	@ (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a6c      	ldr	r2, [pc, #432]	@ (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003144:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	e00b      	b.n	8003164 <HAL_RCC_OscConfig+0xb0>
 800314c:	4b69      	ldr	r3, [pc, #420]	@ (80032f4 <HAL_RCC_OscConfig+0x240>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a68      	ldr	r2, [pc, #416]	@ (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003152:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003156:	6013      	str	r3, [r2, #0]
 8003158:	4b66      	ldr	r3, [pc, #408]	@ (80032f4 <HAL_RCC_OscConfig+0x240>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a65      	ldr	r2, [pc, #404]	@ (80032f4 <HAL_RCC_OscConfig+0x240>)
 800315e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003162:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d013      	beq.n	8003194 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316c:	f7ff f88c 	bl	8002288 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003174:	f7ff f888 	bl	8002288 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b64      	cmp	r3, #100	@ 0x64
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e207      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003186:	4b5b      	ldr	r3, [pc, #364]	@ (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f0      	beq.n	8003174 <HAL_RCC_OscConfig+0xc0>
 8003192:	e014      	b.n	80031be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003194:	f7ff f878 	bl	8002288 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800319c:	f7ff f874 	bl	8002288 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b64      	cmp	r3, #100	@ 0x64
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e1f3      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ae:	4b51      	ldr	r3, [pc, #324]	@ (80032f4 <HAL_RCC_OscConfig+0x240>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f0      	bne.n	800319c <HAL_RCC_OscConfig+0xe8>
 80031ba:	e000      	b.n	80031be <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d063      	beq.n	8003292 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031ca:	4b4a      	ldr	r3, [pc, #296]	@ (80032f4 <HAL_RCC_OscConfig+0x240>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 030c 	and.w	r3, r3, #12
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00b      	beq.n	80031ee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031d6:	4b47      	ldr	r3, [pc, #284]	@ (80032f4 <HAL_RCC_OscConfig+0x240>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d11c      	bne.n	800321c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031e2:	4b44      	ldr	r3, [pc, #272]	@ (80032f4 <HAL_RCC_OscConfig+0x240>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d116      	bne.n	800321c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ee:	4b41      	ldr	r3, [pc, #260]	@ (80032f4 <HAL_RCC_OscConfig+0x240>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d005      	beq.n	8003206 <HAL_RCC_OscConfig+0x152>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d001      	beq.n	8003206 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e1c7      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003206:	4b3b      	ldr	r3, [pc, #236]	@ (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	4937      	ldr	r1, [pc, #220]	@ (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003216:	4313      	orrs	r3, r2
 8003218:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800321a:	e03a      	b.n	8003292 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d020      	beq.n	8003266 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003224:	4b34      	ldr	r3, [pc, #208]	@ (80032f8 <HAL_RCC_OscConfig+0x244>)
 8003226:	2201      	movs	r2, #1
 8003228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322a:	f7ff f82d 	bl	8002288 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003232:	f7ff f829 	bl	8002288 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e1a8      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003244:	4b2b      	ldr	r3, [pc, #172]	@ (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0f0      	beq.n	8003232 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003250:	4b28      	ldr	r3, [pc, #160]	@ (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	4925      	ldr	r1, [pc, #148]	@ (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003260:	4313      	orrs	r3, r2
 8003262:	600b      	str	r3, [r1, #0]
 8003264:	e015      	b.n	8003292 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003266:	4b24      	ldr	r3, [pc, #144]	@ (80032f8 <HAL_RCC_OscConfig+0x244>)
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326c:	f7ff f80c 	bl	8002288 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003274:	f7ff f808 	bl	8002288 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e187      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003286:	4b1b      	ldr	r3, [pc, #108]	@ (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	d036      	beq.n	800330c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d016      	beq.n	80032d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032a6:	4b15      	ldr	r3, [pc, #84]	@ (80032fc <HAL_RCC_OscConfig+0x248>)
 80032a8:	2201      	movs	r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ac:	f7fe ffec 	bl	8002288 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032b4:	f7fe ffe8 	bl	8002288 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e167      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032c6:	4b0b      	ldr	r3, [pc, #44]	@ (80032f4 <HAL_RCC_OscConfig+0x240>)
 80032c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0f0      	beq.n	80032b4 <HAL_RCC_OscConfig+0x200>
 80032d2:	e01b      	b.n	800330c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032d4:	4b09      	ldr	r3, [pc, #36]	@ (80032fc <HAL_RCC_OscConfig+0x248>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032da:	f7fe ffd5 	bl	8002288 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e0:	e00e      	b.n	8003300 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032e2:	f7fe ffd1 	bl	8002288 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d907      	bls.n	8003300 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e150      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
 80032f4:	40023800 	.word	0x40023800
 80032f8:	42470000 	.word	0x42470000
 80032fc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003300:	4b88      	ldr	r3, [pc, #544]	@ (8003524 <HAL_RCC_OscConfig+0x470>)
 8003302:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1ea      	bne.n	80032e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 8097 	beq.w	8003448 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800331a:	2300      	movs	r3, #0
 800331c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800331e:	4b81      	ldr	r3, [pc, #516]	@ (8003524 <HAL_RCC_OscConfig+0x470>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10f      	bne.n	800334a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800332a:	2300      	movs	r3, #0
 800332c:	60bb      	str	r3, [r7, #8]
 800332e:	4b7d      	ldr	r3, [pc, #500]	@ (8003524 <HAL_RCC_OscConfig+0x470>)
 8003330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003332:	4a7c      	ldr	r2, [pc, #496]	@ (8003524 <HAL_RCC_OscConfig+0x470>)
 8003334:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003338:	6413      	str	r3, [r2, #64]	@ 0x40
 800333a:	4b7a      	ldr	r3, [pc, #488]	@ (8003524 <HAL_RCC_OscConfig+0x470>)
 800333c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003342:	60bb      	str	r3, [r7, #8]
 8003344:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003346:	2301      	movs	r3, #1
 8003348:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334a:	4b77      	ldr	r3, [pc, #476]	@ (8003528 <HAL_RCC_OscConfig+0x474>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003352:	2b00      	cmp	r3, #0
 8003354:	d118      	bne.n	8003388 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003356:	4b74      	ldr	r3, [pc, #464]	@ (8003528 <HAL_RCC_OscConfig+0x474>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a73      	ldr	r2, [pc, #460]	@ (8003528 <HAL_RCC_OscConfig+0x474>)
 800335c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003360:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003362:	f7fe ff91 	bl	8002288 <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800336a:	f7fe ff8d 	bl	8002288 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e10c      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800337c:	4b6a      	ldr	r3, [pc, #424]	@ (8003528 <HAL_RCC_OscConfig+0x474>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0f0      	beq.n	800336a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d106      	bne.n	800339e <HAL_RCC_OscConfig+0x2ea>
 8003390:	4b64      	ldr	r3, [pc, #400]	@ (8003524 <HAL_RCC_OscConfig+0x470>)
 8003392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003394:	4a63      	ldr	r2, [pc, #396]	@ (8003524 <HAL_RCC_OscConfig+0x470>)
 8003396:	f043 0301 	orr.w	r3, r3, #1
 800339a:	6713      	str	r3, [r2, #112]	@ 0x70
 800339c:	e01c      	b.n	80033d8 <HAL_RCC_OscConfig+0x324>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	2b05      	cmp	r3, #5
 80033a4:	d10c      	bne.n	80033c0 <HAL_RCC_OscConfig+0x30c>
 80033a6:	4b5f      	ldr	r3, [pc, #380]	@ (8003524 <HAL_RCC_OscConfig+0x470>)
 80033a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033aa:	4a5e      	ldr	r2, [pc, #376]	@ (8003524 <HAL_RCC_OscConfig+0x470>)
 80033ac:	f043 0304 	orr.w	r3, r3, #4
 80033b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80033b2:	4b5c      	ldr	r3, [pc, #368]	@ (8003524 <HAL_RCC_OscConfig+0x470>)
 80033b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b6:	4a5b      	ldr	r2, [pc, #364]	@ (8003524 <HAL_RCC_OscConfig+0x470>)
 80033b8:	f043 0301 	orr.w	r3, r3, #1
 80033bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80033be:	e00b      	b.n	80033d8 <HAL_RCC_OscConfig+0x324>
 80033c0:	4b58      	ldr	r3, [pc, #352]	@ (8003524 <HAL_RCC_OscConfig+0x470>)
 80033c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c4:	4a57      	ldr	r2, [pc, #348]	@ (8003524 <HAL_RCC_OscConfig+0x470>)
 80033c6:	f023 0301 	bic.w	r3, r3, #1
 80033ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80033cc:	4b55      	ldr	r3, [pc, #340]	@ (8003524 <HAL_RCC_OscConfig+0x470>)
 80033ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d0:	4a54      	ldr	r2, [pc, #336]	@ (8003524 <HAL_RCC_OscConfig+0x470>)
 80033d2:	f023 0304 	bic.w	r3, r3, #4
 80033d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d015      	beq.n	800340c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e0:	f7fe ff52 	bl	8002288 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e6:	e00a      	b.n	80033fe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e8:	f7fe ff4e 	bl	8002288 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e0cb      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033fe:	4b49      	ldr	r3, [pc, #292]	@ (8003524 <HAL_RCC_OscConfig+0x470>)
 8003400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0ee      	beq.n	80033e8 <HAL_RCC_OscConfig+0x334>
 800340a:	e014      	b.n	8003436 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800340c:	f7fe ff3c 	bl	8002288 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003412:	e00a      	b.n	800342a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003414:	f7fe ff38 	bl	8002288 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003422:	4293      	cmp	r3, r2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e0b5      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800342a:	4b3e      	ldr	r3, [pc, #248]	@ (8003524 <HAL_RCC_OscConfig+0x470>)
 800342c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1ee      	bne.n	8003414 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003436:	7dfb      	ldrb	r3, [r7, #23]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d105      	bne.n	8003448 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800343c:	4b39      	ldr	r3, [pc, #228]	@ (8003524 <HAL_RCC_OscConfig+0x470>)
 800343e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003440:	4a38      	ldr	r2, [pc, #224]	@ (8003524 <HAL_RCC_OscConfig+0x470>)
 8003442:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003446:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 80a1 	beq.w	8003594 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003452:	4b34      	ldr	r3, [pc, #208]	@ (8003524 <HAL_RCC_OscConfig+0x470>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 030c 	and.w	r3, r3, #12
 800345a:	2b08      	cmp	r3, #8
 800345c:	d05c      	beq.n	8003518 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d141      	bne.n	80034ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003466:	4b31      	ldr	r3, [pc, #196]	@ (800352c <HAL_RCC_OscConfig+0x478>)
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346c:	f7fe ff0c 	bl	8002288 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003474:	f7fe ff08 	bl	8002288 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e087      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003486:	4b27      	ldr	r3, [pc, #156]	@ (8003524 <HAL_RCC_OscConfig+0x470>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69da      	ldr	r2, [r3, #28]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a0:	019b      	lsls	r3, r3, #6
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a8:	085b      	lsrs	r3, r3, #1
 80034aa:	3b01      	subs	r3, #1
 80034ac:	041b      	lsls	r3, r3, #16
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b4:	061b      	lsls	r3, r3, #24
 80034b6:	491b      	ldr	r1, [pc, #108]	@ (8003524 <HAL_RCC_OscConfig+0x470>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034bc:	4b1b      	ldr	r3, [pc, #108]	@ (800352c <HAL_RCC_OscConfig+0x478>)
 80034be:	2201      	movs	r2, #1
 80034c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c2:	f7fe fee1 	bl	8002288 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ca:	f7fe fedd 	bl	8002288 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e05c      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034dc:	4b11      	ldr	r3, [pc, #68]	@ (8003524 <HAL_RCC_OscConfig+0x470>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0f0      	beq.n	80034ca <HAL_RCC_OscConfig+0x416>
 80034e8:	e054      	b.n	8003594 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ea:	4b10      	ldr	r3, [pc, #64]	@ (800352c <HAL_RCC_OscConfig+0x478>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f0:	f7fe feca 	bl	8002288 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f8:	f7fe fec6 	bl	8002288 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e045      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350a:	4b06      	ldr	r3, [pc, #24]	@ (8003524 <HAL_RCC_OscConfig+0x470>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f0      	bne.n	80034f8 <HAL_RCC_OscConfig+0x444>
 8003516:	e03d      	b.n	8003594 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d107      	bne.n	8003530 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e038      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
 8003524:	40023800 	.word	0x40023800
 8003528:	40007000 	.word	0x40007000
 800352c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003530:	4b1b      	ldr	r3, [pc, #108]	@ (80035a0 <HAL_RCC_OscConfig+0x4ec>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d028      	beq.n	8003590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003548:	429a      	cmp	r2, r3
 800354a:	d121      	bne.n	8003590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003556:	429a      	cmp	r2, r3
 8003558:	d11a      	bne.n	8003590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003560:	4013      	ands	r3, r2
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003566:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003568:	4293      	cmp	r3, r2
 800356a:	d111      	bne.n	8003590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003576:	085b      	lsrs	r3, r3, #1
 8003578:	3b01      	subs	r3, #1
 800357a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800357c:	429a      	cmp	r2, r3
 800357e:	d107      	bne.n	8003590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800358c:	429a      	cmp	r2, r3
 800358e:	d001      	beq.n	8003594 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e000      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40023800 	.word	0x40023800

080035a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e0cc      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035b8:	4b68      	ldr	r3, [pc, #416]	@ (800375c <HAL_RCC_ClockConfig+0x1b8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d90c      	bls.n	80035e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c6:	4b65      	ldr	r3, [pc, #404]	@ (800375c <HAL_RCC_ClockConfig+0x1b8>)
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ce:	4b63      	ldr	r3, [pc, #396]	@ (800375c <HAL_RCC_ClockConfig+0x1b8>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d001      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e0b8      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d020      	beq.n	800362e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035f8:	4b59      	ldr	r3, [pc, #356]	@ (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	4a58      	ldr	r2, [pc, #352]	@ (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003602:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b00      	cmp	r3, #0
 800360e:	d005      	beq.n	800361c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003610:	4b53      	ldr	r3, [pc, #332]	@ (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	4a52      	ldr	r2, [pc, #328]	@ (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800361a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800361c:	4b50      	ldr	r3, [pc, #320]	@ (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	494d      	ldr	r1, [pc, #308]	@ (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	4313      	orrs	r3, r2
 800362c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d044      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d107      	bne.n	8003652 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003642:	4b47      	ldr	r3, [pc, #284]	@ (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d119      	bne.n	8003682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e07f      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2b02      	cmp	r3, #2
 8003658:	d003      	beq.n	8003662 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800365e:	2b03      	cmp	r3, #3
 8003660:	d107      	bne.n	8003672 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003662:	4b3f      	ldr	r3, [pc, #252]	@ (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d109      	bne.n	8003682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e06f      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003672:	4b3b      	ldr	r3, [pc, #236]	@ (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e067      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003682:	4b37      	ldr	r3, [pc, #220]	@ (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f023 0203 	bic.w	r2, r3, #3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	4934      	ldr	r1, [pc, #208]	@ (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003690:	4313      	orrs	r3, r2
 8003692:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003694:	f7fe fdf8 	bl	8002288 <HAL_GetTick>
 8003698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369a:	e00a      	b.n	80036b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800369c:	f7fe fdf4 	bl	8002288 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e04f      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b2:	4b2b      	ldr	r3, [pc, #172]	@ (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 020c 	and.w	r2, r3, #12
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d1eb      	bne.n	800369c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036c4:	4b25      	ldr	r3, [pc, #148]	@ (800375c <HAL_RCC_ClockConfig+0x1b8>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d20c      	bcs.n	80036ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d2:	4b22      	ldr	r3, [pc, #136]	@ (800375c <HAL_RCC_ClockConfig+0x1b8>)
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036da:	4b20      	ldr	r3, [pc, #128]	@ (800375c <HAL_RCC_ClockConfig+0x1b8>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d001      	beq.n	80036ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e032      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d008      	beq.n	800370a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036f8:	4b19      	ldr	r3, [pc, #100]	@ (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	4916      	ldr	r1, [pc, #88]	@ (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	4313      	orrs	r3, r2
 8003708:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	2b00      	cmp	r3, #0
 8003714:	d009      	beq.n	800372a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003716:	4b12      	ldr	r3, [pc, #72]	@ (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	490e      	ldr	r1, [pc, #56]	@ (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	4313      	orrs	r3, r2
 8003728:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800372a:	f000 f821 	bl	8003770 <HAL_RCC_GetSysClockFreq>
 800372e:	4602      	mov	r2, r0
 8003730:	4b0b      	ldr	r3, [pc, #44]	@ (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	091b      	lsrs	r3, r3, #4
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	490a      	ldr	r1, [pc, #40]	@ (8003764 <HAL_RCC_ClockConfig+0x1c0>)
 800373c:	5ccb      	ldrb	r3, [r1, r3]
 800373e:	fa22 f303 	lsr.w	r3, r2, r3
 8003742:	4a09      	ldr	r2, [pc, #36]	@ (8003768 <HAL_RCC_ClockConfig+0x1c4>)
 8003744:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003746:	4b09      	ldr	r3, [pc, #36]	@ (800376c <HAL_RCC_ClockConfig+0x1c8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f7fe fd58 	bl	8002200 <HAL_InitTick>

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	40023c00 	.word	0x40023c00
 8003760:	40023800 	.word	0x40023800
 8003764:	08005e9c 	.word	0x08005e9c
 8003768:	2000001c 	.word	0x2000001c
 800376c:	20000020 	.word	0x20000020

08003770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003774:	b090      	sub	sp, #64	@ 0x40
 8003776:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003778:	2300      	movs	r3, #0
 800377a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800377c:	2300      	movs	r3, #0
 800377e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003780:	2300      	movs	r3, #0
 8003782:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003788:	4b59      	ldr	r3, [pc, #356]	@ (80038f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f003 030c 	and.w	r3, r3, #12
 8003790:	2b08      	cmp	r3, #8
 8003792:	d00d      	beq.n	80037b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003794:	2b08      	cmp	r3, #8
 8003796:	f200 80a1 	bhi.w	80038dc <HAL_RCC_GetSysClockFreq+0x16c>
 800379a:	2b00      	cmp	r3, #0
 800379c:	d002      	beq.n	80037a4 <HAL_RCC_GetSysClockFreq+0x34>
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d003      	beq.n	80037aa <HAL_RCC_GetSysClockFreq+0x3a>
 80037a2:	e09b      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037a4:	4b53      	ldr	r3, [pc, #332]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80037a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80037a8:	e09b      	b.n	80038e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037aa:	4b53      	ldr	r3, [pc, #332]	@ (80038f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80037ac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80037ae:	e098      	b.n	80038e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037b0:	4b4f      	ldr	r3, [pc, #316]	@ (80038f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037b8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037ba:	4b4d      	ldr	r3, [pc, #308]	@ (80038f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d028      	beq.n	8003818 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037c6:	4b4a      	ldr	r3, [pc, #296]	@ (80038f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	099b      	lsrs	r3, r3, #6
 80037cc:	2200      	movs	r2, #0
 80037ce:	623b      	str	r3, [r7, #32]
 80037d0:	627a      	str	r2, [r7, #36]	@ 0x24
 80037d2:	6a3b      	ldr	r3, [r7, #32]
 80037d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80037d8:	2100      	movs	r1, #0
 80037da:	4b47      	ldr	r3, [pc, #284]	@ (80038f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80037dc:	fb03 f201 	mul.w	r2, r3, r1
 80037e0:	2300      	movs	r3, #0
 80037e2:	fb00 f303 	mul.w	r3, r0, r3
 80037e6:	4413      	add	r3, r2
 80037e8:	4a43      	ldr	r2, [pc, #268]	@ (80038f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80037ea:	fba0 1202 	umull	r1, r2, r0, r2
 80037ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037f0:	460a      	mov	r2, r1
 80037f2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80037f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037f6:	4413      	add	r3, r2
 80037f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037fc:	2200      	movs	r2, #0
 80037fe:	61bb      	str	r3, [r7, #24]
 8003800:	61fa      	str	r2, [r7, #28]
 8003802:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003806:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800380a:	f7fc fd39 	bl	8000280 <__aeabi_uldivmod>
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	4613      	mov	r3, r2
 8003814:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003816:	e053      	b.n	80038c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003818:	4b35      	ldr	r3, [pc, #212]	@ (80038f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	099b      	lsrs	r3, r3, #6
 800381e:	2200      	movs	r2, #0
 8003820:	613b      	str	r3, [r7, #16]
 8003822:	617a      	str	r2, [r7, #20]
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800382a:	f04f 0b00 	mov.w	fp, #0
 800382e:	4652      	mov	r2, sl
 8003830:	465b      	mov	r3, fp
 8003832:	f04f 0000 	mov.w	r0, #0
 8003836:	f04f 0100 	mov.w	r1, #0
 800383a:	0159      	lsls	r1, r3, #5
 800383c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003840:	0150      	lsls	r0, r2, #5
 8003842:	4602      	mov	r2, r0
 8003844:	460b      	mov	r3, r1
 8003846:	ebb2 080a 	subs.w	r8, r2, sl
 800384a:	eb63 090b 	sbc.w	r9, r3, fp
 800384e:	f04f 0200 	mov.w	r2, #0
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800385a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800385e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003862:	ebb2 0408 	subs.w	r4, r2, r8
 8003866:	eb63 0509 	sbc.w	r5, r3, r9
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	f04f 0300 	mov.w	r3, #0
 8003872:	00eb      	lsls	r3, r5, #3
 8003874:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003878:	00e2      	lsls	r2, r4, #3
 800387a:	4614      	mov	r4, r2
 800387c:	461d      	mov	r5, r3
 800387e:	eb14 030a 	adds.w	r3, r4, sl
 8003882:	603b      	str	r3, [r7, #0]
 8003884:	eb45 030b 	adc.w	r3, r5, fp
 8003888:	607b      	str	r3, [r7, #4]
 800388a:	f04f 0200 	mov.w	r2, #0
 800388e:	f04f 0300 	mov.w	r3, #0
 8003892:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003896:	4629      	mov	r1, r5
 8003898:	028b      	lsls	r3, r1, #10
 800389a:	4621      	mov	r1, r4
 800389c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038a0:	4621      	mov	r1, r4
 80038a2:	028a      	lsls	r2, r1, #10
 80038a4:	4610      	mov	r0, r2
 80038a6:	4619      	mov	r1, r3
 80038a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038aa:	2200      	movs	r2, #0
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	60fa      	str	r2, [r7, #12]
 80038b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038b4:	f7fc fce4 	bl	8000280 <__aeabi_uldivmod>
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	4613      	mov	r3, r2
 80038be:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80038c0:	4b0b      	ldr	r3, [pc, #44]	@ (80038f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	0c1b      	lsrs	r3, r3, #16
 80038c6:	f003 0303 	and.w	r3, r3, #3
 80038ca:	3301      	adds	r3, #1
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80038d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80038d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80038da:	e002      	b.n	80038e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038dc:	4b05      	ldr	r3, [pc, #20]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80038de:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80038e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3740      	adds	r7, #64	@ 0x40
 80038e8:	46bd      	mov	sp, r7
 80038ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ee:	bf00      	nop
 80038f0:	40023800 	.word	0x40023800
 80038f4:	00f42400 	.word	0x00f42400
 80038f8:	017d7840 	.word	0x017d7840

080038fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003900:	4b03      	ldr	r3, [pc, #12]	@ (8003910 <HAL_RCC_GetHCLKFreq+0x14>)
 8003902:	681b      	ldr	r3, [r3, #0]
}
 8003904:	4618      	mov	r0, r3
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	2000001c 	.word	0x2000001c

08003914 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003918:	f7ff fff0 	bl	80038fc <HAL_RCC_GetHCLKFreq>
 800391c:	4602      	mov	r2, r0
 800391e:	4b05      	ldr	r3, [pc, #20]	@ (8003934 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	0a9b      	lsrs	r3, r3, #10
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	4903      	ldr	r1, [pc, #12]	@ (8003938 <HAL_RCC_GetPCLK1Freq+0x24>)
 800392a:	5ccb      	ldrb	r3, [r1, r3]
 800392c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003930:	4618      	mov	r0, r3
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40023800 	.word	0x40023800
 8003938:	08005eac 	.word	0x08005eac

0800393c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003940:	f7ff ffdc 	bl	80038fc <HAL_RCC_GetHCLKFreq>
 8003944:	4602      	mov	r2, r0
 8003946:	4b05      	ldr	r3, [pc, #20]	@ (800395c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	0b5b      	lsrs	r3, r3, #13
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	4903      	ldr	r1, [pc, #12]	@ (8003960 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003952:	5ccb      	ldrb	r3, [r1, r3]
 8003954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003958:	4618      	mov	r0, r3
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40023800 	.word	0x40023800
 8003960:	08005eac 	.word	0x08005eac

08003964 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e042      	b.n	80039fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d106      	bne.n	8003990 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7fe fac6 	bl	8001f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2224      	movs	r2, #36	@ 0x24
 8003994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68da      	ldr	r2, [r3, #12]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 ff85 	bl	80048b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	691a      	ldr	r2, [r3, #16]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	695a      	ldr	r2, [r3, #20]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68da      	ldr	r2, [r3, #12]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2220      	movs	r2, #32
 80039f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b08a      	sub	sp, #40	@ 0x28
 8003a08:	af02      	add	r7, sp, #8
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	603b      	str	r3, [r7, #0]
 8003a10:	4613      	mov	r3, r2
 8003a12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b20      	cmp	r3, #32
 8003a22:	d175      	bne.n	8003b10 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d002      	beq.n	8003a30 <HAL_UART_Transmit+0x2c>
 8003a2a:	88fb      	ldrh	r3, [r7, #6]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e06e      	b.n	8003b12 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2221      	movs	r2, #33	@ 0x21
 8003a3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a42:	f7fe fc21 	bl	8002288 <HAL_GetTick>
 8003a46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	88fa      	ldrh	r2, [r7, #6]
 8003a4c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	88fa      	ldrh	r2, [r7, #6]
 8003a52:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a5c:	d108      	bne.n	8003a70 <HAL_UART_Transmit+0x6c>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d104      	bne.n	8003a70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a66:	2300      	movs	r3, #0
 8003a68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	61bb      	str	r3, [r7, #24]
 8003a6e:	e003      	b.n	8003a78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a74:	2300      	movs	r3, #0
 8003a76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a78:	e02e      	b.n	8003ad8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	2200      	movs	r2, #0
 8003a82:	2180      	movs	r1, #128	@ 0x80
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 fc5d 	bl	8004344 <UART_WaitOnFlagUntilTimeout>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d005      	beq.n	8003a9c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e03a      	b.n	8003b12 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10b      	bne.n	8003aba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ab0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	3302      	adds	r3, #2
 8003ab6:	61bb      	str	r3, [r7, #24]
 8003ab8:	e007      	b.n	8003aca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	781a      	ldrb	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1cb      	bne.n	8003a7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	2140      	movs	r1, #64	@ 0x40
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 fc29 	bl	8004344 <UART_WaitOnFlagUntilTimeout>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d005      	beq.n	8003b04 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e006      	b.n	8003b12 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	e000      	b.n	8003b12 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b10:	2302      	movs	r3, #2
  }
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3720      	adds	r7, #32
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b08c      	sub	sp, #48	@ 0x30
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	60f8      	str	r0, [r7, #12]
 8003b22:	60b9      	str	r1, [r7, #8]
 8003b24:	4613      	mov	r3, r2
 8003b26:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b20      	cmp	r3, #32
 8003b32:	d14a      	bne.n	8003bca <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d002      	beq.n	8003b40 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003b3a:	88fb      	ldrh	r3, [r7, #6]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e043      	b.n	8003bcc <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2201      	movs	r2, #1
 8003b48:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003b50:	88fb      	ldrh	r3, [r7, #6]
 8003b52:	461a      	mov	r2, r3
 8003b54:	68b9      	ldr	r1, [r7, #8]
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 fc4e 	bl	80043f8 <UART_Start_Receive_DMA>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003b62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d12c      	bne.n	8003bc4 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d125      	bne.n	8003bbe <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b72:	2300      	movs	r3, #0
 8003b74:	613b      	str	r3, [r7, #16]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	613b      	str	r3, [r7, #16]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	613b      	str	r3, [r7, #16]
 8003b86:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	330c      	adds	r3, #12
 8003b8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	e853 3f00 	ldrex	r3, [r3]
 8003b96:	617b      	str	r3, [r7, #20]
   return(result);
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f043 0310 	orr.w	r3, r3, #16
 8003b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	330c      	adds	r3, #12
 8003ba6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ba8:	627a      	str	r2, [r7, #36]	@ 0x24
 8003baa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bac:	6a39      	ldr	r1, [r7, #32]
 8003bae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bb0:	e841 2300 	strex	r3, r2, [r1]
 8003bb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1e5      	bne.n	8003b88 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8003bbc:	e002      	b.n	8003bc4 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8003bc4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003bc8:	e000      	b.n	8003bcc <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8003bca:	2302      	movs	r3, #2
  }
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3730      	adds	r7, #48	@ 0x30
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b0ba      	sub	sp, #232	@ 0xe8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003c00:	2300      	movs	r3, #0
 8003c02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003c12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10f      	bne.n	8003c3a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c1e:	f003 0320 	and.w	r3, r3, #32
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d009      	beq.n	8003c3a <HAL_UART_IRQHandler+0x66>
 8003c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c2a:	f003 0320 	and.w	r3, r3, #32
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 fd81 	bl	800473a <UART_Receive_IT>
      return;
 8003c38:	e25b      	b.n	80040f2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 80de 	beq.w	8003e00 <HAL_UART_IRQHandler+0x22c>
 8003c44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d106      	bne.n	8003c5e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c54:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 80d1 	beq.w	8003e00 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00b      	beq.n	8003c82 <HAL_UART_IRQHandler+0xae>
 8003c6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d005      	beq.n	8003c82 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7a:	f043 0201 	orr.w	r2, r3, #1
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c86:	f003 0304 	and.w	r3, r3, #4
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00b      	beq.n	8003ca6 <HAL_UART_IRQHandler+0xd2>
 8003c8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d005      	beq.n	8003ca6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c9e:	f043 0202 	orr.w	r2, r3, #2
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00b      	beq.n	8003cca <HAL_UART_IRQHandler+0xf6>
 8003cb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d005      	beq.n	8003cca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc2:	f043 0204 	orr.w	r2, r3, #4
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d011      	beq.n	8003cfa <HAL_UART_IRQHandler+0x126>
 8003cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cda:	f003 0320 	and.w	r3, r3, #32
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d105      	bne.n	8003cee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ce2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d005      	beq.n	8003cfa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf2:	f043 0208 	orr.w	r2, r3, #8
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 81f2 	beq.w	80040e8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d08:	f003 0320 	and.w	r3, r3, #32
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d008      	beq.n	8003d22 <HAL_UART_IRQHandler+0x14e>
 8003d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d14:	f003 0320 	and.w	r3, r3, #32
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 fd0c 	bl	800473a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d2c:	2b40      	cmp	r3, #64	@ 0x40
 8003d2e:	bf0c      	ite	eq
 8003d30:	2301      	moveq	r3, #1
 8003d32:	2300      	movne	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d103      	bne.n	8003d4e <HAL_UART_IRQHandler+0x17a>
 8003d46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d04f      	beq.n	8003dee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 fc14 	bl	800457c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d5e:	2b40      	cmp	r3, #64	@ 0x40
 8003d60:	d141      	bne.n	8003de6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	3314      	adds	r3, #20
 8003d68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d70:	e853 3f00 	ldrex	r3, [r3]
 8003d74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003d78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	3314      	adds	r3, #20
 8003d8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003d8e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003d92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003d9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003d9e:	e841 2300 	strex	r3, r2, [r1]
 8003da2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003da6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1d9      	bne.n	8003d62 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d013      	beq.n	8003dde <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dba:	4a7e      	ldr	r2, [pc, #504]	@ (8003fb4 <HAL_UART_IRQHandler+0x3e0>)
 8003dbc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fe fd66 	bl	8002894 <HAL_DMA_Abort_IT>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d016      	beq.n	8003dfc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003dd8:	4610      	mov	r0, r2
 8003dda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ddc:	e00e      	b.n	8003dfc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f9a8 	bl	8004134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de4:	e00a      	b.n	8003dfc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f9a4 	bl	8004134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dec:	e006      	b.n	8003dfc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f9a0 	bl	8004134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003dfa:	e175      	b.n	80040e8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dfc:	bf00      	nop
    return;
 8003dfe:	e173      	b.n	80040e8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	f040 814f 	bne.w	80040a8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e0e:	f003 0310 	and.w	r3, r3, #16
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 8148 	beq.w	80040a8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e1c:	f003 0310 	and.w	r3, r3, #16
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 8141 	beq.w	80040a8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e26:	2300      	movs	r3, #0
 8003e28:	60bb      	str	r3, [r7, #8]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	60bb      	str	r3, [r7, #8]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	60bb      	str	r3, [r7, #8]
 8003e3a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e46:	2b40      	cmp	r3, #64	@ 0x40
 8003e48:	f040 80b6 	bne.w	8003fb8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 8145 	beq.w	80040ec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	f080 813e 	bcs.w	80040ec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e76:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e82:	f000 8088 	beq.w	8003f96 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	330c      	adds	r3, #12
 8003e8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e90:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e94:	e853 3f00 	ldrex	r3, [r3]
 8003e98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003e9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ea0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ea4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	330c      	adds	r3, #12
 8003eae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003eb2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003eb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003ebe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ec2:	e841 2300 	strex	r3, r2, [r1]
 8003ec6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003eca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1d9      	bne.n	8003e86 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	3314      	adds	r3, #20
 8003ed8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003edc:	e853 3f00 	ldrex	r3, [r3]
 8003ee0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003ee2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ee4:	f023 0301 	bic.w	r3, r3, #1
 8003ee8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	3314      	adds	r3, #20
 8003ef2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003ef6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003efa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003efe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003f02:	e841 2300 	strex	r3, r2, [r1]
 8003f06:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003f08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1e1      	bne.n	8003ed2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	3314      	adds	r3, #20
 8003f14:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f18:	e853 3f00 	ldrex	r3, [r3]
 8003f1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	3314      	adds	r3, #20
 8003f2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f32:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f34:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f36:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f38:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f3a:	e841 2300 	strex	r3, r2, [r1]
 8003f3e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003f40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1e3      	bne.n	8003f0e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	330c      	adds	r3, #12
 8003f5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f5e:	e853 3f00 	ldrex	r3, [r3]
 8003f62:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f66:	f023 0310 	bic.w	r3, r3, #16
 8003f6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	330c      	adds	r3, #12
 8003f74:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003f78:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003f7a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f7e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f80:	e841 2300 	strex	r3, r2, [r1]
 8003f84:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1e3      	bne.n	8003f54 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7fe fc0f 	bl	80027b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2202      	movs	r2, #2
 8003f9a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	4619      	mov	r1, r3
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f7fd fe25 	bl	8001bfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fb2:	e09b      	b.n	80040ec <HAL_UART_IRQHandler+0x518>
 8003fb4:	08004643 	.word	0x08004643
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 808e 	beq.w	80040f0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003fd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f000 8089 	beq.w	80040f0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	330c      	adds	r3, #12
 8003fe4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fe8:	e853 3f00 	ldrex	r3, [r3]
 8003fec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003fee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ff0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ff4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	330c      	adds	r3, #12
 8003ffe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004002:	647a      	str	r2, [r7, #68]	@ 0x44
 8004004:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004006:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004008:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800400a:	e841 2300 	strex	r3, r2, [r1]
 800400e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1e3      	bne.n	8003fde <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3314      	adds	r3, #20
 800401c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004020:	e853 3f00 	ldrex	r3, [r3]
 8004024:	623b      	str	r3, [r7, #32]
   return(result);
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	f023 0301 	bic.w	r3, r3, #1
 800402c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3314      	adds	r3, #20
 8004036:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800403a:	633a      	str	r2, [r7, #48]	@ 0x30
 800403c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004040:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004042:	e841 2300 	strex	r3, r2, [r1]
 8004046:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1e3      	bne.n	8004016 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2220      	movs	r2, #32
 8004052:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	330c      	adds	r3, #12
 8004062:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	e853 3f00 	ldrex	r3, [r3]
 800406a:	60fb      	str	r3, [r7, #12]
   return(result);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f023 0310 	bic.w	r3, r3, #16
 8004072:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	330c      	adds	r3, #12
 800407c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004080:	61fa      	str	r2, [r7, #28]
 8004082:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004084:	69b9      	ldr	r1, [r7, #24]
 8004086:	69fa      	ldr	r2, [r7, #28]
 8004088:	e841 2300 	strex	r3, r2, [r1]
 800408c:	617b      	str	r3, [r7, #20]
   return(result);
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1e3      	bne.n	800405c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2202      	movs	r2, #2
 8004098:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800409a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800409e:	4619      	mov	r1, r3
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f7fd fdab 	bl	8001bfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040a6:	e023      	b.n	80040f0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d009      	beq.n	80040c8 <HAL_UART_IRQHandler+0x4f4>
 80040b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 fad2 	bl	800466a <UART_Transmit_IT>
    return;
 80040c6:	e014      	b.n	80040f2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00e      	beq.n	80040f2 <HAL_UART_IRQHandler+0x51e>
 80040d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d008      	beq.n	80040f2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 fb12 	bl	800470a <UART_EndTransmit_IT>
    return;
 80040e6:	e004      	b.n	80040f2 <HAL_UART_IRQHandler+0x51e>
    return;
 80040e8:	bf00      	nop
 80040ea:	e002      	b.n	80040f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80040ec:	bf00      	nop
 80040ee:	e000      	b.n	80040f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80040f0:	bf00      	nop
  }
}
 80040f2:	37e8      	adds	r7, #232	@ 0xe8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b09c      	sub	sp, #112	@ 0x70
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004154:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004160:	2b00      	cmp	r3, #0
 8004162:	d172      	bne.n	800424a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004164:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004166:	2200      	movs	r2, #0
 8004168:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800416a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	330c      	adds	r3, #12
 8004170:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004172:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004174:	e853 3f00 	ldrex	r3, [r3]
 8004178:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800417a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800417c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004180:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004182:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	330c      	adds	r3, #12
 8004188:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800418a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800418c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004190:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004192:	e841 2300 	strex	r3, r2, [r1]
 8004196:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004198:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1e5      	bne.n	800416a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800419e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	3314      	adds	r3, #20
 80041a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041a8:	e853 3f00 	ldrex	r3, [r3]
 80041ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041b0:	f023 0301 	bic.w	r3, r3, #1
 80041b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80041b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	3314      	adds	r3, #20
 80041bc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80041be:	647a      	str	r2, [r7, #68]	@ 0x44
 80041c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041c6:	e841 2300 	strex	r3, r2, [r1]
 80041ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1e5      	bne.n	800419e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	3314      	adds	r3, #20
 80041d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041dc:	e853 3f00 	ldrex	r3, [r3]
 80041e0:	623b      	str	r3, [r7, #32]
   return(result);
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80041ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	3314      	adds	r3, #20
 80041f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80041f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80041f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041fa:	e841 2300 	strex	r3, r2, [r1]
 80041fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1e5      	bne.n	80041d2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004206:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004208:	2220      	movs	r2, #32
 800420a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800420e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004212:	2b01      	cmp	r3, #1
 8004214:	d119      	bne.n	800424a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004216:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	330c      	adds	r3, #12
 800421c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	e853 3f00 	ldrex	r3, [r3]
 8004224:	60fb      	str	r3, [r7, #12]
   return(result);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f023 0310 	bic.w	r3, r3, #16
 800422c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800422e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	330c      	adds	r3, #12
 8004234:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004236:	61fa      	str	r2, [r7, #28]
 8004238:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423a:	69b9      	ldr	r1, [r7, #24]
 800423c:	69fa      	ldr	r2, [r7, #28]
 800423e:	e841 2300 	strex	r3, r2, [r1]
 8004242:	617b      	str	r3, [r7, #20]
   return(result);
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1e5      	bne.n	8004216 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800424a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800424c:	2200      	movs	r2, #0
 800424e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004250:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004254:	2b01      	cmp	r3, #1
 8004256:	d106      	bne.n	8004266 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004258:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800425a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800425c:	4619      	mov	r1, r3
 800425e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004260:	f7fd fccc 	bl	8001bfc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004264:	e002      	b.n	800426c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004266:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004268:	f7ff ff50 	bl	800410c <HAL_UART_RxCpltCallback>
}
 800426c:	bf00      	nop
 800426e:	3770      	adds	r7, #112	@ 0x70
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004280:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2201      	movs	r2, #1
 8004286:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800428c:	2b01      	cmp	r3, #1
 800428e:	d108      	bne.n	80042a2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004294:	085b      	lsrs	r3, r3, #1
 8004296:	b29b      	uxth	r3, r3
 8004298:	4619      	mov	r1, r3
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f7fd fcae 	bl	8001bfc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80042a0:	e002      	b.n	80042a8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f7ff ff3c 	bl	8004120 <HAL_UART_RxHalfCpltCallback>
}
 80042a8:	bf00      	nop
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042cc:	2b80      	cmp	r3, #128	@ 0x80
 80042ce:	bf0c      	ite	eq
 80042d0:	2301      	moveq	r3, #1
 80042d2:	2300      	movne	r3, #0
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b21      	cmp	r3, #33	@ 0x21
 80042e2:	d108      	bne.n	80042f6 <UART_DMAError+0x46>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d005      	beq.n	80042f6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2200      	movs	r2, #0
 80042ee:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80042f0:	68b8      	ldr	r0, [r7, #8]
 80042f2:	f000 f91b 	bl	800452c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004300:	2b40      	cmp	r3, #64	@ 0x40
 8004302:	bf0c      	ite	eq
 8004304:	2301      	moveq	r3, #1
 8004306:	2300      	movne	r3, #0
 8004308:	b2db      	uxtb	r3, r3
 800430a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b22      	cmp	r3, #34	@ 0x22
 8004316:	d108      	bne.n	800432a <UART_DMAError+0x7a>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d005      	beq.n	800432a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	2200      	movs	r2, #0
 8004322:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004324:	68b8      	ldr	r0, [r7, #8]
 8004326:	f000 f929 	bl	800457c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800432e:	f043 0210 	orr.w	r2, r3, #16
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004336:	68b8      	ldr	r0, [r7, #8]
 8004338:	f7ff fefc 	bl	8004134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800433c:	bf00      	nop
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	603b      	str	r3, [r7, #0]
 8004350:	4613      	mov	r3, r2
 8004352:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004354:	e03b      	b.n	80043ce <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435c:	d037      	beq.n	80043ce <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800435e:	f7fd ff93 	bl	8002288 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	6a3a      	ldr	r2, [r7, #32]
 800436a:	429a      	cmp	r2, r3
 800436c:	d302      	bcc.n	8004374 <UART_WaitOnFlagUntilTimeout+0x30>
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e03a      	b.n	80043ee <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	2b00      	cmp	r3, #0
 8004384:	d023      	beq.n	80043ce <UART_WaitOnFlagUntilTimeout+0x8a>
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2b80      	cmp	r3, #128	@ 0x80
 800438a:	d020      	beq.n	80043ce <UART_WaitOnFlagUntilTimeout+0x8a>
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b40      	cmp	r3, #64	@ 0x40
 8004390:	d01d      	beq.n	80043ce <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0308 	and.w	r3, r3, #8
 800439c:	2b08      	cmp	r3, #8
 800439e:	d116      	bne.n	80043ce <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80043a0:	2300      	movs	r3, #0
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	617b      	str	r3, [r7, #20]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 f8e0 	bl	800457c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2208      	movs	r2, #8
 80043c0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e00f      	b.n	80043ee <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	4013      	ands	r3, r2
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	429a      	cmp	r2, r3
 80043dc:	bf0c      	ite	eq
 80043de:	2301      	moveq	r3, #1
 80043e0:	2300      	movne	r3, #0
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	461a      	mov	r2, r3
 80043e6:	79fb      	ldrb	r3, [r7, #7]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d0b4      	beq.n	8004356 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3718      	adds	r7, #24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b098      	sub	sp, #96	@ 0x60
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	4613      	mov	r3, r2
 8004404:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	88fa      	ldrh	r2, [r7, #6]
 8004410:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2222      	movs	r2, #34	@ 0x22
 800441c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004424:	4a3e      	ldr	r2, [pc, #248]	@ (8004520 <UART_Start_Receive_DMA+0x128>)
 8004426:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800442c:	4a3d      	ldr	r2, [pc, #244]	@ (8004524 <UART_Start_Receive_DMA+0x12c>)
 800442e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004434:	4a3c      	ldr	r2, [pc, #240]	@ (8004528 <UART_Start_Receive_DMA+0x130>)
 8004436:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800443c:	2200      	movs	r2, #0
 800443e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004440:	f107 0308 	add.w	r3, r7, #8
 8004444:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3304      	adds	r3, #4
 8004450:	4619      	mov	r1, r3
 8004452:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	88fb      	ldrh	r3, [r7, #6]
 8004458:	f7fe f954 	bl	8002704 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800445c:	2300      	movs	r3, #0
 800445e:	613b      	str	r3, [r7, #16]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	613b      	str	r3, [r7, #16]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	613b      	str	r3, [r7, #16]
 8004470:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d019      	beq.n	80044ae <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	330c      	adds	r3, #12
 8004480:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004482:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004484:	e853 3f00 	ldrex	r3, [r3]
 8004488:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800448a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800448c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004490:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	330c      	adds	r3, #12
 8004498:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800449a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800449c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80044a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044a2:	e841 2300 	strex	r3, r2, [r1]
 80044a6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80044a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1e5      	bne.n	800447a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	3314      	adds	r3, #20
 80044b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044b8:	e853 3f00 	ldrex	r3, [r3]
 80044bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c0:	f043 0301 	orr.w	r3, r3, #1
 80044c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3314      	adds	r3, #20
 80044cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80044ce:	63ba      	str	r2, [r7, #56]	@ 0x38
 80044d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80044d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80044d6:	e841 2300 	strex	r3, r2, [r1]
 80044da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1e5      	bne.n	80044ae <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3314      	adds	r3, #20
 80044e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	e853 3f00 	ldrex	r3, [r3]
 80044f0:	617b      	str	r3, [r7, #20]
   return(result);
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3314      	adds	r3, #20
 8004500:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004502:	627a      	str	r2, [r7, #36]	@ 0x24
 8004504:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004506:	6a39      	ldr	r1, [r7, #32]
 8004508:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800450a:	e841 2300 	strex	r3, r2, [r1]
 800450e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1e5      	bne.n	80044e2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3760      	adds	r7, #96	@ 0x60
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	08004149 	.word	0x08004149
 8004524:	08004275 	.word	0x08004275
 8004528:	080042b1 	.word	0x080042b1

0800452c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800452c:	b480      	push	{r7}
 800452e:	b089      	sub	sp, #36	@ 0x24
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	330c      	adds	r3, #12
 800453a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	e853 3f00 	ldrex	r3, [r3]
 8004542:	60bb      	str	r3, [r7, #8]
   return(result);
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800454a:	61fb      	str	r3, [r7, #28]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	330c      	adds	r3, #12
 8004552:	69fa      	ldr	r2, [r7, #28]
 8004554:	61ba      	str	r2, [r7, #24]
 8004556:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004558:	6979      	ldr	r1, [r7, #20]
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	e841 2300 	strex	r3, r2, [r1]
 8004560:	613b      	str	r3, [r7, #16]
   return(result);
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1e5      	bne.n	8004534 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2220      	movs	r2, #32
 800456c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004570:	bf00      	nop
 8004572:	3724      	adds	r7, #36	@ 0x24
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800457c:	b480      	push	{r7}
 800457e:	b095      	sub	sp, #84	@ 0x54
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	330c      	adds	r3, #12
 800458a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800458e:	e853 3f00 	ldrex	r3, [r3]
 8004592:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004596:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800459a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	330c      	adds	r3, #12
 80045a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045a4:	643a      	str	r2, [r7, #64]	@ 0x40
 80045a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045ac:	e841 2300 	strex	r3, r2, [r1]
 80045b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1e5      	bne.n	8004584 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	3314      	adds	r3, #20
 80045be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	e853 3f00 	ldrex	r3, [r3]
 80045c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	f023 0301 	bic.w	r3, r3, #1
 80045ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	3314      	adds	r3, #20
 80045d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045e0:	e841 2300 	strex	r3, r2, [r1]
 80045e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1e5      	bne.n	80045b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d119      	bne.n	8004628 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	330c      	adds	r3, #12
 80045fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	e853 3f00 	ldrex	r3, [r3]
 8004602:	60bb      	str	r3, [r7, #8]
   return(result);
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f023 0310 	bic.w	r3, r3, #16
 800460a:	647b      	str	r3, [r7, #68]	@ 0x44
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	330c      	adds	r3, #12
 8004612:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004614:	61ba      	str	r2, [r7, #24]
 8004616:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004618:	6979      	ldr	r1, [r7, #20]
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	e841 2300 	strex	r3, r2, [r1]
 8004620:	613b      	str	r3, [r7, #16]
   return(result);
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1e5      	bne.n	80045f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2220      	movs	r2, #32
 800462c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004636:	bf00      	nop
 8004638:	3754      	adds	r7, #84	@ 0x54
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b084      	sub	sp, #16
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800464e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f7ff fd69 	bl	8004134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004662:	bf00      	nop
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800466a:	b480      	push	{r7}
 800466c:	b085      	sub	sp, #20
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b21      	cmp	r3, #33	@ 0x21
 800467c:	d13e      	bne.n	80046fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004686:	d114      	bne.n	80046b2 <UART_Transmit_IT+0x48>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d110      	bne.n	80046b2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	881b      	ldrh	r3, [r3, #0]
 800469a:	461a      	mov	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	1c9a      	adds	r2, r3, #2
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	621a      	str	r2, [r3, #32]
 80046b0:	e008      	b.n	80046c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	1c59      	adds	r1, r3, #1
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	6211      	str	r1, [r2, #32]
 80046bc:	781a      	ldrb	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	4619      	mov	r1, r3
 80046d2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10f      	bne.n	80046f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68da      	ldr	r2, [r3, #12]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046f8:	2300      	movs	r3, #0
 80046fa:	e000      	b.n	80046fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80046fc:	2302      	movs	r3, #2
  }
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b082      	sub	sp, #8
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68da      	ldr	r2, [r3, #12]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004720:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2220      	movs	r2, #32
 8004726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7ff fce4 	bl	80040f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b08c      	sub	sp, #48	@ 0x30
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b22      	cmp	r3, #34	@ 0x22
 800474c:	f040 80ae 	bne.w	80048ac <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004758:	d117      	bne.n	800478a <UART_Receive_IT+0x50>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d113      	bne.n	800478a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004762:	2300      	movs	r3, #0
 8004764:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	b29b      	uxth	r3, r3
 8004774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004778:	b29a      	uxth	r2, r3
 800477a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800477c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004782:	1c9a      	adds	r2, r3, #2
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	629a      	str	r2, [r3, #40]	@ 0x28
 8004788:	e026      	b.n	80047d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800478e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004790:	2300      	movs	r3, #0
 8004792:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800479c:	d007      	beq.n	80047ae <UART_Receive_IT+0x74>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10a      	bne.n	80047bc <UART_Receive_IT+0x82>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d106      	bne.n	80047bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047b8:	701a      	strb	r2, [r3, #0]
 80047ba:	e008      	b.n	80047ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d2:	1c5a      	adds	r2, r3, #1
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047dc:	b29b      	uxth	r3, r3
 80047de:	3b01      	subs	r3, #1
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	4619      	mov	r1, r3
 80047e6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d15d      	bne.n	80048a8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0220 	bic.w	r2, r2, #32
 80047fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68da      	ldr	r2, [r3, #12]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800480a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	695a      	ldr	r2, [r3, #20]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 0201 	bic.w	r2, r2, #1
 800481a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2220      	movs	r2, #32
 8004820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800482e:	2b01      	cmp	r3, #1
 8004830:	d135      	bne.n	800489e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	330c      	adds	r3, #12
 800483e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	e853 3f00 	ldrex	r3, [r3]
 8004846:	613b      	str	r3, [r7, #16]
   return(result);
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f023 0310 	bic.w	r3, r3, #16
 800484e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	330c      	adds	r3, #12
 8004856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004858:	623a      	str	r2, [r7, #32]
 800485a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485c:	69f9      	ldr	r1, [r7, #28]
 800485e:	6a3a      	ldr	r2, [r7, #32]
 8004860:	e841 2300 	strex	r3, r2, [r1]
 8004864:	61bb      	str	r3, [r7, #24]
   return(result);
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1e5      	bne.n	8004838 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0310 	and.w	r3, r3, #16
 8004876:	2b10      	cmp	r3, #16
 8004878:	d10a      	bne.n	8004890 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800487a:	2300      	movs	r3, #0
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	60fb      	str	r3, [r7, #12]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004894:	4619      	mov	r1, r3
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7fd f9b0 	bl	8001bfc <HAL_UARTEx_RxEventCallback>
 800489c:	e002      	b.n	80048a4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7ff fc34 	bl	800410c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048a4:	2300      	movs	r3, #0
 80048a6:	e002      	b.n	80048ae <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80048a8:	2300      	movs	r3, #0
 80048aa:	e000      	b.n	80048ae <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80048ac:	2302      	movs	r3, #2
  }
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3730      	adds	r7, #48	@ 0x30
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
	...

080048b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048bc:	b0c0      	sub	sp, #256	@ 0x100
 80048be:	af00      	add	r7, sp, #0
 80048c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80048d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d4:	68d9      	ldr	r1, [r3, #12]
 80048d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	ea40 0301 	orr.w	r3, r0, r1
 80048e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	431a      	orrs	r2, r3
 80048f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	431a      	orrs	r2, r3
 80048f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004910:	f021 010c 	bic.w	r1, r1, #12
 8004914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800491e:	430b      	orrs	r3, r1
 8004920:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800492e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004932:	6999      	ldr	r1, [r3, #24]
 8004934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	ea40 0301 	orr.w	r3, r0, r1
 800493e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	4b8f      	ldr	r3, [pc, #572]	@ (8004b84 <UART_SetConfig+0x2cc>)
 8004948:	429a      	cmp	r2, r3
 800494a:	d005      	beq.n	8004958 <UART_SetConfig+0xa0>
 800494c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	4b8d      	ldr	r3, [pc, #564]	@ (8004b88 <UART_SetConfig+0x2d0>)
 8004954:	429a      	cmp	r2, r3
 8004956:	d104      	bne.n	8004962 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004958:	f7fe fff0 	bl	800393c <HAL_RCC_GetPCLK2Freq>
 800495c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004960:	e003      	b.n	800496a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004962:	f7fe ffd7 	bl	8003914 <HAL_RCC_GetPCLK1Freq>
 8004966:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800496a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800496e:	69db      	ldr	r3, [r3, #28]
 8004970:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004974:	f040 810c 	bne.w	8004b90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004978:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800497c:	2200      	movs	r2, #0
 800497e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004982:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004986:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800498a:	4622      	mov	r2, r4
 800498c:	462b      	mov	r3, r5
 800498e:	1891      	adds	r1, r2, r2
 8004990:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004992:	415b      	adcs	r3, r3
 8004994:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004996:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800499a:	4621      	mov	r1, r4
 800499c:	eb12 0801 	adds.w	r8, r2, r1
 80049a0:	4629      	mov	r1, r5
 80049a2:	eb43 0901 	adc.w	r9, r3, r1
 80049a6:	f04f 0200 	mov.w	r2, #0
 80049aa:	f04f 0300 	mov.w	r3, #0
 80049ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049ba:	4690      	mov	r8, r2
 80049bc:	4699      	mov	r9, r3
 80049be:	4623      	mov	r3, r4
 80049c0:	eb18 0303 	adds.w	r3, r8, r3
 80049c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80049c8:	462b      	mov	r3, r5
 80049ca:	eb49 0303 	adc.w	r3, r9, r3
 80049ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80049d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80049de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80049e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80049e6:	460b      	mov	r3, r1
 80049e8:	18db      	adds	r3, r3, r3
 80049ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80049ec:	4613      	mov	r3, r2
 80049ee:	eb42 0303 	adc.w	r3, r2, r3
 80049f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80049f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80049f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80049fc:	f7fb fc40 	bl	8000280 <__aeabi_uldivmod>
 8004a00:	4602      	mov	r2, r0
 8004a02:	460b      	mov	r3, r1
 8004a04:	4b61      	ldr	r3, [pc, #388]	@ (8004b8c <UART_SetConfig+0x2d4>)
 8004a06:	fba3 2302 	umull	r2, r3, r3, r2
 8004a0a:	095b      	lsrs	r3, r3, #5
 8004a0c:	011c      	lsls	r4, r3, #4
 8004a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a12:	2200      	movs	r2, #0
 8004a14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a18:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004a1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004a20:	4642      	mov	r2, r8
 8004a22:	464b      	mov	r3, r9
 8004a24:	1891      	adds	r1, r2, r2
 8004a26:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004a28:	415b      	adcs	r3, r3
 8004a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004a30:	4641      	mov	r1, r8
 8004a32:	eb12 0a01 	adds.w	sl, r2, r1
 8004a36:	4649      	mov	r1, r9
 8004a38:	eb43 0b01 	adc.w	fp, r3, r1
 8004a3c:	f04f 0200 	mov.w	r2, #0
 8004a40:	f04f 0300 	mov.w	r3, #0
 8004a44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a50:	4692      	mov	sl, r2
 8004a52:	469b      	mov	fp, r3
 8004a54:	4643      	mov	r3, r8
 8004a56:	eb1a 0303 	adds.w	r3, sl, r3
 8004a5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a5e:	464b      	mov	r3, r9
 8004a60:	eb4b 0303 	adc.w	r3, fp, r3
 8004a64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a74:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004a78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	18db      	adds	r3, r3, r3
 8004a80:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a82:	4613      	mov	r3, r2
 8004a84:	eb42 0303 	adc.w	r3, r2, r3
 8004a88:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004a8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004a92:	f7fb fbf5 	bl	8000280 <__aeabi_uldivmod>
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4611      	mov	r1, r2
 8004a9c:	4b3b      	ldr	r3, [pc, #236]	@ (8004b8c <UART_SetConfig+0x2d4>)
 8004a9e:	fba3 2301 	umull	r2, r3, r3, r1
 8004aa2:	095b      	lsrs	r3, r3, #5
 8004aa4:	2264      	movs	r2, #100	@ 0x64
 8004aa6:	fb02 f303 	mul.w	r3, r2, r3
 8004aaa:	1acb      	subs	r3, r1, r3
 8004aac:	00db      	lsls	r3, r3, #3
 8004aae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004ab2:	4b36      	ldr	r3, [pc, #216]	@ (8004b8c <UART_SetConfig+0x2d4>)
 8004ab4:	fba3 2302 	umull	r2, r3, r3, r2
 8004ab8:	095b      	lsrs	r3, r3, #5
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004ac0:	441c      	add	r4, r3
 8004ac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004acc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004ad0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004ad4:	4642      	mov	r2, r8
 8004ad6:	464b      	mov	r3, r9
 8004ad8:	1891      	adds	r1, r2, r2
 8004ada:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004adc:	415b      	adcs	r3, r3
 8004ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ae0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004ae4:	4641      	mov	r1, r8
 8004ae6:	1851      	adds	r1, r2, r1
 8004ae8:	6339      	str	r1, [r7, #48]	@ 0x30
 8004aea:	4649      	mov	r1, r9
 8004aec:	414b      	adcs	r3, r1
 8004aee:	637b      	str	r3, [r7, #52]	@ 0x34
 8004af0:	f04f 0200 	mov.w	r2, #0
 8004af4:	f04f 0300 	mov.w	r3, #0
 8004af8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004afc:	4659      	mov	r1, fp
 8004afe:	00cb      	lsls	r3, r1, #3
 8004b00:	4651      	mov	r1, sl
 8004b02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b06:	4651      	mov	r1, sl
 8004b08:	00ca      	lsls	r2, r1, #3
 8004b0a:	4610      	mov	r0, r2
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4603      	mov	r3, r0
 8004b10:	4642      	mov	r2, r8
 8004b12:	189b      	adds	r3, r3, r2
 8004b14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b18:	464b      	mov	r3, r9
 8004b1a:	460a      	mov	r2, r1
 8004b1c:	eb42 0303 	adc.w	r3, r2, r3
 8004b20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b30:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004b34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004b38:	460b      	mov	r3, r1
 8004b3a:	18db      	adds	r3, r3, r3
 8004b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b3e:	4613      	mov	r3, r2
 8004b40:	eb42 0303 	adc.w	r3, r2, r3
 8004b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004b4e:	f7fb fb97 	bl	8000280 <__aeabi_uldivmod>
 8004b52:	4602      	mov	r2, r0
 8004b54:	460b      	mov	r3, r1
 8004b56:	4b0d      	ldr	r3, [pc, #52]	@ (8004b8c <UART_SetConfig+0x2d4>)
 8004b58:	fba3 1302 	umull	r1, r3, r3, r2
 8004b5c:	095b      	lsrs	r3, r3, #5
 8004b5e:	2164      	movs	r1, #100	@ 0x64
 8004b60:	fb01 f303 	mul.w	r3, r1, r3
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	3332      	adds	r3, #50	@ 0x32
 8004b6a:	4a08      	ldr	r2, [pc, #32]	@ (8004b8c <UART_SetConfig+0x2d4>)
 8004b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b70:	095b      	lsrs	r3, r3, #5
 8004b72:	f003 0207 	and.w	r2, r3, #7
 8004b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4422      	add	r2, r4
 8004b7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b80:	e106      	b.n	8004d90 <UART_SetConfig+0x4d8>
 8004b82:	bf00      	nop
 8004b84:	40011000 	.word	0x40011000
 8004b88:	40011400 	.word	0x40011400
 8004b8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b94:	2200      	movs	r2, #0
 8004b96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004b9a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004b9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004ba2:	4642      	mov	r2, r8
 8004ba4:	464b      	mov	r3, r9
 8004ba6:	1891      	adds	r1, r2, r2
 8004ba8:	6239      	str	r1, [r7, #32]
 8004baa:	415b      	adcs	r3, r3
 8004bac:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bb2:	4641      	mov	r1, r8
 8004bb4:	1854      	adds	r4, r2, r1
 8004bb6:	4649      	mov	r1, r9
 8004bb8:	eb43 0501 	adc.w	r5, r3, r1
 8004bbc:	f04f 0200 	mov.w	r2, #0
 8004bc0:	f04f 0300 	mov.w	r3, #0
 8004bc4:	00eb      	lsls	r3, r5, #3
 8004bc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bca:	00e2      	lsls	r2, r4, #3
 8004bcc:	4614      	mov	r4, r2
 8004bce:	461d      	mov	r5, r3
 8004bd0:	4643      	mov	r3, r8
 8004bd2:	18e3      	adds	r3, r4, r3
 8004bd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004bd8:	464b      	mov	r3, r9
 8004bda:	eb45 0303 	adc.w	r3, r5, r3
 8004bde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004bee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004bf2:	f04f 0200 	mov.w	r2, #0
 8004bf6:	f04f 0300 	mov.w	r3, #0
 8004bfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004bfe:	4629      	mov	r1, r5
 8004c00:	008b      	lsls	r3, r1, #2
 8004c02:	4621      	mov	r1, r4
 8004c04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c08:	4621      	mov	r1, r4
 8004c0a:	008a      	lsls	r2, r1, #2
 8004c0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004c10:	f7fb fb36 	bl	8000280 <__aeabi_uldivmod>
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	4b60      	ldr	r3, [pc, #384]	@ (8004d9c <UART_SetConfig+0x4e4>)
 8004c1a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c1e:	095b      	lsrs	r3, r3, #5
 8004c20:	011c      	lsls	r4, r3, #4
 8004c22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c26:	2200      	movs	r2, #0
 8004c28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004c30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004c34:	4642      	mov	r2, r8
 8004c36:	464b      	mov	r3, r9
 8004c38:	1891      	adds	r1, r2, r2
 8004c3a:	61b9      	str	r1, [r7, #24]
 8004c3c:	415b      	adcs	r3, r3
 8004c3e:	61fb      	str	r3, [r7, #28]
 8004c40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c44:	4641      	mov	r1, r8
 8004c46:	1851      	adds	r1, r2, r1
 8004c48:	6139      	str	r1, [r7, #16]
 8004c4a:	4649      	mov	r1, r9
 8004c4c:	414b      	adcs	r3, r1
 8004c4e:	617b      	str	r3, [r7, #20]
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	f04f 0300 	mov.w	r3, #0
 8004c58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c5c:	4659      	mov	r1, fp
 8004c5e:	00cb      	lsls	r3, r1, #3
 8004c60:	4651      	mov	r1, sl
 8004c62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c66:	4651      	mov	r1, sl
 8004c68:	00ca      	lsls	r2, r1, #3
 8004c6a:	4610      	mov	r0, r2
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	4603      	mov	r3, r0
 8004c70:	4642      	mov	r2, r8
 8004c72:	189b      	adds	r3, r3, r2
 8004c74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c78:	464b      	mov	r3, r9
 8004c7a:	460a      	mov	r2, r1
 8004c7c:	eb42 0303 	adc.w	r3, r2, r3
 8004c80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c8e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004c90:	f04f 0200 	mov.w	r2, #0
 8004c94:	f04f 0300 	mov.w	r3, #0
 8004c98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004c9c:	4649      	mov	r1, r9
 8004c9e:	008b      	lsls	r3, r1, #2
 8004ca0:	4641      	mov	r1, r8
 8004ca2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ca6:	4641      	mov	r1, r8
 8004ca8:	008a      	lsls	r2, r1, #2
 8004caa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004cae:	f7fb fae7 	bl	8000280 <__aeabi_uldivmod>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	4611      	mov	r1, r2
 8004cb8:	4b38      	ldr	r3, [pc, #224]	@ (8004d9c <UART_SetConfig+0x4e4>)
 8004cba:	fba3 2301 	umull	r2, r3, r3, r1
 8004cbe:	095b      	lsrs	r3, r3, #5
 8004cc0:	2264      	movs	r2, #100	@ 0x64
 8004cc2:	fb02 f303 	mul.w	r3, r2, r3
 8004cc6:	1acb      	subs	r3, r1, r3
 8004cc8:	011b      	lsls	r3, r3, #4
 8004cca:	3332      	adds	r3, #50	@ 0x32
 8004ccc:	4a33      	ldr	r2, [pc, #204]	@ (8004d9c <UART_SetConfig+0x4e4>)
 8004cce:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd2:	095b      	lsrs	r3, r3, #5
 8004cd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004cd8:	441c      	add	r4, r3
 8004cda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cde:	2200      	movs	r2, #0
 8004ce0:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ce2:	677a      	str	r2, [r7, #116]	@ 0x74
 8004ce4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004ce8:	4642      	mov	r2, r8
 8004cea:	464b      	mov	r3, r9
 8004cec:	1891      	adds	r1, r2, r2
 8004cee:	60b9      	str	r1, [r7, #8]
 8004cf0:	415b      	adcs	r3, r3
 8004cf2:	60fb      	str	r3, [r7, #12]
 8004cf4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cf8:	4641      	mov	r1, r8
 8004cfa:	1851      	adds	r1, r2, r1
 8004cfc:	6039      	str	r1, [r7, #0]
 8004cfe:	4649      	mov	r1, r9
 8004d00:	414b      	adcs	r3, r1
 8004d02:	607b      	str	r3, [r7, #4]
 8004d04:	f04f 0200 	mov.w	r2, #0
 8004d08:	f04f 0300 	mov.w	r3, #0
 8004d0c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d10:	4659      	mov	r1, fp
 8004d12:	00cb      	lsls	r3, r1, #3
 8004d14:	4651      	mov	r1, sl
 8004d16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d1a:	4651      	mov	r1, sl
 8004d1c:	00ca      	lsls	r2, r1, #3
 8004d1e:	4610      	mov	r0, r2
 8004d20:	4619      	mov	r1, r3
 8004d22:	4603      	mov	r3, r0
 8004d24:	4642      	mov	r2, r8
 8004d26:	189b      	adds	r3, r3, r2
 8004d28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d2a:	464b      	mov	r3, r9
 8004d2c:	460a      	mov	r2, r1
 8004d2e:	eb42 0303 	adc.w	r3, r2, r3
 8004d32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d3e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004d40:	f04f 0200 	mov.w	r2, #0
 8004d44:	f04f 0300 	mov.w	r3, #0
 8004d48:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004d4c:	4649      	mov	r1, r9
 8004d4e:	008b      	lsls	r3, r1, #2
 8004d50:	4641      	mov	r1, r8
 8004d52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d56:	4641      	mov	r1, r8
 8004d58:	008a      	lsls	r2, r1, #2
 8004d5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004d5e:	f7fb fa8f 	bl	8000280 <__aeabi_uldivmod>
 8004d62:	4602      	mov	r2, r0
 8004d64:	460b      	mov	r3, r1
 8004d66:	4b0d      	ldr	r3, [pc, #52]	@ (8004d9c <UART_SetConfig+0x4e4>)
 8004d68:	fba3 1302 	umull	r1, r3, r3, r2
 8004d6c:	095b      	lsrs	r3, r3, #5
 8004d6e:	2164      	movs	r1, #100	@ 0x64
 8004d70:	fb01 f303 	mul.w	r3, r1, r3
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	011b      	lsls	r3, r3, #4
 8004d78:	3332      	adds	r3, #50	@ 0x32
 8004d7a:	4a08      	ldr	r2, [pc, #32]	@ (8004d9c <UART_SetConfig+0x4e4>)
 8004d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d80:	095b      	lsrs	r3, r3, #5
 8004d82:	f003 020f 	and.w	r2, r3, #15
 8004d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4422      	add	r2, r4
 8004d8e:	609a      	str	r2, [r3, #8]
}
 8004d90:	bf00      	nop
 8004d92:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004d96:	46bd      	mov	sp, r7
 8004d98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d9c:	51eb851f 	.word	0x51eb851f

08004da0 <std>:
 8004da0:	2300      	movs	r3, #0
 8004da2:	b510      	push	{r4, lr}
 8004da4:	4604      	mov	r4, r0
 8004da6:	e9c0 3300 	strd	r3, r3, [r0]
 8004daa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004dae:	6083      	str	r3, [r0, #8]
 8004db0:	8181      	strh	r1, [r0, #12]
 8004db2:	6643      	str	r3, [r0, #100]	@ 0x64
 8004db4:	81c2      	strh	r2, [r0, #14]
 8004db6:	6183      	str	r3, [r0, #24]
 8004db8:	4619      	mov	r1, r3
 8004dba:	2208      	movs	r2, #8
 8004dbc:	305c      	adds	r0, #92	@ 0x5c
 8004dbe:	f000 fa13 	bl	80051e8 <memset>
 8004dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8004df8 <std+0x58>)
 8004dc4:	6263      	str	r3, [r4, #36]	@ 0x24
 8004dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8004dfc <std+0x5c>)
 8004dc8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004dca:	4b0d      	ldr	r3, [pc, #52]	@ (8004e00 <std+0x60>)
 8004dcc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004dce:	4b0d      	ldr	r3, [pc, #52]	@ (8004e04 <std+0x64>)
 8004dd0:	6323      	str	r3, [r4, #48]	@ 0x30
 8004dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8004e08 <std+0x68>)
 8004dd4:	6224      	str	r4, [r4, #32]
 8004dd6:	429c      	cmp	r4, r3
 8004dd8:	d006      	beq.n	8004de8 <std+0x48>
 8004dda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004dde:	4294      	cmp	r4, r2
 8004de0:	d002      	beq.n	8004de8 <std+0x48>
 8004de2:	33d0      	adds	r3, #208	@ 0xd0
 8004de4:	429c      	cmp	r4, r3
 8004de6:	d105      	bne.n	8004df4 <std+0x54>
 8004de8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004df0:	f000 ba72 	b.w	80052d8 <__retarget_lock_init_recursive>
 8004df4:	bd10      	pop	{r4, pc}
 8004df6:	bf00      	nop
 8004df8:	08005005 	.word	0x08005005
 8004dfc:	08005027 	.word	0x08005027
 8004e00:	0800505f 	.word	0x0800505f
 8004e04:	08005083 	.word	0x08005083
 8004e08:	20000754 	.word	0x20000754

08004e0c <stdio_exit_handler>:
 8004e0c:	4a02      	ldr	r2, [pc, #8]	@ (8004e18 <stdio_exit_handler+0xc>)
 8004e0e:	4903      	ldr	r1, [pc, #12]	@ (8004e1c <stdio_exit_handler+0x10>)
 8004e10:	4803      	ldr	r0, [pc, #12]	@ (8004e20 <stdio_exit_handler+0x14>)
 8004e12:	f000 b869 	b.w	8004ee8 <_fwalk_sglue>
 8004e16:	bf00      	nop
 8004e18:	20000028 	.word	0x20000028
 8004e1c:	08005b91 	.word	0x08005b91
 8004e20:	20000038 	.word	0x20000038

08004e24 <cleanup_stdio>:
 8004e24:	6841      	ldr	r1, [r0, #4]
 8004e26:	4b0c      	ldr	r3, [pc, #48]	@ (8004e58 <cleanup_stdio+0x34>)
 8004e28:	4299      	cmp	r1, r3
 8004e2a:	b510      	push	{r4, lr}
 8004e2c:	4604      	mov	r4, r0
 8004e2e:	d001      	beq.n	8004e34 <cleanup_stdio+0x10>
 8004e30:	f000 feae 	bl	8005b90 <_fflush_r>
 8004e34:	68a1      	ldr	r1, [r4, #8]
 8004e36:	4b09      	ldr	r3, [pc, #36]	@ (8004e5c <cleanup_stdio+0x38>)
 8004e38:	4299      	cmp	r1, r3
 8004e3a:	d002      	beq.n	8004e42 <cleanup_stdio+0x1e>
 8004e3c:	4620      	mov	r0, r4
 8004e3e:	f000 fea7 	bl	8005b90 <_fflush_r>
 8004e42:	68e1      	ldr	r1, [r4, #12]
 8004e44:	4b06      	ldr	r3, [pc, #24]	@ (8004e60 <cleanup_stdio+0x3c>)
 8004e46:	4299      	cmp	r1, r3
 8004e48:	d004      	beq.n	8004e54 <cleanup_stdio+0x30>
 8004e4a:	4620      	mov	r0, r4
 8004e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e50:	f000 be9e 	b.w	8005b90 <_fflush_r>
 8004e54:	bd10      	pop	{r4, pc}
 8004e56:	bf00      	nop
 8004e58:	20000754 	.word	0x20000754
 8004e5c:	200007bc 	.word	0x200007bc
 8004e60:	20000824 	.word	0x20000824

08004e64 <global_stdio_init.part.0>:
 8004e64:	b510      	push	{r4, lr}
 8004e66:	4b0b      	ldr	r3, [pc, #44]	@ (8004e94 <global_stdio_init.part.0+0x30>)
 8004e68:	4c0b      	ldr	r4, [pc, #44]	@ (8004e98 <global_stdio_init.part.0+0x34>)
 8004e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8004e9c <global_stdio_init.part.0+0x38>)
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	4620      	mov	r0, r4
 8004e70:	2200      	movs	r2, #0
 8004e72:	2104      	movs	r1, #4
 8004e74:	f7ff ff94 	bl	8004da0 <std>
 8004e78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	2109      	movs	r1, #9
 8004e80:	f7ff ff8e 	bl	8004da0 <std>
 8004e84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004e88:	2202      	movs	r2, #2
 8004e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e8e:	2112      	movs	r1, #18
 8004e90:	f7ff bf86 	b.w	8004da0 <std>
 8004e94:	2000088c 	.word	0x2000088c
 8004e98:	20000754 	.word	0x20000754
 8004e9c:	08004e0d 	.word	0x08004e0d

08004ea0 <__sfp_lock_acquire>:
 8004ea0:	4801      	ldr	r0, [pc, #4]	@ (8004ea8 <__sfp_lock_acquire+0x8>)
 8004ea2:	f000 ba1a 	b.w	80052da <__retarget_lock_acquire_recursive>
 8004ea6:	bf00      	nop
 8004ea8:	20000895 	.word	0x20000895

08004eac <__sfp_lock_release>:
 8004eac:	4801      	ldr	r0, [pc, #4]	@ (8004eb4 <__sfp_lock_release+0x8>)
 8004eae:	f000 ba15 	b.w	80052dc <__retarget_lock_release_recursive>
 8004eb2:	bf00      	nop
 8004eb4:	20000895 	.word	0x20000895

08004eb8 <__sinit>:
 8004eb8:	b510      	push	{r4, lr}
 8004eba:	4604      	mov	r4, r0
 8004ebc:	f7ff fff0 	bl	8004ea0 <__sfp_lock_acquire>
 8004ec0:	6a23      	ldr	r3, [r4, #32]
 8004ec2:	b11b      	cbz	r3, 8004ecc <__sinit+0x14>
 8004ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ec8:	f7ff bff0 	b.w	8004eac <__sfp_lock_release>
 8004ecc:	4b04      	ldr	r3, [pc, #16]	@ (8004ee0 <__sinit+0x28>)
 8004ece:	6223      	str	r3, [r4, #32]
 8004ed0:	4b04      	ldr	r3, [pc, #16]	@ (8004ee4 <__sinit+0x2c>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1f5      	bne.n	8004ec4 <__sinit+0xc>
 8004ed8:	f7ff ffc4 	bl	8004e64 <global_stdio_init.part.0>
 8004edc:	e7f2      	b.n	8004ec4 <__sinit+0xc>
 8004ede:	bf00      	nop
 8004ee0:	08004e25 	.word	0x08004e25
 8004ee4:	2000088c 	.word	0x2000088c

08004ee8 <_fwalk_sglue>:
 8004ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004eec:	4607      	mov	r7, r0
 8004eee:	4688      	mov	r8, r1
 8004ef0:	4614      	mov	r4, r2
 8004ef2:	2600      	movs	r6, #0
 8004ef4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ef8:	f1b9 0901 	subs.w	r9, r9, #1
 8004efc:	d505      	bpl.n	8004f0a <_fwalk_sglue+0x22>
 8004efe:	6824      	ldr	r4, [r4, #0]
 8004f00:	2c00      	cmp	r4, #0
 8004f02:	d1f7      	bne.n	8004ef4 <_fwalk_sglue+0xc>
 8004f04:	4630      	mov	r0, r6
 8004f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f0a:	89ab      	ldrh	r3, [r5, #12]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d907      	bls.n	8004f20 <_fwalk_sglue+0x38>
 8004f10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f14:	3301      	adds	r3, #1
 8004f16:	d003      	beq.n	8004f20 <_fwalk_sglue+0x38>
 8004f18:	4629      	mov	r1, r5
 8004f1a:	4638      	mov	r0, r7
 8004f1c:	47c0      	blx	r8
 8004f1e:	4306      	orrs	r6, r0
 8004f20:	3568      	adds	r5, #104	@ 0x68
 8004f22:	e7e9      	b.n	8004ef8 <_fwalk_sglue+0x10>

08004f24 <iprintf>:
 8004f24:	b40f      	push	{r0, r1, r2, r3}
 8004f26:	b507      	push	{r0, r1, r2, lr}
 8004f28:	4906      	ldr	r1, [pc, #24]	@ (8004f44 <iprintf+0x20>)
 8004f2a:	ab04      	add	r3, sp, #16
 8004f2c:	6808      	ldr	r0, [r1, #0]
 8004f2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f32:	6881      	ldr	r1, [r0, #8]
 8004f34:	9301      	str	r3, [sp, #4]
 8004f36:	f000 fb03 	bl	8005540 <_vfiprintf_r>
 8004f3a:	b003      	add	sp, #12
 8004f3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f40:	b004      	add	sp, #16
 8004f42:	4770      	bx	lr
 8004f44:	20000034 	.word	0x20000034

08004f48 <_puts_r>:
 8004f48:	6a03      	ldr	r3, [r0, #32]
 8004f4a:	b570      	push	{r4, r5, r6, lr}
 8004f4c:	6884      	ldr	r4, [r0, #8]
 8004f4e:	4605      	mov	r5, r0
 8004f50:	460e      	mov	r6, r1
 8004f52:	b90b      	cbnz	r3, 8004f58 <_puts_r+0x10>
 8004f54:	f7ff ffb0 	bl	8004eb8 <__sinit>
 8004f58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f5a:	07db      	lsls	r3, r3, #31
 8004f5c:	d405      	bmi.n	8004f6a <_puts_r+0x22>
 8004f5e:	89a3      	ldrh	r3, [r4, #12]
 8004f60:	0598      	lsls	r0, r3, #22
 8004f62:	d402      	bmi.n	8004f6a <_puts_r+0x22>
 8004f64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f66:	f000 f9b8 	bl	80052da <__retarget_lock_acquire_recursive>
 8004f6a:	89a3      	ldrh	r3, [r4, #12]
 8004f6c:	0719      	lsls	r1, r3, #28
 8004f6e:	d502      	bpl.n	8004f76 <_puts_r+0x2e>
 8004f70:	6923      	ldr	r3, [r4, #16]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d135      	bne.n	8004fe2 <_puts_r+0x9a>
 8004f76:	4621      	mov	r1, r4
 8004f78:	4628      	mov	r0, r5
 8004f7a:	f000 f8c5 	bl	8005108 <__swsetup_r>
 8004f7e:	b380      	cbz	r0, 8004fe2 <_puts_r+0x9a>
 8004f80:	f04f 35ff 	mov.w	r5, #4294967295
 8004f84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f86:	07da      	lsls	r2, r3, #31
 8004f88:	d405      	bmi.n	8004f96 <_puts_r+0x4e>
 8004f8a:	89a3      	ldrh	r3, [r4, #12]
 8004f8c:	059b      	lsls	r3, r3, #22
 8004f8e:	d402      	bmi.n	8004f96 <_puts_r+0x4e>
 8004f90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f92:	f000 f9a3 	bl	80052dc <__retarget_lock_release_recursive>
 8004f96:	4628      	mov	r0, r5
 8004f98:	bd70      	pop	{r4, r5, r6, pc}
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	da04      	bge.n	8004fa8 <_puts_r+0x60>
 8004f9e:	69a2      	ldr	r2, [r4, #24]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	dc17      	bgt.n	8004fd4 <_puts_r+0x8c>
 8004fa4:	290a      	cmp	r1, #10
 8004fa6:	d015      	beq.n	8004fd4 <_puts_r+0x8c>
 8004fa8:	6823      	ldr	r3, [r4, #0]
 8004faa:	1c5a      	adds	r2, r3, #1
 8004fac:	6022      	str	r2, [r4, #0]
 8004fae:	7019      	strb	r1, [r3, #0]
 8004fb0:	68a3      	ldr	r3, [r4, #8]
 8004fb2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	60a3      	str	r3, [r4, #8]
 8004fba:	2900      	cmp	r1, #0
 8004fbc:	d1ed      	bne.n	8004f9a <_puts_r+0x52>
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	da11      	bge.n	8004fe6 <_puts_r+0x9e>
 8004fc2:	4622      	mov	r2, r4
 8004fc4:	210a      	movs	r1, #10
 8004fc6:	4628      	mov	r0, r5
 8004fc8:	f000 f85f 	bl	800508a <__swbuf_r>
 8004fcc:	3001      	adds	r0, #1
 8004fce:	d0d7      	beq.n	8004f80 <_puts_r+0x38>
 8004fd0:	250a      	movs	r5, #10
 8004fd2:	e7d7      	b.n	8004f84 <_puts_r+0x3c>
 8004fd4:	4622      	mov	r2, r4
 8004fd6:	4628      	mov	r0, r5
 8004fd8:	f000 f857 	bl	800508a <__swbuf_r>
 8004fdc:	3001      	adds	r0, #1
 8004fde:	d1e7      	bne.n	8004fb0 <_puts_r+0x68>
 8004fe0:	e7ce      	b.n	8004f80 <_puts_r+0x38>
 8004fe2:	3e01      	subs	r6, #1
 8004fe4:	e7e4      	b.n	8004fb0 <_puts_r+0x68>
 8004fe6:	6823      	ldr	r3, [r4, #0]
 8004fe8:	1c5a      	adds	r2, r3, #1
 8004fea:	6022      	str	r2, [r4, #0]
 8004fec:	220a      	movs	r2, #10
 8004fee:	701a      	strb	r2, [r3, #0]
 8004ff0:	e7ee      	b.n	8004fd0 <_puts_r+0x88>
	...

08004ff4 <puts>:
 8004ff4:	4b02      	ldr	r3, [pc, #8]	@ (8005000 <puts+0xc>)
 8004ff6:	4601      	mov	r1, r0
 8004ff8:	6818      	ldr	r0, [r3, #0]
 8004ffa:	f7ff bfa5 	b.w	8004f48 <_puts_r>
 8004ffe:	bf00      	nop
 8005000:	20000034 	.word	0x20000034

08005004 <__sread>:
 8005004:	b510      	push	{r4, lr}
 8005006:	460c      	mov	r4, r1
 8005008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800500c:	f000 f916 	bl	800523c <_read_r>
 8005010:	2800      	cmp	r0, #0
 8005012:	bfab      	itete	ge
 8005014:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005016:	89a3      	ldrhlt	r3, [r4, #12]
 8005018:	181b      	addge	r3, r3, r0
 800501a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800501e:	bfac      	ite	ge
 8005020:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005022:	81a3      	strhlt	r3, [r4, #12]
 8005024:	bd10      	pop	{r4, pc}

08005026 <__swrite>:
 8005026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800502a:	461f      	mov	r7, r3
 800502c:	898b      	ldrh	r3, [r1, #12]
 800502e:	05db      	lsls	r3, r3, #23
 8005030:	4605      	mov	r5, r0
 8005032:	460c      	mov	r4, r1
 8005034:	4616      	mov	r6, r2
 8005036:	d505      	bpl.n	8005044 <__swrite+0x1e>
 8005038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800503c:	2302      	movs	r3, #2
 800503e:	2200      	movs	r2, #0
 8005040:	f000 f8ea 	bl	8005218 <_lseek_r>
 8005044:	89a3      	ldrh	r3, [r4, #12]
 8005046:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800504a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800504e:	81a3      	strh	r3, [r4, #12]
 8005050:	4632      	mov	r2, r6
 8005052:	463b      	mov	r3, r7
 8005054:	4628      	mov	r0, r5
 8005056:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800505a:	f000 b901 	b.w	8005260 <_write_r>

0800505e <__sseek>:
 800505e:	b510      	push	{r4, lr}
 8005060:	460c      	mov	r4, r1
 8005062:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005066:	f000 f8d7 	bl	8005218 <_lseek_r>
 800506a:	1c43      	adds	r3, r0, #1
 800506c:	89a3      	ldrh	r3, [r4, #12]
 800506e:	bf15      	itete	ne
 8005070:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005072:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005076:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800507a:	81a3      	strheq	r3, [r4, #12]
 800507c:	bf18      	it	ne
 800507e:	81a3      	strhne	r3, [r4, #12]
 8005080:	bd10      	pop	{r4, pc}

08005082 <__sclose>:
 8005082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005086:	f000 b8b7 	b.w	80051f8 <_close_r>

0800508a <__swbuf_r>:
 800508a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800508c:	460e      	mov	r6, r1
 800508e:	4614      	mov	r4, r2
 8005090:	4605      	mov	r5, r0
 8005092:	b118      	cbz	r0, 800509c <__swbuf_r+0x12>
 8005094:	6a03      	ldr	r3, [r0, #32]
 8005096:	b90b      	cbnz	r3, 800509c <__swbuf_r+0x12>
 8005098:	f7ff ff0e 	bl	8004eb8 <__sinit>
 800509c:	69a3      	ldr	r3, [r4, #24]
 800509e:	60a3      	str	r3, [r4, #8]
 80050a0:	89a3      	ldrh	r3, [r4, #12]
 80050a2:	071a      	lsls	r2, r3, #28
 80050a4:	d501      	bpl.n	80050aa <__swbuf_r+0x20>
 80050a6:	6923      	ldr	r3, [r4, #16]
 80050a8:	b943      	cbnz	r3, 80050bc <__swbuf_r+0x32>
 80050aa:	4621      	mov	r1, r4
 80050ac:	4628      	mov	r0, r5
 80050ae:	f000 f82b 	bl	8005108 <__swsetup_r>
 80050b2:	b118      	cbz	r0, 80050bc <__swbuf_r+0x32>
 80050b4:	f04f 37ff 	mov.w	r7, #4294967295
 80050b8:	4638      	mov	r0, r7
 80050ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050bc:	6823      	ldr	r3, [r4, #0]
 80050be:	6922      	ldr	r2, [r4, #16]
 80050c0:	1a98      	subs	r0, r3, r2
 80050c2:	6963      	ldr	r3, [r4, #20]
 80050c4:	b2f6      	uxtb	r6, r6
 80050c6:	4283      	cmp	r3, r0
 80050c8:	4637      	mov	r7, r6
 80050ca:	dc05      	bgt.n	80050d8 <__swbuf_r+0x4e>
 80050cc:	4621      	mov	r1, r4
 80050ce:	4628      	mov	r0, r5
 80050d0:	f000 fd5e 	bl	8005b90 <_fflush_r>
 80050d4:	2800      	cmp	r0, #0
 80050d6:	d1ed      	bne.n	80050b4 <__swbuf_r+0x2a>
 80050d8:	68a3      	ldr	r3, [r4, #8]
 80050da:	3b01      	subs	r3, #1
 80050dc:	60a3      	str	r3, [r4, #8]
 80050de:	6823      	ldr	r3, [r4, #0]
 80050e0:	1c5a      	adds	r2, r3, #1
 80050e2:	6022      	str	r2, [r4, #0]
 80050e4:	701e      	strb	r6, [r3, #0]
 80050e6:	6962      	ldr	r2, [r4, #20]
 80050e8:	1c43      	adds	r3, r0, #1
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d004      	beq.n	80050f8 <__swbuf_r+0x6e>
 80050ee:	89a3      	ldrh	r3, [r4, #12]
 80050f0:	07db      	lsls	r3, r3, #31
 80050f2:	d5e1      	bpl.n	80050b8 <__swbuf_r+0x2e>
 80050f4:	2e0a      	cmp	r6, #10
 80050f6:	d1df      	bne.n	80050b8 <__swbuf_r+0x2e>
 80050f8:	4621      	mov	r1, r4
 80050fa:	4628      	mov	r0, r5
 80050fc:	f000 fd48 	bl	8005b90 <_fflush_r>
 8005100:	2800      	cmp	r0, #0
 8005102:	d0d9      	beq.n	80050b8 <__swbuf_r+0x2e>
 8005104:	e7d6      	b.n	80050b4 <__swbuf_r+0x2a>
	...

08005108 <__swsetup_r>:
 8005108:	b538      	push	{r3, r4, r5, lr}
 800510a:	4b29      	ldr	r3, [pc, #164]	@ (80051b0 <__swsetup_r+0xa8>)
 800510c:	4605      	mov	r5, r0
 800510e:	6818      	ldr	r0, [r3, #0]
 8005110:	460c      	mov	r4, r1
 8005112:	b118      	cbz	r0, 800511c <__swsetup_r+0x14>
 8005114:	6a03      	ldr	r3, [r0, #32]
 8005116:	b90b      	cbnz	r3, 800511c <__swsetup_r+0x14>
 8005118:	f7ff fece 	bl	8004eb8 <__sinit>
 800511c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005120:	0719      	lsls	r1, r3, #28
 8005122:	d422      	bmi.n	800516a <__swsetup_r+0x62>
 8005124:	06da      	lsls	r2, r3, #27
 8005126:	d407      	bmi.n	8005138 <__swsetup_r+0x30>
 8005128:	2209      	movs	r2, #9
 800512a:	602a      	str	r2, [r5, #0]
 800512c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005130:	81a3      	strh	r3, [r4, #12]
 8005132:	f04f 30ff 	mov.w	r0, #4294967295
 8005136:	e033      	b.n	80051a0 <__swsetup_r+0x98>
 8005138:	0758      	lsls	r0, r3, #29
 800513a:	d512      	bpl.n	8005162 <__swsetup_r+0x5a>
 800513c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800513e:	b141      	cbz	r1, 8005152 <__swsetup_r+0x4a>
 8005140:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005144:	4299      	cmp	r1, r3
 8005146:	d002      	beq.n	800514e <__swsetup_r+0x46>
 8005148:	4628      	mov	r0, r5
 800514a:	f000 f8d7 	bl	80052fc <_free_r>
 800514e:	2300      	movs	r3, #0
 8005150:	6363      	str	r3, [r4, #52]	@ 0x34
 8005152:	89a3      	ldrh	r3, [r4, #12]
 8005154:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005158:	81a3      	strh	r3, [r4, #12]
 800515a:	2300      	movs	r3, #0
 800515c:	6063      	str	r3, [r4, #4]
 800515e:	6923      	ldr	r3, [r4, #16]
 8005160:	6023      	str	r3, [r4, #0]
 8005162:	89a3      	ldrh	r3, [r4, #12]
 8005164:	f043 0308 	orr.w	r3, r3, #8
 8005168:	81a3      	strh	r3, [r4, #12]
 800516a:	6923      	ldr	r3, [r4, #16]
 800516c:	b94b      	cbnz	r3, 8005182 <__swsetup_r+0x7a>
 800516e:	89a3      	ldrh	r3, [r4, #12]
 8005170:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005174:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005178:	d003      	beq.n	8005182 <__swsetup_r+0x7a>
 800517a:	4621      	mov	r1, r4
 800517c:	4628      	mov	r0, r5
 800517e:	f000 fd55 	bl	8005c2c <__smakebuf_r>
 8005182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005186:	f013 0201 	ands.w	r2, r3, #1
 800518a:	d00a      	beq.n	80051a2 <__swsetup_r+0x9a>
 800518c:	2200      	movs	r2, #0
 800518e:	60a2      	str	r2, [r4, #8]
 8005190:	6962      	ldr	r2, [r4, #20]
 8005192:	4252      	negs	r2, r2
 8005194:	61a2      	str	r2, [r4, #24]
 8005196:	6922      	ldr	r2, [r4, #16]
 8005198:	b942      	cbnz	r2, 80051ac <__swsetup_r+0xa4>
 800519a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800519e:	d1c5      	bne.n	800512c <__swsetup_r+0x24>
 80051a0:	bd38      	pop	{r3, r4, r5, pc}
 80051a2:	0799      	lsls	r1, r3, #30
 80051a4:	bf58      	it	pl
 80051a6:	6962      	ldrpl	r2, [r4, #20]
 80051a8:	60a2      	str	r2, [r4, #8]
 80051aa:	e7f4      	b.n	8005196 <__swsetup_r+0x8e>
 80051ac:	2000      	movs	r0, #0
 80051ae:	e7f7      	b.n	80051a0 <__swsetup_r+0x98>
 80051b0:	20000034 	.word	0x20000034

080051b4 <memmove>:
 80051b4:	4288      	cmp	r0, r1
 80051b6:	b510      	push	{r4, lr}
 80051b8:	eb01 0402 	add.w	r4, r1, r2
 80051bc:	d902      	bls.n	80051c4 <memmove+0x10>
 80051be:	4284      	cmp	r4, r0
 80051c0:	4623      	mov	r3, r4
 80051c2:	d807      	bhi.n	80051d4 <memmove+0x20>
 80051c4:	1e43      	subs	r3, r0, #1
 80051c6:	42a1      	cmp	r1, r4
 80051c8:	d008      	beq.n	80051dc <memmove+0x28>
 80051ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051d2:	e7f8      	b.n	80051c6 <memmove+0x12>
 80051d4:	4402      	add	r2, r0
 80051d6:	4601      	mov	r1, r0
 80051d8:	428a      	cmp	r2, r1
 80051da:	d100      	bne.n	80051de <memmove+0x2a>
 80051dc:	bd10      	pop	{r4, pc}
 80051de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80051e6:	e7f7      	b.n	80051d8 <memmove+0x24>

080051e8 <memset>:
 80051e8:	4402      	add	r2, r0
 80051ea:	4603      	mov	r3, r0
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d100      	bne.n	80051f2 <memset+0xa>
 80051f0:	4770      	bx	lr
 80051f2:	f803 1b01 	strb.w	r1, [r3], #1
 80051f6:	e7f9      	b.n	80051ec <memset+0x4>

080051f8 <_close_r>:
 80051f8:	b538      	push	{r3, r4, r5, lr}
 80051fa:	4d06      	ldr	r5, [pc, #24]	@ (8005214 <_close_r+0x1c>)
 80051fc:	2300      	movs	r3, #0
 80051fe:	4604      	mov	r4, r0
 8005200:	4608      	mov	r0, r1
 8005202:	602b      	str	r3, [r5, #0]
 8005204:	f7fc fc51 	bl	8001aaa <_close>
 8005208:	1c43      	adds	r3, r0, #1
 800520a:	d102      	bne.n	8005212 <_close_r+0x1a>
 800520c:	682b      	ldr	r3, [r5, #0]
 800520e:	b103      	cbz	r3, 8005212 <_close_r+0x1a>
 8005210:	6023      	str	r3, [r4, #0]
 8005212:	bd38      	pop	{r3, r4, r5, pc}
 8005214:	20000890 	.word	0x20000890

08005218 <_lseek_r>:
 8005218:	b538      	push	{r3, r4, r5, lr}
 800521a:	4d07      	ldr	r5, [pc, #28]	@ (8005238 <_lseek_r+0x20>)
 800521c:	4604      	mov	r4, r0
 800521e:	4608      	mov	r0, r1
 8005220:	4611      	mov	r1, r2
 8005222:	2200      	movs	r2, #0
 8005224:	602a      	str	r2, [r5, #0]
 8005226:	461a      	mov	r2, r3
 8005228:	f7fc fc66 	bl	8001af8 <_lseek>
 800522c:	1c43      	adds	r3, r0, #1
 800522e:	d102      	bne.n	8005236 <_lseek_r+0x1e>
 8005230:	682b      	ldr	r3, [r5, #0]
 8005232:	b103      	cbz	r3, 8005236 <_lseek_r+0x1e>
 8005234:	6023      	str	r3, [r4, #0]
 8005236:	bd38      	pop	{r3, r4, r5, pc}
 8005238:	20000890 	.word	0x20000890

0800523c <_read_r>:
 800523c:	b538      	push	{r3, r4, r5, lr}
 800523e:	4d07      	ldr	r5, [pc, #28]	@ (800525c <_read_r+0x20>)
 8005240:	4604      	mov	r4, r0
 8005242:	4608      	mov	r0, r1
 8005244:	4611      	mov	r1, r2
 8005246:	2200      	movs	r2, #0
 8005248:	602a      	str	r2, [r5, #0]
 800524a:	461a      	mov	r2, r3
 800524c:	f7fc fc10 	bl	8001a70 <_read>
 8005250:	1c43      	adds	r3, r0, #1
 8005252:	d102      	bne.n	800525a <_read_r+0x1e>
 8005254:	682b      	ldr	r3, [r5, #0]
 8005256:	b103      	cbz	r3, 800525a <_read_r+0x1e>
 8005258:	6023      	str	r3, [r4, #0]
 800525a:	bd38      	pop	{r3, r4, r5, pc}
 800525c:	20000890 	.word	0x20000890

08005260 <_write_r>:
 8005260:	b538      	push	{r3, r4, r5, lr}
 8005262:	4d07      	ldr	r5, [pc, #28]	@ (8005280 <_write_r+0x20>)
 8005264:	4604      	mov	r4, r0
 8005266:	4608      	mov	r0, r1
 8005268:	4611      	mov	r1, r2
 800526a:	2200      	movs	r2, #0
 800526c:	602a      	str	r2, [r5, #0]
 800526e:	461a      	mov	r2, r3
 8005270:	f7fb faf8 	bl	8000864 <_write>
 8005274:	1c43      	adds	r3, r0, #1
 8005276:	d102      	bne.n	800527e <_write_r+0x1e>
 8005278:	682b      	ldr	r3, [r5, #0]
 800527a:	b103      	cbz	r3, 800527e <_write_r+0x1e>
 800527c:	6023      	str	r3, [r4, #0]
 800527e:	bd38      	pop	{r3, r4, r5, pc}
 8005280:	20000890 	.word	0x20000890

08005284 <__errno>:
 8005284:	4b01      	ldr	r3, [pc, #4]	@ (800528c <__errno+0x8>)
 8005286:	6818      	ldr	r0, [r3, #0]
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	20000034 	.word	0x20000034

08005290 <__libc_init_array>:
 8005290:	b570      	push	{r4, r5, r6, lr}
 8005292:	4d0d      	ldr	r5, [pc, #52]	@ (80052c8 <__libc_init_array+0x38>)
 8005294:	4c0d      	ldr	r4, [pc, #52]	@ (80052cc <__libc_init_array+0x3c>)
 8005296:	1b64      	subs	r4, r4, r5
 8005298:	10a4      	asrs	r4, r4, #2
 800529a:	2600      	movs	r6, #0
 800529c:	42a6      	cmp	r6, r4
 800529e:	d109      	bne.n	80052b4 <__libc_init_array+0x24>
 80052a0:	4d0b      	ldr	r5, [pc, #44]	@ (80052d0 <__libc_init_array+0x40>)
 80052a2:	4c0c      	ldr	r4, [pc, #48]	@ (80052d4 <__libc_init_array+0x44>)
 80052a4:	f000 fd30 	bl	8005d08 <_init>
 80052a8:	1b64      	subs	r4, r4, r5
 80052aa:	10a4      	asrs	r4, r4, #2
 80052ac:	2600      	movs	r6, #0
 80052ae:	42a6      	cmp	r6, r4
 80052b0:	d105      	bne.n	80052be <__libc_init_array+0x2e>
 80052b2:	bd70      	pop	{r4, r5, r6, pc}
 80052b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80052b8:	4798      	blx	r3
 80052ba:	3601      	adds	r6, #1
 80052bc:	e7ee      	b.n	800529c <__libc_init_array+0xc>
 80052be:	f855 3b04 	ldr.w	r3, [r5], #4
 80052c2:	4798      	blx	r3
 80052c4:	3601      	adds	r6, #1
 80052c6:	e7f2      	b.n	80052ae <__libc_init_array+0x1e>
 80052c8:	08005ef8 	.word	0x08005ef8
 80052cc:	08005ef8 	.word	0x08005ef8
 80052d0:	08005ef8 	.word	0x08005ef8
 80052d4:	08005efc 	.word	0x08005efc

080052d8 <__retarget_lock_init_recursive>:
 80052d8:	4770      	bx	lr

080052da <__retarget_lock_acquire_recursive>:
 80052da:	4770      	bx	lr

080052dc <__retarget_lock_release_recursive>:
 80052dc:	4770      	bx	lr

080052de <memcpy>:
 80052de:	440a      	add	r2, r1
 80052e0:	4291      	cmp	r1, r2
 80052e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80052e6:	d100      	bne.n	80052ea <memcpy+0xc>
 80052e8:	4770      	bx	lr
 80052ea:	b510      	push	{r4, lr}
 80052ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052f4:	4291      	cmp	r1, r2
 80052f6:	d1f9      	bne.n	80052ec <memcpy+0xe>
 80052f8:	bd10      	pop	{r4, pc}
	...

080052fc <_free_r>:
 80052fc:	b538      	push	{r3, r4, r5, lr}
 80052fe:	4605      	mov	r5, r0
 8005300:	2900      	cmp	r1, #0
 8005302:	d041      	beq.n	8005388 <_free_r+0x8c>
 8005304:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005308:	1f0c      	subs	r4, r1, #4
 800530a:	2b00      	cmp	r3, #0
 800530c:	bfb8      	it	lt
 800530e:	18e4      	addlt	r4, r4, r3
 8005310:	f000 f8e0 	bl	80054d4 <__malloc_lock>
 8005314:	4a1d      	ldr	r2, [pc, #116]	@ (800538c <_free_r+0x90>)
 8005316:	6813      	ldr	r3, [r2, #0]
 8005318:	b933      	cbnz	r3, 8005328 <_free_r+0x2c>
 800531a:	6063      	str	r3, [r4, #4]
 800531c:	6014      	str	r4, [r2, #0]
 800531e:	4628      	mov	r0, r5
 8005320:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005324:	f000 b8dc 	b.w	80054e0 <__malloc_unlock>
 8005328:	42a3      	cmp	r3, r4
 800532a:	d908      	bls.n	800533e <_free_r+0x42>
 800532c:	6820      	ldr	r0, [r4, #0]
 800532e:	1821      	adds	r1, r4, r0
 8005330:	428b      	cmp	r3, r1
 8005332:	bf01      	itttt	eq
 8005334:	6819      	ldreq	r1, [r3, #0]
 8005336:	685b      	ldreq	r3, [r3, #4]
 8005338:	1809      	addeq	r1, r1, r0
 800533a:	6021      	streq	r1, [r4, #0]
 800533c:	e7ed      	b.n	800531a <_free_r+0x1e>
 800533e:	461a      	mov	r2, r3
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	b10b      	cbz	r3, 8005348 <_free_r+0x4c>
 8005344:	42a3      	cmp	r3, r4
 8005346:	d9fa      	bls.n	800533e <_free_r+0x42>
 8005348:	6811      	ldr	r1, [r2, #0]
 800534a:	1850      	adds	r0, r2, r1
 800534c:	42a0      	cmp	r0, r4
 800534e:	d10b      	bne.n	8005368 <_free_r+0x6c>
 8005350:	6820      	ldr	r0, [r4, #0]
 8005352:	4401      	add	r1, r0
 8005354:	1850      	adds	r0, r2, r1
 8005356:	4283      	cmp	r3, r0
 8005358:	6011      	str	r1, [r2, #0]
 800535a:	d1e0      	bne.n	800531e <_free_r+0x22>
 800535c:	6818      	ldr	r0, [r3, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	6053      	str	r3, [r2, #4]
 8005362:	4408      	add	r0, r1
 8005364:	6010      	str	r0, [r2, #0]
 8005366:	e7da      	b.n	800531e <_free_r+0x22>
 8005368:	d902      	bls.n	8005370 <_free_r+0x74>
 800536a:	230c      	movs	r3, #12
 800536c:	602b      	str	r3, [r5, #0]
 800536e:	e7d6      	b.n	800531e <_free_r+0x22>
 8005370:	6820      	ldr	r0, [r4, #0]
 8005372:	1821      	adds	r1, r4, r0
 8005374:	428b      	cmp	r3, r1
 8005376:	bf04      	itt	eq
 8005378:	6819      	ldreq	r1, [r3, #0]
 800537a:	685b      	ldreq	r3, [r3, #4]
 800537c:	6063      	str	r3, [r4, #4]
 800537e:	bf04      	itt	eq
 8005380:	1809      	addeq	r1, r1, r0
 8005382:	6021      	streq	r1, [r4, #0]
 8005384:	6054      	str	r4, [r2, #4]
 8005386:	e7ca      	b.n	800531e <_free_r+0x22>
 8005388:	bd38      	pop	{r3, r4, r5, pc}
 800538a:	bf00      	nop
 800538c:	2000089c 	.word	0x2000089c

08005390 <sbrk_aligned>:
 8005390:	b570      	push	{r4, r5, r6, lr}
 8005392:	4e0f      	ldr	r6, [pc, #60]	@ (80053d0 <sbrk_aligned+0x40>)
 8005394:	460c      	mov	r4, r1
 8005396:	6831      	ldr	r1, [r6, #0]
 8005398:	4605      	mov	r5, r0
 800539a:	b911      	cbnz	r1, 80053a2 <sbrk_aligned+0x12>
 800539c:	f000 fca4 	bl	8005ce8 <_sbrk_r>
 80053a0:	6030      	str	r0, [r6, #0]
 80053a2:	4621      	mov	r1, r4
 80053a4:	4628      	mov	r0, r5
 80053a6:	f000 fc9f 	bl	8005ce8 <_sbrk_r>
 80053aa:	1c43      	adds	r3, r0, #1
 80053ac:	d103      	bne.n	80053b6 <sbrk_aligned+0x26>
 80053ae:	f04f 34ff 	mov.w	r4, #4294967295
 80053b2:	4620      	mov	r0, r4
 80053b4:	bd70      	pop	{r4, r5, r6, pc}
 80053b6:	1cc4      	adds	r4, r0, #3
 80053b8:	f024 0403 	bic.w	r4, r4, #3
 80053bc:	42a0      	cmp	r0, r4
 80053be:	d0f8      	beq.n	80053b2 <sbrk_aligned+0x22>
 80053c0:	1a21      	subs	r1, r4, r0
 80053c2:	4628      	mov	r0, r5
 80053c4:	f000 fc90 	bl	8005ce8 <_sbrk_r>
 80053c8:	3001      	adds	r0, #1
 80053ca:	d1f2      	bne.n	80053b2 <sbrk_aligned+0x22>
 80053cc:	e7ef      	b.n	80053ae <sbrk_aligned+0x1e>
 80053ce:	bf00      	nop
 80053d0:	20000898 	.word	0x20000898

080053d4 <_malloc_r>:
 80053d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053d8:	1ccd      	adds	r5, r1, #3
 80053da:	f025 0503 	bic.w	r5, r5, #3
 80053de:	3508      	adds	r5, #8
 80053e0:	2d0c      	cmp	r5, #12
 80053e2:	bf38      	it	cc
 80053e4:	250c      	movcc	r5, #12
 80053e6:	2d00      	cmp	r5, #0
 80053e8:	4606      	mov	r6, r0
 80053ea:	db01      	blt.n	80053f0 <_malloc_r+0x1c>
 80053ec:	42a9      	cmp	r1, r5
 80053ee:	d904      	bls.n	80053fa <_malloc_r+0x26>
 80053f0:	230c      	movs	r3, #12
 80053f2:	6033      	str	r3, [r6, #0]
 80053f4:	2000      	movs	r0, #0
 80053f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80054d0 <_malloc_r+0xfc>
 80053fe:	f000 f869 	bl	80054d4 <__malloc_lock>
 8005402:	f8d8 3000 	ldr.w	r3, [r8]
 8005406:	461c      	mov	r4, r3
 8005408:	bb44      	cbnz	r4, 800545c <_malloc_r+0x88>
 800540a:	4629      	mov	r1, r5
 800540c:	4630      	mov	r0, r6
 800540e:	f7ff ffbf 	bl	8005390 <sbrk_aligned>
 8005412:	1c43      	adds	r3, r0, #1
 8005414:	4604      	mov	r4, r0
 8005416:	d158      	bne.n	80054ca <_malloc_r+0xf6>
 8005418:	f8d8 4000 	ldr.w	r4, [r8]
 800541c:	4627      	mov	r7, r4
 800541e:	2f00      	cmp	r7, #0
 8005420:	d143      	bne.n	80054aa <_malloc_r+0xd6>
 8005422:	2c00      	cmp	r4, #0
 8005424:	d04b      	beq.n	80054be <_malloc_r+0xea>
 8005426:	6823      	ldr	r3, [r4, #0]
 8005428:	4639      	mov	r1, r7
 800542a:	4630      	mov	r0, r6
 800542c:	eb04 0903 	add.w	r9, r4, r3
 8005430:	f000 fc5a 	bl	8005ce8 <_sbrk_r>
 8005434:	4581      	cmp	r9, r0
 8005436:	d142      	bne.n	80054be <_malloc_r+0xea>
 8005438:	6821      	ldr	r1, [r4, #0]
 800543a:	1a6d      	subs	r5, r5, r1
 800543c:	4629      	mov	r1, r5
 800543e:	4630      	mov	r0, r6
 8005440:	f7ff ffa6 	bl	8005390 <sbrk_aligned>
 8005444:	3001      	adds	r0, #1
 8005446:	d03a      	beq.n	80054be <_malloc_r+0xea>
 8005448:	6823      	ldr	r3, [r4, #0]
 800544a:	442b      	add	r3, r5
 800544c:	6023      	str	r3, [r4, #0]
 800544e:	f8d8 3000 	ldr.w	r3, [r8]
 8005452:	685a      	ldr	r2, [r3, #4]
 8005454:	bb62      	cbnz	r2, 80054b0 <_malloc_r+0xdc>
 8005456:	f8c8 7000 	str.w	r7, [r8]
 800545a:	e00f      	b.n	800547c <_malloc_r+0xa8>
 800545c:	6822      	ldr	r2, [r4, #0]
 800545e:	1b52      	subs	r2, r2, r5
 8005460:	d420      	bmi.n	80054a4 <_malloc_r+0xd0>
 8005462:	2a0b      	cmp	r2, #11
 8005464:	d917      	bls.n	8005496 <_malloc_r+0xc2>
 8005466:	1961      	adds	r1, r4, r5
 8005468:	42a3      	cmp	r3, r4
 800546a:	6025      	str	r5, [r4, #0]
 800546c:	bf18      	it	ne
 800546e:	6059      	strne	r1, [r3, #4]
 8005470:	6863      	ldr	r3, [r4, #4]
 8005472:	bf08      	it	eq
 8005474:	f8c8 1000 	streq.w	r1, [r8]
 8005478:	5162      	str	r2, [r4, r5]
 800547a:	604b      	str	r3, [r1, #4]
 800547c:	4630      	mov	r0, r6
 800547e:	f000 f82f 	bl	80054e0 <__malloc_unlock>
 8005482:	f104 000b 	add.w	r0, r4, #11
 8005486:	1d23      	adds	r3, r4, #4
 8005488:	f020 0007 	bic.w	r0, r0, #7
 800548c:	1ac2      	subs	r2, r0, r3
 800548e:	bf1c      	itt	ne
 8005490:	1a1b      	subne	r3, r3, r0
 8005492:	50a3      	strne	r3, [r4, r2]
 8005494:	e7af      	b.n	80053f6 <_malloc_r+0x22>
 8005496:	6862      	ldr	r2, [r4, #4]
 8005498:	42a3      	cmp	r3, r4
 800549a:	bf0c      	ite	eq
 800549c:	f8c8 2000 	streq.w	r2, [r8]
 80054a0:	605a      	strne	r2, [r3, #4]
 80054a2:	e7eb      	b.n	800547c <_malloc_r+0xa8>
 80054a4:	4623      	mov	r3, r4
 80054a6:	6864      	ldr	r4, [r4, #4]
 80054a8:	e7ae      	b.n	8005408 <_malloc_r+0x34>
 80054aa:	463c      	mov	r4, r7
 80054ac:	687f      	ldr	r7, [r7, #4]
 80054ae:	e7b6      	b.n	800541e <_malloc_r+0x4a>
 80054b0:	461a      	mov	r2, r3
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	42a3      	cmp	r3, r4
 80054b6:	d1fb      	bne.n	80054b0 <_malloc_r+0xdc>
 80054b8:	2300      	movs	r3, #0
 80054ba:	6053      	str	r3, [r2, #4]
 80054bc:	e7de      	b.n	800547c <_malloc_r+0xa8>
 80054be:	230c      	movs	r3, #12
 80054c0:	6033      	str	r3, [r6, #0]
 80054c2:	4630      	mov	r0, r6
 80054c4:	f000 f80c 	bl	80054e0 <__malloc_unlock>
 80054c8:	e794      	b.n	80053f4 <_malloc_r+0x20>
 80054ca:	6005      	str	r5, [r0, #0]
 80054cc:	e7d6      	b.n	800547c <_malloc_r+0xa8>
 80054ce:	bf00      	nop
 80054d0:	2000089c 	.word	0x2000089c

080054d4 <__malloc_lock>:
 80054d4:	4801      	ldr	r0, [pc, #4]	@ (80054dc <__malloc_lock+0x8>)
 80054d6:	f7ff bf00 	b.w	80052da <__retarget_lock_acquire_recursive>
 80054da:	bf00      	nop
 80054dc:	20000894 	.word	0x20000894

080054e0 <__malloc_unlock>:
 80054e0:	4801      	ldr	r0, [pc, #4]	@ (80054e8 <__malloc_unlock+0x8>)
 80054e2:	f7ff befb 	b.w	80052dc <__retarget_lock_release_recursive>
 80054e6:	bf00      	nop
 80054e8:	20000894 	.word	0x20000894

080054ec <__sfputc_r>:
 80054ec:	6893      	ldr	r3, [r2, #8]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	b410      	push	{r4}
 80054f4:	6093      	str	r3, [r2, #8]
 80054f6:	da08      	bge.n	800550a <__sfputc_r+0x1e>
 80054f8:	6994      	ldr	r4, [r2, #24]
 80054fa:	42a3      	cmp	r3, r4
 80054fc:	db01      	blt.n	8005502 <__sfputc_r+0x16>
 80054fe:	290a      	cmp	r1, #10
 8005500:	d103      	bne.n	800550a <__sfputc_r+0x1e>
 8005502:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005506:	f7ff bdc0 	b.w	800508a <__swbuf_r>
 800550a:	6813      	ldr	r3, [r2, #0]
 800550c:	1c58      	adds	r0, r3, #1
 800550e:	6010      	str	r0, [r2, #0]
 8005510:	7019      	strb	r1, [r3, #0]
 8005512:	4608      	mov	r0, r1
 8005514:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005518:	4770      	bx	lr

0800551a <__sfputs_r>:
 800551a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800551c:	4606      	mov	r6, r0
 800551e:	460f      	mov	r7, r1
 8005520:	4614      	mov	r4, r2
 8005522:	18d5      	adds	r5, r2, r3
 8005524:	42ac      	cmp	r4, r5
 8005526:	d101      	bne.n	800552c <__sfputs_r+0x12>
 8005528:	2000      	movs	r0, #0
 800552a:	e007      	b.n	800553c <__sfputs_r+0x22>
 800552c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005530:	463a      	mov	r2, r7
 8005532:	4630      	mov	r0, r6
 8005534:	f7ff ffda 	bl	80054ec <__sfputc_r>
 8005538:	1c43      	adds	r3, r0, #1
 800553a:	d1f3      	bne.n	8005524 <__sfputs_r+0xa>
 800553c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005540 <_vfiprintf_r>:
 8005540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005544:	460d      	mov	r5, r1
 8005546:	b09d      	sub	sp, #116	@ 0x74
 8005548:	4614      	mov	r4, r2
 800554a:	4698      	mov	r8, r3
 800554c:	4606      	mov	r6, r0
 800554e:	b118      	cbz	r0, 8005558 <_vfiprintf_r+0x18>
 8005550:	6a03      	ldr	r3, [r0, #32]
 8005552:	b90b      	cbnz	r3, 8005558 <_vfiprintf_r+0x18>
 8005554:	f7ff fcb0 	bl	8004eb8 <__sinit>
 8005558:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800555a:	07d9      	lsls	r1, r3, #31
 800555c:	d405      	bmi.n	800556a <_vfiprintf_r+0x2a>
 800555e:	89ab      	ldrh	r3, [r5, #12]
 8005560:	059a      	lsls	r2, r3, #22
 8005562:	d402      	bmi.n	800556a <_vfiprintf_r+0x2a>
 8005564:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005566:	f7ff feb8 	bl	80052da <__retarget_lock_acquire_recursive>
 800556a:	89ab      	ldrh	r3, [r5, #12]
 800556c:	071b      	lsls	r3, r3, #28
 800556e:	d501      	bpl.n	8005574 <_vfiprintf_r+0x34>
 8005570:	692b      	ldr	r3, [r5, #16]
 8005572:	b99b      	cbnz	r3, 800559c <_vfiprintf_r+0x5c>
 8005574:	4629      	mov	r1, r5
 8005576:	4630      	mov	r0, r6
 8005578:	f7ff fdc6 	bl	8005108 <__swsetup_r>
 800557c:	b170      	cbz	r0, 800559c <_vfiprintf_r+0x5c>
 800557e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005580:	07dc      	lsls	r4, r3, #31
 8005582:	d504      	bpl.n	800558e <_vfiprintf_r+0x4e>
 8005584:	f04f 30ff 	mov.w	r0, #4294967295
 8005588:	b01d      	add	sp, #116	@ 0x74
 800558a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800558e:	89ab      	ldrh	r3, [r5, #12]
 8005590:	0598      	lsls	r0, r3, #22
 8005592:	d4f7      	bmi.n	8005584 <_vfiprintf_r+0x44>
 8005594:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005596:	f7ff fea1 	bl	80052dc <__retarget_lock_release_recursive>
 800559a:	e7f3      	b.n	8005584 <_vfiprintf_r+0x44>
 800559c:	2300      	movs	r3, #0
 800559e:	9309      	str	r3, [sp, #36]	@ 0x24
 80055a0:	2320      	movs	r3, #32
 80055a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80055a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80055aa:	2330      	movs	r3, #48	@ 0x30
 80055ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800575c <_vfiprintf_r+0x21c>
 80055b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80055b4:	f04f 0901 	mov.w	r9, #1
 80055b8:	4623      	mov	r3, r4
 80055ba:	469a      	mov	sl, r3
 80055bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055c0:	b10a      	cbz	r2, 80055c6 <_vfiprintf_r+0x86>
 80055c2:	2a25      	cmp	r2, #37	@ 0x25
 80055c4:	d1f9      	bne.n	80055ba <_vfiprintf_r+0x7a>
 80055c6:	ebba 0b04 	subs.w	fp, sl, r4
 80055ca:	d00b      	beq.n	80055e4 <_vfiprintf_r+0xa4>
 80055cc:	465b      	mov	r3, fp
 80055ce:	4622      	mov	r2, r4
 80055d0:	4629      	mov	r1, r5
 80055d2:	4630      	mov	r0, r6
 80055d4:	f7ff ffa1 	bl	800551a <__sfputs_r>
 80055d8:	3001      	adds	r0, #1
 80055da:	f000 80a7 	beq.w	800572c <_vfiprintf_r+0x1ec>
 80055de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055e0:	445a      	add	r2, fp
 80055e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80055e4:	f89a 3000 	ldrb.w	r3, [sl]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f000 809f 	beq.w	800572c <_vfiprintf_r+0x1ec>
 80055ee:	2300      	movs	r3, #0
 80055f0:	f04f 32ff 	mov.w	r2, #4294967295
 80055f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055f8:	f10a 0a01 	add.w	sl, sl, #1
 80055fc:	9304      	str	r3, [sp, #16]
 80055fe:	9307      	str	r3, [sp, #28]
 8005600:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005604:	931a      	str	r3, [sp, #104]	@ 0x68
 8005606:	4654      	mov	r4, sl
 8005608:	2205      	movs	r2, #5
 800560a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800560e:	4853      	ldr	r0, [pc, #332]	@ (800575c <_vfiprintf_r+0x21c>)
 8005610:	f7fa fde6 	bl	80001e0 <memchr>
 8005614:	9a04      	ldr	r2, [sp, #16]
 8005616:	b9d8      	cbnz	r0, 8005650 <_vfiprintf_r+0x110>
 8005618:	06d1      	lsls	r1, r2, #27
 800561a:	bf44      	itt	mi
 800561c:	2320      	movmi	r3, #32
 800561e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005622:	0713      	lsls	r3, r2, #28
 8005624:	bf44      	itt	mi
 8005626:	232b      	movmi	r3, #43	@ 0x2b
 8005628:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800562c:	f89a 3000 	ldrb.w	r3, [sl]
 8005630:	2b2a      	cmp	r3, #42	@ 0x2a
 8005632:	d015      	beq.n	8005660 <_vfiprintf_r+0x120>
 8005634:	9a07      	ldr	r2, [sp, #28]
 8005636:	4654      	mov	r4, sl
 8005638:	2000      	movs	r0, #0
 800563a:	f04f 0c0a 	mov.w	ip, #10
 800563e:	4621      	mov	r1, r4
 8005640:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005644:	3b30      	subs	r3, #48	@ 0x30
 8005646:	2b09      	cmp	r3, #9
 8005648:	d94b      	bls.n	80056e2 <_vfiprintf_r+0x1a2>
 800564a:	b1b0      	cbz	r0, 800567a <_vfiprintf_r+0x13a>
 800564c:	9207      	str	r2, [sp, #28]
 800564e:	e014      	b.n	800567a <_vfiprintf_r+0x13a>
 8005650:	eba0 0308 	sub.w	r3, r0, r8
 8005654:	fa09 f303 	lsl.w	r3, r9, r3
 8005658:	4313      	orrs	r3, r2
 800565a:	9304      	str	r3, [sp, #16]
 800565c:	46a2      	mov	sl, r4
 800565e:	e7d2      	b.n	8005606 <_vfiprintf_r+0xc6>
 8005660:	9b03      	ldr	r3, [sp, #12]
 8005662:	1d19      	adds	r1, r3, #4
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	9103      	str	r1, [sp, #12]
 8005668:	2b00      	cmp	r3, #0
 800566a:	bfbb      	ittet	lt
 800566c:	425b      	neglt	r3, r3
 800566e:	f042 0202 	orrlt.w	r2, r2, #2
 8005672:	9307      	strge	r3, [sp, #28]
 8005674:	9307      	strlt	r3, [sp, #28]
 8005676:	bfb8      	it	lt
 8005678:	9204      	strlt	r2, [sp, #16]
 800567a:	7823      	ldrb	r3, [r4, #0]
 800567c:	2b2e      	cmp	r3, #46	@ 0x2e
 800567e:	d10a      	bne.n	8005696 <_vfiprintf_r+0x156>
 8005680:	7863      	ldrb	r3, [r4, #1]
 8005682:	2b2a      	cmp	r3, #42	@ 0x2a
 8005684:	d132      	bne.n	80056ec <_vfiprintf_r+0x1ac>
 8005686:	9b03      	ldr	r3, [sp, #12]
 8005688:	1d1a      	adds	r2, r3, #4
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	9203      	str	r2, [sp, #12]
 800568e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005692:	3402      	adds	r4, #2
 8005694:	9305      	str	r3, [sp, #20]
 8005696:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800576c <_vfiprintf_r+0x22c>
 800569a:	7821      	ldrb	r1, [r4, #0]
 800569c:	2203      	movs	r2, #3
 800569e:	4650      	mov	r0, sl
 80056a0:	f7fa fd9e 	bl	80001e0 <memchr>
 80056a4:	b138      	cbz	r0, 80056b6 <_vfiprintf_r+0x176>
 80056a6:	9b04      	ldr	r3, [sp, #16]
 80056a8:	eba0 000a 	sub.w	r0, r0, sl
 80056ac:	2240      	movs	r2, #64	@ 0x40
 80056ae:	4082      	lsls	r2, r0
 80056b0:	4313      	orrs	r3, r2
 80056b2:	3401      	adds	r4, #1
 80056b4:	9304      	str	r3, [sp, #16]
 80056b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056ba:	4829      	ldr	r0, [pc, #164]	@ (8005760 <_vfiprintf_r+0x220>)
 80056bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80056c0:	2206      	movs	r2, #6
 80056c2:	f7fa fd8d 	bl	80001e0 <memchr>
 80056c6:	2800      	cmp	r0, #0
 80056c8:	d03f      	beq.n	800574a <_vfiprintf_r+0x20a>
 80056ca:	4b26      	ldr	r3, [pc, #152]	@ (8005764 <_vfiprintf_r+0x224>)
 80056cc:	bb1b      	cbnz	r3, 8005716 <_vfiprintf_r+0x1d6>
 80056ce:	9b03      	ldr	r3, [sp, #12]
 80056d0:	3307      	adds	r3, #7
 80056d2:	f023 0307 	bic.w	r3, r3, #7
 80056d6:	3308      	adds	r3, #8
 80056d8:	9303      	str	r3, [sp, #12]
 80056da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056dc:	443b      	add	r3, r7
 80056de:	9309      	str	r3, [sp, #36]	@ 0x24
 80056e0:	e76a      	b.n	80055b8 <_vfiprintf_r+0x78>
 80056e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80056e6:	460c      	mov	r4, r1
 80056e8:	2001      	movs	r0, #1
 80056ea:	e7a8      	b.n	800563e <_vfiprintf_r+0xfe>
 80056ec:	2300      	movs	r3, #0
 80056ee:	3401      	adds	r4, #1
 80056f0:	9305      	str	r3, [sp, #20]
 80056f2:	4619      	mov	r1, r3
 80056f4:	f04f 0c0a 	mov.w	ip, #10
 80056f8:	4620      	mov	r0, r4
 80056fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056fe:	3a30      	subs	r2, #48	@ 0x30
 8005700:	2a09      	cmp	r2, #9
 8005702:	d903      	bls.n	800570c <_vfiprintf_r+0x1cc>
 8005704:	2b00      	cmp	r3, #0
 8005706:	d0c6      	beq.n	8005696 <_vfiprintf_r+0x156>
 8005708:	9105      	str	r1, [sp, #20]
 800570a:	e7c4      	b.n	8005696 <_vfiprintf_r+0x156>
 800570c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005710:	4604      	mov	r4, r0
 8005712:	2301      	movs	r3, #1
 8005714:	e7f0      	b.n	80056f8 <_vfiprintf_r+0x1b8>
 8005716:	ab03      	add	r3, sp, #12
 8005718:	9300      	str	r3, [sp, #0]
 800571a:	462a      	mov	r2, r5
 800571c:	4b12      	ldr	r3, [pc, #72]	@ (8005768 <_vfiprintf_r+0x228>)
 800571e:	a904      	add	r1, sp, #16
 8005720:	4630      	mov	r0, r6
 8005722:	f3af 8000 	nop.w
 8005726:	4607      	mov	r7, r0
 8005728:	1c78      	adds	r0, r7, #1
 800572a:	d1d6      	bne.n	80056da <_vfiprintf_r+0x19a>
 800572c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800572e:	07d9      	lsls	r1, r3, #31
 8005730:	d405      	bmi.n	800573e <_vfiprintf_r+0x1fe>
 8005732:	89ab      	ldrh	r3, [r5, #12]
 8005734:	059a      	lsls	r2, r3, #22
 8005736:	d402      	bmi.n	800573e <_vfiprintf_r+0x1fe>
 8005738:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800573a:	f7ff fdcf 	bl	80052dc <__retarget_lock_release_recursive>
 800573e:	89ab      	ldrh	r3, [r5, #12]
 8005740:	065b      	lsls	r3, r3, #25
 8005742:	f53f af1f 	bmi.w	8005584 <_vfiprintf_r+0x44>
 8005746:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005748:	e71e      	b.n	8005588 <_vfiprintf_r+0x48>
 800574a:	ab03      	add	r3, sp, #12
 800574c:	9300      	str	r3, [sp, #0]
 800574e:	462a      	mov	r2, r5
 8005750:	4b05      	ldr	r3, [pc, #20]	@ (8005768 <_vfiprintf_r+0x228>)
 8005752:	a904      	add	r1, sp, #16
 8005754:	4630      	mov	r0, r6
 8005756:	f000 f879 	bl	800584c <_printf_i>
 800575a:	e7e4      	b.n	8005726 <_vfiprintf_r+0x1e6>
 800575c:	08005ebc 	.word	0x08005ebc
 8005760:	08005ec6 	.word	0x08005ec6
 8005764:	00000000 	.word	0x00000000
 8005768:	0800551b 	.word	0x0800551b
 800576c:	08005ec2 	.word	0x08005ec2

08005770 <_printf_common>:
 8005770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005774:	4616      	mov	r6, r2
 8005776:	4698      	mov	r8, r3
 8005778:	688a      	ldr	r2, [r1, #8]
 800577a:	690b      	ldr	r3, [r1, #16]
 800577c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005780:	4293      	cmp	r3, r2
 8005782:	bfb8      	it	lt
 8005784:	4613      	movlt	r3, r2
 8005786:	6033      	str	r3, [r6, #0]
 8005788:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800578c:	4607      	mov	r7, r0
 800578e:	460c      	mov	r4, r1
 8005790:	b10a      	cbz	r2, 8005796 <_printf_common+0x26>
 8005792:	3301      	adds	r3, #1
 8005794:	6033      	str	r3, [r6, #0]
 8005796:	6823      	ldr	r3, [r4, #0]
 8005798:	0699      	lsls	r1, r3, #26
 800579a:	bf42      	ittt	mi
 800579c:	6833      	ldrmi	r3, [r6, #0]
 800579e:	3302      	addmi	r3, #2
 80057a0:	6033      	strmi	r3, [r6, #0]
 80057a2:	6825      	ldr	r5, [r4, #0]
 80057a4:	f015 0506 	ands.w	r5, r5, #6
 80057a8:	d106      	bne.n	80057b8 <_printf_common+0x48>
 80057aa:	f104 0a19 	add.w	sl, r4, #25
 80057ae:	68e3      	ldr	r3, [r4, #12]
 80057b0:	6832      	ldr	r2, [r6, #0]
 80057b2:	1a9b      	subs	r3, r3, r2
 80057b4:	42ab      	cmp	r3, r5
 80057b6:	dc26      	bgt.n	8005806 <_printf_common+0x96>
 80057b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80057bc:	6822      	ldr	r2, [r4, #0]
 80057be:	3b00      	subs	r3, #0
 80057c0:	bf18      	it	ne
 80057c2:	2301      	movne	r3, #1
 80057c4:	0692      	lsls	r2, r2, #26
 80057c6:	d42b      	bmi.n	8005820 <_printf_common+0xb0>
 80057c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80057cc:	4641      	mov	r1, r8
 80057ce:	4638      	mov	r0, r7
 80057d0:	47c8      	blx	r9
 80057d2:	3001      	adds	r0, #1
 80057d4:	d01e      	beq.n	8005814 <_printf_common+0xa4>
 80057d6:	6823      	ldr	r3, [r4, #0]
 80057d8:	6922      	ldr	r2, [r4, #16]
 80057da:	f003 0306 	and.w	r3, r3, #6
 80057de:	2b04      	cmp	r3, #4
 80057e0:	bf02      	ittt	eq
 80057e2:	68e5      	ldreq	r5, [r4, #12]
 80057e4:	6833      	ldreq	r3, [r6, #0]
 80057e6:	1aed      	subeq	r5, r5, r3
 80057e8:	68a3      	ldr	r3, [r4, #8]
 80057ea:	bf0c      	ite	eq
 80057ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057f0:	2500      	movne	r5, #0
 80057f2:	4293      	cmp	r3, r2
 80057f4:	bfc4      	itt	gt
 80057f6:	1a9b      	subgt	r3, r3, r2
 80057f8:	18ed      	addgt	r5, r5, r3
 80057fa:	2600      	movs	r6, #0
 80057fc:	341a      	adds	r4, #26
 80057fe:	42b5      	cmp	r5, r6
 8005800:	d11a      	bne.n	8005838 <_printf_common+0xc8>
 8005802:	2000      	movs	r0, #0
 8005804:	e008      	b.n	8005818 <_printf_common+0xa8>
 8005806:	2301      	movs	r3, #1
 8005808:	4652      	mov	r2, sl
 800580a:	4641      	mov	r1, r8
 800580c:	4638      	mov	r0, r7
 800580e:	47c8      	blx	r9
 8005810:	3001      	adds	r0, #1
 8005812:	d103      	bne.n	800581c <_printf_common+0xac>
 8005814:	f04f 30ff 	mov.w	r0, #4294967295
 8005818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800581c:	3501      	adds	r5, #1
 800581e:	e7c6      	b.n	80057ae <_printf_common+0x3e>
 8005820:	18e1      	adds	r1, r4, r3
 8005822:	1c5a      	adds	r2, r3, #1
 8005824:	2030      	movs	r0, #48	@ 0x30
 8005826:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800582a:	4422      	add	r2, r4
 800582c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005830:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005834:	3302      	adds	r3, #2
 8005836:	e7c7      	b.n	80057c8 <_printf_common+0x58>
 8005838:	2301      	movs	r3, #1
 800583a:	4622      	mov	r2, r4
 800583c:	4641      	mov	r1, r8
 800583e:	4638      	mov	r0, r7
 8005840:	47c8      	blx	r9
 8005842:	3001      	adds	r0, #1
 8005844:	d0e6      	beq.n	8005814 <_printf_common+0xa4>
 8005846:	3601      	adds	r6, #1
 8005848:	e7d9      	b.n	80057fe <_printf_common+0x8e>
	...

0800584c <_printf_i>:
 800584c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005850:	7e0f      	ldrb	r7, [r1, #24]
 8005852:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005854:	2f78      	cmp	r7, #120	@ 0x78
 8005856:	4691      	mov	r9, r2
 8005858:	4680      	mov	r8, r0
 800585a:	460c      	mov	r4, r1
 800585c:	469a      	mov	sl, r3
 800585e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005862:	d807      	bhi.n	8005874 <_printf_i+0x28>
 8005864:	2f62      	cmp	r7, #98	@ 0x62
 8005866:	d80a      	bhi.n	800587e <_printf_i+0x32>
 8005868:	2f00      	cmp	r7, #0
 800586a:	f000 80d1 	beq.w	8005a10 <_printf_i+0x1c4>
 800586e:	2f58      	cmp	r7, #88	@ 0x58
 8005870:	f000 80b8 	beq.w	80059e4 <_printf_i+0x198>
 8005874:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005878:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800587c:	e03a      	b.n	80058f4 <_printf_i+0xa8>
 800587e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005882:	2b15      	cmp	r3, #21
 8005884:	d8f6      	bhi.n	8005874 <_printf_i+0x28>
 8005886:	a101      	add	r1, pc, #4	@ (adr r1, 800588c <_printf_i+0x40>)
 8005888:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800588c:	080058e5 	.word	0x080058e5
 8005890:	080058f9 	.word	0x080058f9
 8005894:	08005875 	.word	0x08005875
 8005898:	08005875 	.word	0x08005875
 800589c:	08005875 	.word	0x08005875
 80058a0:	08005875 	.word	0x08005875
 80058a4:	080058f9 	.word	0x080058f9
 80058a8:	08005875 	.word	0x08005875
 80058ac:	08005875 	.word	0x08005875
 80058b0:	08005875 	.word	0x08005875
 80058b4:	08005875 	.word	0x08005875
 80058b8:	080059f7 	.word	0x080059f7
 80058bc:	08005923 	.word	0x08005923
 80058c0:	080059b1 	.word	0x080059b1
 80058c4:	08005875 	.word	0x08005875
 80058c8:	08005875 	.word	0x08005875
 80058cc:	08005a19 	.word	0x08005a19
 80058d0:	08005875 	.word	0x08005875
 80058d4:	08005923 	.word	0x08005923
 80058d8:	08005875 	.word	0x08005875
 80058dc:	08005875 	.word	0x08005875
 80058e0:	080059b9 	.word	0x080059b9
 80058e4:	6833      	ldr	r3, [r6, #0]
 80058e6:	1d1a      	adds	r2, r3, #4
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6032      	str	r2, [r6, #0]
 80058ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80058f4:	2301      	movs	r3, #1
 80058f6:	e09c      	b.n	8005a32 <_printf_i+0x1e6>
 80058f8:	6833      	ldr	r3, [r6, #0]
 80058fa:	6820      	ldr	r0, [r4, #0]
 80058fc:	1d19      	adds	r1, r3, #4
 80058fe:	6031      	str	r1, [r6, #0]
 8005900:	0606      	lsls	r6, r0, #24
 8005902:	d501      	bpl.n	8005908 <_printf_i+0xbc>
 8005904:	681d      	ldr	r5, [r3, #0]
 8005906:	e003      	b.n	8005910 <_printf_i+0xc4>
 8005908:	0645      	lsls	r5, r0, #25
 800590a:	d5fb      	bpl.n	8005904 <_printf_i+0xb8>
 800590c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005910:	2d00      	cmp	r5, #0
 8005912:	da03      	bge.n	800591c <_printf_i+0xd0>
 8005914:	232d      	movs	r3, #45	@ 0x2d
 8005916:	426d      	negs	r5, r5
 8005918:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800591c:	4858      	ldr	r0, [pc, #352]	@ (8005a80 <_printf_i+0x234>)
 800591e:	230a      	movs	r3, #10
 8005920:	e011      	b.n	8005946 <_printf_i+0xfa>
 8005922:	6821      	ldr	r1, [r4, #0]
 8005924:	6833      	ldr	r3, [r6, #0]
 8005926:	0608      	lsls	r0, r1, #24
 8005928:	f853 5b04 	ldr.w	r5, [r3], #4
 800592c:	d402      	bmi.n	8005934 <_printf_i+0xe8>
 800592e:	0649      	lsls	r1, r1, #25
 8005930:	bf48      	it	mi
 8005932:	b2ad      	uxthmi	r5, r5
 8005934:	2f6f      	cmp	r7, #111	@ 0x6f
 8005936:	4852      	ldr	r0, [pc, #328]	@ (8005a80 <_printf_i+0x234>)
 8005938:	6033      	str	r3, [r6, #0]
 800593a:	bf14      	ite	ne
 800593c:	230a      	movne	r3, #10
 800593e:	2308      	moveq	r3, #8
 8005940:	2100      	movs	r1, #0
 8005942:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005946:	6866      	ldr	r6, [r4, #4]
 8005948:	60a6      	str	r6, [r4, #8]
 800594a:	2e00      	cmp	r6, #0
 800594c:	db05      	blt.n	800595a <_printf_i+0x10e>
 800594e:	6821      	ldr	r1, [r4, #0]
 8005950:	432e      	orrs	r6, r5
 8005952:	f021 0104 	bic.w	r1, r1, #4
 8005956:	6021      	str	r1, [r4, #0]
 8005958:	d04b      	beq.n	80059f2 <_printf_i+0x1a6>
 800595a:	4616      	mov	r6, r2
 800595c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005960:	fb03 5711 	mls	r7, r3, r1, r5
 8005964:	5dc7      	ldrb	r7, [r0, r7]
 8005966:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800596a:	462f      	mov	r7, r5
 800596c:	42bb      	cmp	r3, r7
 800596e:	460d      	mov	r5, r1
 8005970:	d9f4      	bls.n	800595c <_printf_i+0x110>
 8005972:	2b08      	cmp	r3, #8
 8005974:	d10b      	bne.n	800598e <_printf_i+0x142>
 8005976:	6823      	ldr	r3, [r4, #0]
 8005978:	07df      	lsls	r7, r3, #31
 800597a:	d508      	bpl.n	800598e <_printf_i+0x142>
 800597c:	6923      	ldr	r3, [r4, #16]
 800597e:	6861      	ldr	r1, [r4, #4]
 8005980:	4299      	cmp	r1, r3
 8005982:	bfde      	ittt	le
 8005984:	2330      	movle	r3, #48	@ 0x30
 8005986:	f806 3c01 	strble.w	r3, [r6, #-1]
 800598a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800598e:	1b92      	subs	r2, r2, r6
 8005990:	6122      	str	r2, [r4, #16]
 8005992:	f8cd a000 	str.w	sl, [sp]
 8005996:	464b      	mov	r3, r9
 8005998:	aa03      	add	r2, sp, #12
 800599a:	4621      	mov	r1, r4
 800599c:	4640      	mov	r0, r8
 800599e:	f7ff fee7 	bl	8005770 <_printf_common>
 80059a2:	3001      	adds	r0, #1
 80059a4:	d14a      	bne.n	8005a3c <_printf_i+0x1f0>
 80059a6:	f04f 30ff 	mov.w	r0, #4294967295
 80059aa:	b004      	add	sp, #16
 80059ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	f043 0320 	orr.w	r3, r3, #32
 80059b6:	6023      	str	r3, [r4, #0]
 80059b8:	4832      	ldr	r0, [pc, #200]	@ (8005a84 <_printf_i+0x238>)
 80059ba:	2778      	movs	r7, #120	@ 0x78
 80059bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80059c0:	6823      	ldr	r3, [r4, #0]
 80059c2:	6831      	ldr	r1, [r6, #0]
 80059c4:	061f      	lsls	r7, r3, #24
 80059c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80059ca:	d402      	bmi.n	80059d2 <_printf_i+0x186>
 80059cc:	065f      	lsls	r7, r3, #25
 80059ce:	bf48      	it	mi
 80059d0:	b2ad      	uxthmi	r5, r5
 80059d2:	6031      	str	r1, [r6, #0]
 80059d4:	07d9      	lsls	r1, r3, #31
 80059d6:	bf44      	itt	mi
 80059d8:	f043 0320 	orrmi.w	r3, r3, #32
 80059dc:	6023      	strmi	r3, [r4, #0]
 80059de:	b11d      	cbz	r5, 80059e8 <_printf_i+0x19c>
 80059e0:	2310      	movs	r3, #16
 80059e2:	e7ad      	b.n	8005940 <_printf_i+0xf4>
 80059e4:	4826      	ldr	r0, [pc, #152]	@ (8005a80 <_printf_i+0x234>)
 80059e6:	e7e9      	b.n	80059bc <_printf_i+0x170>
 80059e8:	6823      	ldr	r3, [r4, #0]
 80059ea:	f023 0320 	bic.w	r3, r3, #32
 80059ee:	6023      	str	r3, [r4, #0]
 80059f0:	e7f6      	b.n	80059e0 <_printf_i+0x194>
 80059f2:	4616      	mov	r6, r2
 80059f4:	e7bd      	b.n	8005972 <_printf_i+0x126>
 80059f6:	6833      	ldr	r3, [r6, #0]
 80059f8:	6825      	ldr	r5, [r4, #0]
 80059fa:	6961      	ldr	r1, [r4, #20]
 80059fc:	1d18      	adds	r0, r3, #4
 80059fe:	6030      	str	r0, [r6, #0]
 8005a00:	062e      	lsls	r6, r5, #24
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	d501      	bpl.n	8005a0a <_printf_i+0x1be>
 8005a06:	6019      	str	r1, [r3, #0]
 8005a08:	e002      	b.n	8005a10 <_printf_i+0x1c4>
 8005a0a:	0668      	lsls	r0, r5, #25
 8005a0c:	d5fb      	bpl.n	8005a06 <_printf_i+0x1ba>
 8005a0e:	8019      	strh	r1, [r3, #0]
 8005a10:	2300      	movs	r3, #0
 8005a12:	6123      	str	r3, [r4, #16]
 8005a14:	4616      	mov	r6, r2
 8005a16:	e7bc      	b.n	8005992 <_printf_i+0x146>
 8005a18:	6833      	ldr	r3, [r6, #0]
 8005a1a:	1d1a      	adds	r2, r3, #4
 8005a1c:	6032      	str	r2, [r6, #0]
 8005a1e:	681e      	ldr	r6, [r3, #0]
 8005a20:	6862      	ldr	r2, [r4, #4]
 8005a22:	2100      	movs	r1, #0
 8005a24:	4630      	mov	r0, r6
 8005a26:	f7fa fbdb 	bl	80001e0 <memchr>
 8005a2a:	b108      	cbz	r0, 8005a30 <_printf_i+0x1e4>
 8005a2c:	1b80      	subs	r0, r0, r6
 8005a2e:	6060      	str	r0, [r4, #4]
 8005a30:	6863      	ldr	r3, [r4, #4]
 8005a32:	6123      	str	r3, [r4, #16]
 8005a34:	2300      	movs	r3, #0
 8005a36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a3a:	e7aa      	b.n	8005992 <_printf_i+0x146>
 8005a3c:	6923      	ldr	r3, [r4, #16]
 8005a3e:	4632      	mov	r2, r6
 8005a40:	4649      	mov	r1, r9
 8005a42:	4640      	mov	r0, r8
 8005a44:	47d0      	blx	sl
 8005a46:	3001      	adds	r0, #1
 8005a48:	d0ad      	beq.n	80059a6 <_printf_i+0x15a>
 8005a4a:	6823      	ldr	r3, [r4, #0]
 8005a4c:	079b      	lsls	r3, r3, #30
 8005a4e:	d413      	bmi.n	8005a78 <_printf_i+0x22c>
 8005a50:	68e0      	ldr	r0, [r4, #12]
 8005a52:	9b03      	ldr	r3, [sp, #12]
 8005a54:	4298      	cmp	r0, r3
 8005a56:	bfb8      	it	lt
 8005a58:	4618      	movlt	r0, r3
 8005a5a:	e7a6      	b.n	80059aa <_printf_i+0x15e>
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	4632      	mov	r2, r6
 8005a60:	4649      	mov	r1, r9
 8005a62:	4640      	mov	r0, r8
 8005a64:	47d0      	blx	sl
 8005a66:	3001      	adds	r0, #1
 8005a68:	d09d      	beq.n	80059a6 <_printf_i+0x15a>
 8005a6a:	3501      	adds	r5, #1
 8005a6c:	68e3      	ldr	r3, [r4, #12]
 8005a6e:	9903      	ldr	r1, [sp, #12]
 8005a70:	1a5b      	subs	r3, r3, r1
 8005a72:	42ab      	cmp	r3, r5
 8005a74:	dcf2      	bgt.n	8005a5c <_printf_i+0x210>
 8005a76:	e7eb      	b.n	8005a50 <_printf_i+0x204>
 8005a78:	2500      	movs	r5, #0
 8005a7a:	f104 0619 	add.w	r6, r4, #25
 8005a7e:	e7f5      	b.n	8005a6c <_printf_i+0x220>
 8005a80:	08005ecd 	.word	0x08005ecd
 8005a84:	08005ede 	.word	0x08005ede

08005a88 <__sflush_r>:
 8005a88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a90:	0716      	lsls	r6, r2, #28
 8005a92:	4605      	mov	r5, r0
 8005a94:	460c      	mov	r4, r1
 8005a96:	d454      	bmi.n	8005b42 <__sflush_r+0xba>
 8005a98:	684b      	ldr	r3, [r1, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	dc02      	bgt.n	8005aa4 <__sflush_r+0x1c>
 8005a9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	dd48      	ble.n	8005b36 <__sflush_r+0xae>
 8005aa4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005aa6:	2e00      	cmp	r6, #0
 8005aa8:	d045      	beq.n	8005b36 <__sflush_r+0xae>
 8005aaa:	2300      	movs	r3, #0
 8005aac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005ab0:	682f      	ldr	r7, [r5, #0]
 8005ab2:	6a21      	ldr	r1, [r4, #32]
 8005ab4:	602b      	str	r3, [r5, #0]
 8005ab6:	d030      	beq.n	8005b1a <__sflush_r+0x92>
 8005ab8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005aba:	89a3      	ldrh	r3, [r4, #12]
 8005abc:	0759      	lsls	r1, r3, #29
 8005abe:	d505      	bpl.n	8005acc <__sflush_r+0x44>
 8005ac0:	6863      	ldr	r3, [r4, #4]
 8005ac2:	1ad2      	subs	r2, r2, r3
 8005ac4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005ac6:	b10b      	cbz	r3, 8005acc <__sflush_r+0x44>
 8005ac8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005aca:	1ad2      	subs	r2, r2, r3
 8005acc:	2300      	movs	r3, #0
 8005ace:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ad0:	6a21      	ldr	r1, [r4, #32]
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	47b0      	blx	r6
 8005ad6:	1c43      	adds	r3, r0, #1
 8005ad8:	89a3      	ldrh	r3, [r4, #12]
 8005ada:	d106      	bne.n	8005aea <__sflush_r+0x62>
 8005adc:	6829      	ldr	r1, [r5, #0]
 8005ade:	291d      	cmp	r1, #29
 8005ae0:	d82b      	bhi.n	8005b3a <__sflush_r+0xb2>
 8005ae2:	4a2a      	ldr	r2, [pc, #168]	@ (8005b8c <__sflush_r+0x104>)
 8005ae4:	40ca      	lsrs	r2, r1
 8005ae6:	07d6      	lsls	r6, r2, #31
 8005ae8:	d527      	bpl.n	8005b3a <__sflush_r+0xb2>
 8005aea:	2200      	movs	r2, #0
 8005aec:	6062      	str	r2, [r4, #4]
 8005aee:	04d9      	lsls	r1, r3, #19
 8005af0:	6922      	ldr	r2, [r4, #16]
 8005af2:	6022      	str	r2, [r4, #0]
 8005af4:	d504      	bpl.n	8005b00 <__sflush_r+0x78>
 8005af6:	1c42      	adds	r2, r0, #1
 8005af8:	d101      	bne.n	8005afe <__sflush_r+0x76>
 8005afa:	682b      	ldr	r3, [r5, #0]
 8005afc:	b903      	cbnz	r3, 8005b00 <__sflush_r+0x78>
 8005afe:	6560      	str	r0, [r4, #84]	@ 0x54
 8005b00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b02:	602f      	str	r7, [r5, #0]
 8005b04:	b1b9      	cbz	r1, 8005b36 <__sflush_r+0xae>
 8005b06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b0a:	4299      	cmp	r1, r3
 8005b0c:	d002      	beq.n	8005b14 <__sflush_r+0x8c>
 8005b0e:	4628      	mov	r0, r5
 8005b10:	f7ff fbf4 	bl	80052fc <_free_r>
 8005b14:	2300      	movs	r3, #0
 8005b16:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b18:	e00d      	b.n	8005b36 <__sflush_r+0xae>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	47b0      	blx	r6
 8005b20:	4602      	mov	r2, r0
 8005b22:	1c50      	adds	r0, r2, #1
 8005b24:	d1c9      	bne.n	8005aba <__sflush_r+0x32>
 8005b26:	682b      	ldr	r3, [r5, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d0c6      	beq.n	8005aba <__sflush_r+0x32>
 8005b2c:	2b1d      	cmp	r3, #29
 8005b2e:	d001      	beq.n	8005b34 <__sflush_r+0xac>
 8005b30:	2b16      	cmp	r3, #22
 8005b32:	d11e      	bne.n	8005b72 <__sflush_r+0xea>
 8005b34:	602f      	str	r7, [r5, #0]
 8005b36:	2000      	movs	r0, #0
 8005b38:	e022      	b.n	8005b80 <__sflush_r+0xf8>
 8005b3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b3e:	b21b      	sxth	r3, r3
 8005b40:	e01b      	b.n	8005b7a <__sflush_r+0xf2>
 8005b42:	690f      	ldr	r7, [r1, #16]
 8005b44:	2f00      	cmp	r7, #0
 8005b46:	d0f6      	beq.n	8005b36 <__sflush_r+0xae>
 8005b48:	0793      	lsls	r3, r2, #30
 8005b4a:	680e      	ldr	r6, [r1, #0]
 8005b4c:	bf08      	it	eq
 8005b4e:	694b      	ldreq	r3, [r1, #20]
 8005b50:	600f      	str	r7, [r1, #0]
 8005b52:	bf18      	it	ne
 8005b54:	2300      	movne	r3, #0
 8005b56:	eba6 0807 	sub.w	r8, r6, r7
 8005b5a:	608b      	str	r3, [r1, #8]
 8005b5c:	f1b8 0f00 	cmp.w	r8, #0
 8005b60:	dde9      	ble.n	8005b36 <__sflush_r+0xae>
 8005b62:	6a21      	ldr	r1, [r4, #32]
 8005b64:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005b66:	4643      	mov	r3, r8
 8005b68:	463a      	mov	r2, r7
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	47b0      	blx	r6
 8005b6e:	2800      	cmp	r0, #0
 8005b70:	dc08      	bgt.n	8005b84 <__sflush_r+0xfc>
 8005b72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b7a:	81a3      	strh	r3, [r4, #12]
 8005b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b84:	4407      	add	r7, r0
 8005b86:	eba8 0800 	sub.w	r8, r8, r0
 8005b8a:	e7e7      	b.n	8005b5c <__sflush_r+0xd4>
 8005b8c:	20400001 	.word	0x20400001

08005b90 <_fflush_r>:
 8005b90:	b538      	push	{r3, r4, r5, lr}
 8005b92:	690b      	ldr	r3, [r1, #16]
 8005b94:	4605      	mov	r5, r0
 8005b96:	460c      	mov	r4, r1
 8005b98:	b913      	cbnz	r3, 8005ba0 <_fflush_r+0x10>
 8005b9a:	2500      	movs	r5, #0
 8005b9c:	4628      	mov	r0, r5
 8005b9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ba0:	b118      	cbz	r0, 8005baa <_fflush_r+0x1a>
 8005ba2:	6a03      	ldr	r3, [r0, #32]
 8005ba4:	b90b      	cbnz	r3, 8005baa <_fflush_r+0x1a>
 8005ba6:	f7ff f987 	bl	8004eb8 <__sinit>
 8005baa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d0f3      	beq.n	8005b9a <_fflush_r+0xa>
 8005bb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005bb4:	07d0      	lsls	r0, r2, #31
 8005bb6:	d404      	bmi.n	8005bc2 <_fflush_r+0x32>
 8005bb8:	0599      	lsls	r1, r3, #22
 8005bba:	d402      	bmi.n	8005bc2 <_fflush_r+0x32>
 8005bbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bbe:	f7ff fb8c 	bl	80052da <__retarget_lock_acquire_recursive>
 8005bc2:	4628      	mov	r0, r5
 8005bc4:	4621      	mov	r1, r4
 8005bc6:	f7ff ff5f 	bl	8005a88 <__sflush_r>
 8005bca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005bcc:	07da      	lsls	r2, r3, #31
 8005bce:	4605      	mov	r5, r0
 8005bd0:	d4e4      	bmi.n	8005b9c <_fflush_r+0xc>
 8005bd2:	89a3      	ldrh	r3, [r4, #12]
 8005bd4:	059b      	lsls	r3, r3, #22
 8005bd6:	d4e1      	bmi.n	8005b9c <_fflush_r+0xc>
 8005bd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bda:	f7ff fb7f 	bl	80052dc <__retarget_lock_release_recursive>
 8005bde:	e7dd      	b.n	8005b9c <_fflush_r+0xc>

08005be0 <__swhatbuf_r>:
 8005be0:	b570      	push	{r4, r5, r6, lr}
 8005be2:	460c      	mov	r4, r1
 8005be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005be8:	2900      	cmp	r1, #0
 8005bea:	b096      	sub	sp, #88	@ 0x58
 8005bec:	4615      	mov	r5, r2
 8005bee:	461e      	mov	r6, r3
 8005bf0:	da0d      	bge.n	8005c0e <__swhatbuf_r+0x2e>
 8005bf2:	89a3      	ldrh	r3, [r4, #12]
 8005bf4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005bf8:	f04f 0100 	mov.w	r1, #0
 8005bfc:	bf14      	ite	ne
 8005bfe:	2340      	movne	r3, #64	@ 0x40
 8005c00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005c04:	2000      	movs	r0, #0
 8005c06:	6031      	str	r1, [r6, #0]
 8005c08:	602b      	str	r3, [r5, #0]
 8005c0a:	b016      	add	sp, #88	@ 0x58
 8005c0c:	bd70      	pop	{r4, r5, r6, pc}
 8005c0e:	466a      	mov	r2, sp
 8005c10:	f000 f848 	bl	8005ca4 <_fstat_r>
 8005c14:	2800      	cmp	r0, #0
 8005c16:	dbec      	blt.n	8005bf2 <__swhatbuf_r+0x12>
 8005c18:	9901      	ldr	r1, [sp, #4]
 8005c1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005c1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005c22:	4259      	negs	r1, r3
 8005c24:	4159      	adcs	r1, r3
 8005c26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c2a:	e7eb      	b.n	8005c04 <__swhatbuf_r+0x24>

08005c2c <__smakebuf_r>:
 8005c2c:	898b      	ldrh	r3, [r1, #12]
 8005c2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c30:	079d      	lsls	r5, r3, #30
 8005c32:	4606      	mov	r6, r0
 8005c34:	460c      	mov	r4, r1
 8005c36:	d507      	bpl.n	8005c48 <__smakebuf_r+0x1c>
 8005c38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005c3c:	6023      	str	r3, [r4, #0]
 8005c3e:	6123      	str	r3, [r4, #16]
 8005c40:	2301      	movs	r3, #1
 8005c42:	6163      	str	r3, [r4, #20]
 8005c44:	b003      	add	sp, #12
 8005c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c48:	ab01      	add	r3, sp, #4
 8005c4a:	466a      	mov	r2, sp
 8005c4c:	f7ff ffc8 	bl	8005be0 <__swhatbuf_r>
 8005c50:	9f00      	ldr	r7, [sp, #0]
 8005c52:	4605      	mov	r5, r0
 8005c54:	4639      	mov	r1, r7
 8005c56:	4630      	mov	r0, r6
 8005c58:	f7ff fbbc 	bl	80053d4 <_malloc_r>
 8005c5c:	b948      	cbnz	r0, 8005c72 <__smakebuf_r+0x46>
 8005c5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c62:	059a      	lsls	r2, r3, #22
 8005c64:	d4ee      	bmi.n	8005c44 <__smakebuf_r+0x18>
 8005c66:	f023 0303 	bic.w	r3, r3, #3
 8005c6a:	f043 0302 	orr.w	r3, r3, #2
 8005c6e:	81a3      	strh	r3, [r4, #12]
 8005c70:	e7e2      	b.n	8005c38 <__smakebuf_r+0xc>
 8005c72:	89a3      	ldrh	r3, [r4, #12]
 8005c74:	6020      	str	r0, [r4, #0]
 8005c76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c7a:	81a3      	strh	r3, [r4, #12]
 8005c7c:	9b01      	ldr	r3, [sp, #4]
 8005c7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005c82:	b15b      	cbz	r3, 8005c9c <__smakebuf_r+0x70>
 8005c84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c88:	4630      	mov	r0, r6
 8005c8a:	f000 f81d 	bl	8005cc8 <_isatty_r>
 8005c8e:	b128      	cbz	r0, 8005c9c <__smakebuf_r+0x70>
 8005c90:	89a3      	ldrh	r3, [r4, #12]
 8005c92:	f023 0303 	bic.w	r3, r3, #3
 8005c96:	f043 0301 	orr.w	r3, r3, #1
 8005c9a:	81a3      	strh	r3, [r4, #12]
 8005c9c:	89a3      	ldrh	r3, [r4, #12]
 8005c9e:	431d      	orrs	r5, r3
 8005ca0:	81a5      	strh	r5, [r4, #12]
 8005ca2:	e7cf      	b.n	8005c44 <__smakebuf_r+0x18>

08005ca4 <_fstat_r>:
 8005ca4:	b538      	push	{r3, r4, r5, lr}
 8005ca6:	4d07      	ldr	r5, [pc, #28]	@ (8005cc4 <_fstat_r+0x20>)
 8005ca8:	2300      	movs	r3, #0
 8005caa:	4604      	mov	r4, r0
 8005cac:	4608      	mov	r0, r1
 8005cae:	4611      	mov	r1, r2
 8005cb0:	602b      	str	r3, [r5, #0]
 8005cb2:	f7fb ff06 	bl	8001ac2 <_fstat>
 8005cb6:	1c43      	adds	r3, r0, #1
 8005cb8:	d102      	bne.n	8005cc0 <_fstat_r+0x1c>
 8005cba:	682b      	ldr	r3, [r5, #0]
 8005cbc:	b103      	cbz	r3, 8005cc0 <_fstat_r+0x1c>
 8005cbe:	6023      	str	r3, [r4, #0]
 8005cc0:	bd38      	pop	{r3, r4, r5, pc}
 8005cc2:	bf00      	nop
 8005cc4:	20000890 	.word	0x20000890

08005cc8 <_isatty_r>:
 8005cc8:	b538      	push	{r3, r4, r5, lr}
 8005cca:	4d06      	ldr	r5, [pc, #24]	@ (8005ce4 <_isatty_r+0x1c>)
 8005ccc:	2300      	movs	r3, #0
 8005cce:	4604      	mov	r4, r0
 8005cd0:	4608      	mov	r0, r1
 8005cd2:	602b      	str	r3, [r5, #0]
 8005cd4:	f7fb ff05 	bl	8001ae2 <_isatty>
 8005cd8:	1c43      	adds	r3, r0, #1
 8005cda:	d102      	bne.n	8005ce2 <_isatty_r+0x1a>
 8005cdc:	682b      	ldr	r3, [r5, #0]
 8005cde:	b103      	cbz	r3, 8005ce2 <_isatty_r+0x1a>
 8005ce0:	6023      	str	r3, [r4, #0]
 8005ce2:	bd38      	pop	{r3, r4, r5, pc}
 8005ce4:	20000890 	.word	0x20000890

08005ce8 <_sbrk_r>:
 8005ce8:	b538      	push	{r3, r4, r5, lr}
 8005cea:	4d06      	ldr	r5, [pc, #24]	@ (8005d04 <_sbrk_r+0x1c>)
 8005cec:	2300      	movs	r3, #0
 8005cee:	4604      	mov	r4, r0
 8005cf0:	4608      	mov	r0, r1
 8005cf2:	602b      	str	r3, [r5, #0]
 8005cf4:	f7fb ff0e 	bl	8001b14 <_sbrk>
 8005cf8:	1c43      	adds	r3, r0, #1
 8005cfa:	d102      	bne.n	8005d02 <_sbrk_r+0x1a>
 8005cfc:	682b      	ldr	r3, [r5, #0]
 8005cfe:	b103      	cbz	r3, 8005d02 <_sbrk_r+0x1a>
 8005d00:	6023      	str	r3, [r4, #0]
 8005d02:	bd38      	pop	{r3, r4, r5, pc}
 8005d04:	20000890 	.word	0x20000890

08005d08 <_init>:
 8005d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0a:	bf00      	nop
 8005d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d0e:	bc08      	pop	{r3}
 8005d10:	469e      	mov	lr, r3
 8005d12:	4770      	bx	lr

08005d14 <_fini>:
 8005d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d16:	bf00      	nop
 8005d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d1a:	bc08      	pop	{r3}
 8005d1c:	469e      	mov	lr, r3
 8005d1e:	4770      	bx	lr
