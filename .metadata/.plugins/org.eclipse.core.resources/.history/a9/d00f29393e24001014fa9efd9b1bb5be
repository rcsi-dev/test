/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Основная программа
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "crc.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "secure_uart_protocol.h"
#include <string.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define TRANSMITTER_MODE   // Раскомментировать для режима передатчика, закомментировать для режима приемника
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
uint8_t rxByte; // Байт для приема по UART
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  MX_USART6_UART_Init();
  MX_CRC_Init();
  /* USER CODE BEGIN 2 */

  // Инициализация протокола
  SUP_Init();

  // Начать прием по UART (режим приемника)
  #ifndef TRANSMITTER_MODE
  SUP_DebugPrint("Устройство в режиме приемника\r\n");
  // Включаем прерывания на обоих UART для надежности
  HAL_UART_Receive_IT(&huart6, &rxByte, 1);
  SUP_DebugPrint("Прием по UART6 активирован\r\n");
  #else
  SUP_DebugPrint("Устройство в режиме передатчика\r\n");
  // Чтобы передатчик также мог принимать ответы
  HAL_UART_Receive_IT(&huart1, &rxByte, 1);
  SUP_DebugPrint("Прием по UART1 активирован\r\n");
  #endif

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    #ifdef TRANSMITTER_MODE
    // Режим передатчика - отправляем тестовое сообщение каждые 2 секунды
    uint8_t testMessage[] = "Тестовое сообщение по защищенному UART";
    SUP_SendData(&huart1, testMessage, sizeof(testMessage) - 1); // -1 чтобы не отправлять нулевой символ
    HAL_Delay(20000);
    #endif

    // Мигаем светодиодом, чтобы показать что программа работает
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
    HAL_Delay(500);
  }
  /* USER CODE END 3 */
}

/* USER CODE BEGIN 4 */

/**
  * @brief  Обратный вызов при завершении приема по UART
  * @param  huart: указатель на структуру UART
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  // Отладочное сообщение о приеме байта
  SUP_DebugPrint("Принят байт: 0x%02X по UART%d\r\n", rxByte,
                 (huart->Instance == USART1) ? 1 :
                 (huart->Instance == USART2) ? 2 :
                 (huart->Instance == USART6) ? 6 : 0);

  if (huart->Instance == USART6)
  {
    // Обработка принятого байта
    if (SUP_ProcessReceivedByte(huart, rxByte))
    {
      // Фрейм полностью принят и проверен
      SUP_DebugPrint("Фрейм полностью принят и проверен\r\n");
      // Здесь можно добавить дополнительную обработку
    }

    // Запуск приема следующего байта
    HAL_UART_Receive_IT(&huart6, &rxByte, 1);
  }
  else if (huart->Instance == USART1)
  {
    // Обработка байта, принятого по USART1
    if (SUP_ProcessReceivedByte(huart, rxByte))
    {
      // Фрейм полностью принят и проверен
      SUP_DebugPrint("Фрейм полностью принят и проверен по UART1\r\n");
    }

    // Запуск приема следующего байта
    HAL_UART_Receive_IT(&huart1, &rxByte, 1);
  }
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
