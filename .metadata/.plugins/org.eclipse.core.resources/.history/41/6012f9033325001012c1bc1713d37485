/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Основной файл программы
  ******************************************************************************
  * @attention
  *
  * Дипломный проект по реализации защитных механизмов последовательных протоколов
  * передачи данных на базе микроконтроллера STM32F411RET6.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "secure_uart.h"
#include "speck.h"
#include "speck_cmac.h"
#include <string.h>
#include <stdio.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart6;
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart1_tx;
DMA_HandleTypeDef hdma_usart6_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* USER CODE BEGIN PV */
// Ключи для шифрования и аутентификации (в реальном приложении должны быть защищены)
static const uint8_t ENCRYPT_KEY[16] = {
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10
};

static const uint8_t AUTH_KEY[16] = {
    0xFF, 0xEE, 0xDD, 0xCC, 0xBB, 0xAA, 0x99, 0x88,
    0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0x00
};

// Контексты защищенного UART
static SecureUartContext tx_ctx;
static SecureUartContext rx_ctx;

// Флаги для контроля потока выполнения
static volatile uint8_t tx_ready = 0;
static volatile uint8_t rx_ready = 0;

// Буферы для данных
static uint8_t tx_data[SECURE_UART_MAX_DATA_SIZE];
static uint8_t rx_data[SECURE_UART_MAX_DATA_SIZE];
static uint16_t rx_data_size = 0;

// Счетчик отправленных пакетов
static uint32_t packet_counter = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART6_UART_Init(void);
/* USER CODE BEGIN PFP */

/**
 * @brief Обработчик прерывания IDLE для USART1
 */
void USART1_IDLE_Callback(void);

/**
 * @brief Обработчик прерывания IDLE для USART6
 */
void USART6_IDLE_Callback(void);

/**
 * @brief Тестирование алгоритма шифрования
 */
void test_encryption(void);

/**
 * @brief Отправка тестового пакета
 */
void send_test_packet(void);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/**
 * @brief Обработчик прерывания IDLE для USART1
 */
void USART1_IDLE_Callback(void) {
    if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {
        __HAL_UART_CLEAR_IDLEFLAG(&huart1);
        secure_uart_rx_idle_callback(&rx_ctx);
        rx_ready = 1;
    }
}

/**
 * @brief Обработчик прерывания IDLE для USART6
 */
void USART6_IDLE_Callback(void) {
    if (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE)) {
        __HAL_UART_CLEAR_IDLEFLAG(&huart6);
        secure_uart_rx_idle_callback(&tx_ctx);
        tx_ready = 1;
    }
}

/**
 * @brief Тестирование алгоритма шифрования
 */
void test_encryption(void) {
    char debug_buf[128];

    // Тестовые данные
    uint8_t test_key[16] = {
        0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
        0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10
    };

    uint8_t test_data[8] = {0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88};
    uint8_t encrypted[8];
    uint8_t decrypted[8];

    // Инициализация ключей
    uint32_t scheduled_keys[SPECK_ROUNDS];
    speck_init(test_key, scheduled_keys);

    // Вывод исходных данных
    snprintf(debug_buf, sizeof(debug_buf), "Исходные данные: %02X %02X %02X %02X %02X %02X %02X %02X",
             test_data[0], test_data[1], test_data[2], test_data[3],
             test_data[4], test_data[5], test_data[6], test_data[7]);
    HAL_UART_Transmit(&huart2, (uint8_t*)debug_buf, strlen(debug_buf), 100);
    HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 100);

    // Шифрование
    speck_encrypt(scheduled_keys, test_data, encrypted);

    // Вывод зашифрованных данных
    snprintf(debug_buf, sizeof(debug_buf), "Зашифрованные данные: %02X %02X %02X %02X %02X %02X %02X %02X",
             encrypted[0], encrypted[1], encrypted[2], encrypted[3],
             encrypted[4], encrypted[5], encrypted[6], encrypted[7]);
    HAL_UART_Transmit(&huart2, (uint8_t*)debug_buf, strlen(debug_buf), 100);
    HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 100);

    // Дешифрование
    speck_decrypt(scheduled_keys, encrypted, decrypted);

    // Вывод расшифрованных данных
    snprintf(debug_buf, sizeof(debug_buf), "Расшифрованные данные: %02X %02X %02X %02X %02X %02X %02X %02X",
             decrypted[0], decrypted[1], decrypted[2], decrypted[3],
             decrypted[4], decrypted[5], decrypted[6], decrypted[7]);
    HAL_UART_Transmit(&huart2, (uint8_t*)debug_buf, strlen(debug_buf), 100);
    HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 100);

    // Проверка результата
    if (memcmp(test_data, decrypted, 8) == 0) {
        HAL_UART_Transmit(&huart2, (uint8_t*)"Тест шифрования УСПЕШЕН\r\n", 27, 100);
    } else {
        HAL_UART_Transmit(&huart2, (uint8_t*)"Тест шифрования ПРОВАЛЕН\r\n", 28, 100);
    }
}

/**
 * @brief Отправка тестового пакета
 */
void send_test_packet(void) {
    char debug_buf[128];
    packet_counter++;

    // Формирование тестовых данных
    snprintf((char*)tx_data, SECURE_UART_MAX_DATA_SIZE, "Тестовое сообщение №%lu", packet_counter);
    uint16_t data_size = strlen((char*)tx_data);

    // Отправка
    SecureUartError result = secure_uart_send(&tx_ctx, tx_data, data_size);

    // Вывод результата
    if (result == SECURE_UART_OK) {
        snprintf(debug_buf, sizeof(debug_buf), "Отправлено: %s", tx_data);
        HAL_UART_Transmit(&huart2, (uint8_t*)debug_buf, strlen(debug_buf), 100);
        HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 100);
    } else {
        snprintf(debug_buf, sizeof(debug_buf), "Ошибка отправки: %d", result);
        HAL_UART_Transmit(&huart2, (uint8_t*)debug_buf, strlen(debug_buf), 100);
        HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 100);
    }
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  MX_USART6_UART_Init();
  /* USER CODE BEGIN 2 */

  // Инициализация UART для отправки
  secure_uart_init(&tx_ctx, &huart1, &huart6, &huart2, ENCRYPT_KEY, AUTH_KEY);

  // Инициализация UART для приема
  secure_uart_init(&rx_ctx, &huart6, &huart1, &huart2, ENCRYPT_KEY, AUTH_KEY);

  // Включение прерывания IDLE для USART1 и USART6
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);

  // Запуск приема по DMA
  HAL_UART_Receive_DMA(&huart1, rx_ctx.rx_buffer, sizeof(rx_ctx.rx_buffer));
  HAL_UART_Receive_DMA(&huart6, tx_ctx.rx_buffer, sizeof(tx_ctx.rx_buffer));

  // Вывод приветствия
  HAL_UART_Transmit(&huart2, (uint8_t*)"===== Защищенный UART протокол =====\r\n", 39, 100);

  // Тестирование алгоритма шифрования
  test_encryption();

  HAL_UART_Transmit(&huart2, (uint8_t*)"\r\nНачало работы...\r\n", 22, 100);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Отправка тестового пакета
    send_test_packet();

    // Проверка наличия принятых данных
    if (rx_ready) {
        rx_ready = 0;

        // Прием и обработка данных
        SecureUartError result = secure_uart_receive(&rx_ctx, rx_data, &rx_data_size);

        if (result == SECURE_UART_OK) {
            // Добавляем нулевой символ в конец для корректного вывода строки
            rx_data[rx_data_size] = '\0';

            char debug_buf[128];
            snprintf(debug_buf, sizeof(debug_buf), "Принято: %s", rx_data);
            HAL_UART_Transmit(&huart2, (uint8_t*)debug_buf, strlen(debug_buf), 100);
            HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 100);
        }
    }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(1000); // Небольшая задержка для стабильности работы
  }
  /* USER CODE END 3 */
}

/* Обработчики прерываний DMA */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
    if (huart->Instance == USART1) {
        secure_uart_tx_complete_callback(&tx_ctx);
    } else if (huart->Instance == USART6) {
        secure_uart_tx_complete_callback(&rx_ctx);
    }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
    if (huart->Instance == USART1) {
        secure_uart_rx_complete_callback(&rx_ctx);
        rx_ready = 1;
    } else if (huart->Instance == USART6) {
        secure_uart_rx_complete_callback(&tx_ctx);
        tx_ready = 1;
    }
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 100;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
  huart6.Instance = USART6;
  huart6.Init.BaudRate = 115200;
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart6) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
}

/* USER CODE BEGIN 4 */

/* Обработчик прерывания USART1 */
void USART1_IRQHandler(void)
{
  HAL_UART_IRQHandler(&huart1);
  USART1_IDLE_Callback();
}

/* Обработчик прерывания USART6 */
void USART6_IRQHandler(void)
{
  HAL_UART_IRQHandler(&huart6);
  USART6_IDLE_Callback();
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
