/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Основной файл программы
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "secure_uart.h"
#include "speck.h"
#include <string.h>
#include <stdio.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define TX_PERIOD_MS       30000   // Период отправки сообщений (30 секунд)
#define DATA_BUFFER_SIZE   64      // Размер буфера данных
#define TEST_SIZE          8
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart6;
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart1_tx;
DMA_HandleTypeDef hdma_usart2_tx;
DMA_HandleTypeDef hdma_usart6_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* USER CODE BEGIN PV */
// Ключ шифрования (4 слова по 32 бита)
static const uint32_t secure_key[4] = {
		0x0F0E0D0C, 0x0B0A0908, 0x07060504, 0x03020100
};

// Контекст защищенного UART
static SecUartContext secure_uart_ctx;

uint8_t test_dataXS[8] = {0xE1, 0x09, 0xCA, 0x06, 0x5D, 0xE3, 0x74, 0x83};

uint8_t test_dataS[16] = {0x0C, 0x78, 0x0A, 0x2B, 0xFA, 0xAC, 0x5B, 0xB9, 0xE6, 0x0E, 0xA2, 0x83, 0xED, 0xD9, 0x69, 0x13};

uint8_t test_dataM[32] = {};

uint8_t test_dataL[64] = {};

uint8_t test_dataXL[128] = {};

// Буфер для данных
static uint8_t data_buffer[DATA_BUFFER_SIZE];
static uint8_t data_size = 0;
static SecUartMsgType data_type = SECUART_MSG_DATA;

// Флаг готовности к отправке
static volatile bool ready_to_send = false;

// Счетчик времени для периодической отправки
static uint32_t last_tx_time = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART6_UART_Init(void);
/* USER CODE BEGIN PFP */
static void ProcessSecureUart(void);
static void SendPeriodicMessage(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/**
 * @brief Обработчик прерывания IDLE для UART
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
	// Вызываем обработчик IDLE из нашей библиотеки
	SecUart_RxIdleCallback(&secure_uart_ctx, huart);
}

/**
 * @brief Обработчик завершения передачи по DMA
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
	// Добавляем логирование
	char debug[64];
	sprintf(debug, "HAL_UART_TxCpltCallback called for UART: 0x%lX\r\n", (uint32_t)huart->Instance);
	HAL_UART_Transmit(&huart2, (uint8_t*)debug, strlen(debug), 100);

	if (huart == secure_uart_ctx.huart_tx) {
		// Устанавливаем флаг завершения передачи
		secure_uart_ctx.tx_complete = true;
		HAL_UART_Transmit(&huart2, (uint8_t*)"TX Complete flag set to true\r\n", 30, 100);
	}
}

/**
 * @brief Обработка защищенного UART
 */
static void ProcessSecureUart(void) {
    // Проверяем, есть ли принятые данные
    if (secure_uart_ctx.rx_complete) {
        // Буфер для расшифрованных данных
        uint8_t rx_data[DATA_BUFFER_SIZE];
        uint8_t rx_size;
        SecUartMsgType rx_type;

        // Обрабатываем принятые данные
        SecUartError err = SecUart_ProcessRxData(&secure_uart_ctx, rx_data, &rx_size, &rx_type);

        if (err == SECUART_OK) {
            // Выводим расшифрованные данные в монитор
            char log_buffer[128];
            snprintf(log_buffer, sizeof(log_buffer),
                    "Received data [type=%u, size=%u]: ", rx_type, rx_size);
            SecUart_Log(&secure_uart_ctx, log_buffer);

            // Обрабатываем только сообщения типа DATA
            if (rx_type == SECUART_MSG_DATA) {
                // Определяем максимальное количество байт для вывода
                uint8_t bytes_to_display = rx_size;
                if (bytes_to_display > 32) bytes_to_display = 32; // Ограничиваем вывод 32 байтами

                char hex_buffer[128]; // Буфер для HEX-представления
                memset(hex_buffer, 0, sizeof(hex_buffer));

                for (uint8_t i = 0; i < bytes_to_display; i++) {
                    char hex_byte[4];
                    snprintf(hex_byte, sizeof(hex_byte), "%02X ", rx_data[i]);
                    strcat(hex_buffer, hex_byte);

                    // Разделяем пробелами группы по 8 байт для удобства чтения
                    if ((i + 1) % 8 == 0 && i < bytes_to_display - 1) {
                        strcat(hex_buffer, "| ");
                    }
                }

                // Если показали не все данные, добавляем "..."
                if (bytes_to_display < rx_size) {
                    strcat(hex_buffer, "...");
                }

                SecUart_Log(&secure_uart_ctx, hex_buffer);
                SecUart_Log(&secure_uart_ctx, "\r\n");
            }
        }
        else {
            char log_buffer[64];
            snprintf(log_buffer, sizeof(log_buffer),
                    "Error processing message, code: %d\r\n", err);
            SecUart_Log(&secure_uart_ctx, log_buffer);
        }
    }
}

/**
 * @brief Отправка периодического сообщения
 */
static void SendPeriodicMessage(void) {
	uint32_t current_time = HAL_GetTick();

	// Каждые 5 секунд выводим отладочную информацию для мониторинга состояния
	static uint32_t last_debug_time = 0;
	if (current_time - last_debug_time >= 5000) {
		char debug_buffer[128];
		snprintf(debug_buffer, sizeof(debug_buffer),
				"DEBUG: Time=%lu, LastTX=%lu, TxComplete=%d, RxComplete=%d\r\n",
				current_time, last_tx_time,
				secure_uart_ctx.tx_complete, secure_uart_ctx.rx_complete);
		SecUart_Log(&secure_uart_ctx, debug_buffer);
		last_debug_time = current_time;
	}

	// Проверяем, прошло ли достаточно времени с последней отправки
	if (current_time - last_tx_time >= TX_PERIOD_MS) {
		// Если предыдущая передача не завершена, пробуем принудительно сбросить флаг
		if (!secure_uart_ctx.tx_complete) {
			SecUart_Log(&secure_uart_ctx, "WARNING: Forcing tx_complete to true\r\n");
			secure_uart_ctx.tx_complete = true;
		}

		// Формируем тестовое сообщение
		uint8_t msg_data[TEST_SIZE] = {0};

		memcpy(msg_data, test_dataS, TEST_SIZE);

        // Используем реальную длину строки + 1 (для типа сообщения)
        uint8_t msg_size = TEST_SIZE + 1;

		// Добавляем 1 для учета типа сообщения
		SecUartError err = SecUart_Send(&secure_uart_ctx, msg_data, msg_size, SECUART_MSG_DATA);


		if (err == SECUART_OK) {
			// Обновляем время последней отправки
			last_tx_time = current_time;
			SecUart_Log(&secure_uart_ctx, "INFO: Message sent successfully\r\n");
		} else {
			// Выводим код ошибки
			char err_buffer[64];
			snprintf(err_buffer, sizeof(err_buffer), "ERROR: Failed to send message, error=%d\r\n", err);
			SecUart_Log(&secure_uart_ctx, err_buffer);
		}
	}
}

/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{

	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();

	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
	MX_DMA_Init();
	MX_USART2_UART_Init();
	MX_USART1_UART_Init();
	MX_USART6_UART_Init();
	/* USER CODE BEGIN 2 */

    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
    DWT->CYCCNT = 0;

	// Инициализация защищенного UART
	SecUartError err = SecUart_Init(&secure_uart_ctx, &huart1, &huart6, &huart2, secure_key);

	if (err != SECUART_OK) {
		// Ошибка инициализации
		char error_msg[] = "Failed to initialize secure UART!\r\n";
		HAL_UART_Transmit(&huart2, (uint8_t*)error_msg, strlen(error_msg), 100);

		// Бесконечный цикл в случае ошибки
		while (1) {
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
			HAL_Delay(200);
		}
	}

	// Отправляем приветственное сообщение в монитор
	SecUart_Log(&secure_uart_ctx, "\r\n=================================\r\n");
	SecUart_Log(&secure_uart_ctx, "Secure UART Protocol Initialized\r\n");
	SecUart_Log(&secure_uart_ctx, "=================================\r\n");

	// Инициализируем время последней отправки
	last_tx_time = HAL_GetTick();

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		// Обработка защищенного UART
		ProcessSecureUart();
		// Отправка периодического сообщения

		SendPeriodicMessage();

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		// Мигаем светодиодом для индикации работы
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		HAL_Delay(500);
	}
	/* USER CODE END 3 */
}

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 16;
	RCC_OscInitStruct.PLL.PLLN = 336;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
	RCC_OscInitStruct.PLL.PLLQ = 4;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
	{
		Error_Handler();
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
	{
		Error_Handler();
	}
}

/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{

	/* USER CODE BEGIN USART1_Init 0 */

	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
	huart1.Init.BaudRate = 115200;
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
	huart1.Init.StopBits = UART_STOPBITS_1;
	huart1.Init.Parity = UART_PARITY_NONE;
	huart1.Init.Mode = UART_MODE_TX_RX;
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
	if (HAL_UART_Init(&huart1) != HAL_OK)
	{
		Error_Handler();
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}

/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{

	/* USER CODE BEGIN USART2_Init 0 */

	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
	huart2.Init.BaudRate = 115200;
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Mode = UART_MODE_TX;
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
	if (HAL_UART_Init(&huart2) != HAL_OK)
	{
		Error_Handler();
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}

/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{

	/* USER CODE BEGIN USART6_Init 0 */

	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
	huart6.Init.BaudRate = 115200;
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
	huart6.Init.StopBits = UART_STOPBITS_1;
	huart6.Init.Parity = UART_PARITY_NONE;
	huart6.Init.Mode = UART_MODE_TX_RX;
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
	if (HAL_UART_Init(&huart6) != HAL_OK)
	{
		Error_Handler();
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
	__HAL_RCC_DMA1_CLK_ENABLE();

	/* DMA interrupt init */
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
	/* DMA2_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);

}

/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStruct = {0};
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
	__HAL_RCC_GPIOH_CLK_ENABLE();
	__HAL_RCC_GPIOA_CLK_ENABLE();
	__HAL_RCC_GPIOB_CLK_ENABLE();

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
	}
	/* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
 * @brief  Reports the name of the source file and the source line number
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
