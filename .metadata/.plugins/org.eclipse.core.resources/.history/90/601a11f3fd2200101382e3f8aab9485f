/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Основной файл программы демонстрации защищенного протокола UART
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "secure_uart.h"
#include "frame.h"
#include "ascon.h"
#include "benchmark.h"
#include <stdio.h>
#include <string.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define UART_BUFFER_SIZE 128
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
CRC_HandleTypeDef hcrc;

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart6;

/* USER CODE BEGIN PV */
// Глобальный экземпляр обработчика защищенного протокола
SecureUartHandle secureUartHandle;

// Ключ шифрования (должен быть строго секретным в реальной системе)
uint8_t encryptionKey[SECURE_UART_KEY_SIZE] = {
		0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
		0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10
};

// Буферы для передачи/приема данных
uint8_t txBuffer[UART_BUFFER_SIZE];
uint8_t rxBuffer[UART_BUFFER_SIZE];
uint16_t rxSize = 0;

// Флаги для управления приложением
volatile uint8_t isDataReceived = 0;
volatile uint8_t runBenchmark = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_CRC_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART6_UART_Init(void);
/* USER CODE BEGIN PFP */
void ProcessCommands(void);
void SendSecureData(const char* data);
void RunDemo(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_CRC_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  MX_USART6_UART_Init();
  /* USER CODE BEGIN 2 */

	// Инициализация защищенного протокола UART
	SecureUart_Init(&secureUartHandle, &huart1, &huart6, &huart2);

	// Установка ключа шифрования
	SecureUart_SetKey(&secureUartHandle, encryptionKey);

	// Запуск демо
	RunDemo();

	// Включение прерывания для приема данных
	HAL_UART_Receive_IT(&huart2, txBuffer, 1);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// Проверка наличия принятых данных
		if (isDataReceived) {
			isDataReceived = 0;
			ProcessCommands();
		}

		// Проверка на запуск бенчмарка
		if (runBenchmark) {
			runBenchmark = 0;
			SecureUart_BenchmarkAll(&secureUartHandle);
		}

		// Проверка наличия принятых защищенных данных
		SecureUartStatus status = SecureUart_Receive(&secureUartHandle, rxBuffer, &rxSize);
		if (status == SECURE_UART_OK && rxSize > 0) {
			// Добавляем нулевой символ для корректного вывода строки
			rxBuffer[rxSize] = '\0';

			// Выводим полученные данные в монитор
			char buffer[128];
			sprintf(buffer, "\r\n[RX] Принято сообщение: %s\r\n", rxBuffer);
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);

			// Сбрасываем размер принятых данных
			rxSize = 0;

			// Отправляем обратно подтверждение
			SendSecureData("ACK: сообщение получено");
		}
	}
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 100;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{

  /* USER CODE BEGIN CRC_Init 0 */

  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
  huart6.Init.BaudRate = 115200;
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart6) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin : B1_Pin_Pin */
  GPIO_InitStruct.Pin = B1_Pin_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_Pin_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
// Обработчик прерывания USART для мониторинга
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	// Если это UART для мониторинга
	if (huart == &huart2) {
		// Устанавливаем флаг принятых данных
		isDataReceived = 1;

		// Запускаем прием следующего байта
		HAL_UART_Receive_IT(&huart2, txBuffer, 1);
	}
	// Если это UART для приема защищенных данных
	else if (huart == &huart6) {
		// Этот UART настроен на прерывание по приему
		uint8_t receivedByte = huart->Instance->DR;

		// Передаем байт обработчику защищенного протокола
		SecureUart_RxCallback(&secureUartHandle, receivedByte);
	}
}

// Обработка команд из UART мониторинга
void ProcessCommands(void) {
	// Обработка команд
	switch (txBuffer[0]) {
	case 'h': // Справка
	case 'H':
	case '?': {
		const char* helpText =
				"\r\n=== Справка по командам ===\r\n"
				"1 - Отправить тестовое сообщение\r\n"
				"2 - Отправить длинное тестовое сообщение\r\n"
				"b - Запустить бенчмарк\r\n"
				"r - Отправить сырые данные (без защиты)\r\n"
				"h/? - Показать эту справку\r\n"
				"===========================\r\n";
		HAL_UART_Transmit(&huart2, (uint8_t*)helpText, strlen(helpText), HAL_MAX_DELAY);
		break;
	}

	case '1': // Отправить тестовое сообщение
		SendSecureData("Тестовое сообщение через защищенный UART");
		break;

	case '2': // Отправить длинное тестовое сообщение
		SendSecureData("Это длинное тестовое сообщение для проверки работы защищенного протокола UART "
				"с большим объемом данных. Данное сообщение будет зашифровано с использованием "
				"алгоритма Ascon, защищено от подделки с помощью MAC и проверено на целостность "
				"с использованием CRC32.");
		break;

	case 'b': // Запустить бенчмарк
	case 'B':
		runBenchmark = 1;
		break;

	case 'r': // Отправить сырые данные (для сравнения)
	case 'R': {
		const char* rawMessage = "Тестовые данные без защиты";
		HAL_UART_Transmit(&huart1, (uint8_t*)rawMessage, strlen(rawMessage), HAL_MAX_DELAY);

		const char* notificationMessage = "\r\n[TX] Отправлены сырые данные (без защиты)\r\n";
		HAL_UART_Transmit(&huart2, (uint8_t*)notificationMessage, strlen(notificationMessage), HAL_MAX_DELAY);
		break;
	}

	default:
		break;
	}
}

// Отправка данных через защищенный протокол
void SendSecureData(const char* data) {
	if (data == NULL) {
		return;
	}

	// Отправка данных через защищенный протокол
	SecureUartStatus status = SecureUart_Send(&secureUartHandle, (const uint8_t*)data, strlen(data));

	// Вывод статуса отправки
	SecureUart_PrintStatus(&secureUartHandle, "[TX] Статус отправки", status);
}

// Демонстрация возможностей протокола
void RunDemo(void) {
	const char* welcomeMessage =
			"\r\n====================================================\r\n"
			"      ДЕМОНСТРАЦИЯ ЗАЩИЩЕННОГО ПРОТОКОЛА UART\r\n"
			"====================================================\r\n"
			"Платформа: STM32F411RE\r\n"
			"Интерфейсы: USART1 <-> USART6 (защищенный канал)\r\n"
			"            USART2 (мониторинг)\r\n"
			"----------------------------------------------------\r\n"
			"Компоненты защищенного протокола:\r\n"
			"1. Фреймирование данных с SOF/EOF\r\n"
			"2. Шифрование Ascon\r\n"
			"3. Аутентификация данных (MAC)\r\n"
			"4. Защита целостности (CRC32)\r\n"
			"5. Защита от Replay-атак (счетчики)\r\n"
			"====================================================\r\n"
			"Введите '?' или 'h' для справки по командам.\r\n";

	HAL_UART_Transmit(&huart2, (uint8_t*)welcomeMessage, strlen(welcomeMessage), HAL_MAX_DELAY);
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
	}
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
