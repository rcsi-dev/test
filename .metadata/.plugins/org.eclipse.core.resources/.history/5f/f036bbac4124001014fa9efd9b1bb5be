#ifndef SECURE_UART_H
#define SECURE_UART_H

#include "main.h"
#include <stdint.h>
#include <string.h>

/* Определение констант */
#define START_BYTE          0x7E
#define END_BYTE            0x7D
#define ESCAPE_BYTE         0x7C
#define MAX_DATA_LENGTH     255
#define HEADER_SIZE         6  // START_BYTE(1) + LENGTH(1) + SEQ_NUM(4)
#define FOOTER_SIZE         3  // CRC16(2) + END_BYTE(1)
#define MAX_FRAME_SIZE      (MAX_DATA_LENGTH * 2 + HEADER_SIZE + FOOTER_SIZE) // С учетом байт-стаффинга

/* Структура пакета данных */
typedef struct {
    uint32_t sequence_number;  // Порядковый номер для защиты от replay-атак
    uint8_t data[MAX_DATA_LENGTH];
    uint8_t data_length;
} SecurePacket;

/* Структура для хранения состояния протокола */
typedef struct {
    uint32_t last_tx_seq;   // Последний отправленный порядковый номер
    uint32_t last_rx_seq;   // Последний принятый порядковый номер
    UART_HandleTypeDef *tx_uart;  // UART для передачи
    UART_HandleTypeDef *rx_uart;  // UART для приема
    UART_HandleTypeDef *debug_uart; // UART для отладки
} SecureUartHandle;

/* Функции для работы с протоколом */

// Инициализация протокола
void SecureUart_Init(SecureUartHandle *handle, UART_HandleTypeDef *tx_uart, UART_HandleTypeDef *rx_uart, UART_HandleTypeDef *debug_uart);

// Отправка данных
HAL_StatusTypeDef SecureUart_Send(SecureUartHandle *handle, uint8_t *data, uint8_t length);

// Получение данных (возвращает длину полученных данных или 0 в случае ошибки)
uint8_t SecureUart_Receive(SecureUartHandle *handle, uint8_t *buffer, uint16_t buffer_size);

// Обработка принятого фрейма
uint8_t SecureUart_ProcessFrame(SecureUartHandle *handle, uint8_t *frame, uint16_t frame_length, SecurePacket *packet);

// Формирование фрейма из пакета
uint16_t SecureUart_BuildFrame(uint8_t *frame, SecurePacket *packet);

// Расчет CRC16
uint16_t SecureUart_CalculateCRC16(uint8_t *data, uint16_t length);

// Отладочный вывод данных в hex-формате
void SecureUart_DebugHexDump(SecureUartHandle *handle, const char *prefix, uint8_t *data, uint16_t length);

#endif /* SECURE_UART_H */
