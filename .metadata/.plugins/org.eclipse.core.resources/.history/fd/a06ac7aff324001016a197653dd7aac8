// Шифрование данных в пакете
void SecureUART_EncryptPacket(SecurePacket *packet) {
    // Проверка условий
    if (!securityState.encryptionEnabled || !(packet->flags & FLAG_ENCRYPTED)) {
        return;
    }

    // Проверка длины данных
    if (packet->dataLength == 0) {
        return;
    }

    // Копируем IV для использования
    uint8_t iv_copy[8];
    memcpy(iv_copy, securityState.iv, 8);

    // Дополняем данные до кратного размеру блока (8 байт)
    uint8_t originalLength = packet->dataLength;
    uint8_t padding = 0;

    if (originalLength % 8 != 0) {
        padding = 8 - (originalLength % 8);
        // Добавляем padding в конец данных (PKCS#7)
        memset(&packet->data[originalLength], padding, padding);
        // Обновляем длину данных с учетом padding
        packet->dataLength += padding;
    }

    // Шифруем данные в режиме CBC
    Speck_CBC_Encrypt(&securityState.encryptionKey, iv_copy, packet->data, packet->dataLength);

    // Сохраняем размер padding в первом байте данных (для дешифрования)
    // Для этого шифруем еще один блок с padding информацией
    uint8_t paddingInfo[8] = {padding, 0, 0, 0, 0, 0, 0, 0};
    Speck_CBC_Encrypt(&securityState.encryptionKey, iv_copy, paddingInfo, 8);

    // Теперь нам нужно объединить paddingInfo и зашифрованные данные
    // Сдвигаем данные на 8 байт вправо
    memmove(&packet->data[8], packet->data, packet->dataLength);
    // Вставляем paddingInfo в начало
    memcpy(packet->data, paddingInfo, 8);
    // Обновляем длину данных
    packet->dataLength += 8;
}

// Дешифрование данных в пакете
int8_t SecureUART_DecryptPacket(SecurePacket *packet) {
    // Проверка условий
    if (!securityState.encryptionEnabled || !(packet->flags & FLAG_ENCRYPTED)) {
        return 0; // Нет необходимости в дешифровании
    }

    // Проверка минимальной длины данных
    if (packet->dataLength < 8) {
        return -1; // Ошибка: данные слишком короткие
    }

    // Копируем IV для использования
    uint8_t iv_copy[8];
    memcpy(iv_copy, securityState.iv, 8);

    // Извлекаем и дешифруем информацию о padding
    uint8_t paddingInfo[8];
    memcpy(paddingInfo, packet->data, 8);
    Speck_CBC_Decrypt(&securityState.encryptionKey, iv_copy, paddingInfo, 8);
    uint8_t padding = paddingInfo[0];

    // Дешифруем основные данные
    // Копируем IV для использования снова (он был изменен при дешифровании paddingInfo)
    memcpy(iv_copy, securityState.iv, 8);

    // Дешифруем данные, начиная с 8 байта
    uint8_t *encryptedData = &packet->data[8];
    uint32_t encryptedLength = packet->dataLength - 8;

    if (encryptedLength % 8 != 0) {
        return -2; // Ошибка: длина зашифрованных данных не кратна размеру блока
    }

    // Дешифруем данные
    Speck_CBC_Decrypt(&securityState.encryptionKey, iv_copy, encryptedData, encryptedLength);

    // Перемещаем дешифрованные данные в начало буфера
    memmove(packet->data, encryptedData, encryptedLength);

    // Вычисляем исходную длину данных без padding
    uint32_t originalLength = encryptedLength;
    if (padding > 0 && padding <= 8) {
        originalLength -= padding;
    }

    // Обновляем длину данных
    packet->dataLength = originalLength;

    return 0; // Успешное дешифрование
}

// Вычисление MAC для пакета
void SecureUART_CalculateMAC(SecurePacket *packet) {
    // Проверка условий
    if (!securityState.macEnabled || !(packet->flags & FLAG_MAC)) {
        return;
    }

    // Подготовка данных для MAC (заголовок + данные)
    uint8_t macBuffer[sizeof(SecurePacket)];
    uint32_t macBufferIndex = 0;

    // Добавляем длину данных
    macBuffer[macBufferIndex++] = packet->dataLength;

    // Добавляем счетчик последовательности
    macBuffer[macBufferIndex++] = (packet->sequenceCounter >> 24) & 0xFF;
    macBuffer[macBufferIndex++] = (packet->sequenceCounter >> 16) & 0xFF;
    macBuffer[macBufferIndex++] = (packet->sequenceCounter >> 8) & 0xFF;
    macBuffer[macBufferIndex++] = packet->sequenceCounter & 0xFF;

    // Добавляем флаги
    macBuffer[macBufferIndex++] = packet->flags;

    // Добавляем данные
    memcpy(&macBuffer[macBufferIndex], packet->data, packet->dataLength);
    macBufferIndex += packet->dataLength;

    // Вычисление MAC
    Speck_CMAC(&securityState.macKey, macBuffer, macBufferIndex, packet->mac);
}

// Проверка MAC в пакете
int8_t SecureUART_VerifyMAC(SecurePacket *packet) {
    // Проверка условий
    if (!securityState.macEnabled || !(packet->flags & FLAG_MAC)) {
        return 0; // MAC не используется, проверка не требуется
    }

    // Сохраняем полученный MAC
    uint8_t receivedMAC[MAC_SIZE];
    memcpy(receivedMAC, packet->mac, MAC_SIZE);

    // Вычисляем MAC заново
    SecureUART_CalculateMAC(packet);

    // Сравниваем вычисленный MAC с полученным
    if (memcmp(receivedMAC, packet->mac, MAC_SIZE) != 0) {
        return -1; // MAC не совпадает
    }

    return 0; // MAC совпадает
}

// Проверка защиты от Replay-атак
int8_t SecureUART_CheckReplayProtection(uint32_t sequenceCounter) {
    // Проверка условия
    if (!securityState.replayProtectionEnabled) {
        return 0; // Защита от Replay-атак отключена
    }

    // Проверка номера последовательности
    // Номер должен быть больше последнего полученного
    if (sequenceCounter <= securityState.lastReceivedSequence) {
        return -1; // Обнаружена Replay-атака
    }

    return 0; // Проверка пройдена
}#include "secure_uart.h"
#include <string.h>
#include <stdio.h>

// Объявление внешних переменных
extern UART_HandleTypeDef huart1; // UART для отправки
extern UART_HandleTypeDef huart2; // UART для отладки
extern UART_HandleTypeDef huart6; // UART для приема

// Буферы для приема и передачи
static uint8_t rxBuffer[sizeof(SecureFrame) + 10]; // Буфер для приема (с запасом)
static uint8_t txBuffer[sizeof(SecureFrame)];      // Буфер для передачи
static uint8_t debugBuffer[512];                   // Буфер для отладочных сообщений

// Статические переменные
static uint32_t sequenceCounter = 0; // Счетчик последовательности

// Состояние защиты
static SecureUARTState securityState = {0};

// Инициализация протокола
void SecureUART_Init(void) {
    // Сброс счетчика последовательности
    sequenceCounter = 0;

    // Сброс состояния безопасности
    memset(&securityState, 0, sizeof(SecureUARTState));
    securityState.lastReceivedSequence = 0xFFFFFFFF; // Инициализация максимальным значением

    // По умолчанию отключаем все механизмы защиты
    securityState.encryptionEnabled = 0;
    securityState.macEnabled = 0;
    securityState.replayProtectionEnabled = 0;

    // Запуск приема данных по DMA в циркулярном режиме
    HAL_UARTEx_ReceiveToIdle_DMA(&huart6, rxBuffer, sizeof(rxBuffer));

    // Отключение полудуплексного режима приема для DMA
    __HAL_DMA_DISABLE_IT(huart6.hdmarx, DMA_IT_HT);

    // Отладочное сообщение
    sprintf((char*)debugBuffer, "Защищенный UART протокол инициализирован (циркулярный режим DMA)\r\n");
    HAL_UART_Transmit(&huart2, debugBuffer, strlen((char*)debugBuffer), HAL_MAX_DELAY);
}

// Установка ключей и параметров безопасности
void SecureUART_SetSecurity(const uint8_t *encKey, const uint8_t *macKey, const uint8_t *iv,
                            uint8_t enableEncryption, uint8_t enableMAC, uint8_t enableReplayProtection) {
    // Инициализация ключа шифрования
    if (encKey != NULL) {
        Speck_Init(&securityState.encryptionKey, encKey);
    }

    // Инициализация ключа для MAC
    if (macKey != NULL) {
        Speck_Init(&securityState.macKey, macKey);
    }

    // Инициализация вектора инициализации
    if (iv != NULL) {
        memcpy(securityState.iv, iv, 8);
    } else {
        // Если IV не предоставлен, используем нулевой IV
        memset(securityState.iv, 0, 8);
    }

    // Установка флагов
    securityState.encryptionEnabled = enableEncryption;
    securityState.macEnabled = enableMAC;
    securityState.replayProtectionEnabled = enableReplayProtection;

    // Отладочное сообщение
    sprintf((char*)debugBuffer, "Настройки безопасности установлены: Шифрование=%d, MAC=%d, Защита от Replay=%d\r\n",
            enableEncryption, enableMAC, enableReplayProtection);
    HAL_UART_Transmit(&huart2, debugBuffer, strlen((char*)debugBuffer), HAL_MAX_DELAY);
}

// Формирование пакета
void SecureUART_PacketInit(SecurePacket *packet, uint8_t *data, uint8_t length) {
    packet->dataLength = length;
    packet->sequenceCounter = sequenceCounter++;
    packet->flags = 0;

    // Устанавливаем флаги в соответствии с настройками безопасности
    if (securityState.encryptionEnabled) {
        packet->flags |= FLAG_ENCRYPTED;
    }

    if (securityState.macEnabled) {
        packet->flags |= FLAG_MAC;
    }

    // Копируем данные
    memcpy(packet->data, data, length);

    // Если включено шифрование, шифруем данные
    if (securityState.encryptionEnabled) {
        SecureUART_EncryptPacket(packet);
    }

    // Если включен MAC, вычисляем MAC
    if (securityState.macEnabled) {
        SecureUART_CalculateMAC(packet);
    }
}

// Формирование фрейма из пакета
void SecureUART_FrameInit(SecureFrame *frame, SecurePacket *packet) {
    uint8_t *framePtr = (uint8_t*)frame;
    uint16_t frameIndex = 0;

    // Добавление стартового байта
    framePtr[frameIndex++] = START_BYTE;

    // Добавление длины данных
    framePtr[frameIndex++] = packet->dataLength;

    // Добавление счетчика последовательности (4 байта)
    framePtr[frameIndex++] = (packet->sequenceCounter >> 24) & 0xFF;
    framePtr[frameIndex++] = (packet->sequenceCounter >> 16) & 0xFF;
    framePtr[frameIndex++] = (packet->sequenceCounter >> 8) & 0xFF;
    framePtr[frameIndex++] = packet->sequenceCounter & 0xFF;

    // Добавление флагов
    framePtr[frameIndex++] = packet->flags;

    // Добавление данных
    memcpy(&framePtr[frameIndex], packet->data, packet->dataLength);
    frameIndex += packet->dataLength;

    // Добавление MAC, если он используется
    if (packet->flags & FLAG_MAC) {
        memcpy(&framePtr[frameIndex], packet->mac, MAC_SIZE);
        frameIndex += MAC_SIZE;
    }

    // Вычисление и добавление CRC
    framePtr[frameIndex] = SecureUART_CalculateCRC8(framePtr, frameIndex);
}

// Отправка фрейма
void SecureUART_SendFrame(SecureFrame *frame) {
    uint16_t frameSize = 7 + frame->dataLength; // startByte + dataLength + sequenceCounter(4) + flags + data

    // Добавляем размер MAC, если он используется
    if (frame->flags & FLAG_MAC) {
        frameSize += MAC_SIZE;
    }

    // Добавляем размер CRC
    frameSize += 1; // crc

    // Копирование фрейма в буфер передачи
    memcpy(txBuffer, frame, frameSize);

    // Отправка по DMA
    HAL_UART_Transmit_DMA(&huart1, txBuffer, frameSize);

    // Отладочное сообщение
    SecureUART_PrintDebug("Отправлен фрейм", txBuffer, frameSize);
}

// Обработка принятого фрейма
int8_t SecureUART_ParseFrame(uint8_t *buffer, uint16_t length, SecurePacket *packet) {
    if (length < 8) { // Минимальная длина фрейма (startByte + dataLength + sequenceCounter(4) + flags + crc)
        return -1; // Недостаточная длина
    }

    if (buffer[0] != START_BYTE) {
        return -2; // Неверный стартовый байт
    }

    uint8_t dataLength = buffer[1];
    uint8_t flags = buffer[6];
    uint16_t expectedLength = 8 + dataLength; // startByte + dataLength + sequenceCounter(4) + flags + data + crc

    // Проверяем наличие MAC в фрейме
    if (flags & FLAG_MAC) {
        expectedLength += MAC_SIZE;
    }

    if (expectedLength > length) {
        return -3; // Недостаточная длина для указанного размера данных
    }

    // Проверка CRC
    uint8_t calculatedCRC = SecureUART_CalculateCRC8(buffer, expectedLength - 1);
    if (calculatedCRC != buffer[expectedLength - 1]) {
        return -4; // Неверная контрольная сумма
    }

    // Заполнение пакета
    packet->dataLength = dataLength;
    packet->sequenceCounter = ((uint32_t)buffer[2] << 24) |
                              ((uint32_t)buffer[3] << 16) |
                              ((uint32_t)buffer[4] << 8) |
                              buffer[5];
    packet->flags = flags;

    // Копируем данные
    memcpy(packet->data, &buffer[7], dataLength);

    // Если есть MAC, копируем его
    if (flags & FLAG_MAC) {
        memcpy(packet->mac, &buffer[7 + dataLength], MAC_SIZE);
    }

    // Проверка защиты от Replay-атак
    if (securityState.replayProtectionEnabled) {
        if (SecureUART_CheckReplayProtection(packet->sequenceCounter) != 0) {
            return -5; // Обнаружена Replay-атака
        }
    }

    // Проверка MAC
    if ((flags & FLAG_MAC) && securityState.macEnabled) {
        if (SecureUART_VerifyMAC(packet) != 0) {
            return -6; // Неверный MAC
        }
    }

    // Дешифрование данных
    if ((flags & FLAG_ENCRYPTED) && securityState.encryptionEnabled) {
        if (SecureUART_DecryptPacket(packet) != 0) {
            return -7; // Ошибка дешифрования
        }
    }

    // Обновляем последний принятый номер последовательности
    securityState.lastReceivedSequence = packet->sequenceCounter;

    return 0; // Успех
}

// Вычисление CRC8
uint8_t SecureUART_CalculateCRC8(uint8_t *data, uint16_t length) {
    uint8_t crc = 0xFF;

    for (uint16_t i = 0; i < length; i++) {
        crc ^= data[i];

        for (uint8_t j = 0; j < 8; j++) {
            if (crc & 0x80) {
                crc = (crc << 1) ^ 0x31; // Полином x^8 + x^5 + x^4 + 1
            } else {
                crc <<= 1;
            }
        }
    }

    return crc;
}

// Обработчик прерывания IDLE
void SecureUART_IDLECallback(UART_HandleTypeDef *huart) {
    if (huart->Instance == USART6) {
        // Получаем размер принятых данных
        uint16_t rxSize = sizeof(rxBuffer) - __HAL_DMA_GET_COUNTER(huart->hdmarx);

        // В циркулярном режиме не останавливаем DMA
        // HAL_UART_DMAStop(huart);  // Эта строка больше не нужна

        // Обрабатываем принятые данные
        SecurePacket receivedPacket;
        int8_t parseResult = SecureUART_ParseFrame(rxBuffer, rxSize, &receivedPacket);

        if (parseResult == 0) {
            // Отладочное сообщение
            SecureUART_PrintDebug("Принят фрейм", rxBuffer, rxSize);

            // Дополнительная отладочная информация о распарсенном пакете
            sprintf((char*)debugBuffer, "Распарсенный пакет: Длина=%u, Счетчик=%lu, Флаги=0x%02X, Данные=",
                    receivedPacket.dataLength, receivedPacket.sequenceCounter, receivedPacket.flags);
            HAL_UART_Transmit(&huart2, debugBuffer, strlen((char*)debugBuffer), HAL_MAX_DELAY);

            for (uint8_t i = 0; i < receivedPacket.dataLength; i++) {
                sprintf((char*)debugBuffer, "%02X ", receivedPacket.data[i]);
                HAL_UART_Transmit(&huart2, debugBuffer, strlen((char*)debugBuffer), HAL_MAX_DELAY);
            }

            // Если есть MAC, выводим его
            if (receivedPacket.flags & FLAG_MAC) {
                sprintf((char*)debugBuffer, "\r\nMAC=");
                HAL_UART_Transmit(&huart2, debugBuffer, strlen((char*)debugBuffer), HAL_MAX_DELAY);

                for (uint8_t i = 0; i < MAC_SIZE; i++) {
                    sprintf((char*)debugBuffer, "%02X ", receivedPacket.mac[i]);
                    HAL_UART_Transmit(&huart2, debugBuffer, strlen((char*)debugBuffer), HAL_MAX_DELAY);
                }
            }

            sprintf((char*)debugBuffer, "\r\n");
            HAL_UART_Transmit(&huart2, debugBuffer, strlen((char*)debugBuffer), HAL_MAX_DELAY);
        } else {
            // Ошибка при разборе фрейма
            sprintf((char*)debugBuffer, "Ошибка при разборе принятого фрейма: код %d\r\n", parseResult);
            HAL_UART_Transmit(&huart2, debugBuffer, strlen((char*)debugBuffer), HAL_MAX_DELAY);
        }

        // В циркулярном режиме не нужно перезапускать DMA
        // DMA продолжит работать автоматически
    }
}

// Обработчик завершения приема DMA
void SecureUART_RxCpltCallback(UART_HandleTypeDef *huart) {
    if (huart->Instance == USART6) {
        // В циркулярном режиме DMA автоматически перезапускается,
        // поэтому ничего делать не нужно

        // Можно добавить обработку данных, если буфер полностью заполнен
        // Это может быть полезно, если данные приходят большими блоками
        sprintf((char*)debugBuffer, "Буфер DMA заполнен\r\n");
        HAL_UART_Transmit(&huart2, debugBuffer, strlen((char*)debugBuffer), HAL_MAX_DELAY);
    }
}

// Обработчик завершения передачи DMA
void SecureUART_TxCpltCallback(UART_HandleTypeDef *huart) {
    if (huart->Instance == USART1) {
        // Дополнительные действия при необходимости
    }
}

// Печать отладочной информации
void SecureUART_PrintDebug(const char *title, uint8_t *data, uint16_t length) {
    sprintf((char*)debugBuffer, "%s (%u байт): ", title, length);
    HAL_UART_Transmit(&huart2, debugBuffer, strlen((char*)debugBuffer), HAL_MAX_DELAY);

    for (uint16_t i = 0; i < length; i++) {
        sprintf((char*)debugBuffer, "%02X ", data[i]);
        HAL_UART_Transmit(&huart2, debugBuffer, strlen((char*)debugBuffer), HAL_MAX_DELAY);
    }

    sprintf((char*)debugBuffer, "\r\n");
    HAL_UART_Transmit(&huart2, debugBuffer, strlen((char*)debugBuffer), HAL_MAX_DELAY);
}
