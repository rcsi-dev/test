/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>
#include <stdint.h>
#include "mbedtls/md.h"
#include "mbedtls/chacha20.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* \/ NOT WORKING CORRECTLY \/ */

//#define MAX_PAYLOAD 32
//#define HMAC_SIZE 32
//
//typedef struct {
//	uint8_t start;
//	uint8_t length;
//	uint8_t command;
//	uint8_t payload[MAX_PAYLOAD];
//	uint8_t hmac[HMAC_SIZE];
//} HmacPacket;

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define START_BYTE 0x7E
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
static const uint8_t CHACHA_KEY[32] = {
  0x10,0x11,0x12,0x13, 0x14,0x15,0x16,0x17,
  0xA0,0xA1,0xA2,0xA3, 0xB0,0xB1,0xB2,0xB3,
  0x55,0x66,0x77,0x88, 0x99,0xAA,0xAB,0xAC,
  0xFF,0xFF,0x00,0x01, 0x02,0x03,0x04,0x05
};

static const uint8_t HMAC_KEY[32] = {
  0xDE,0xAD,0xBE,0xEF,  0x01,0x02,0x03,0x04,
  0x05,0x06,0x07,0x08,  0x55,0x66,0x77,0x88,
  0x10,0x10,0x10,0x10,  0x20,0x20,0x20,0x20,
  0x99,0xAB,0xCD,0xEF,  0x11,0x22,0x33,0x44
};
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* PRNG start */
static uint32_t seed = 0x12345678; // начальное зерно

static uint32_t xorshift32(uint32_t *state)
{
    uint32_t x = *state;
    x ^= x << 13;
    x ^= x >> 17;
    x ^= x << 5;
    *state = x;
    return x;
}

int getRandomBytes(uint8_t *buf, size_t len)
{
    for (size_t i = 0; i < len; i++) {
        uint32_t r = xorshift32(&seed);
        buf[i] = (uint8_t)(r & 0xFF);
    }
    return 0;
}
/* PRNG end */

/* HMAC start */
int computeHmacSha256(
    const uint8_t *input, size_t inputLen,
    const uint8_t *key,   size_t keyLen,
    uint8_t *outHmac
) {
    int ret = 0;
    mbedtls_md_context_t ctx;
    const mbedtls_md_info_t *info;

    mbedtls_md_init(&ctx);
    info = mbedtls_md_info_from_type(MBEDTLS_MD_SHA256);
    if (!info) {
        ret = -1;
        goto exit;
    }
    if ((ret = mbedtls_md_setup(&ctx, info, 1)) != 0) goto exit;
    if ((ret = mbedtls_md_hmac_starts(&ctx, key, keyLen)) != 0) goto exit;
    if ((ret = mbedtls_md_hmac_update(&ctx, input, inputLen)) != 0) goto exit;
    if ((ret = mbedtls_md_hmac_finish(&ctx, outHmac)) != 0) goto exit;

exit:
    mbedtls_md_free(&ctx);
    return ret;
}
/* HMAC end */

/* ChaCha20 start */
int chacha20_crypt(
    const uint8_t *key,   // 32 байта
    size_t keyLen,        // == 32
    const uint8_t *nonce, // 12 байт
    size_t nonceLen,      // == 12
    uint32_t counter,
    const uint8_t *input, size_t ilen,
    uint8_t *output       // output = шифротекст/расшифрованный текст
)
{
    if (keyLen != 32 || nonceLen != 12) {
        return -1;
    }
    mbedtls_chacha20_context ctx;
    mbedtls_chacha20_init(&ctx);

    // Инициализация
    // bits=256, nonce=12
    mbedtls_chacha20_starts(&ctx, key, 256, nonce, 12, counter);

    // Шифруем/дешифруем
    mbedtls_chacha20_update(&ctx, ilen, input, output);

    mbedtls_chacha20_free(&ctx);
    return 0;
}
/* ChaCha20 end */

/* SendPacket start */
#define CHACHA_KEY_LEN  32
#define HMAC_KEY_LEN    32

int sendEncryptedPacket(UART_HandleTypeDef *huart,
    uint8_t command,
    const uint8_t *plaintext, size_t ptLen
)
{
    // 1. Генерируем nonce (12 байт)
    uint8_t nonce[12];
    getRandomBytes(nonce, 12);

    // 2. Шифруем ChaCha20
    uint8_t ciphertext[256];
    if (ptLen > sizeof(ciphertext)) return -1;
    int ret = chacha20_crypt(
        CHACHA_KEY, CHACHA_KEY_LEN,
        nonce, 12,
        0, // counter
        plaintext, ptLen,
        ciphertext
    );
    if (ret != 0) return ret;

    // 3. Формируем пакет
    //   [start(0x7E), length(1b), command(1b), nonce(12b), ciphertext(ptLen), hmac(32b)]
    uint8_t txBuf[1 + 1 + 1 + 12 + 256 + 32];
    txBuf[0] = START_BYTE; // start
    uint16_t length = 1 + 12 + ptLen;
    // (command + nonce + ciphertext)
    txBuf[1] = (uint8_t) length;
    txBuf[2] = command;

    memcpy(&txBuf[3], nonce, 12);
    memcpy(&txBuf[3 + 12], ciphertext, ptLen);

    // 4. Считаем HMAC по [command, nonce, ciphertext]
    uint8_t localHmac[32];
    ret = computeHmacSha256(&txBuf[2], length,
                            HMAC_KEY, HMAC_KEY_LEN,
                            localHmac);
    if (ret != 0) return ret;

    // 5. Записываем HMAC
    uint16_t offsetHmac = 3 + 12 + ptLen;
    memcpy(&txBuf[offsetHmac], localHmac, 32);

    // 6. Отправляем
    uint16_t totalSize = offsetHmac + 32;
    HAL_UART_Transmit(huart, txBuf, totalSize, HAL_MAX_DELAY);

    return 0;
}

/* SendPacket end*/

/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{

	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();

	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
	MX_USART2_UART_Init();
	MX_USART1_UART_Init();
	/* USER CODE BEGIN 2 */
	const char msg[] = "Testing ChaCha20 with HMAC";
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		sendEncryptedPacket(&huart1, 0x02, (const uint8_t*)msg, strlen(msg));
		HAL_Delay(155000);
	}
	/* USER CODE END 3 */
}

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 16;
	RCC_OscInitStruct.PLL.PLLN = 336;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
	RCC_OscInitStruct.PLL.PLLQ = 4;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
	{
		Error_Handler();
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
	{
		Error_Handler();
	}
}

/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{

	/* USER CODE BEGIN USART1_Init 0 */

	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
	huart1.Init.BaudRate = 9600;
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
	huart1.Init.StopBits = UART_STOPBITS_1;
	huart1.Init.Parity = UART_PARITY_NONE;
	huart1.Init.Mode = UART_MODE_TX_RX;
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
	if (HAL_UART_Init(&huart1) != HAL_OK)
	{
		Error_Handler();
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}

/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{

	/* USER CODE BEGIN USART2_Init 0 */

	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
	huart2.Init.BaudRate = 115200;
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
	if (HAL_UART_Init(&huart2) != HAL_OK)
	{
		Error_Handler();
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}

/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStruct = {0};
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
	__HAL_RCC_GPIOH_CLK_ENABLE();
	__HAL_RCC_GPIOA_CLK_ENABLE();
	__HAL_RCC_GPIOB_CLK_ENABLE();

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
	}
	/* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
 * @brief  Reports the name of the source file and the source line number
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
