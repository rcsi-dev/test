
cska.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f04  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000874  080060a4  080060a4  000070a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006918  08006918  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006918  08006918  00007918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006920  08006920  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006920  08006920  00007920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006924  08006924  00007924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006928  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a0  20000068  08006990  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000808  08006990  00008808  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a500  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f17  00000000  00000000  00012598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000888  00000000  00000000  000144b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000677  00000000  00000000  00014d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000168a3  00000000  00000000  000153af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a9ef  00000000  00000000  0002bc52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087fcb  00000000  00000000  00036641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000be60c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ad8  00000000  00000000  000be650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  000c1128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800608c 	.word	0x0800608c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800608c 	.word	0x0800608c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Переопределение функции printf для отправки через UART2
int __io_putchar(int ch) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80005c4:	1d39      	adds	r1, r7, #4
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ca:	2201      	movs	r2, #1
 80005cc:	4803      	ldr	r0, [pc, #12]	@ (80005dc <__io_putchar+0x20>)
 80005ce:	f003 f933 	bl	8003838 <HAL_UART_Transmit>
  return ch;
 80005d2:	687b      	ldr	r3, [r7, #4]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	200000cc 	.word	0x200000cc

080005e0 <uart1_receive_callback>:

// Колбэк для обработки принятых данных UART1
void uart1_receive_callback(uint8_t *data, uint8_t length) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	460b      	mov	r3, r1
 80005ea:	70fb      	strb	r3, [r7, #3]
    // Формирование строки для мониторинга
    sprintf(monitor_buffer, "UART1 RX: %d байт", length);
 80005ec:	78fb      	ldrb	r3, [r7, #3]
 80005ee:	461a      	mov	r2, r3
 80005f0:	4924      	ldr	r1, [pc, #144]	@ (8000684 <uart1_receive_callback+0xa4>)
 80005f2:	4825      	ldr	r0, [pc, #148]	@ (8000688 <uart1_receive_callback+0xa8>)
 80005f4:	f004 fcfa 	bl	8004fec <siprintf>
    monitor_print(monitor_buffer);
 80005f8:	4823      	ldr	r0, [pc, #140]	@ (8000688 <uart1_receive_callback+0xa8>)
 80005fa:	f000 f8ad 	bl	8000758 <monitor_print>

    // Вывод принятых данных в шестнадцатеричном формате
    sprintf(monitor_buffer, "Данные: ");
 80005fe:	4923      	ldr	r1, [pc, #140]	@ (800068c <uart1_receive_callback+0xac>)
 8000600:	4821      	ldr	r0, [pc, #132]	@ (8000688 <uart1_receive_callback+0xa8>)
 8000602:	f004 fcf3 	bl	8004fec <siprintf>
    for (uint8_t i = 0; i < length && i < 16; i++) {
 8000606:	2300      	movs	r3, #0
 8000608:	73fb      	strb	r3, [r7, #15]
 800060a:	e013      	b.n	8000634 <uart1_receive_callback+0x54>
        char hex[4];
        sprintf(hex, "%02X ", data[i]);
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	4413      	add	r3, r2
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	461a      	mov	r2, r3
 8000616:	f107 0308 	add.w	r3, r7, #8
 800061a:	491d      	ldr	r1, [pc, #116]	@ (8000690 <uart1_receive_callback+0xb0>)
 800061c:	4618      	mov	r0, r3
 800061e:	f004 fce5 	bl	8004fec <siprintf>
        strcat(monitor_buffer, hex);
 8000622:	f107 0308 	add.w	r3, r7, #8
 8000626:	4619      	mov	r1, r3
 8000628:	4817      	ldr	r0, [pc, #92]	@ (8000688 <uart1_receive_callback+0xa8>)
 800062a:	f004 fd76 	bl	800511a <strcat>
    for (uint8_t i = 0; i < length && i < 16; i++) {
 800062e:	7bfb      	ldrb	r3, [r7, #15]
 8000630:	3301      	adds	r3, #1
 8000632:	73fb      	strb	r3, [r7, #15]
 8000634:	7bfa      	ldrb	r2, [r7, #15]
 8000636:	78fb      	ldrb	r3, [r7, #3]
 8000638:	429a      	cmp	r2, r3
 800063a:	d202      	bcs.n	8000642 <uart1_receive_callback+0x62>
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	2b0f      	cmp	r3, #15
 8000640:	d9e4      	bls.n	800060c <uart1_receive_callback+0x2c>
    }
    if (length > 16) strcat(monitor_buffer, "...");
 8000642:	78fb      	ldrb	r3, [r7, #3]
 8000644:	2b10      	cmp	r3, #16
 8000646:	d909      	bls.n	800065c <uart1_receive_callback+0x7c>
 8000648:	480f      	ldr	r0, [pc, #60]	@ (8000688 <uart1_receive_callback+0xa8>)
 800064a:	f7ff fdc9 	bl	80001e0 <strlen>
 800064e:	4603      	mov	r3, r0
 8000650:	461a      	mov	r2, r3
 8000652:	4b0d      	ldr	r3, [pc, #52]	@ (8000688 <uart1_receive_callback+0xa8>)
 8000654:	4413      	add	r3, r2
 8000656:	4a0f      	ldr	r2, [pc, #60]	@ (8000694 <uart1_receive_callback+0xb4>)
 8000658:	6810      	ldr	r0, [r2, #0]
 800065a:	6018      	str	r0, [r3, #0]
    monitor_print(monitor_buffer);
 800065c:	480a      	ldr	r0, [pc, #40]	@ (8000688 <uart1_receive_callback+0xa8>)
 800065e:	f000 f87b 	bl	8000758 <monitor_print>

    // Вывод в виде строки (если возможно)
    data[length] = 0; // Завершающий нуль
 8000662:	78fb      	ldrb	r3, [r7, #3]
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	4413      	add	r3, r2
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
    sprintf(monitor_buffer, "Текст: %s", data);
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	490a      	ldr	r1, [pc, #40]	@ (8000698 <uart1_receive_callback+0xb8>)
 8000670:	4805      	ldr	r0, [pc, #20]	@ (8000688 <uart1_receive_callback+0xa8>)
 8000672:	f004 fcbb 	bl	8004fec <siprintf>
    monitor_print(monitor_buffer);
 8000676:	4804      	ldr	r0, [pc, #16]	@ (8000688 <uart1_receive_callback+0xa8>)
 8000678:	f000 f86e 	bl	8000758 <monitor_print>
}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	080060a4 	.word	0x080060a4
 8000688:	200005b4 	.word	0x200005b4
 800068c:	080060bc 	.word	0x080060bc
 8000690:	080060cc 	.word	0x080060cc
 8000694:	080060d4 	.word	0x080060d4
 8000698:	080060d8 	.word	0x080060d8

0800069c <uart6_receive_callback>:

// Колбэк для обработки принятых данных UART6
void uart6_receive_callback(uint8_t *data, uint8_t length) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	460b      	mov	r3, r1
 80006a6:	70fb      	strb	r3, [r7, #3]
    // Формирование строки для мониторинга
    sprintf(monitor_buffer, "UART6 RX: %d байт", length);
 80006a8:	78fb      	ldrb	r3, [r7, #3]
 80006aa:	461a      	mov	r2, r3
 80006ac:	4924      	ldr	r1, [pc, #144]	@ (8000740 <uart6_receive_callback+0xa4>)
 80006ae:	4825      	ldr	r0, [pc, #148]	@ (8000744 <uart6_receive_callback+0xa8>)
 80006b0:	f004 fc9c 	bl	8004fec <siprintf>
    monitor_print(monitor_buffer);
 80006b4:	4823      	ldr	r0, [pc, #140]	@ (8000744 <uart6_receive_callback+0xa8>)
 80006b6:	f000 f84f 	bl	8000758 <monitor_print>

    // Вывод принятых данных в шестнадцатеричном формате
    sprintf(monitor_buffer, "Данные: ");
 80006ba:	4923      	ldr	r1, [pc, #140]	@ (8000748 <uart6_receive_callback+0xac>)
 80006bc:	4821      	ldr	r0, [pc, #132]	@ (8000744 <uart6_receive_callback+0xa8>)
 80006be:	f004 fc95 	bl	8004fec <siprintf>
    for (uint8_t i = 0; i < length && i < 16; i++) {
 80006c2:	2300      	movs	r3, #0
 80006c4:	73fb      	strb	r3, [r7, #15]
 80006c6:	e013      	b.n	80006f0 <uart6_receive_callback+0x54>
        char hex[4];
        sprintf(hex, "%02X ", data[i]);
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	4413      	add	r3, r2
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	461a      	mov	r2, r3
 80006d2:	f107 0308 	add.w	r3, r7, #8
 80006d6:	491d      	ldr	r1, [pc, #116]	@ (800074c <uart6_receive_callback+0xb0>)
 80006d8:	4618      	mov	r0, r3
 80006da:	f004 fc87 	bl	8004fec <siprintf>
        strcat(monitor_buffer, hex);
 80006de:	f107 0308 	add.w	r3, r7, #8
 80006e2:	4619      	mov	r1, r3
 80006e4:	4817      	ldr	r0, [pc, #92]	@ (8000744 <uart6_receive_callback+0xa8>)
 80006e6:	f004 fd18 	bl	800511a <strcat>
    for (uint8_t i = 0; i < length && i < 16; i++) {
 80006ea:	7bfb      	ldrb	r3, [r7, #15]
 80006ec:	3301      	adds	r3, #1
 80006ee:	73fb      	strb	r3, [r7, #15]
 80006f0:	7bfa      	ldrb	r2, [r7, #15]
 80006f2:	78fb      	ldrb	r3, [r7, #3]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d202      	bcs.n	80006fe <uart6_receive_callback+0x62>
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	2b0f      	cmp	r3, #15
 80006fc:	d9e4      	bls.n	80006c8 <uart6_receive_callback+0x2c>
    }
    if (length > 16) strcat(monitor_buffer, "...");
 80006fe:	78fb      	ldrb	r3, [r7, #3]
 8000700:	2b10      	cmp	r3, #16
 8000702:	d909      	bls.n	8000718 <uart6_receive_callback+0x7c>
 8000704:	480f      	ldr	r0, [pc, #60]	@ (8000744 <uart6_receive_callback+0xa8>)
 8000706:	f7ff fd6b 	bl	80001e0 <strlen>
 800070a:	4603      	mov	r3, r0
 800070c:	461a      	mov	r2, r3
 800070e:	4b0d      	ldr	r3, [pc, #52]	@ (8000744 <uart6_receive_callback+0xa8>)
 8000710:	4413      	add	r3, r2
 8000712:	4a0f      	ldr	r2, [pc, #60]	@ (8000750 <uart6_receive_callback+0xb4>)
 8000714:	6810      	ldr	r0, [r2, #0]
 8000716:	6018      	str	r0, [r3, #0]
    monitor_print(monitor_buffer);
 8000718:	480a      	ldr	r0, [pc, #40]	@ (8000744 <uart6_receive_callback+0xa8>)
 800071a:	f000 f81d 	bl	8000758 <monitor_print>

    // Вывод в виде строки (если возможно)
    data[length] = 0; // Завершающий нуль
 800071e:	78fb      	ldrb	r3, [r7, #3]
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	4413      	add	r3, r2
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]
    sprintf(monitor_buffer, "Текст: %s", data);
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	490a      	ldr	r1, [pc, #40]	@ (8000754 <uart6_receive_callback+0xb8>)
 800072c:	4805      	ldr	r0, [pc, #20]	@ (8000744 <uart6_receive_callback+0xa8>)
 800072e:	f004 fc5d 	bl	8004fec <siprintf>
    monitor_print(monitor_buffer);
 8000732:	4804      	ldr	r0, [pc, #16]	@ (8000744 <uart6_receive_callback+0xa8>)
 8000734:	f000 f810 	bl	8000758 <monitor_print>
}
 8000738:	bf00      	nop
 800073a:	3710      	adds	r7, #16
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	080060e8 	.word	0x080060e8
 8000744:	200005b4 	.word	0x200005b4
 8000748:	080060bc 	.word	0x080060bc
 800074c:	080060cc 	.word	0x080060cc
 8000750:	080060d4 	.word	0x080060d4
 8000754:	080060d8 	.word	0x080060d8

08000758 <monitor_print>:

// Вывод сообщения в монитор (UART2)
void monitor_print(const char *str) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
    MONITOR_PRINT("%s", str);
 8000760:	6879      	ldr	r1, [r7, #4]
 8000762:	4803      	ldr	r0, [pc, #12]	@ (8000770 <monitor_print+0x18>)
 8000764:	f004 fc30 	bl	8004fc8 <iprintf>
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	08006100 	.word	0x08006100

08000774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	@ 0x28
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077a:	f001 fc2b 	bl	8001fd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077e:	f000 f869 	bl	8000854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000782:	f000 f987 	bl	8000a94 <MX_GPIO_Init>
  MX_DMA_Init();
 8000786:	f000 f94d 	bl	8000a24 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800078a:	f000 f8f7 	bl	800097c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800078e:	f000 f8cb 	bl	8000928 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000792:	f000 f91d 	bl	80009d0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
    // Инициализация защищенных UART
    secure_uart_init(&secure_uart1, &huart1, secure_key, uart1_receive_callback);
 8000796:	4b21      	ldr	r3, [pc, #132]	@ (800081c <main+0xa8>)
 8000798:	4a21      	ldr	r2, [pc, #132]	@ (8000820 <main+0xac>)
 800079a:	4922      	ldr	r1, [pc, #136]	@ (8000824 <main+0xb0>)
 800079c:	4822      	ldr	r0, [pc, #136]	@ (8000828 <main+0xb4>)
 800079e:	f000 fa13 	bl	8000bc8 <secure_uart_init>
    secure_uart_init(&secure_uart6, &huart6, secure_key, uart6_receive_callback);
 80007a2:	4b22      	ldr	r3, [pc, #136]	@ (800082c <main+0xb8>)
 80007a4:	4a1e      	ldr	r2, [pc, #120]	@ (8000820 <main+0xac>)
 80007a6:	4922      	ldr	r1, [pc, #136]	@ (8000830 <main+0xbc>)
 80007a8:	4822      	ldr	r0, [pc, #136]	@ (8000834 <main+0xc0>)
 80007aa:	f000 fa0d 	bl	8000bc8 <secure_uart_init>

    // Вывод сообщения о старте
    monitor_print("Инициализация защищенного UART протокола завершена");
 80007ae:	4822      	ldr	r0, [pc, #136]	@ (8000838 <main+0xc4>)
 80007b0:	f7ff ffd2 	bl	8000758 <monitor_print>
    monitor_print("USART1 <-> USART6: защищенный обмен данными");
 80007b4:	4821      	ldr	r0, [pc, #132]	@ (800083c <main+0xc8>)
 80007b6:	f7ff ffcf 	bl	8000758 <monitor_print>
    monitor_print("USART2: мониторинг");
 80007ba:	4821      	ldr	r0, [pc, #132]	@ (8000840 <main+0xcc>)
 80007bc:	f7ff ffcc 	bl	8000758 <monitor_print>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    uint32_t last_send_time = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	627b      	str	r3, [r7, #36]	@ 0x24
    {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      // Отправка тестовых данных с интервалом 30 секунд
      uint32_t current_time = HAL_GetTick();
 80007c4:	f001 fc6c 	bl	80020a0 <HAL_GetTick>
 80007c8:	6238      	str	r0, [r7, #32]
      if (current_time - last_send_time >= 30000) { // 30 секунд
 80007ca:	6a3a      	ldr	r2, [r7, #32]
 80007cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ce:	1ad3      	subs	r3, r2, r3
 80007d0:	f247 522f 	movw	r2, #29999	@ 0x752f
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d9f5      	bls.n	80007c4 <main+0x50>
        last_send_time = current_time;
 80007d8:	6a3b      	ldr	r3, [r7, #32]
 80007da:	627b      	str	r3, [r7, #36]	@ 0x24

        // Подготовка тестовых данных для отправки
        char test_data[32];
        sprintf(test_data, "Тест %lu", current_time / 1000);
 80007dc:	6a3b      	ldr	r3, [r7, #32]
 80007de:	4a19      	ldr	r2, [pc, #100]	@ (8000844 <main+0xd0>)
 80007e0:	fba2 2303 	umull	r2, r3, r2, r3
 80007e4:	099a      	lsrs	r2, r3, #6
 80007e6:	463b      	mov	r3, r7
 80007e8:	4917      	ldr	r1, [pc, #92]	@ (8000848 <main+0xd4>)
 80007ea:	4618      	mov	r0, r3
 80007ec:	f004 fbfe 	bl	8004fec <siprintf>

        // Вывод информации о передаче
        sprintf(monitor_buffer, "UART1 TX: %s", test_data);
 80007f0:	463b      	mov	r3, r7
 80007f2:	461a      	mov	r2, r3
 80007f4:	4915      	ldr	r1, [pc, #84]	@ (800084c <main+0xd8>)
 80007f6:	4816      	ldr	r0, [pc, #88]	@ (8000850 <main+0xdc>)
 80007f8:	f004 fbf8 	bl	8004fec <siprintf>
        monitor_print(monitor_buffer);
 80007fc:	4814      	ldr	r0, [pc, #80]	@ (8000850 <main+0xdc>)
 80007fe:	f7ff ffab 	bl	8000758 <monitor_print>

        // Отправка через UART1
        secure_uart_send(&secure_uart1, (uint8_t*)test_data, strlen(test_data));
 8000802:	463b      	mov	r3, r7
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fceb 	bl	80001e0 <strlen>
 800080a:	4603      	mov	r3, r0
 800080c:	b2da      	uxtb	r2, r3
 800080e:	463b      	mov	r3, r7
 8000810:	4619      	mov	r1, r3
 8000812:	4805      	ldr	r0, [pc, #20]	@ (8000828 <main+0xb4>)
 8000814:	f000 fa09 	bl	8000c2a <secure_uart_send>
    {
 8000818:	e7d4      	b.n	80007c4 <main+0x50>
 800081a:	bf00      	nop
 800081c:	080005e1 	.word	0x080005e1
 8000820:	080068b4 	.word	0x080068b4
 8000824:	20000084 	.word	0x20000084
 8000828:	200002dc 	.word	0x200002dc
 800082c:	0800069d 	.word	0x0800069d
 8000830:	20000114 	.word	0x20000114
 8000834:	20000448 	.word	0x20000448
 8000838:	08006108 	.word	0x08006108
 800083c:	08006168 	.word	0x08006168
 8000840:	080061ac 	.word	0x080061ac
 8000844:	10624dd3 	.word	0x10624dd3
 8000848:	080061cc 	.word	0x080061cc
 800084c:	080061dc 	.word	0x080061dc
 8000850:	200005b4 	.word	0x200005b4

08000854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b094      	sub	sp, #80	@ 0x50
 8000858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085a:	f107 0320 	add.w	r3, r7, #32
 800085e:	2230      	movs	r2, #48	@ 0x30
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f004 fc51 	bl	800510a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000878:	2300      	movs	r3, #0
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	4b28      	ldr	r3, [pc, #160]	@ (8000920 <SystemClock_Config+0xcc>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000880:	4a27      	ldr	r2, [pc, #156]	@ (8000920 <SystemClock_Config+0xcc>)
 8000882:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000886:	6413      	str	r3, [r2, #64]	@ 0x40
 8000888:	4b25      	ldr	r3, [pc, #148]	@ (8000920 <SystemClock_Config+0xcc>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000894:	2300      	movs	r3, #0
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	4b22      	ldr	r3, [pc, #136]	@ (8000924 <SystemClock_Config+0xd0>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a21      	ldr	r2, [pc, #132]	@ (8000924 <SystemClock_Config+0xd0>)
 800089e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008a2:	6013      	str	r3, [r2, #0]
 80008a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000924 <SystemClock_Config+0xd0>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b0:	2302      	movs	r3, #2
 80008b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b4:	2301      	movs	r3, #1
 80008b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b8:	2310      	movs	r3, #16
 80008ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008bc:	2302      	movs	r3, #2
 80008be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008c0:	2300      	movs	r3, #0
 80008c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008c4:	2310      	movs	r3, #16
 80008c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008c8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80008cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008ce:	2304      	movs	r3, #4
 80008d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008d2:	2304      	movs	r3, #4
 80008d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d6:	f107 0320 	add.w	r3, r7, #32
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 fac4 	bl	8002e68 <HAL_RCC_OscConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008e6:	f000 f969 	bl	8000bbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ea:	230f      	movs	r3, #15
 80008ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ee:	2302      	movs	r3, #2
 80008f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	2102      	movs	r1, #2
 8000906:	4618      	mov	r0, r3
 8000908:	f002 fd26 	bl	8003358 <HAL_RCC_ClockConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000912:	f000 f953 	bl	8000bbc <Error_Handler>
  }
}
 8000916:	bf00      	nop
 8000918:	3750      	adds	r7, #80	@ 0x50
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800
 8000924:	40007000 	.word	0x40007000

08000928 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800092c:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <MX_USART1_UART_Init+0x4c>)
 800092e:	4a12      	ldr	r2, [pc, #72]	@ (8000978 <MX_USART1_UART_Init+0x50>)
 8000930:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000932:	4b10      	ldr	r3, [pc, #64]	@ (8000974 <MX_USART1_UART_Init+0x4c>)
 8000934:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000938:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800093a:	4b0e      	ldr	r3, [pc, #56]	@ (8000974 <MX_USART1_UART_Init+0x4c>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000940:	4b0c      	ldr	r3, [pc, #48]	@ (8000974 <MX_USART1_UART_Init+0x4c>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000946:	4b0b      	ldr	r3, [pc, #44]	@ (8000974 <MX_USART1_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800094c:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <MX_USART1_UART_Init+0x4c>)
 800094e:	220c      	movs	r2, #12
 8000950:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000952:	4b08      	ldr	r3, [pc, #32]	@ (8000974 <MX_USART1_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000958:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <MX_USART1_UART_Init+0x4c>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800095e:	4805      	ldr	r0, [pc, #20]	@ (8000974 <MX_USART1_UART_Init+0x4c>)
 8000960:	f002 ff1a 	bl	8003798 <HAL_UART_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800096a:	f000 f927 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000084 	.word	0x20000084
 8000978:	40011000 	.word	0x40011000

0800097c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000980:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 8000982:	4a12      	ldr	r2, [pc, #72]	@ (80009cc <MX_USART2_UART_Init+0x50>)
 8000984:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000986:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 8000988:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800098c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b0c      	ldr	r3, [pc, #48]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800099a:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b09      	ldr	r3, [pc, #36]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b08      	ldr	r3, [pc, #32]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009b2:	4805      	ldr	r0, [pc, #20]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 80009b4:	f002 fef0 	bl	8003798 <HAL_UART_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009be:	f000 f8fd 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200000cc 	.word	0x200000cc
 80009cc:	40004400 	.word	0x40004400

080009d0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80009d4:	4b11      	ldr	r3, [pc, #68]	@ (8000a1c <MX_USART6_UART_Init+0x4c>)
 80009d6:	4a12      	ldr	r2, [pc, #72]	@ (8000a20 <MX_USART6_UART_Init+0x50>)
 80009d8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80009da:	4b10      	ldr	r3, [pc, #64]	@ (8000a1c <MX_USART6_UART_Init+0x4c>)
 80009dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009e0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a1c <MX_USART6_UART_Init+0x4c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a1c <MX_USART6_UART_Init+0x4c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	@ (8000a1c <MX_USART6_UART_Init+0x4c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80009f4:	4b09      	ldr	r3, [pc, #36]	@ (8000a1c <MX_USART6_UART_Init+0x4c>)
 80009f6:	220c      	movs	r2, #12
 80009f8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fa:	4b08      	ldr	r3, [pc, #32]	@ (8000a1c <MX_USART6_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a00:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <MX_USART6_UART_Init+0x4c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000a06:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <MX_USART6_UART_Init+0x4c>)
 8000a08:	f002 fec6 	bl	8003798 <HAL_UART_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000a12:	f000 f8d3 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000114 	.word	0x20000114
 8000a20:	40011400 	.word	0x40011400

08000a24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	4b18      	ldr	r3, [pc, #96]	@ (8000a90 <MX_DMA_Init+0x6c>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	4a17      	ldr	r2, [pc, #92]	@ (8000a90 <MX_DMA_Init+0x6c>)
 8000a34:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3a:	4b15      	ldr	r3, [pc, #84]	@ (8000a90 <MX_DMA_Init+0x6c>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2100      	movs	r1, #0
 8000a4a:	2039      	movs	r0, #57	@ 0x39
 8000a4c:	f001 fc0f 	bl	800226e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000a50:	2039      	movs	r0, #57	@ 0x39
 8000a52:	f001 fc28 	bl	80022a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2100      	movs	r1, #0
 8000a5a:	203a      	movs	r0, #58	@ 0x3a
 8000a5c:	f001 fc07 	bl	800226e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000a60:	203a      	movs	r0, #58	@ 0x3a
 8000a62:	f001 fc20 	bl	80022a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2045      	movs	r0, #69	@ 0x45
 8000a6c:	f001 fbff 	bl	800226e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000a70:	2045      	movs	r0, #69	@ 0x45
 8000a72:	f001 fc18 	bl	80022a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2100      	movs	r1, #0
 8000a7a:	2046      	movs	r0, #70	@ 0x46
 8000a7c:	f001 fbf7 	bl	800226e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000a80:	2046      	movs	r0, #70	@ 0x46
 8000a82:	f001 fc10 	bl	80022a6 <HAL_NVIC_EnableIRQ>

}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800

08000a94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	@ 0x28
 8000a98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
 8000aa8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	4b2d      	ldr	r3, [pc, #180]	@ (8000b64 <MX_GPIO_Init+0xd0>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	4a2c      	ldr	r2, [pc, #176]	@ (8000b64 <MX_GPIO_Init+0xd0>)
 8000ab4:	f043 0304 	orr.w	r3, r3, #4
 8000ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aba:	4b2a      	ldr	r3, [pc, #168]	@ (8000b64 <MX_GPIO_Init+0xd0>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	f003 0304 	and.w	r3, r3, #4
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	4b26      	ldr	r3, [pc, #152]	@ (8000b64 <MX_GPIO_Init+0xd0>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	4a25      	ldr	r2, [pc, #148]	@ (8000b64 <MX_GPIO_Init+0xd0>)
 8000ad0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad6:	4b23      	ldr	r3, [pc, #140]	@ (8000b64 <MX_GPIO_Init+0xd0>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b64 <MX_GPIO_Init+0xd0>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	4a1e      	ldr	r2, [pc, #120]	@ (8000b64 <MX_GPIO_Init+0xd0>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b64 <MX_GPIO_Init+0xd0>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	4b18      	ldr	r3, [pc, #96]	@ (8000b64 <MX_GPIO_Init+0xd0>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	4a17      	ldr	r2, [pc, #92]	@ (8000b64 <MX_GPIO_Init+0xd0>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0e:	4b15      	ldr	r3, [pc, #84]	@ (8000b64 <MX_GPIO_Init+0xd0>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2120      	movs	r1, #32
 8000b1e:	4812      	ldr	r0, [pc, #72]	@ (8000b68 <MX_GPIO_Init+0xd4>)
 8000b20:	f002 f96e 	bl	8002e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b2a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	480c      	ldr	r0, [pc, #48]	@ (8000b6c <MX_GPIO_Init+0xd8>)
 8000b3c:	f001 ffdc 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b40:	2320      	movs	r3, #32
 8000b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	4804      	ldr	r0, [pc, #16]	@ (8000b68 <MX_GPIO_Init+0xd4>)
 8000b58:	f001 ffce 	bl	8002af8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b5c:	bf00      	nop
 8000b5e:	3728      	adds	r7, #40	@ 0x28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020000 	.word	0x40020000
 8000b6c:	40020800 	.word	0x40020800

08000b70 <HAL_UART_TxCpltCallback>:

  // Колбэки завершения работы DMA

  // Колбэк завершения передачи данных
  void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
  {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
    // Мигание светодиодом при передаче данных
    if(huart->Instance == USART1 || huart->Instance == USART6) {
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a07      	ldr	r2, [pc, #28]	@ (8000b9c <HAL_UART_TxCpltCallback+0x2c>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d004      	beq.n	8000b8c <HAL_UART_TxCpltCallback+0x1c>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a06      	ldr	r2, [pc, #24]	@ (8000ba0 <HAL_UART_TxCpltCallback+0x30>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d103      	bne.n	8000b94 <HAL_UART_TxCpltCallback+0x24>
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b8c:	2120      	movs	r1, #32
 8000b8e:	4805      	ldr	r0, [pc, #20]	@ (8000ba4 <HAL_UART_TxCpltCallback+0x34>)
 8000b90:	f002 f94f 	bl	8002e32 <HAL_GPIO_TogglePin>
    }
  }
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40011000 	.word	0x40011000
 8000ba0:	40011400 	.word	0x40011400
 8000ba4:	40020000 	.word	0x40020000

08000ba8 <HAL_UART_RxCpltCallback>:

  // Колбэк завершения приема данных
  void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
  {
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
    // Дополнительная обработка при необходимости
  }
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc0:	b672      	cpsid	i
}
 8000bc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <Error_Handler+0x8>

08000bc8 <secure_uart_init>:
static uint32_t secure_uart_prepare_frame(secure_uart_handle_t *handle, const uint8_t *data,
                                     uint8_t length, uint8_t *frame_buffer);

/* Инициализация защищенного UART */
void secure_uart_init(secure_uart_handle_t *handle, UART_HandleTypeDef *huart, const uint32_t key[4],
                     void (*receive_callback)(uint8_t *data, uint8_t length)) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
 8000bd4:	603b      	str	r3, [r7, #0]
    // Инициализация полей структуры
    handle->huart = huart;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	68ba      	ldr	r2, [r7, #8]
 8000bda:	601a      	str	r2, [r3, #0]
    speck_init_key(key, &handle->key);
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	3304      	adds	r3, #4
 8000be0:	4619      	mov	r1, r3
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f000 fcba 	bl	800155c <speck_init_key>
    handle->last_rx_counter = 0;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	2200      	movs	r2, #0
 8000bec:	615a      	str	r2, [r3, #20]
    handle->tx_counter = 1;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	619a      	str	r2, [r3, #24]
    handle->processing = 0;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f883 2166 	strb.w	r2, [r3, #358]	@ 0x166
    handle->receive_callback = receive_callback;
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	683a      	ldr	r2, [r7, #0]
 8000c00:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168

    // Запуск приема данных по DMA
    HAL_UART_Receive_DMA(huart, handle->rx_buffer, sizeof(handle->rx_buffer));
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	33c4      	adds	r3, #196	@ 0xc4
 8000c08:	2251      	movs	r2, #81	@ 0x51
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	68b8      	ldr	r0, [r7, #8]
 8000c0e:	f002 ff0f 	bl	8003a30 <HAL_UART_Receive_DMA>

    // Включение прерывания по IDLE
    __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	68da      	ldr	r2, [r3, #12]
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f042 0210 	orr.w	r2, r2, #16
 8000c20:	60da      	str	r2, [r3, #12]
}
 8000c22:	bf00      	nop
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <secure_uart_send>:

/* Отправка данных */
void secure_uart_send(secure_uart_handle_t *handle, const uint8_t *data, uint8_t length) {
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b086      	sub	sp, #24
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	60f8      	str	r0, [r7, #12]
 8000c32:	60b9      	str	r1, [r7, #8]
 8000c34:	4613      	mov	r3, r2
 8000c36:	71fb      	strb	r3, [r7, #7]
    // Формирование фрейма для отправки
    uint32_t frame_length = secure_uart_prepare_frame(handle, data, length, handle->tx_buffer);
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f203 1315 	addw	r3, r3, #277	@ 0x115
 8000c3e:	79fa      	ldrb	r2, [r7, #7]
 8000c40:	68b9      	ldr	r1, [r7, #8]
 8000c42:	68f8      	ldr	r0, [r7, #12]
 8000c44:	f000 fbe8 	bl	8001418 <secure_uart_prepare_frame>
 8000c48:	6178      	str	r0, [r7, #20]

    // Отправка фрейма
    HAL_UART_Transmit_DMA(handle->huart, handle->tx_buffer, frame_length);
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	6818      	ldr	r0, [r3, #0]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	f203 1315 	addw	r3, r3, #277	@ 0x115
 8000c54:	697a      	ldr	r2, [r7, #20]
 8000c56:	b292      	uxth	r2, r2
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f002 fe79 	bl	8003950 <HAL_UART_Transmit_DMA>

    // Увеличение счетчика отправки
    handle->tx_counter++;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	699b      	ldr	r3, [r3, #24]
 8000c62:	1c5a      	adds	r2, r3, #1
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	619a      	str	r2, [r3, #24]
}
 8000c68:	bf00      	nop
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <secure_uart_process_received>:

/* Обработка принятых данных */
void secure_uart_process_received(secure_uart_handle_t *handle) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b0ba      	sub	sp, #232	@ 0xe8
 8000c74:	af02      	add	r7, sp, #8
 8000c76:	6078      	str	r0, [r7, #4]
    char debug_msg[100];
    if (handle->processing) {
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f893 3166 	ldrb.w	r3, [r3, #358]	@ 0x166
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d003      	beq.n	8000c8a <secure_uart_process_received+0x1a>
        monitor_print("Обработка уже идет, пропускаем");
 8000c82:	48c8      	ldr	r0, [pc, #800]	@ (8000fa4 <secure_uart_process_received+0x334>)
 8000c84:	f7ff fd68 	bl	8000758 <monitor_print>
        return; // Уже идет обработка
 8000c88:	e28f      	b.n	80011aa <secure_uart_process_received+0x53a>
    }

    // Добавьте вывод для отладки
    if (handle->huart->Instance == USART1) {
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4ac5      	ldr	r2, [pc, #788]	@ (8000fa8 <secure_uart_process_received+0x338>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d103      	bne.n	8000c9e <secure_uart_process_received+0x2e>
        monitor_print("Обработка данных USART1");
 8000c96:	48c5      	ldr	r0, [pc, #788]	@ (8000fac <secure_uart_process_received+0x33c>)
 8000c98:	f7ff fd5e 	bl	8000758 <monitor_print>
 8000c9c:	e008      	b.n	8000cb0 <secure_uart_process_received+0x40>
    } else if (handle->huart->Instance == USART6) {
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4ac2      	ldr	r2, [pc, #776]	@ (8000fb0 <secure_uart_process_received+0x340>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d102      	bne.n	8000cb0 <secure_uart_process_received+0x40>
        monitor_print("Обработка данных USART6");
 8000caa:	48c2      	ldr	r0, [pc, #776]	@ (8000fb4 <secure_uart_process_received+0x344>)
 8000cac:	f7ff fd54 	bl	8000758 <monitor_print>
    }

    handle->processing = 1;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	f883 2166 	strb.w	r2, [r3, #358]	@ 0x166

    // Получение размера данных в буфере DMA
    uint32_t dma_head = sizeof(handle->rx_buffer) - __HAL_DMA_GET_COUNTER(handle->huart->hdmarx);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f1c3 0351 	rsb	r3, r3, #81	@ 0x51
 8000cc6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

    sprintf(debug_msg, "Размер буфера DMA: %lu байт", dma_head);
 8000cca:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000cce:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8000cd2:	49b9      	ldr	r1, [pc, #740]	@ (8000fb8 <secure_uart_process_received+0x348>)
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f004 f989 	bl	8004fec <siprintf>
    monitor_print(debug_msg);
 8000cda:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fd3a 	bl	8000758 <monitor_print>

    if (dma_head < SECURE_UART_FRAME_OVERHEAD) {
 8000ce4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000ce8:	2b10      	cmp	r3, #16
 8000cea:	d811      	bhi.n	8000d10 <secure_uart_process_received+0xa0>
        sprintf(debug_msg, "Недостаточно данных для фрейма (%lu < %d)", dma_head, SECURE_UART_FRAME_OVERHEAD);
 8000cec:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8000cf0:	2311      	movs	r3, #17
 8000cf2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8000cf6:	49b1      	ldr	r1, [pc, #708]	@ (8000fbc <secure_uart_process_received+0x34c>)
 8000cf8:	f004 f978 	bl	8004fec <siprintf>
        monitor_print(debug_msg);
 8000cfc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fd29 	bl	8000758 <monitor_print>
        handle->processing = 0;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f883 2166 	strb.w	r2, [r3, #358]	@ 0x166
        return; // Недостаточно данных для фрейма
 8000d0e:	e24c      	b.n	80011aa <secure_uart_process_received+0x53a>
    }

    // Поиск заголовка фрейма
    uint32_t i;
    for (i = 0; i <= dma_head - 4; i++) {
 8000d10:	2300      	movs	r3, #0
 8000d12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000d16:	e01c      	b.n	8000d52 <secure_uart_process_received+0xe2>
        if (*(uint32_t*)(&handle->rx_buffer[i]) == SECURE_UART_HEADER) {
 8000d18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000d1c:	33c0      	adds	r3, #192	@ 0xc0
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	3304      	adds	r3, #4
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4aa6      	ldr	r2, [pc, #664]	@ (8000fc0 <secure_uart_process_received+0x350>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d10d      	bne.n	8000d48 <secure_uart_process_received+0xd8>
            sprintf(debug_msg, "Найден заголовок фрейма на позиции %lu", i);
 8000d2c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d30:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000d34:	49a3      	ldr	r1, [pc, #652]	@ (8000fc4 <secure_uart_process_received+0x354>)
 8000d36:	4618      	mov	r0, r3
 8000d38:	f004 f958 	bl	8004fec <siprintf>
            monitor_print(debug_msg);
 8000d3c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fd09 	bl	8000758 <monitor_print>
            break;
 8000d46:	e00b      	b.n	8000d60 <secure_uart_process_received+0xf0>
    for (i = 0; i <= dma_head - 4; i++) {
 8000d48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000d52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000d56:	3b04      	subs	r3, #4
 8000d58:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d9db      	bls.n	8000d18 <secure_uart_process_received+0xa8>
        }
    }

    if (i > dma_head - 4) {
 8000d60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000d64:	3b04      	subs	r3, #4
 8000d66:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d944      	bls.n	8000df8 <secure_uart_process_received+0x188>
        sprintf(debug_msg, "Заголовок не найден в буфере размером %lu байт", dma_head);
 8000d6e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d72:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8000d76:	4994      	ldr	r1, [pc, #592]	@ (8000fc8 <secure_uart_process_received+0x358>)
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f004 f937 	bl	8004fec <siprintf>
        monitor_print(debug_msg);
 8000d7e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff fce8 	bl	8000758 <monitor_print>

        // Вывод содержимого буфера для отладки (первые 16 байт)
        sprintf(debug_msg, "Содержимое буфера: ");
 8000d88:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d8c:	498f      	ldr	r1, [pc, #572]	@ (8000fcc <secure_uart_process_received+0x35c>)
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f004 f92c 	bl	8004fec <siprintf>
        for (uint32_t j = 0; j < dma_head && j < 16; j++) {
 8000d94:	2300      	movs	r3, #0
 8000d96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8000d9a:	e019      	b.n	8000dd0 <secure_uart_process_received+0x160>
            char hex[4];
            sprintf(hex, "%02X ", handle->rx_buffer[j]);
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000da2:	4413      	add	r3, r2
 8000da4:	33c4      	adds	r3, #196	@ 0xc4
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	461a      	mov	r2, r3
 8000daa:	f107 0310 	add.w	r3, r7, #16
 8000dae:	4988      	ldr	r1, [pc, #544]	@ (8000fd0 <secure_uart_process_received+0x360>)
 8000db0:	4618      	mov	r0, r3
 8000db2:	f004 f91b 	bl	8004fec <siprintf>
            strcat(debug_msg, hex);
 8000db6:	f107 0210 	add.w	r2, r7, #16
 8000dba:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000dbe:	4611      	mov	r1, r2
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f004 f9aa 	bl	800511a <strcat>
        for (uint32_t j = 0; j < dma_head && j < 16; j++) {
 8000dc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000dca:	3301      	adds	r3, #1
 8000dcc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8000dd0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000dd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d203      	bcs.n	8000de4 <secure_uart_process_received+0x174>
 8000ddc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000de0:	2b0f      	cmp	r3, #15
 8000de2:	d9db      	bls.n	8000d9c <secure_uart_process_received+0x12c>
        }
        monitor_print(debug_msg);
 8000de4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fcb5 	bl	8000758 <monitor_print>

        handle->processing = 0;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2200      	movs	r2, #0
 8000df2:	f883 2166 	strb.w	r2, [r3, #358]	@ 0x166
        return; // Заголовок не найден
 8000df6:	e1d8      	b.n	80011aa <secure_uart_process_received+0x53a>
    }

    // Проверка, достаточно ли данных для полного фрейма
    if (i + 9 > dma_head) {
 8000df8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000dfc:	3309      	adds	r3, #9
 8000dfe:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d20f      	bcs.n	8000e26 <secure_uart_process_received+0x1b6>
        sprintf(debug_msg, "Недостаточно данных после заголовка");
 8000e06:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e0a:	4972      	ldr	r1, [pc, #456]	@ (8000fd4 <secure_uart_process_received+0x364>)
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f004 f8ed 	bl	8004fec <siprintf>
        monitor_print(debug_msg);
 8000e12:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fc9e 	bl	8000758 <monitor_print>
        handle->processing = 0;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f883 2166 	strb.w	r2, [r3, #358]	@ 0x166
        return; // Недостаточно данных для минимального фрейма
 8000e24:	e1c1      	b.n	80011aa <secure_uart_process_received+0x53a>
    }

    // Чтение длины данных
    uint8_t data_len = handle->rx_buffer[i + 8];
 8000e26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000e2a:	3308      	adds	r3, #8
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	4413      	add	r3, r2
 8000e30:	f893 30c4 	ldrb.w	r3, [r3, #196]	@ 0xc4
 8000e34:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
    sprintf(debug_msg, "Длина данных из фрейма: %u байт", data_len);
 8000e38:	f897 20cb 	ldrb.w	r2, [r7, #203]	@ 0xcb
 8000e3c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e40:	4965      	ldr	r1, [pc, #404]	@ (8000fd8 <secure_uart_process_received+0x368>)
 8000e42:	4618      	mov	r0, r3
 8000e44:	f004 f8d2 	bl	8004fec <siprintf>
    monitor_print(debug_msg);
 8000e48:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fc83 	bl	8000758 <monitor_print>

    // Вычисление длины зашифрованных данных (округление вверх до кратного 8)
    uint8_t encrypted_length = (data_len + 7) & ~7;
 8000e52:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8000e56:	3307      	adds	r3, #7
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	f023 0307 	bic.w	r3, r3, #7
 8000e5e:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
    sprintf(debug_msg, "Округленная длина для шифрования: %u байт", encrypted_length);
 8000e62:	f897 20ca 	ldrb.w	r2, [r7, #202]	@ 0xca
 8000e66:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e6a:	495c      	ldr	r1, [pc, #368]	@ (8000fdc <secure_uart_process_received+0x36c>)
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f004 f8bd 	bl	8004fec <siprintf>
    monitor_print(debug_msg);
 8000e72:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fc6e 	bl	8000758 <monitor_print>

    // Проверка, достаточно ли данных для полного фрейма с указанной длиной
    // ВАЖНО: используем encrypted_length, а не data_len
    if (i + SECURE_UART_FRAME_OVERHEAD + encrypted_length > dma_head) {
 8000e7c:	f897 20ca 	ldrb.w	r2, [r7, #202]	@ 0xca
 8000e80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000e84:	4413      	add	r3, r2
 8000e86:	3311      	adds	r3, #17
 8000e88:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d20f      	bcs.n	8000eb0 <secure_uart_process_received+0x240>
        sprintf(debug_msg, "Недостаточно данных для полного фрейма");
 8000e90:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e94:	4952      	ldr	r1, [pc, #328]	@ (8000fe0 <secure_uart_process_received+0x370>)
 8000e96:	4618      	mov	r0, r3
 8000e98:	f004 f8a8 	bl	8004fec <siprintf>
        monitor_print(debug_msg);
 8000e9c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fc59 	bl	8000758 <monitor_print>
        handle->processing = 0;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 2166 	strb.w	r2, [r3, #358]	@ 0x166
        return; // Недостаточно данных для полного фрейма
 8000eae:	e17c      	b.n	80011aa <secure_uart_process_received+0x53a>
    }

    // Чтение счетчика
    uint32_t counter = *(uint32_t*)(&handle->rx_buffer[i + 4]);
 8000eb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	33c0      	adds	r3, #192	@ 0xc0
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	4413      	add	r3, r2
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    sprintf(debug_msg, "Счетчик фрейма: %lu, последний счетчик: %lu", counter, handle->last_rx_counter);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8000ecc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000ed0:	4944      	ldr	r1, [pc, #272]	@ (8000fe4 <secure_uart_process_received+0x374>)
 8000ed2:	f004 f88b 	bl	8004fec <siprintf>
    monitor_print(debug_msg);
 8000ed6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fc3c 	bl	8000758 <monitor_print>

    // Проверка защиты от Replay-атак
    if (counter <= handle->last_rx_counter) {
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	695b      	ldr	r3, [r3, #20]
 8000ee4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d812      	bhi.n	8000f12 <secure_uart_process_received+0x2a2>
        sprintf(debug_msg, "Отклонен устаревший пакет: счетчик %lu <= %lu", counter, handle->last_rx_counter);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	695b      	ldr	r3, [r3, #20]
 8000ef0:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8000ef4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000ef8:	493b      	ldr	r1, [pc, #236]	@ (8000fe8 <secure_uart_process_received+0x378>)
 8000efa:	f004 f877 	bl	8004fec <siprintf>
        monitor_print(debug_msg);
 8000efe:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fc28 	bl	8000758 <monitor_print>
        handle->processing = 0;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f883 2166 	strb.w	r2, [r3, #358]	@ 0x166
        return;
 8000f10:	e14b      	b.n	80011aa <secure_uart_process_received+0x53a>
    }

    // Проверка CMAC
    uint8_t calculated_cmac[8];
    secure_uart_calculate_cmac(handle, &handle->rx_buffer[i + 9], encrypted_length, counter, calculated_cmac);
 8000f12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000f16:	3309      	adds	r3, #9
 8000f18:	33c0      	adds	r3, #192	@ 0xc0
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	1d19      	adds	r1, r3, #4
 8000f20:	f897 20ca 	ldrb.w	r2, [r7, #202]	@ 0xca
 8000f24:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f000 f9fe 	bl	8001330 <secure_uart_calculate_cmac>

    // Отладка CMAC
    sprintf(debug_msg, "Посчитанный CMAC: ");
 8000f34:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f38:	492c      	ldr	r1, [pc, #176]	@ (8000fec <secure_uart_process_received+0x37c>)
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f004 f856 	bl	8004fec <siprintf>
    for (int j = 0; j < 8; j++) {
 8000f40:	2300      	movs	r3, #0
 8000f42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000f46:	e019      	b.n	8000f7c <secure_uart_process_received+0x30c>
        char hex[4];
        sprintf(hex, "%02X ", calculated_cmac[j]);
 8000f48:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8000f4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000f50:	4413      	add	r3, r2
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	f107 030c 	add.w	r3, r7, #12
 8000f5a:	491d      	ldr	r1, [pc, #116]	@ (8000fd0 <secure_uart_process_received+0x360>)
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f004 f845 	bl	8004fec <siprintf>
        strcat(debug_msg, hex);
 8000f62:	f107 020c 	add.w	r2, r7, #12
 8000f66:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f004 f8d4 	bl	800511a <strcat>
    for (int j = 0; j < 8; j++) {
 8000f72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000f76:	3301      	adds	r3, #1
 8000f78:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000f7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000f80:	2b07      	cmp	r3, #7
 8000f82:	dde1      	ble.n	8000f48 <secure_uart_process_received+0x2d8>
    }
    monitor_print(debug_msg);
 8000f84:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fbe5 	bl	8000758 <monitor_print>

    // ВАЖНОЕ ИЗМЕНЕНИЕ: используем правильное смещение для CMAC - после encrypted_length, а не data_len
    sprintf(debug_msg, "Полученный CMAC: ");
 8000f8e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f92:	4917      	ldr	r1, [pc, #92]	@ (8000ff0 <secure_uart_process_received+0x380>)
 8000f94:	4618      	mov	r0, r3
 8000f96:	f004 f829 	bl	8004fec <siprintf>
    for (int j = 0; j < 8; j++) {
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8000fa0:	e049      	b.n	8001036 <secure_uart_process_received+0x3c6>
 8000fa2:	bf00      	nop
 8000fa4:	080061ec 	.word	0x080061ec
 8000fa8:	40011000 	.word	0x40011000
 8000fac:	08006228 	.word	0x08006228
 8000fb0:	40011400 	.word	0x40011400
 8000fb4:	08006250 	.word	0x08006250
 8000fb8:	08006278 	.word	0x08006278
 8000fbc:	080062a4 	.word	0x080062a4
 8000fc0:	a55a5aa5 	.word	0xa55a5aa5
 8000fc4:	080062ec 	.word	0x080062ec
 8000fc8:	08006334 	.word	0x08006334
 8000fcc:	08006388 	.word	0x08006388
 8000fd0:	080063ac 	.word	0x080063ac
 8000fd4:	080063b4 	.word	0x080063b4
 8000fd8:	080063f8 	.word	0x080063f8
 8000fdc:	08006430 	.word	0x08006430
 8000fe0:	0800647c 	.word	0x0800647c
 8000fe4:	080064c8 	.word	0x080064c8
 8000fe8:	08006514 	.word	0x08006514
 8000fec:	08006560 	.word	0x08006560
 8000ff0:	08006580 	.word	0x08006580
        char hex[4];
        sprintf(hex, "%02X ", handle->rx_buffer[i + 9 + encrypted_length + j]);
 8000ff4:	f897 20ca 	ldrb.w	r2, [r7, #202]	@ 0xca
 8000ff8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000ffc:	441a      	add	r2, r3
 8000ffe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001002:	4413      	add	r3, r2
 8001004:	3309      	adds	r3, #9
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	f893 30c4 	ldrb.w	r3, [r3, #196]	@ 0xc4
 800100e:	461a      	mov	r2, r3
 8001010:	f107 0308 	add.w	r3, r7, #8
 8001014:	4966      	ldr	r1, [pc, #408]	@ (80011b0 <secure_uart_process_received+0x540>)
 8001016:	4618      	mov	r0, r3
 8001018:	f003 ffe8 	bl	8004fec <siprintf>
        strcat(debug_msg, hex);
 800101c:	f107 0208 	add.w	r2, r7, #8
 8001020:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001024:	4611      	mov	r1, r2
 8001026:	4618      	mov	r0, r3
 8001028:	f004 f877 	bl	800511a <strcat>
    for (int j = 0; j < 8; j++) {
 800102c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001030:	3301      	adds	r3, #1
 8001032:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001036:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800103a:	2b07      	cmp	r3, #7
 800103c:	ddda      	ble.n	8000ff4 <secure_uart_process_received+0x384>
    }
    monitor_print(debug_msg);
 800103e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fb88 	bl	8000758 <monitor_print>

    // ВАЖНОЕ ИЗМЕНЕНИЕ: используем правильное смещение для CMAC
    if (memcmp(calculated_cmac, &handle->rx_buffer[i + 9 + encrypted_length], 8) != 0) {
 8001048:	f897 20ca 	ldrb.w	r2, [r7, #202]	@ 0xca
 800104c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001050:	4413      	add	r3, r2
 8001052:	3309      	adds	r3, #9
 8001054:	33c0      	adds	r3, #192	@ 0xc0
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	4413      	add	r3, r2
 800105a:	1d19      	adds	r1, r3, #4
 800105c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001060:	2208      	movs	r2, #8
 8001062:	4618      	mov	r0, r3
 8001064:	f004 f827 	bl	80050b6 <memcmp>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d02a      	beq.n	80010c4 <secure_uart_process_received+0x454>
        // CMAC не совпадает, игнорируем фрейм
        monitor_print("CMAC не совпадает, фрейм отброшен");
 800106e:	4851      	ldr	r0, [pc, #324]	@ (80011b4 <secure_uart_process_received+0x544>)
 8001070:	f7ff fb72 	bl	8000758 <monitor_print>
        handle->processing = 0;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	f883 2166 	strb.w	r2, [r3, #358]	@ 0x166

        if (i > 0) {
 800107c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001080:	2b00      	cmp	r3, #0
 8001082:	f000 8091 	beq.w	80011a8 <secure_uart_process_received+0x538>
            memmove(handle->rx_buffer, &handle->rx_buffer[i], dma_head - i);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f103 00c4 	add.w	r0, r3, #196	@ 0xc4
 800108c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001090:	33c0      	adds	r3, #192	@ 0xc0
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	4413      	add	r3, r2
 8001096:	1d19      	adds	r1, r3, #4
 8001098:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800109c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	461a      	mov	r2, r3
 80010a4:	f004 f817 	bl	80050d6 <memmove>

            // Перезапуск DMA с новым положением
            HAL_UART_AbortReceive(handle->huart);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f002 fce4 	bl	8003a7a <HAL_UART_AbortReceive>
            HAL_UART_Receive_DMA(handle->huart, handle->rx_buffer, sizeof(handle->rx_buffer));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6818      	ldr	r0, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	33c4      	adds	r3, #196	@ 0xc4
 80010ba:	2251      	movs	r2, #81	@ 0x51
 80010bc:	4619      	mov	r1, r3
 80010be:	f002 fcb7 	bl	8003a30 <HAL_UART_Receive_DMA>
        }

        return;
 80010c2:	e071      	b.n	80011a8 <secure_uart_process_received+0x538>
    }

    monitor_print("CMAC проверен успешно, дешифрование данных");
 80010c4:	483c      	ldr	r0, [pc, #240]	@ (80011b8 <secure_uart_process_received+0x548>)
 80010c6:	f7ff fb47 	bl	8000758 <monitor_print>

    // Дешифрование данных
    uint8_t decrypted_data[SECURE_UART_MAX_DATA_SIZE];
    if (secure_uart_decrypt_data(handle, &handle->rx_buffer[i + 9], encrypted_length, decrypted_data)) {
 80010ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80010ce:	3309      	adds	r3, #9
 80010d0:	33c0      	adds	r3, #192	@ 0xc0
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	1d19      	adds	r1, r3, #4
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	f897 20ca 	ldrb.w	r2, [r7, #202]	@ 0xca
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f000 f8e7 	bl	80012b4 <secure_uart_decrypt_data>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d026      	beq.n	800113a <secure_uart_process_received+0x4ca>
        // Обновление счетчика приема
        handle->last_rx_counter = counter;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80010f2:	615a      	str	r2, [r3, #20]

        sprintf(debug_msg, "Данные успешно дешифрованы, длина: %u байт", encrypted_length);
 80010f4:	f897 20ca 	ldrb.w	r2, [r7, #202]	@ 0xca
 80010f8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010fc:	492f      	ldr	r1, [pc, #188]	@ (80011bc <secure_uart_process_received+0x54c>)
 80010fe:	4618      	mov	r0, r3
 8001100:	f003 ff74 	bl	8004fec <siprintf>
        monitor_print(debug_msg);
 8001104:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fb25 	bl	8000758 <monitor_print>

        // Вызов коллбэка с дешифрованными данными
        if (handle->receive_callback) {
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001114:	2b00      	cmp	r3, #0
 8001116:	d00c      	beq.n	8001132 <secure_uart_process_received+0x4c2>
            monitor_print("Вызов callback функции для обработки данных");
 8001118:	4829      	ldr	r0, [pc, #164]	@ (80011c0 <secure_uart_process_received+0x550>)
 800111a:	f7ff fb1d 	bl	8000758 <monitor_print>
            handle->receive_callback(decrypted_data, encrypted_length);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001124:	f897 10ca 	ldrb.w	r1, [r7, #202]	@ 0xca
 8001128:	f107 0214 	add.w	r2, r7, #20
 800112c:	4610      	mov	r0, r2
 800112e:	4798      	blx	r3
 8001130:	e006      	b.n	8001140 <secure_uart_process_received+0x4d0>
        } else {
            monitor_print("ОШИБКА: Callback функция не установлена!");
 8001132:	4824      	ldr	r0, [pc, #144]	@ (80011c4 <secure_uart_process_received+0x554>)
 8001134:	f7ff fb10 	bl	8000758 <monitor_print>
 8001138:	e002      	b.n	8001140 <secure_uart_process_received+0x4d0>
        }
    } else {
        monitor_print("Ошибка дешифрования данных");
 800113a:	4823      	ldr	r0, [pc, #140]	@ (80011c8 <secure_uart_process_received+0x558>)
 800113c:	f7ff fb0c 	bl	8000758 <monitor_print>
    }

    // Очистка буфера после этого фрейма
    uint32_t frame_end = i + SECURE_UART_FRAME_OVERHEAD + encrypted_length;
 8001140:	f897 20ca 	ldrb.w	r2, [r7, #202]	@ 0xca
 8001144:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001148:	4413      	add	r3, r2
 800114a:	3311      	adds	r3, #17
 800114c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (frame_end < dma_head) {
 8001150:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8001154:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001158:	429a      	cmp	r2, r3
 800115a:	d210      	bcs.n	800117e <secure_uart_process_received+0x50e>
        memmove(handle->rx_buffer, &handle->rx_buffer[frame_end], dma_head - frame_end);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f103 00c4 	add.w	r0, r3, #196	@ 0xc4
 8001162:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001166:	33c0      	adds	r3, #192	@ 0xc0
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	4413      	add	r3, r2
 800116c:	1d19      	adds	r1, r3, #4
 800116e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001172:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	461a      	mov	r2, r3
 800117a:	f003 ffac 	bl	80050d6 <memmove>
    }

    // Перезапуск DMA с новым положением
    HAL_UART_AbortReceive(handle->huart);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f002 fc79 	bl	8003a7a <HAL_UART_AbortReceive>
    HAL_UART_Receive_DMA(handle->huart, handle->rx_buffer, sizeof(handle->rx_buffer));
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6818      	ldr	r0, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	33c4      	adds	r3, #196	@ 0xc4
 8001190:	2251      	movs	r2, #81	@ 0x51
 8001192:	4619      	mov	r1, r3
 8001194:	f002 fc4c 	bl	8003a30 <HAL_UART_Receive_DMA>

    handle->processing = 0;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2166 	strb.w	r2, [r3, #358]	@ 0x166
    monitor_print("Обработка завершена");
 80011a0:	480a      	ldr	r0, [pc, #40]	@ (80011cc <secure_uart_process_received+0x55c>)
 80011a2:	f7ff fad9 	bl	8000758 <monitor_print>
 80011a6:	e000      	b.n	80011aa <secure_uart_process_received+0x53a>
        return;
 80011a8:	bf00      	nop
}
 80011aa:	37e0      	adds	r7, #224	@ 0xe0
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	080063ac 	.word	0x080063ac
 80011b4:	0800659c 	.word	0x0800659c
 80011b8:	080065d8 	.word	0x080065d8
 80011bc:	08006624 	.word	0x08006624
 80011c0:	08006670 	.word	0x08006670
 80011c4:	080066bc 	.word	0x080066bc
 80011c8:	08006700 	.word	0x08006700
 80011cc:	08006734 	.word	0x08006734

080011d0 <secure_uart_handle_idle>:

/* Обработка прерывания IDLE */
void secure_uart_handle_idle(secure_uart_handle_t *handle) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
    // Сброс флага IDLE
    __HAL_UART_CLEAR_IDLEFLAG(handle->huart);
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]

    // Обработка принятых данных
    secure_uart_process_received(handle);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff fd3c 	bl	8000c70 <secure_uart_process_received>
}
 80011f8:	bf00      	nop
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <secure_uart_encrypt_data>:

/* Локальная функция: шифрование данных */
static void secure_uart_encrypt_data(secure_uart_handle_t *handle, const uint8_t *data, uint8_t length, uint8_t *encrypted) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	@ 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	4613      	mov	r3, r2
 800120e:	71fb      	strb	r3, [r7, #7]
    uint32_t i;
    uint32_t plaintext[2], ciphertext[2];

    // Копирование исходных данных в буфер шифрования
    memcpy(encrypted, data, length);
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	461a      	mov	r2, r3
 8001214:	68b9      	ldr	r1, [r7, #8]
 8001216:	6838      	ldr	r0, [r7, #0]
 8001218:	f004 f801 	bl	800521e <memcpy>

    // Дополнение до блока, если необходимо
    if (length % 8 != 0) {
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b00      	cmp	r3, #0
 8001226:	d017      	beq.n	8001258 <secure_uart_encrypt_data+0x58>
    	for (i = length; i < ((length + 8) & ~7); i++) {
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	627b      	str	r3, [r7, #36]	@ 0x24
 800122c:	e007      	b.n	800123e <secure_uart_encrypt_data+0x3e>
            encrypted[i] = 0;
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001232:	4413      	add	r3, r2
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
    	for (i = length; i < ((length + 8) & ~7); i++) {
 8001238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800123a:	3301      	adds	r3, #1
 800123c:	627b      	str	r3, [r7, #36]	@ 0x24
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	3308      	adds	r3, #8
 8001242:	f023 0307 	bic.w	r3, r3, #7
 8001246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001248:	429a      	cmp	r2, r3
 800124a:	d3f0      	bcc.n	800122e <secure_uart_encrypt_data+0x2e>
        }
        length = (length + 7) & ~7; // Округление до кратного 8
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	3307      	adds	r3, #7
 8001250:	b2db      	uxtb	r3, r3
 8001252:	f023 0307 	bic.w	r3, r3, #7
 8001256:	71fb      	strb	r3, [r7, #7]
    }

    // Шифрование блоков
    for (i = 0; i < length; i += 8) {
 8001258:	2300      	movs	r3, #0
 800125a:	627b      	str	r3, [r7, #36]	@ 0x24
 800125c:	e021      	b.n	80012a2 <secure_uart_encrypt_data+0xa2>
        // Формирование блока для шифрования
        plaintext[0] = *(uint32_t*)(&encrypted[i]);
 800125e:	683a      	ldr	r2, [r7, #0]
 8001260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001262:	4413      	add	r3, r2
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	61fb      	str	r3, [r7, #28]
        plaintext[1] = *(uint32_t*)(&encrypted[i + 4]);
 8001268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800126a:	3304      	adds	r3, #4
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	4413      	add	r3, r2
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	623b      	str	r3, [r7, #32]

        // Шифрование блока
        speck_encrypt(&handle->key, plaintext, ciphertext);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	3304      	adds	r3, #4
 8001278:	f107 0214 	add.w	r2, r7, #20
 800127c:	f107 011c 	add.w	r1, r7, #28
 8001280:	4618      	mov	r0, r3
 8001282:	f000 f9f7 	bl	8001674 <speck_encrypt>

        // Сохранение результата
        *(uint32_t*)(&encrypted[i]) = ciphertext[0];
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128a:	4413      	add	r3, r2
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	601a      	str	r2, [r3, #0]
        *(uint32_t*)(&encrypted[i + 4]) = ciphertext[1];
 8001290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001292:	3304      	adds	r3, #4
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	4413      	add	r3, r2
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	601a      	str	r2, [r3, #0]
    for (i = 0; i < length; i += 8) {
 800129c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800129e:	3308      	adds	r3, #8
 80012a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d3d9      	bcc.n	800125e <secure_uart_encrypt_data+0x5e>
    }
}
 80012aa:	bf00      	nop
 80012ac:	bf00      	nop
 80012ae:	3728      	adds	r7, #40	@ 0x28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <secure_uart_decrypt_data>:

/* Локальная функция: дешифрование данных */
static uint8_t secure_uart_decrypt_data(secure_uart_handle_t *handle, const uint8_t *encrypted, uint8_t length, uint8_t *data) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	@ 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	4613      	mov	r3, r2
 80012c2:	71fb      	strb	r3, [r7, #7]
    uint32_t i;
    uint32_t ciphertext[2], plaintext[2];

    // Проверка длины данных (должна быть кратна размеру блока)
    if (length % 8 != 0) {
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <secure_uart_decrypt_data+0x20>
        return 0; // Ошибка длины
 80012d0:	2300      	movs	r3, #0
 80012d2:	e029      	b.n	8001328 <secure_uart_decrypt_data+0x74>
    }

    // Дешифрование блоков
    for (i = 0; i < length; i += 8) {
 80012d4:	2300      	movs	r3, #0
 80012d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80012d8:	e021      	b.n	800131e <secure_uart_decrypt_data+0x6a>
        // Формирование блока для дешифрования
        ciphertext[0] = *(uint32_t*)(&encrypted[i]);
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012de:	4413      	add	r3, r2
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	61fb      	str	r3, [r7, #28]
        ciphertext[1] = *(uint32_t*)(&encrypted[i + 4]);
 80012e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e6:	3304      	adds	r3, #4
 80012e8:	68ba      	ldr	r2, [r7, #8]
 80012ea:	4413      	add	r3, r2
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	623b      	str	r3, [r7, #32]

        // Дешифрование блока
        speck_decrypt(&handle->key, ciphertext, plaintext);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	3304      	adds	r3, #4
 80012f4:	f107 0214 	add.w	r2, r7, #20
 80012f8:	f107 011c 	add.w	r1, r7, #28
 80012fc:	4618      	mov	r0, r3
 80012fe:	f000 fa02 	bl	8001706 <speck_decrypt>

        // Сохранение результата
        *(uint32_t*)(&data[i]) = plaintext[0];
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001306:	4413      	add	r3, r2
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	601a      	str	r2, [r3, #0]
        *(uint32_t*)(&data[i + 4]) = plaintext[1];
 800130c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130e:	3304      	adds	r3, #4
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	4413      	add	r3, r2
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	601a      	str	r2, [r3, #0]
    for (i = 0; i < length; i += 8) {
 8001318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131a:	3308      	adds	r3, #8
 800131c:	627b      	str	r3, [r7, #36]	@ 0x24
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001322:	429a      	cmp	r2, r3
 8001324:	d3d9      	bcc.n	80012da <secure_uart_decrypt_data+0x26>
    }

    return 1; // Успешно
 8001326:	2301      	movs	r3, #1
}
 8001328:	4618      	mov	r0, r3
 800132a:	3728      	adds	r7, #40	@ 0x28
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <secure_uart_calculate_cmac>:

/* Локальная функция: вычисление CMAC */
static void secure_uart_calculate_cmac(secure_uart_handle_t *handle, const uint8_t *data, uint8_t length,
                                     uint32_t counter, uint8_t *cmac) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b0b0      	sub	sp, #192	@ 0xc0
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	4613      	mov	r3, r2
 800133e:	71fb      	strb	r3, [r7, #7]
    char debug_msg[100];

    // Отладочный вывод
    sprintf(debug_msg, "Вычисление CMAC: счетчик=%lu, длина=%u", counter, length);
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	4930      	ldr	r1, [pc, #192]	@ (800140c <secure_uart_calculate_cmac+0xdc>)
 800134a:	f003 fe4f 	bl	8004fec <siprintf>
    monitor_print(debug_msg);
 800134e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fa00 	bl	8000758 <monitor_print>

    // Буфер для данных с добавленным счетчиком
    uint8_t buffer[SECURE_UART_MAX_DATA_SIZE + 4];

    // Добавление счетчика в начало данных (важно соблюдать порядок байтов!)
    buffer[0] = (counter) & 0xFF;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	b2db      	uxtb	r3, r3
 800135c:	753b      	strb	r3, [r7, #20]
    buffer[1] = (counter >> 8) & 0xFF;
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	0a1b      	lsrs	r3, r3, #8
 8001362:	b2db      	uxtb	r3, r3
 8001364:	757b      	strb	r3, [r7, #21]
    buffer[2] = (counter >> 16) & 0xFF;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	0c1b      	lsrs	r3, r3, #16
 800136a:	b2db      	uxtb	r3, r3
 800136c:	75bb      	strb	r3, [r7, #22]
    buffer[3] = (counter >> 24) & 0xFF;
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	0e1b      	lsrs	r3, r3, #24
 8001372:	b2db      	uxtb	r3, r3
 8001374:	75fb      	strb	r3, [r7, #23]

    // Копирование данных после счетчика
    memcpy(buffer + 4, data, length);
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	3304      	adds	r3, #4
 800137c:	79fa      	ldrb	r2, [r7, #7]
 800137e:	68b9      	ldr	r1, [r7, #8]
 8001380:	4618      	mov	r0, r3
 8001382:	f003 ff4c 	bl	800521e <memcpy>

    // Отладочный вывод содержимого буфера
    sprintf(debug_msg, "Буфер для CMAC (первые 16 байт): ");
 8001386:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800138a:	4921      	ldr	r1, [pc, #132]	@ (8001410 <secure_uart_calculate_cmac+0xe0>)
 800138c:	4618      	mov	r0, r3
 800138e:	f003 fe2d 	bl	8004fec <siprintf>
    for (int i = 0; i < 16 && i < length + 4; i++) {
 8001392:	2300      	movs	r3, #0
 8001394:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001398:	e019      	b.n	80013ce <secure_uart_calculate_cmac+0x9e>
        char hex[4];
        sprintf(hex, "%02X ", buffer[i]);
 800139a:	f107 0214 	add.w	r2, r7, #20
 800139e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80013a2:	4413      	add	r3, r2
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	461a      	mov	r2, r3
 80013a8:	f107 0310 	add.w	r3, r7, #16
 80013ac:	4919      	ldr	r1, [pc, #100]	@ (8001414 <secure_uart_calculate_cmac+0xe4>)
 80013ae:	4618      	mov	r0, r3
 80013b0:	f003 fe1c 	bl	8004fec <siprintf>
        strcat(debug_msg, hex);
 80013b4:	f107 0210 	add.w	r2, r7, #16
 80013b8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80013bc:	4611      	mov	r1, r2
 80013be:	4618      	mov	r0, r3
 80013c0:	f003 feab 	bl	800511a <strcat>
    for (int i = 0; i < 16 && i < length + 4; i++) {
 80013c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80013c8:	3301      	adds	r3, #1
 80013ca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80013ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80013d2:	2b0f      	cmp	r3, #15
 80013d4:	dc05      	bgt.n	80013e2 <secure_uart_calculate_cmac+0xb2>
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	3303      	adds	r3, #3
 80013da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80013de:	429a      	cmp	r2, r3
 80013e0:	dddb      	ble.n	800139a <secure_uart_calculate_cmac+0x6a>
    }
    monitor_print(debug_msg);
 80013e2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff f9b6 	bl	8000758 <monitor_print>

    // Вычисление CMAC
    speck_cmac(&handle->key, buffer, length + 4, cmac);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	1d18      	adds	r0, r3, #4
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	3304      	adds	r3, #4
 80013f4:	461a      	mov	r2, r3
 80013f6:	f107 0114 	add.w	r1, r7, #20
 80013fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80013fe:	f000 f9c9 	bl	8001794 <speck_cmac>
}
 8001402:	bf00      	nop
 8001404:	37c0      	adds	r7, #192	@ 0xc0
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	0800675c 	.word	0x0800675c
 8001410:	0800679c 	.word	0x0800679c
 8001414:	080063ac 	.word	0x080063ac

08001418 <secure_uart_prepare_frame>:

/* Локальная функция: подготовка фрейма */
static uint32_t secure_uart_prepare_frame(secure_uart_handle_t *handle, const uint8_t *data,
                                        uint8_t length, uint8_t *frame_buffer) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b0a4      	sub	sp, #144	@ 0x90
 800141c:	af02      	add	r7, sp, #8
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	4613      	mov	r3, r2
 8001426:	71fb      	strb	r3, [r7, #7]
    uint32_t frame_pos = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    char debug_msg[100];

    // Отладочный вывод
    sprintf(debug_msg, "Подготовка фрейма: длина=%u, счетчик=%lu", length, handle->tx_counter);
 800142e:	79fa      	ldrb	r2, [r7, #7]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	f107 0018 	add.w	r0, r7, #24
 8001438:	4944      	ldr	r1, [pc, #272]	@ (800154c <secure_uart_prepare_frame+0x134>)
 800143a:	f003 fdd7 	bl	8004fec <siprintf>
    monitor_print(debug_msg);
 800143e:	f107 0318 	add.w	r3, r7, #24
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff f988 	bl	8000758 <monitor_print>

    // Добавление заголовка
    *(uint32_t*)(&frame_buffer[frame_pos]) = SECURE_UART_HEADER;
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800144e:	4413      	add	r3, r2
 8001450:	4a3f      	ldr	r2, [pc, #252]	@ (8001550 <secure_uart_prepare_frame+0x138>)
 8001452:	601a      	str	r2, [r3, #0]
    frame_pos += 4;
 8001454:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001458:	3304      	adds	r3, #4
 800145a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    // Добавление счетчика
    *(uint32_t*)(&frame_buffer[frame_pos]) = handle->tx_counter;
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001464:	4413      	add	r3, r2
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	6992      	ldr	r2, [r2, #24]
 800146a:	601a      	str	r2, [r3, #0]
    frame_pos += 4;
 800146c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001470:	3304      	adds	r3, #4
 8001472:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    // Добавление длины данных
    frame_buffer[frame_pos++] = length;
 8001476:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800147a:	1c5a      	adds	r2, r3, #1
 800147c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	4413      	add	r3, r2
 8001484:	79fa      	ldrb	r2, [r7, #7]
 8001486:	701a      	strb	r2, [r3, #0]

    // Шифрование и добавление данных
    secure_uart_encrypt_data(handle, data, length, &frame_buffer[frame_pos]);
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800148e:	4413      	add	r3, r2
 8001490:	79fa      	ldrb	r2, [r7, #7]
 8001492:	68b9      	ldr	r1, [r7, #8]
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	f7ff feb3 	bl	8001200 <secure_uart_encrypt_data>

    // Вычисление длины зашифрованных данных (округление вверх до кратного 8)
    uint8_t encrypted_length = (length + 7) & ~7;
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	3307      	adds	r3, #7
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	f023 0307 	bic.w	r3, r3, #7
 80014a4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    frame_pos += encrypted_length;
 80014a8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80014ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80014b0:	4413      	add	r3, r2
 80014b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    // Вычисление и добавление CMAC
    secure_uart_calculate_cmac(handle, &frame_buffer[9], encrypted_length, handle->tx_counter, &frame_buffer[frame_pos]);
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	f103 0109 	add.w	r1, r3, #9
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	6998      	ldr	r0, [r3, #24]
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80014c6:	4413      	add	r3, r2
 80014c8:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	4603      	mov	r3, r0
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f7ff ff2d 	bl	8001330 <secure_uart_calculate_cmac>

    // Отладочный вывод CMAC
    sprintf(debug_msg, "Рассчитанный CMAC для отправки: ");
 80014d6:	f107 0318 	add.w	r3, r7, #24
 80014da:	491e      	ldr	r1, [pc, #120]	@ (8001554 <secure_uart_prepare_frame+0x13c>)
 80014dc:	4618      	mov	r0, r3
 80014de:	f003 fd85 	bl	8004fec <siprintf>
    for (int i = 0; i < 8; i++) {
 80014e2:	2300      	movs	r3, #0
 80014e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80014e8:	e01b      	b.n	8001522 <secure_uart_prepare_frame+0x10a>
        char hex[4];
        sprintf(hex, "%02X ", frame_buffer[frame_pos + i]);
 80014ea:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80014ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80014f2:	4413      	add	r3, r2
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	4413      	add	r3, r2
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	461a      	mov	r2, r3
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4915      	ldr	r1, [pc, #84]	@ (8001558 <secure_uart_prepare_frame+0x140>)
 8001502:	4618      	mov	r0, r3
 8001504:	f003 fd72 	bl	8004fec <siprintf>
        strcat(debug_msg, hex);
 8001508:	f107 0214 	add.w	r2, r7, #20
 800150c:	f107 0318 	add.w	r3, r7, #24
 8001510:	4611      	mov	r1, r2
 8001512:	4618      	mov	r0, r3
 8001514:	f003 fe01 	bl	800511a <strcat>
    for (int i = 0; i < 8; i++) {
 8001518:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800151c:	3301      	adds	r3, #1
 800151e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001522:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001526:	2b07      	cmp	r3, #7
 8001528:	dddf      	ble.n	80014ea <secure_uart_prepare_frame+0xd2>
    }
    monitor_print(debug_msg);
 800152a:	f107 0318 	add.w	r3, r7, #24
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff f912 	bl	8000758 <monitor_print>

    frame_pos += 8;
 8001534:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001538:	3308      	adds	r3, #8
 800153a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    return frame_pos;
 800153e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
}
 8001542:	4618      	mov	r0, r3
 8001544:	3788      	adds	r7, #136	@ 0x88
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	080067d0 	.word	0x080067d0
 8001550:	a55a5aa5 	.word	0xa55a5aa5
 8001554:	08006818 	.word	0x08006818
 8001558:	080063ac 	.word	0x080063ac

0800155c <speck_init_key>:
#define ROL(x, r) ((x << r) | (x >> (32 - r)))
#define R(x, y, k) (x = ROR(x, 8), x += y, x ^= k, y = ROL(y, 3), y ^= x)
#define ROUNDS 27  // Количество раундов для Speck 64/128

/* Инициализация ключа шифрования */
void speck_init_key(const uint32_t key[4], speck_key_t *exp_key) {
 800155c:	b480      	push	{r7}
 800155e:	b089      	sub	sp, #36	@ 0x24
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
    uint32_t i;
    uint32_t b = key[0];
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	61bb      	str	r3, [r7, #24]
    uint32_t a[3] = {key[1], key[2], key[3]};
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3304      	adds	r3, #4
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3308      	adds	r3, #8
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	330c      	adds	r3, #12
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	617b      	str	r3, [r7, #20]

    exp_key->l[0] = b;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	601a      	str	r2, [r3, #0]

    for (i = 0; i < ROUNDS - 1; i++) {
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
 800158e:	e065      	b.n	800165c <speck_init_key+0x100>
        R(a[i % 3], b, i);
 8001590:	69f9      	ldr	r1, [r7, #28]
 8001592:	4b37      	ldr	r3, [pc, #220]	@ (8001670 <speck_init_key+0x114>)
 8001594:	fba3 2301 	umull	r2, r3, r3, r1
 8001598:	085a      	lsrs	r2, r3, #1
 800159a:	4613      	mov	r3, r2
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	4413      	add	r3, r2
 80015a0:	1aca      	subs	r2, r1, r3
 80015a2:	0093      	lsls	r3, r2, #2
 80015a4:	3320      	adds	r3, #32
 80015a6:	443b      	add	r3, r7
 80015a8:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80015ac:	69f9      	ldr	r1, [r7, #28]
 80015ae:	4b30      	ldr	r3, [pc, #192]	@ (8001670 <speck_init_key+0x114>)
 80015b0:	fba3 2301 	umull	r2, r3, r3, r1
 80015b4:	085a      	lsrs	r2, r3, #1
 80015b6:	4613      	mov	r3, r2
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	4413      	add	r3, r2
 80015bc:	1aca      	subs	r2, r1, r3
 80015be:	ea4f 2130 	mov.w	r1, r0, ror #8
 80015c2:	0093      	lsls	r3, r2, #2
 80015c4:	3320      	adds	r3, #32
 80015c6:	443b      	add	r3, r7
 80015c8:	f843 1c14 	str.w	r1, [r3, #-20]
 80015cc:	69f9      	ldr	r1, [r7, #28]
 80015ce:	4b28      	ldr	r3, [pc, #160]	@ (8001670 <speck_init_key+0x114>)
 80015d0:	fba3 2301 	umull	r2, r3, r3, r1
 80015d4:	085b      	lsrs	r3, r3, #1
 80015d6:	461a      	mov	r2, r3
 80015d8:	0052      	lsls	r2, r2, #1
 80015da:	441a      	add	r2, r3
 80015dc:	1a8b      	subs	r3, r1, r2
 80015de:	009a      	lsls	r2, r3, #2
 80015e0:	3220      	adds	r2, #32
 80015e2:	443a      	add	r2, r7
 80015e4:	f852 1c14 	ldr.w	r1, [r2, #-20]
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	440a      	add	r2, r1
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	3320      	adds	r3, #32
 80015f0:	443b      	add	r3, r7
 80015f2:	f843 2c14 	str.w	r2, [r3, #-20]
 80015f6:	69f9      	ldr	r1, [r7, #28]
 80015f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001670 <speck_init_key+0x114>)
 80015fa:	fba3 2301 	umull	r2, r3, r3, r1
 80015fe:	085b      	lsrs	r3, r3, #1
 8001600:	461a      	mov	r2, r3
 8001602:	0052      	lsls	r2, r2, #1
 8001604:	441a      	add	r2, r3
 8001606:	1a8b      	subs	r3, r1, r2
 8001608:	009a      	lsls	r2, r3, #2
 800160a:	3220      	adds	r2, #32
 800160c:	443a      	add	r2, r7
 800160e:	f852 1c14 	ldr.w	r1, [r2, #-20]
 8001612:	69fa      	ldr	r2, [r7, #28]
 8001614:	404a      	eors	r2, r1
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	3320      	adds	r3, #32
 800161a:	443b      	add	r3, r7
 800161c:	f843 2c14 	str.w	r2, [r3, #-20]
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	ea4f 7373 	mov.w	r3, r3, ror #29
 8001626:	61bb      	str	r3, [r7, #24]
 8001628:	69f9      	ldr	r1, [r7, #28]
 800162a:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <speck_init_key+0x114>)
 800162c:	fba3 2301 	umull	r2, r3, r3, r1
 8001630:	085a      	lsrs	r2, r3, #1
 8001632:	4613      	mov	r3, r2
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	4413      	add	r3, r2
 8001638:	1aca      	subs	r2, r1, r3
 800163a:	0093      	lsls	r3, r2, #2
 800163c:	3320      	adds	r3, #32
 800163e:	443b      	add	r3, r7
 8001640:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4053      	eors	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        exp_key->l[i + 1] = b;
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	1c5a      	adds	r2, r3, #1
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	69b9      	ldr	r1, [r7, #24]
 8001652:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < ROUNDS - 1; i++) {
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3301      	adds	r3, #1
 800165a:	61fb      	str	r3, [r7, #28]
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	2b19      	cmp	r3, #25
 8001660:	d996      	bls.n	8001590 <speck_init_key+0x34>
    }
}
 8001662:	bf00      	nop
 8001664:	bf00      	nop
 8001666:	3724      	adds	r7, #36	@ 0x24
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	aaaaaaab 	.word	0xaaaaaaab

08001674 <speck_encrypt>:

/* Функция шифрования блока данных */
void speck_encrypt(const speck_key_t *exp_key, uint32_t plaintext[2], uint32_t ciphertext[2]) {
 8001674:	b480      	push	{r7}
 8001676:	b087      	sub	sp, #28
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
    uint32_t i;
    ciphertext[0] = plaintext[0];
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	601a      	str	r2, [r3, #0]
    ciphertext[1] = plaintext[1];
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3304      	adds	r3, #4
 800168c:	68ba      	ldr	r2, [r7, #8]
 800168e:	6852      	ldr	r2, [r2, #4]
 8001690:	601a      	str	r2, [r3, #0]

    for (i = 0; i < ROUNDS; i++) {
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
 8001696:	e02c      	b.n	80016f2 <speck_encrypt+0x7e>
        R(ciphertext[1], ciphertext[0], exp_key->l[i]);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3304      	adds	r3, #4
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3304      	adds	r3, #4
 80016a2:	ea4f 2232 	mov.w	r2, r2, ror #8
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3304      	adds	r3, #4
 80016ac:	6819      	ldr	r1, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3304      	adds	r3, #4
 80016b6:	440a      	add	r2, r1
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	3304      	adds	r3, #4
 80016be:	6819      	ldr	r1, [r3, #0]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3304      	adds	r3, #4
 80016cc:	404a      	eors	r2, r1
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	ea4f 7273 	mov.w	r2, r3, ror #29
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3304      	adds	r3, #4
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	405a      	eors	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	601a      	str	r2, [r3, #0]
    for (i = 0; i < ROUNDS; i++) {
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	3301      	adds	r3, #1
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	2b1a      	cmp	r3, #26
 80016f6:	d9cf      	bls.n	8001698 <speck_encrypt+0x24>
    }
}
 80016f8:	bf00      	nop
 80016fa:	bf00      	nop
 80016fc:	371c      	adds	r7, #28
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <speck_decrypt>:

/* Функция дешифрования блока данных */
void speck_decrypt(const speck_key_t *exp_key, uint32_t ciphertext[2], uint32_t plaintext[2]) {
 8001706:	b480      	push	{r7}
 8001708:	b087      	sub	sp, #28
 800170a:	af00      	add	r7, sp, #0
 800170c:	60f8      	str	r0, [r7, #12]
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607a      	str	r2, [r7, #4]
    int32_t i;
    plaintext[0] = ciphertext[0];
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	601a      	str	r2, [r3, #0]
    plaintext[1] = ciphertext[1];
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3304      	adds	r3, #4
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	6852      	ldr	r2, [r2, #4]
 8001722:	601a      	str	r2, [r3, #0]

    for (i = ROUNDS - 1; i >= 0; i--) {
 8001724:	231a      	movs	r3, #26
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	e02a      	b.n	8001780 <speck_decrypt+0x7a>
        plaintext[1] ^= plaintext[0];
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3304      	adds	r3, #4
 800172e:	6819      	ldr	r1, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3304      	adds	r3, #4
 8001738:	404a      	eors	r2, r1
 800173a:	601a      	str	r2, [r3, #0]
        plaintext[1] = ROR(plaintext[1], 3);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3304      	adds	r3, #4
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	3304      	adds	r3, #4
 8001746:	ea4f 02f2 	mov.w	r2, r2, ror #3
 800174a:	601a      	str	r2, [r3, #0]
        plaintext[0] ^= exp_key->l[i];
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6979      	ldr	r1, [r7, #20]
 8001754:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001758:	405a      	eors	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	601a      	str	r2, [r3, #0]
        plaintext[0] -= plaintext[1];
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3304      	adds	r3, #4
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	1ad2      	subs	r2, r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	601a      	str	r2, [r3, #0]
        plaintext[0] = ROL(plaintext[0], 8);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	ea4f 6233 	mov.w	r2, r3, ror #24
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	601a      	str	r2, [r3, #0]
    for (i = ROUNDS - 1; i >= 0; i--) {
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	3b01      	subs	r3, #1
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	2b00      	cmp	r3, #0
 8001784:	dad1      	bge.n	800172a <speck_decrypt+0x24>
    }
}
 8001786:	bf00      	nop
 8001788:	bf00      	nop
 800178a:	371c      	adds	r7, #28
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <speck_cmac>:

/* Вычисление CMAC на базе Speck */
void speck_cmac(const speck_key_t *exp_key, const uint8_t *data, uint32_t length, uint8_t mac[8]) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b0a4      	sub	sp, #144	@ 0x90
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
 80017a0:	603b      	str	r3, [r7, #0]
    uint32_t i, j;
    uint32_t block[2] = {0, 0};
 80017a2:	2300      	movs	r3, #0
 80017a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80017a6:	2300      	movs	r3, #0
 80017a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    uint32_t last_block[2] = {0, 0};
 80017ac:	2300      	movs	r3, #0
 80017ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80017b0:	2300      	movs	r3, #0
 80017b2:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Отладочный вывод
    char debug_msg[100];
    sprintf(debug_msg, "speck_cmac: длина данных=%lu", length);
 80017b4:	f107 0310 	add.w	r3, r7, #16
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	495e      	ldr	r1, [pc, #376]	@ (8001934 <speck_cmac+0x1a0>)
 80017bc:	4618      	mov	r0, r3
 80017be:	f003 fc15 	bl	8004fec <siprintf>
    // Используйте функцию monitor_print, если она доступна
    // monitor_print(debug_msg);

    // Обработка полных блоков
    for (i = 0; i + 8 <= length; i += 8) {
 80017c2:	2300      	movs	r3, #0
 80017c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80017c8:	e05e      	b.n	8001888 <speck_cmac+0xf4>
        // Корректная загрузка данных
        block[0] = ((uint32_t)data[i]) |
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80017d0:	4413      	add	r3, r2
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	4619      	mov	r1, r3
                  ((uint32_t)data[i+1] << 8) |
 80017d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80017da:	3301      	adds	r3, #1
 80017dc:	68ba      	ldr	r2, [r7, #8]
 80017de:	4413      	add	r3, r2
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	021b      	lsls	r3, r3, #8
        block[0] = ((uint32_t)data[i]) |
 80017e4:	ea41 0203 	orr.w	r2, r1, r3
                  ((uint32_t)data[i+2] << 16) |
 80017e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80017ec:	3302      	adds	r3, #2
 80017ee:	68b9      	ldr	r1, [r7, #8]
 80017f0:	440b      	add	r3, r1
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	041b      	lsls	r3, r3, #16
                  ((uint32_t)data[i+1] << 8) |
 80017f6:	431a      	orrs	r2, r3
                  ((uint32_t)data[i+3] << 24);
 80017f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80017fc:	3303      	adds	r3, #3
 80017fe:	68b9      	ldr	r1, [r7, #8]
 8001800:	440b      	add	r3, r1
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	061b      	lsls	r3, r3, #24
                  ((uint32_t)data[i+2] << 16) |
 8001806:	4313      	orrs	r3, r2
        block[0] = ((uint32_t)data[i]) |
 8001808:	67fb      	str	r3, [r7, #124]	@ 0x7c

        block[1] = ((uint32_t)data[i+4]) |
 800180a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800180e:	3304      	adds	r3, #4
 8001810:	68ba      	ldr	r2, [r7, #8]
 8001812:	4413      	add	r3, r2
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	4619      	mov	r1, r3
                  ((uint32_t)data[i+5] << 8) |
 8001818:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800181c:	3305      	adds	r3, #5
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	4413      	add	r3, r2
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	021b      	lsls	r3, r3, #8
        block[1] = ((uint32_t)data[i+4]) |
 8001826:	ea41 0203 	orr.w	r2, r1, r3
                  ((uint32_t)data[i+6] << 16) |
 800182a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800182e:	3306      	adds	r3, #6
 8001830:	68b9      	ldr	r1, [r7, #8]
 8001832:	440b      	add	r3, r1
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	041b      	lsls	r3, r3, #16
                  ((uint32_t)data[i+5] << 8) |
 8001838:	431a      	orrs	r2, r3
                  ((uint32_t)data[i+7] << 24);
 800183a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800183e:	3307      	adds	r3, #7
 8001840:	68b9      	ldr	r1, [r7, #8]
 8001842:	440b      	add	r3, r1
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	061b      	lsls	r3, r3, #24
                  ((uint32_t)data[i+6] << 16) |
 8001848:	4313      	orrs	r3, r2
        block[1] = ((uint32_t)data[i+4]) |
 800184a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

        // XOR с предыдущим результатом
        // Первый блок не нужно XORить с предыдущим
        if (i > 0) {
 800184e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00c      	beq.n	8001870 <speck_cmac+0xdc>
            block[0] ^= ((uint32_t*)mac)[0];
 8001856:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4053      	eors	r3, r2
 800185e:	67fb      	str	r3, [r7, #124]	@ 0x7c
            block[1] ^= ((uint32_t*)mac)[1];
 8001860:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	3304      	adds	r3, #4
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4053      	eors	r3, r2
 800186c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        }

        // Шифрование блока
        speck_encrypt(exp_key, block, (uint32_t*)mac);
 8001870:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	4619      	mov	r1, r3
 8001878:	68f8      	ldr	r0, [r7, #12]
 800187a:	f7ff fefb 	bl	8001674 <speck_encrypt>
    for (i = 0; i + 8 <= length; i += 8) {
 800187e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001882:	3308      	adds	r3, #8
 8001884:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001888:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800188c:	3308      	adds	r3, #8
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	429a      	cmp	r2, r3
 8001892:	d29a      	bcs.n	80017ca <speck_cmac+0x36>
    }

    // Обработка последнего блока
    uint32_t remaining = length - i;
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (remaining > 0) {
 80018a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d040      	beq.n	800192a <speck_cmac+0x196>
        memset(last_block, 0, sizeof(last_block));
 80018a8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80018ac:	2208      	movs	r2, #8
 80018ae:	2100      	movs	r1, #0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f003 fc2a 	bl	800510a <memset>

        // Копирование оставшихся байтов
        for (j = 0; j < remaining; j++) {
 80018b6:	2300      	movs	r3, #0
 80018b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80018bc:	e012      	b.n	80018e4 <speck_cmac+0x150>
            ((uint8_t*)last_block)[j] = data[i + j];
 80018be:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80018c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80018c6:	4413      	add	r3, r2
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	441a      	add	r2, r3
 80018cc:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 80018d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80018d4:	440b      	add	r3, r1
 80018d6:	7812      	ldrb	r2, [r2, #0]
 80018d8:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < remaining; j++) {
 80018da:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80018de:	3301      	adds	r3, #1
 80018e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80018e4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80018e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d3e6      	bcc.n	80018be <speck_cmac+0x12a>
        }

        // Добавление бита 1 и дополнение нулями
        ((uint8_t*)last_block)[remaining] = 0x80;
 80018f0:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 80018f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80018f8:	4413      	add	r3, r2
 80018fa:	2280      	movs	r2, #128	@ 0x80
 80018fc:	701a      	strb	r2, [r3, #0]

        // XOR с предыдущим результатом
        if (i > 0) {
 80018fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00a      	beq.n	800191c <speck_cmac+0x188>
            last_block[0] ^= ((uint32_t*)mac)[0];
 8001906:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4053      	eors	r3, r2
 800190e:	677b      	str	r3, [r7, #116]	@ 0x74
            last_block[1] ^= ((uint32_t*)mac)[1];
 8001910:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	3304      	adds	r3, #4
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4053      	eors	r3, r2
 800191a:	67bb      	str	r3, [r7, #120]	@ 0x78
        }

        // Шифрование последнего блока
        speck_encrypt(exp_key, last_block, (uint32_t*)mac);
 800191c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	4619      	mov	r1, r3
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f7ff fea5 	bl	8001674 <speck_encrypt>
    }
}
 800192a:	bf00      	nop
 800192c:	3790      	adds	r7, #144	@ 0x90
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	08006850 	.word	0x08006850

08001938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	4b10      	ldr	r3, [pc, #64]	@ (8001984 <HAL_MspInit+0x4c>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001946:	4a0f      	ldr	r2, [pc, #60]	@ (8001984 <HAL_MspInit+0x4c>)
 8001948:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800194c:	6453      	str	r3, [r2, #68]	@ 0x44
 800194e:	4b0d      	ldr	r3, [pc, #52]	@ (8001984 <HAL_MspInit+0x4c>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001952:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	603b      	str	r3, [r7, #0]
 800195e:	4b09      	ldr	r3, [pc, #36]	@ (8001984 <HAL_MspInit+0x4c>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001962:	4a08      	ldr	r2, [pc, #32]	@ (8001984 <HAL_MspInit+0x4c>)
 8001964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001968:	6413      	str	r3, [r2, #64]	@ 0x40
 800196a:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <HAL_MspInit+0x4c>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001972:	603b      	str	r3, [r7, #0]
 8001974:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001976:	2007      	movs	r0, #7
 8001978:	f000 fc6e 	bl	8002258 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40023800 	.word	0x40023800

08001988 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08e      	sub	sp, #56	@ 0x38
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a64      	ldr	r2, [pc, #400]	@ (8001b38 <HAL_UART_MspInit+0x1b0>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	f040 8094 	bne.w	8001ad4 <HAL_UART_MspInit+0x14c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019ac:	2300      	movs	r3, #0
 80019ae:	623b      	str	r3, [r7, #32]
 80019b0:	4b62      	ldr	r3, [pc, #392]	@ (8001b3c <HAL_UART_MspInit+0x1b4>)
 80019b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b4:	4a61      	ldr	r2, [pc, #388]	@ (8001b3c <HAL_UART_MspInit+0x1b4>)
 80019b6:	f043 0310 	orr.w	r3, r3, #16
 80019ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80019bc:	4b5f      	ldr	r3, [pc, #380]	@ (8001b3c <HAL_UART_MspInit+0x1b4>)
 80019be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c0:	f003 0310 	and.w	r3, r3, #16
 80019c4:	623b      	str	r3, [r7, #32]
 80019c6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c8:	2300      	movs	r3, #0
 80019ca:	61fb      	str	r3, [r7, #28]
 80019cc:	4b5b      	ldr	r3, [pc, #364]	@ (8001b3c <HAL_UART_MspInit+0x1b4>)
 80019ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d0:	4a5a      	ldr	r2, [pc, #360]	@ (8001b3c <HAL_UART_MspInit+0x1b4>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d8:	4b58      	ldr	r3, [pc, #352]	@ (8001b3c <HAL_UART_MspInit+0x1b4>)
 80019da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	61fb      	str	r3, [r7, #28]
 80019e2:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019e4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80019e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f2:	2303      	movs	r3, #3
 80019f4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019f6:	2307      	movs	r3, #7
 80019f8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019fe:	4619      	mov	r1, r3
 8001a00:	484f      	ldr	r0, [pc, #316]	@ (8001b40 <HAL_UART_MspInit+0x1b8>)
 8001a02:	f001 f879 	bl	8002af8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001a06:	4b4f      	ldr	r3, [pc, #316]	@ (8001b44 <HAL_UART_MspInit+0x1bc>)
 8001a08:	4a4f      	ldr	r2, [pc, #316]	@ (8001b48 <HAL_UART_MspInit+0x1c0>)
 8001a0a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001a0c:	4b4d      	ldr	r3, [pc, #308]	@ (8001b44 <HAL_UART_MspInit+0x1bc>)
 8001a0e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001a12:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a14:	4b4b      	ldr	r3, [pc, #300]	@ (8001b44 <HAL_UART_MspInit+0x1bc>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a1a:	4b4a      	ldr	r3, [pc, #296]	@ (8001b44 <HAL_UART_MspInit+0x1bc>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a20:	4b48      	ldr	r3, [pc, #288]	@ (8001b44 <HAL_UART_MspInit+0x1bc>)
 8001a22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a26:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a28:	4b46      	ldr	r3, [pc, #280]	@ (8001b44 <HAL_UART_MspInit+0x1bc>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a2e:	4b45      	ldr	r3, [pc, #276]	@ (8001b44 <HAL_UART_MspInit+0x1bc>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001a34:	4b43      	ldr	r3, [pc, #268]	@ (8001b44 <HAL_UART_MspInit+0x1bc>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001a3a:	4b42      	ldr	r3, [pc, #264]	@ (8001b44 <HAL_UART_MspInit+0x1bc>)
 8001a3c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a40:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a42:	4b40      	ldr	r3, [pc, #256]	@ (8001b44 <HAL_UART_MspInit+0x1bc>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001a48:	483e      	ldr	r0, [pc, #248]	@ (8001b44 <HAL_UART_MspInit+0x1bc>)
 8001a4a:	f000 fc47 	bl	80022dc <HAL_DMA_Init>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001a54:	f7ff f8b2 	bl	8000bbc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a3a      	ldr	r2, [pc, #232]	@ (8001b44 <HAL_UART_MspInit+0x1bc>)
 8001a5c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a5e:	4a39      	ldr	r2, [pc, #228]	@ (8001b44 <HAL_UART_MspInit+0x1bc>)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001a64:	4b39      	ldr	r3, [pc, #228]	@ (8001b4c <HAL_UART_MspInit+0x1c4>)
 8001a66:	4a3a      	ldr	r2, [pc, #232]	@ (8001b50 <HAL_UART_MspInit+0x1c8>)
 8001a68:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001a6a:	4b38      	ldr	r3, [pc, #224]	@ (8001b4c <HAL_UART_MspInit+0x1c4>)
 8001a6c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001a70:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a72:	4b36      	ldr	r3, [pc, #216]	@ (8001b4c <HAL_UART_MspInit+0x1c4>)
 8001a74:	2240      	movs	r2, #64	@ 0x40
 8001a76:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a78:	4b34      	ldr	r3, [pc, #208]	@ (8001b4c <HAL_UART_MspInit+0x1c4>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a7e:	4b33      	ldr	r3, [pc, #204]	@ (8001b4c <HAL_UART_MspInit+0x1c4>)
 8001a80:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a84:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a86:	4b31      	ldr	r3, [pc, #196]	@ (8001b4c <HAL_UART_MspInit+0x1c4>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a8c:	4b2f      	ldr	r3, [pc, #188]	@ (8001b4c <HAL_UART_MspInit+0x1c4>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001a92:	4b2e      	ldr	r3, [pc, #184]	@ (8001b4c <HAL_UART_MspInit+0x1c4>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001a98:	4b2c      	ldr	r3, [pc, #176]	@ (8001b4c <HAL_UART_MspInit+0x1c4>)
 8001a9a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a9e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001aa0:	4b2a      	ldr	r3, [pc, #168]	@ (8001b4c <HAL_UART_MspInit+0x1c4>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001aa6:	4829      	ldr	r0, [pc, #164]	@ (8001b4c <HAL_UART_MspInit+0x1c4>)
 8001aa8:	f000 fc18 	bl	80022dc <HAL_DMA_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8001ab2:	f7ff f883 	bl	8000bbc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a24      	ldr	r2, [pc, #144]	@ (8001b4c <HAL_UART_MspInit+0x1c4>)
 8001aba:	639a      	str	r2, [r3, #56]	@ 0x38
 8001abc:	4a23      	ldr	r2, [pc, #140]	@ (8001b4c <HAL_UART_MspInit+0x1c4>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	2025      	movs	r0, #37	@ 0x25
 8001ac8:	f000 fbd1 	bl	800226e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001acc:	2025      	movs	r0, #37	@ 0x25
 8001ace:	f000 fbea 	bl	80022a6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8001ad2:	e0d9      	b.n	8001c88 <HAL_UART_MspInit+0x300>
  else if(huart->Instance==USART2)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a1e      	ldr	r2, [pc, #120]	@ (8001b54 <HAL_UART_MspInit+0x1cc>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d13c      	bne.n	8001b58 <HAL_UART_MspInit+0x1d0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61bb      	str	r3, [r7, #24]
 8001ae2:	4b16      	ldr	r3, [pc, #88]	@ (8001b3c <HAL_UART_MspInit+0x1b4>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae6:	4a15      	ldr	r2, [pc, #84]	@ (8001b3c <HAL_UART_MspInit+0x1b4>)
 8001ae8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001aec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aee:	4b13      	ldr	r3, [pc, #76]	@ (8001b3c <HAL_UART_MspInit+0x1b4>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af6:	61bb      	str	r3, [r7, #24]
 8001af8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	4b0f      	ldr	r3, [pc, #60]	@ (8001b3c <HAL_UART_MspInit+0x1b4>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	4a0e      	ldr	r2, [pc, #56]	@ (8001b3c <HAL_UART_MspInit+0x1b4>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b3c <HAL_UART_MspInit+0x1b4>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b16:	230c      	movs	r3, #12
 8001b18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b22:	2303      	movs	r3, #3
 8001b24:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b26:	2307      	movs	r3, #7
 8001b28:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4803      	ldr	r0, [pc, #12]	@ (8001b40 <HAL_UART_MspInit+0x1b8>)
 8001b32:	f000 ffe1 	bl	8002af8 <HAL_GPIO_Init>
}
 8001b36:	e0a7      	b.n	8001c88 <HAL_UART_MspInit+0x300>
 8001b38:	40011000 	.word	0x40011000
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40020000 	.word	0x40020000
 8001b44:	2000015c 	.word	0x2000015c
 8001b48:	40026440 	.word	0x40026440
 8001b4c:	200001bc 	.word	0x200001bc
 8001b50:	400264b8 	.word	0x400264b8
 8001b54:	40004400 	.word	0x40004400
  else if(huart->Instance==USART6)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a4c      	ldr	r2, [pc, #304]	@ (8001c90 <HAL_UART_MspInit+0x308>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	f040 8092 	bne.w	8001c88 <HAL_UART_MspInit+0x300>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b64:	2300      	movs	r3, #0
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	4b4a      	ldr	r3, [pc, #296]	@ (8001c94 <HAL_UART_MspInit+0x30c>)
 8001b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6c:	4a49      	ldr	r2, [pc, #292]	@ (8001c94 <HAL_UART_MspInit+0x30c>)
 8001b6e:	f043 0320 	orr.w	r3, r3, #32
 8001b72:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b74:	4b47      	ldr	r3, [pc, #284]	@ (8001c94 <HAL_UART_MspInit+0x30c>)
 8001b76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b78:	f003 0320 	and.w	r3, r3, #32
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	4b43      	ldr	r3, [pc, #268]	@ (8001c94 <HAL_UART_MspInit+0x30c>)
 8001b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b88:	4a42      	ldr	r2, [pc, #264]	@ (8001c94 <HAL_UART_MspInit+0x30c>)
 8001b8a:	f043 0304 	orr.w	r3, r3, #4
 8001b8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b90:	4b40      	ldr	r3, [pc, #256]	@ (8001c94 <HAL_UART_MspInit+0x30c>)
 8001b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b9c:	23c0      	movs	r3, #192	@ 0xc0
 8001b9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001bac:	2308      	movs	r3, #8
 8001bae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4838      	ldr	r0, [pc, #224]	@ (8001c98 <HAL_UART_MspInit+0x310>)
 8001bb8:	f000 ff9e 	bl	8002af8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001bbc:	4b37      	ldr	r3, [pc, #220]	@ (8001c9c <HAL_UART_MspInit+0x314>)
 8001bbe:	4a38      	ldr	r2, [pc, #224]	@ (8001ca0 <HAL_UART_MspInit+0x318>)
 8001bc0:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001bc2:	4b36      	ldr	r3, [pc, #216]	@ (8001c9c <HAL_UART_MspInit+0x314>)
 8001bc4:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001bc8:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bca:	4b34      	ldr	r3, [pc, #208]	@ (8001c9c <HAL_UART_MspInit+0x314>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bd0:	4b32      	ldr	r3, [pc, #200]	@ (8001c9c <HAL_UART_MspInit+0x314>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bd6:	4b31      	ldr	r3, [pc, #196]	@ (8001c9c <HAL_UART_MspInit+0x314>)
 8001bd8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bdc:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bde:	4b2f      	ldr	r3, [pc, #188]	@ (8001c9c <HAL_UART_MspInit+0x314>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001be4:	4b2d      	ldr	r3, [pc, #180]	@ (8001c9c <HAL_UART_MspInit+0x314>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001bea:	4b2c      	ldr	r3, [pc, #176]	@ (8001c9c <HAL_UART_MspInit+0x314>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001bf0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c9c <HAL_UART_MspInit+0x314>)
 8001bf2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001bf6:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bf8:	4b28      	ldr	r3, [pc, #160]	@ (8001c9c <HAL_UART_MspInit+0x314>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001bfe:	4827      	ldr	r0, [pc, #156]	@ (8001c9c <HAL_UART_MspInit+0x314>)
 8001c00:	f000 fb6c 	bl	80022dc <HAL_DMA_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_UART_MspInit+0x286>
      Error_Handler();
 8001c0a:	f7fe ffd7 	bl	8000bbc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a22      	ldr	r2, [pc, #136]	@ (8001c9c <HAL_UART_MspInit+0x314>)
 8001c12:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c14:	4a21      	ldr	r2, [pc, #132]	@ (8001c9c <HAL_UART_MspInit+0x314>)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8001c1a:	4b22      	ldr	r3, [pc, #136]	@ (8001ca4 <HAL_UART_MspInit+0x31c>)
 8001c1c:	4a22      	ldr	r2, [pc, #136]	@ (8001ca8 <HAL_UART_MspInit+0x320>)
 8001c1e:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8001c20:	4b20      	ldr	r3, [pc, #128]	@ (8001ca4 <HAL_UART_MspInit+0x31c>)
 8001c22:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001c26:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c28:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca4 <HAL_UART_MspInit+0x31c>)
 8001c2a:	2240      	movs	r2, #64	@ 0x40
 8001c2c:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca4 <HAL_UART_MspInit+0x31c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c34:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca4 <HAL_UART_MspInit+0x31c>)
 8001c36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c3a:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c3c:	4b19      	ldr	r3, [pc, #100]	@ (8001ca4 <HAL_UART_MspInit+0x31c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c42:	4b18      	ldr	r3, [pc, #96]	@ (8001ca4 <HAL_UART_MspInit+0x31c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8001c48:	4b16      	ldr	r3, [pc, #88]	@ (8001ca4 <HAL_UART_MspInit+0x31c>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001c4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ca4 <HAL_UART_MspInit+0x31c>)
 8001c50:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c54:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c56:	4b13      	ldr	r3, [pc, #76]	@ (8001ca4 <HAL_UART_MspInit+0x31c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001c5c:	4811      	ldr	r0, [pc, #68]	@ (8001ca4 <HAL_UART_MspInit+0x31c>)
 8001c5e:	f000 fb3d 	bl	80022dc <HAL_DMA_Init>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_UART_MspInit+0x2e4>
      Error_Handler();
 8001c68:	f7fe ffa8 	bl	8000bbc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a0d      	ldr	r2, [pc, #52]	@ (8001ca4 <HAL_UART_MspInit+0x31c>)
 8001c70:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c72:	4a0c      	ldr	r2, [pc, #48]	@ (8001ca4 <HAL_UART_MspInit+0x31c>)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	2047      	movs	r0, #71	@ 0x47
 8001c7e:	f000 faf6 	bl	800226e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001c82:	2047      	movs	r0, #71	@ 0x47
 8001c84:	f000 fb0f 	bl	80022a6 <HAL_NVIC_EnableIRQ>
}
 8001c88:	bf00      	nop
 8001c8a:	3738      	adds	r7, #56	@ 0x38
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40011400 	.word	0x40011400
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40020800 	.word	0x40020800
 8001c9c:	2000021c 	.word	0x2000021c
 8001ca0:	40026428 	.word	0x40026428
 8001ca4:	2000027c 	.word	0x2000027c
 8001ca8:	400264a0 	.word	0x400264a0

08001cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cb0:	bf00      	nop
 8001cb2:	e7fd      	b.n	8001cb0 <NMI_Handler+0x4>

08001cb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cb8:	bf00      	nop
 8001cba:	e7fd      	b.n	8001cb8 <HardFault_Handler+0x4>

08001cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc0:	bf00      	nop
 8001cc2:	e7fd      	b.n	8001cc0 <MemManage_Handler+0x4>

08001cc4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc8:	bf00      	nop
 8001cca:	e7fd      	b.n	8001cc8 <BusFault_Handler+0x4>

08001ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd0:	bf00      	nop
 8001cd2:	e7fd      	b.n	8001cd0 <UsageFault_Handler+0x4>

08001cd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d02:	f000 f9b9 	bl	8002078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08e      	sub	sp, #56	@ 0x38
 8001d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d12:	4812      	ldr	r0, [pc, #72]	@ (8001d5c <USART1_IRQHandler+0x50>)
 8001d14:	f001 ff54 	bl	8003bc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  // Обработка IDLE прерывания
  if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {
 8001d18:	4b10      	ldr	r3, [pc, #64]	@ (8001d5c <USART1_IRQHandler+0x50>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0310 	and.w	r3, r3, #16
 8001d22:	2b10      	cmp	r3, #16
 8001d24:	d116      	bne.n	8001d54 <USART1_IRQHandler+0x48>
    __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8001d26:	2300      	movs	r3, #0
 8001d28:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d5c <USART1_IRQHandler+0x50>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d32:	4b0a      	ldr	r3, [pc, #40]	@ (8001d5c <USART1_IRQHandler+0x50>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    // Вызов обработчика защищенного UART

    char debug_msg[50];
    sprintf(debug_msg, "USART1 IDLE прерывание активировано");
 8001d3c:	463b      	mov	r3, r7
 8001d3e:	4908      	ldr	r1, [pc, #32]	@ (8001d60 <USART1_IRQHandler+0x54>)
 8001d40:	4618      	mov	r0, r3
 8001d42:	f003 f953 	bl	8004fec <siprintf>
    monitor_print(debug_msg);
 8001d46:	463b      	mov	r3, r7
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fd05 	bl	8000758 <monitor_print>

    extern secure_uart_handle_t secure_uart1;
    secure_uart_handle_idle(&secure_uart1);
 8001d4e:	4805      	ldr	r0, [pc, #20]	@ (8001d64 <USART1_IRQHandler+0x58>)
 8001d50:	f7ff fa3e 	bl	80011d0 <secure_uart_handle_idle>
  }
  /* USER CODE END USART1_IRQn 1 */
}
 8001d54:	bf00      	nop
 8001d56:	3738      	adds	r7, #56	@ 0x38
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000084 	.word	0x20000084
 8001d60:	08006878 	.word	0x08006878
 8001d64:	200002dc 	.word	0x200002dc

08001d68 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001d6c:	4802      	ldr	r0, [pc, #8]	@ (8001d78 <DMA2_Stream1_IRQHandler+0x10>)
 8001d6e:	f000 fc4d 	bl	800260c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	2000021c 	.word	0x2000021c

08001d7c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001d80:	4802      	ldr	r0, [pc, #8]	@ (8001d8c <DMA2_Stream2_IRQHandler+0x10>)
 8001d82:	f000 fc43 	bl	800260c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	2000015c 	.word	0x2000015c

08001d90 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001d94:	4802      	ldr	r0, [pc, #8]	@ (8001da0 <DMA2_Stream6_IRQHandler+0x10>)
 8001d96:	f000 fc39 	bl	800260c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	2000027c 	.word	0x2000027c

08001da4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001da8:	4802      	ldr	r0, [pc, #8]	@ (8001db4 <DMA2_Stream7_IRQHandler+0x10>)
 8001daa:	f000 fc2f 	bl	800260c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	200001bc 	.word	0x200001bc

08001db8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08e      	sub	sp, #56	@ 0x38
 8001dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001dbe:	4812      	ldr	r0, [pc, #72]	@ (8001e08 <USART6_IRQHandler+0x50>)
 8001dc0:	f001 fefe 	bl	8003bc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
  // Обработка IDLE прерывания
  if(__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE)) {
 8001dc4:	4b10      	ldr	r3, [pc, #64]	@ (8001e08 <USART6_IRQHandler+0x50>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0310 	and.w	r3, r3, #16
 8001dce:	2b10      	cmp	r3, #16
 8001dd0:	d116      	bne.n	8001e00 <USART6_IRQHandler+0x48>
    __HAL_UART_CLEAR_IDLEFLAG(&huart6);
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001e08 <USART6_IRQHandler+0x50>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dde:	4b0a      	ldr	r3, [pc, #40]	@ (8001e08 <USART6_IRQHandler+0x50>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    // Вызов обработчика защищенного UART
    char debug_msg[50];
    sprintf(debug_msg, "USART1 IDLE прерывание активировано");
 8001de8:	463b      	mov	r3, r7
 8001dea:	4908      	ldr	r1, [pc, #32]	@ (8001e0c <USART6_IRQHandler+0x54>)
 8001dec:	4618      	mov	r0, r3
 8001dee:	f003 f8fd 	bl	8004fec <siprintf>
    monitor_print(debug_msg);
 8001df2:	463b      	mov	r3, r7
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7fe fcaf 	bl	8000758 <monitor_print>

    extern secure_uart_handle_t secure_uart6;
    secure_uart_handle_idle(&secure_uart6);
 8001dfa:	4805      	ldr	r0, [pc, #20]	@ (8001e10 <USART6_IRQHandler+0x58>)
 8001dfc:	f7ff f9e8 	bl	80011d0 <secure_uart_handle_idle>
  }
  /* USER CODE END USART6_IRQn 1 */
}
 8001e00:	bf00      	nop
 8001e02:	3738      	adds	r7, #56	@ 0x38
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20000114 	.word	0x20000114
 8001e0c:	08006878 	.word	0x08006878
 8001e10:	20000448 	.word	0x20000448

08001e14 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	e00a      	b.n	8001e3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e26:	f3af 8000 	nop.w
 8001e2a:	4601      	mov	r1, r0
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	60ba      	str	r2, [r7, #8]
 8001e32:	b2ca      	uxtb	r2, r1
 8001e34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	617b      	str	r3, [r7, #20]
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	dbf0      	blt.n	8001e26 <_read+0x12>
  }

  return len;
 8001e44:	687b      	ldr	r3, [r7, #4]
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b086      	sub	sp, #24
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	60f8      	str	r0, [r7, #12]
 8001e56:	60b9      	str	r1, [r7, #8]
 8001e58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	e009      	b.n	8001e74 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	1c5a      	adds	r2, r3, #1
 8001e64:	60ba      	str	r2, [r7, #8]
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe fba7 	bl	80005bc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	3301      	adds	r3, #1
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	dbf1      	blt.n	8001e60 <_write+0x12>
  }
  return len;
 8001e7c:	687b      	ldr	r3, [r7, #4]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <_close>:

int _close(int file)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
 8001ea6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001eae:	605a      	str	r2, [r3, #4]
  return 0;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <_isatty>:

int _isatty(int file)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ec6:	2301      	movs	r3, #1
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
	...

08001ef0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ef8:	4a14      	ldr	r2, [pc, #80]	@ (8001f4c <_sbrk+0x5c>)
 8001efa:	4b15      	ldr	r3, [pc, #84]	@ (8001f50 <_sbrk+0x60>)
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f04:	4b13      	ldr	r3, [pc, #76]	@ (8001f54 <_sbrk+0x64>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d102      	bne.n	8001f12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f0c:	4b11      	ldr	r3, [pc, #68]	@ (8001f54 <_sbrk+0x64>)
 8001f0e:	4a12      	ldr	r2, [pc, #72]	@ (8001f58 <_sbrk+0x68>)
 8001f10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f12:	4b10      	ldr	r3, [pc, #64]	@ (8001f54 <_sbrk+0x64>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4413      	add	r3, r2
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d207      	bcs.n	8001f30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f20:	f003 f950 	bl	80051c4 <__errno>
 8001f24:	4603      	mov	r3, r0
 8001f26:	220c      	movs	r2, #12
 8001f28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2e:	e009      	b.n	8001f44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f30:	4b08      	ldr	r3, [pc, #32]	@ (8001f54 <_sbrk+0x64>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f36:	4b07      	ldr	r3, [pc, #28]	@ (8001f54 <_sbrk+0x64>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	4a05      	ldr	r2, [pc, #20]	@ (8001f54 <_sbrk+0x64>)
 8001f40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f42:	68fb      	ldr	r3, [r7, #12]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20020000 	.word	0x20020000
 8001f50:	00000400 	.word	0x00000400
 8001f54:	200006b4 	.word	0x200006b4
 8001f58:	20000808 	.word	0x20000808

08001f5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f60:	4b06      	ldr	r3, [pc, #24]	@ (8001f7c <SystemInit+0x20>)
 8001f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f66:	4a05      	ldr	r2, [pc, #20]	@ (8001f7c <SystemInit+0x20>)
 8001f68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fb8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f84:	f7ff ffea 	bl	8001f5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f88:	480c      	ldr	r0, [pc, #48]	@ (8001fbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f8a:	490d      	ldr	r1, [pc, #52]	@ (8001fc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f90:	e002      	b.n	8001f98 <LoopCopyDataInit>

08001f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f96:	3304      	adds	r3, #4

08001f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f9c:	d3f9      	bcc.n	8001f92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fa0:	4c0a      	ldr	r4, [pc, #40]	@ (8001fcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fa4:	e001      	b.n	8001faa <LoopFillZerobss>

08001fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fa8:	3204      	adds	r2, #4

08001faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fac:	d3fb      	bcc.n	8001fa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fae:	f003 f90f 	bl	80051d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fb2:	f7fe fbdf 	bl	8000774 <main>
  bx  lr    
 8001fb6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fc0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001fc4:	08006928 	.word	0x08006928
  ldr r2, =_sbss
 8001fc8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001fcc:	20000808 	.word	0x20000808

08001fd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fd0:	e7fe      	b.n	8001fd0 <ADC_IRQHandler>
	...

08001fd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8002014 <HAL_Init+0x40>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a0d      	ldr	r2, [pc, #52]	@ (8002014 <HAL_Init+0x40>)
 8001fde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fe2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8002014 <HAL_Init+0x40>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a0a      	ldr	r2, [pc, #40]	@ (8002014 <HAL_Init+0x40>)
 8001fea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ff0:	4b08      	ldr	r3, [pc, #32]	@ (8002014 <HAL_Init+0x40>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a07      	ldr	r2, [pc, #28]	@ (8002014 <HAL_Init+0x40>)
 8001ff6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ffa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ffc:	2003      	movs	r0, #3
 8001ffe:	f000 f92b 	bl	8002258 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002002:	2000      	movs	r0, #0
 8002004:	f000 f808 	bl	8002018 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002008:	f7ff fc96 	bl	8001938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40023c00 	.word	0x40023c00

08002018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002020:	4b12      	ldr	r3, [pc, #72]	@ (800206c <HAL_InitTick+0x54>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	4b12      	ldr	r3, [pc, #72]	@ (8002070 <HAL_InitTick+0x58>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	4619      	mov	r1, r3
 800202a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800202e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002032:	fbb2 f3f3 	udiv	r3, r2, r3
 8002036:	4618      	mov	r0, r3
 8002038:	f000 f943 	bl	80022c2 <HAL_SYSTICK_Config>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e00e      	b.n	8002064 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b0f      	cmp	r3, #15
 800204a:	d80a      	bhi.n	8002062 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800204c:	2200      	movs	r2, #0
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	f04f 30ff 	mov.w	r0, #4294967295
 8002054:	f000 f90b 	bl	800226e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002058:	4a06      	ldr	r2, [pc, #24]	@ (8002074 <HAL_InitTick+0x5c>)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800205e:	2300      	movs	r3, #0
 8002060:	e000      	b.n	8002064 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
}
 8002064:	4618      	mov	r0, r3
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20000000 	.word	0x20000000
 8002070:	20000008 	.word	0x20000008
 8002074:	20000004 	.word	0x20000004

08002078 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800207c:	4b06      	ldr	r3, [pc, #24]	@ (8002098 <HAL_IncTick+0x20>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	461a      	mov	r2, r3
 8002082:	4b06      	ldr	r3, [pc, #24]	@ (800209c <HAL_IncTick+0x24>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4413      	add	r3, r2
 8002088:	4a04      	ldr	r2, [pc, #16]	@ (800209c <HAL_IncTick+0x24>)
 800208a:	6013      	str	r3, [r2, #0]
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	20000008 	.word	0x20000008
 800209c:	200006b8 	.word	0x200006b8

080020a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return uwTick;
 80020a4:	4b03      	ldr	r3, [pc, #12]	@ (80020b4 <HAL_GetTick+0x14>)
 80020a6:	681b      	ldr	r3, [r3, #0]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	200006b8 	.word	0x200006b8

080020b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020c8:	4b0c      	ldr	r3, [pc, #48]	@ (80020fc <__NVIC_SetPriorityGrouping+0x44>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020d4:	4013      	ands	r3, r2
 80020d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ea:	4a04      	ldr	r2, [pc, #16]	@ (80020fc <__NVIC_SetPriorityGrouping+0x44>)
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	60d3      	str	r3, [r2, #12]
}
 80020f0:	bf00      	nop
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002104:	4b04      	ldr	r3, [pc, #16]	@ (8002118 <__NVIC_GetPriorityGrouping+0x18>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	0a1b      	lsrs	r3, r3, #8
 800210a:	f003 0307 	and.w	r3, r3, #7
}
 800210e:	4618      	mov	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212a:	2b00      	cmp	r3, #0
 800212c:	db0b      	blt.n	8002146 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800212e:	79fb      	ldrb	r3, [r7, #7]
 8002130:	f003 021f 	and.w	r2, r3, #31
 8002134:	4907      	ldr	r1, [pc, #28]	@ (8002154 <__NVIC_EnableIRQ+0x38>)
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	095b      	lsrs	r3, r3, #5
 800213c:	2001      	movs	r0, #1
 800213e:	fa00 f202 	lsl.w	r2, r0, r2
 8002142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	e000e100 	.word	0xe000e100

08002158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	6039      	str	r1, [r7, #0]
 8002162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002168:	2b00      	cmp	r3, #0
 800216a:	db0a      	blt.n	8002182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	b2da      	uxtb	r2, r3
 8002170:	490c      	ldr	r1, [pc, #48]	@ (80021a4 <__NVIC_SetPriority+0x4c>)
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	0112      	lsls	r2, r2, #4
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	440b      	add	r3, r1
 800217c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002180:	e00a      	b.n	8002198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	b2da      	uxtb	r2, r3
 8002186:	4908      	ldr	r1, [pc, #32]	@ (80021a8 <__NVIC_SetPriority+0x50>)
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	3b04      	subs	r3, #4
 8002190:	0112      	lsls	r2, r2, #4
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	440b      	add	r3, r1
 8002196:	761a      	strb	r2, [r3, #24]
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000e100 	.word	0xe000e100
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b089      	sub	sp, #36	@ 0x24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f1c3 0307 	rsb	r3, r3, #7
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	bf28      	it	cs
 80021ca:	2304      	movcs	r3, #4
 80021cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3304      	adds	r3, #4
 80021d2:	2b06      	cmp	r3, #6
 80021d4:	d902      	bls.n	80021dc <NVIC_EncodePriority+0x30>
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3b03      	subs	r3, #3
 80021da:	e000      	b.n	80021de <NVIC_EncodePriority+0x32>
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e0:	f04f 32ff 	mov.w	r2, #4294967295
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43da      	mvns	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	401a      	ands	r2, r3
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f4:	f04f 31ff 	mov.w	r1, #4294967295
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	fa01 f303 	lsl.w	r3, r1, r3
 80021fe:	43d9      	mvns	r1, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002204:	4313      	orrs	r3, r2
         );
}
 8002206:	4618      	mov	r0, r3
 8002208:	3724      	adds	r7, #36	@ 0x24
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
	...

08002214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3b01      	subs	r3, #1
 8002220:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002224:	d301      	bcc.n	800222a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002226:	2301      	movs	r3, #1
 8002228:	e00f      	b.n	800224a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800222a:	4a0a      	ldr	r2, [pc, #40]	@ (8002254 <SysTick_Config+0x40>)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3b01      	subs	r3, #1
 8002230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002232:	210f      	movs	r1, #15
 8002234:	f04f 30ff 	mov.w	r0, #4294967295
 8002238:	f7ff ff8e 	bl	8002158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800223c:	4b05      	ldr	r3, [pc, #20]	@ (8002254 <SysTick_Config+0x40>)
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002242:	4b04      	ldr	r3, [pc, #16]	@ (8002254 <SysTick_Config+0x40>)
 8002244:	2207      	movs	r2, #7
 8002246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	e000e010 	.word	0xe000e010

08002258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff ff29 	bl	80020b8 <__NVIC_SetPriorityGrouping>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800226e:	b580      	push	{r7, lr}
 8002270:	b086      	sub	sp, #24
 8002272:	af00      	add	r7, sp, #0
 8002274:	4603      	mov	r3, r0
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	607a      	str	r2, [r7, #4]
 800227a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002280:	f7ff ff3e 	bl	8002100 <__NVIC_GetPriorityGrouping>
 8002284:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	68b9      	ldr	r1, [r7, #8]
 800228a:	6978      	ldr	r0, [r7, #20]
 800228c:	f7ff ff8e 	bl	80021ac <NVIC_EncodePriority>
 8002290:	4602      	mov	r2, r0
 8002292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002296:	4611      	mov	r1, r2
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff ff5d 	bl	8002158 <__NVIC_SetPriority>
}
 800229e:	bf00      	nop
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	4603      	mov	r3, r0
 80022ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ff31 	bl	800211c <__NVIC_EnableIRQ>
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7ff ffa2 	bl	8002214 <SysTick_Config>
 80022d0:	4603      	mov	r3, r0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
	...

080022dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022e8:	f7ff feda 	bl	80020a0 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e099      	b.n	800242c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2202      	movs	r2, #2
 80022fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0201 	bic.w	r2, r2, #1
 8002316:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002318:	e00f      	b.n	800233a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800231a:	f7ff fec1 	bl	80020a0 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b05      	cmp	r3, #5
 8002326:	d908      	bls.n	800233a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2220      	movs	r2, #32
 800232c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2203      	movs	r2, #3
 8002332:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e078      	b.n	800242c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1e8      	bne.n	800231a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	4b38      	ldr	r3, [pc, #224]	@ (8002434 <HAL_DMA_Init+0x158>)
 8002354:	4013      	ands	r3, r2
 8002356:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002366:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002372:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800237e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	4313      	orrs	r3, r2
 800238a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002390:	2b04      	cmp	r3, #4
 8002392:	d107      	bne.n	80023a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239c:	4313      	orrs	r3, r2
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	f023 0307 	bic.w	r3, r3, #7
 80023ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d117      	bne.n	80023fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00e      	beq.n	80023fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 fb0d 	bl	8002a00 <DMA_CheckFifoParam>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d008      	beq.n	80023fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2240      	movs	r2, #64	@ 0x40
 80023f0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80023fa:	2301      	movs	r3, #1
 80023fc:	e016      	b.n	800242c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 fac4 	bl	8002994 <DMA_CalcBaseAndBitshift>
 800240c:	4603      	mov	r3, r0
 800240e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002414:	223f      	movs	r2, #63	@ 0x3f
 8002416:	409a      	lsls	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	f010803f 	.word	0xf010803f

08002438 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
 8002444:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002446:	2300      	movs	r3, #0
 8002448:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002456:	2b01      	cmp	r3, #1
 8002458:	d101      	bne.n	800245e <HAL_DMA_Start_IT+0x26>
 800245a:	2302      	movs	r3, #2
 800245c:	e040      	b.n	80024e0 <HAL_DMA_Start_IT+0xa8>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b01      	cmp	r3, #1
 8002470:	d12f      	bne.n	80024d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2202      	movs	r2, #2
 8002476:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	68b9      	ldr	r1, [r7, #8]
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f000 fa56 	bl	8002938 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002490:	223f      	movs	r2, #63	@ 0x3f
 8002492:	409a      	lsls	r2, r3
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0216 	orr.w	r2, r2, #22
 80024a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d007      	beq.n	80024c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0208 	orr.w	r2, r2, #8
 80024be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0201 	orr.w	r2, r2, #1
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	e005      	b.n	80024de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024da:	2302      	movs	r3, #2
 80024dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024de:	7dfb      	ldrb	r3, [r7, #23]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024f6:	f7ff fdd3 	bl	80020a0 <HAL_GetTick>
 80024fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d008      	beq.n	800251a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2280      	movs	r2, #128	@ 0x80
 800250c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e052      	b.n	80025c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0216 	bic.w	r2, r2, #22
 8002528:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695a      	ldr	r2, [r3, #20]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002538:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253e:	2b00      	cmp	r3, #0
 8002540:	d103      	bne.n	800254a <HAL_DMA_Abort+0x62>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002546:	2b00      	cmp	r3, #0
 8002548:	d007      	beq.n	800255a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0208 	bic.w	r2, r2, #8
 8002558:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0201 	bic.w	r2, r2, #1
 8002568:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800256a:	e013      	b.n	8002594 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800256c:	f7ff fd98 	bl	80020a0 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b05      	cmp	r3, #5
 8002578:	d90c      	bls.n	8002594 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2220      	movs	r2, #32
 800257e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2203      	movs	r2, #3
 8002584:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e015      	b.n	80025c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1e4      	bne.n	800256c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a6:	223f      	movs	r2, #63	@ 0x3f
 80025a8:	409a      	lsls	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d004      	beq.n	80025e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2280      	movs	r2, #128	@ 0x80
 80025e0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e00c      	b.n	8002600 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2205      	movs	r2, #5
 80025ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0201 	bic.w	r2, r2, #1
 80025fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002618:	4b8e      	ldr	r3, [pc, #568]	@ (8002854 <HAL_DMA_IRQHandler+0x248>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a8e      	ldr	r2, [pc, #568]	@ (8002858 <HAL_DMA_IRQHandler+0x24c>)
 800261e:	fba2 2303 	umull	r2, r3, r2, r3
 8002622:	0a9b      	lsrs	r3, r3, #10
 8002624:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800262a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002636:	2208      	movs	r2, #8
 8002638:	409a      	lsls	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	4013      	ands	r3, r2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d01a      	beq.n	8002678 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	d013      	beq.n	8002678 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0204 	bic.w	r2, r2, #4
 800265e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002664:	2208      	movs	r2, #8
 8002666:	409a      	lsls	r2, r3
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002670:	f043 0201 	orr.w	r2, r3, #1
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267c:	2201      	movs	r2, #1
 800267e:	409a      	lsls	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4013      	ands	r3, r2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d012      	beq.n	80026ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00b      	beq.n	80026ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269a:	2201      	movs	r2, #1
 800269c:	409a      	lsls	r2, r3
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a6:	f043 0202 	orr.w	r2, r3, #2
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b2:	2204      	movs	r2, #4
 80026b4:	409a      	lsls	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4013      	ands	r3, r2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d012      	beq.n	80026e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00b      	beq.n	80026e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d0:	2204      	movs	r2, #4
 80026d2:	409a      	lsls	r2, r3
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026dc:	f043 0204 	orr.w	r2, r3, #4
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e8:	2210      	movs	r2, #16
 80026ea:	409a      	lsls	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d043      	beq.n	800277c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d03c      	beq.n	800277c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002706:	2210      	movs	r2, #16
 8002708:	409a      	lsls	r2, r3
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d018      	beq.n	800274e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d108      	bne.n	800273c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272e:	2b00      	cmp	r3, #0
 8002730:	d024      	beq.n	800277c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	4798      	blx	r3
 800273a:	e01f      	b.n	800277c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002740:	2b00      	cmp	r3, #0
 8002742:	d01b      	beq.n	800277c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	4798      	blx	r3
 800274c:	e016      	b.n	800277c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002758:	2b00      	cmp	r3, #0
 800275a:	d107      	bne.n	800276c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 0208 	bic.w	r2, r2, #8
 800276a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002780:	2220      	movs	r2, #32
 8002782:	409a      	lsls	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4013      	ands	r3, r2
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 808f 	beq.w	80028ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0310 	and.w	r3, r3, #16
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 8087 	beq.w	80028ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027a2:	2220      	movs	r2, #32
 80027a4:	409a      	lsls	r2, r3
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b05      	cmp	r3, #5
 80027b4:	d136      	bne.n	8002824 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0216 	bic.w	r2, r2, #22
 80027c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	695a      	ldr	r2, [r3, #20]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d103      	bne.n	80027e6 <HAL_DMA_IRQHandler+0x1da>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d007      	beq.n	80027f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0208 	bic.w	r2, r2, #8
 80027f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027fa:	223f      	movs	r2, #63	@ 0x3f
 80027fc:	409a      	lsls	r2, r3
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002816:	2b00      	cmp	r3, #0
 8002818:	d07e      	beq.n	8002918 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	4798      	blx	r3
        }
        return;
 8002822:	e079      	b.n	8002918 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d01d      	beq.n	800286e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10d      	bne.n	800285c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002844:	2b00      	cmp	r3, #0
 8002846:	d031      	beq.n	80028ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	4798      	blx	r3
 8002850:	e02c      	b.n	80028ac <HAL_DMA_IRQHandler+0x2a0>
 8002852:	bf00      	nop
 8002854:	20000000 	.word	0x20000000
 8002858:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002860:	2b00      	cmp	r3, #0
 8002862:	d023      	beq.n	80028ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	4798      	blx	r3
 800286c:	e01e      	b.n	80028ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10f      	bne.n	800289c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0210 	bic.w	r2, r2, #16
 800288a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d032      	beq.n	800291a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d022      	beq.n	8002906 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2205      	movs	r2, #5
 80028c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0201 	bic.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	3301      	adds	r3, #1
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d307      	bcc.n	80028f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f2      	bne.n	80028d8 <HAL_DMA_IRQHandler+0x2cc>
 80028f2:	e000      	b.n	80028f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80028f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800290a:	2b00      	cmp	r3, #0
 800290c:	d005      	beq.n	800291a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	4798      	blx	r3
 8002916:	e000      	b.n	800291a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002918:	bf00      	nop
    }
  }
}
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800292c:	4618      	mov	r0, r3
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
 8002944:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002954:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	2b40      	cmp	r3, #64	@ 0x40
 8002964:	d108      	bne.n	8002978 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002976:	e007      	b.n	8002988 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	60da      	str	r2, [r3, #12]
}
 8002988:	bf00      	nop
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	3b10      	subs	r3, #16
 80029a4:	4a14      	ldr	r2, [pc, #80]	@ (80029f8 <DMA_CalcBaseAndBitshift+0x64>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	091b      	lsrs	r3, r3, #4
 80029ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029ae:	4a13      	ldr	r2, [pc, #76]	@ (80029fc <DMA_CalcBaseAndBitshift+0x68>)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4413      	add	r3, r2
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	461a      	mov	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d909      	bls.n	80029d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029ca:	f023 0303 	bic.w	r3, r3, #3
 80029ce:	1d1a      	adds	r2, r3, #4
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	659a      	str	r2, [r3, #88]	@ 0x58
 80029d4:	e007      	b.n	80029e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029de:	f023 0303 	bic.w	r3, r3, #3
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	aaaaaaab 	.word	0xaaaaaaab
 80029fc:	080068dc 	.word	0x080068dc

08002a00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d11f      	bne.n	8002a5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2b03      	cmp	r3, #3
 8002a1e:	d856      	bhi.n	8002ace <DMA_CheckFifoParam+0xce>
 8002a20:	a201      	add	r2, pc, #4	@ (adr r2, 8002a28 <DMA_CheckFifoParam+0x28>)
 8002a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a26:	bf00      	nop
 8002a28:	08002a39 	.word	0x08002a39
 8002a2c:	08002a4b 	.word	0x08002a4b
 8002a30:	08002a39 	.word	0x08002a39
 8002a34:	08002acf 	.word	0x08002acf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d046      	beq.n	8002ad2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a48:	e043      	b.n	8002ad2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a52:	d140      	bne.n	8002ad6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a58:	e03d      	b.n	8002ad6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a62:	d121      	bne.n	8002aa8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	d837      	bhi.n	8002ada <DMA_CheckFifoParam+0xda>
 8002a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8002a70 <DMA_CheckFifoParam+0x70>)
 8002a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a70:	08002a81 	.word	0x08002a81
 8002a74:	08002a87 	.word	0x08002a87
 8002a78:	08002a81 	.word	0x08002a81
 8002a7c:	08002a99 	.word	0x08002a99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	73fb      	strb	r3, [r7, #15]
      break;
 8002a84:	e030      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d025      	beq.n	8002ade <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a96:	e022      	b.n	8002ade <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002aa0:	d11f      	bne.n	8002ae2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002aa6:	e01c      	b.n	8002ae2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d903      	bls.n	8002ab6 <DMA_CheckFifoParam+0xb6>
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d003      	beq.n	8002abc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ab4:	e018      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	73fb      	strb	r3, [r7, #15]
      break;
 8002aba:	e015      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00e      	beq.n	8002ae6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
      break;
 8002acc:	e00b      	b.n	8002ae6 <DMA_CheckFifoParam+0xe6>
      break;
 8002ace:	bf00      	nop
 8002ad0:	e00a      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ad2:	bf00      	nop
 8002ad4:	e008      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ad6:	bf00      	nop
 8002ad8:	e006      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ada:	bf00      	nop
 8002adc:	e004      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ade:	bf00      	nop
 8002ae0:	e002      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ae2:	bf00      	nop
 8002ae4:	e000      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ae6:	bf00      	nop
    }
  } 
  
  return status; 
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop

08002af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b089      	sub	sp, #36	@ 0x24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61fb      	str	r3, [r7, #28]
 8002b12:	e159      	b.n	8002dc8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b14:	2201      	movs	r2, #1
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	4013      	ands	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	f040 8148 	bne.w	8002dc2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d005      	beq.n	8002b4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d130      	bne.n	8002bac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	2203      	movs	r2, #3
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b80:	2201      	movs	r2, #1
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	091b      	lsrs	r3, r3, #4
 8002b96:	f003 0201 	and.w	r2, r3, #1
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	2b03      	cmp	r3, #3
 8002bb6:	d017      	beq.n	8002be8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f003 0303 	and.w	r3, r3, #3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d123      	bne.n	8002c3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	08da      	lsrs	r2, r3, #3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3208      	adds	r2, #8
 8002bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	220f      	movs	r2, #15
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	43db      	mvns	r3, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4013      	ands	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	691a      	ldr	r2, [r3, #16]
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	08da      	lsrs	r2, r3, #3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	3208      	adds	r2, #8
 8002c36:	69b9      	ldr	r1, [r7, #24]
 8002c38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	2203      	movs	r2, #3
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4013      	ands	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 0203 	and.w	r2, r3, #3
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 80a2 	beq.w	8002dc2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	4b57      	ldr	r3, [pc, #348]	@ (8002de0 <HAL_GPIO_Init+0x2e8>)
 8002c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c86:	4a56      	ldr	r2, [pc, #344]	@ (8002de0 <HAL_GPIO_Init+0x2e8>)
 8002c88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c8e:	4b54      	ldr	r3, [pc, #336]	@ (8002de0 <HAL_GPIO_Init+0x2e8>)
 8002c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c9a:	4a52      	ldr	r2, [pc, #328]	@ (8002de4 <HAL_GPIO_Init+0x2ec>)
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	089b      	lsrs	r3, r3, #2
 8002ca0:	3302      	adds	r3, #2
 8002ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	220f      	movs	r2, #15
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a49      	ldr	r2, [pc, #292]	@ (8002de8 <HAL_GPIO_Init+0x2f0>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d019      	beq.n	8002cfa <HAL_GPIO_Init+0x202>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a48      	ldr	r2, [pc, #288]	@ (8002dec <HAL_GPIO_Init+0x2f4>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d013      	beq.n	8002cf6 <HAL_GPIO_Init+0x1fe>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a47      	ldr	r2, [pc, #284]	@ (8002df0 <HAL_GPIO_Init+0x2f8>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d00d      	beq.n	8002cf2 <HAL_GPIO_Init+0x1fa>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a46      	ldr	r2, [pc, #280]	@ (8002df4 <HAL_GPIO_Init+0x2fc>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d007      	beq.n	8002cee <HAL_GPIO_Init+0x1f6>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a45      	ldr	r2, [pc, #276]	@ (8002df8 <HAL_GPIO_Init+0x300>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d101      	bne.n	8002cea <HAL_GPIO_Init+0x1f2>
 8002ce6:	2304      	movs	r3, #4
 8002ce8:	e008      	b.n	8002cfc <HAL_GPIO_Init+0x204>
 8002cea:	2307      	movs	r3, #7
 8002cec:	e006      	b.n	8002cfc <HAL_GPIO_Init+0x204>
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e004      	b.n	8002cfc <HAL_GPIO_Init+0x204>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e002      	b.n	8002cfc <HAL_GPIO_Init+0x204>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <HAL_GPIO_Init+0x204>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	69fa      	ldr	r2, [r7, #28]
 8002cfe:	f002 0203 	and.w	r2, r2, #3
 8002d02:	0092      	lsls	r2, r2, #2
 8002d04:	4093      	lsls	r3, r2
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d0c:	4935      	ldr	r1, [pc, #212]	@ (8002de4 <HAL_GPIO_Init+0x2ec>)
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	089b      	lsrs	r3, r3, #2
 8002d12:	3302      	adds	r3, #2
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d1a:	4b38      	ldr	r3, [pc, #224]	@ (8002dfc <HAL_GPIO_Init+0x304>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	43db      	mvns	r3, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4013      	ands	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d3e:	4a2f      	ldr	r2, [pc, #188]	@ (8002dfc <HAL_GPIO_Init+0x304>)
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d44:	4b2d      	ldr	r3, [pc, #180]	@ (8002dfc <HAL_GPIO_Init+0x304>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4013      	ands	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d68:	4a24      	ldr	r2, [pc, #144]	@ (8002dfc <HAL_GPIO_Init+0x304>)
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d6e:	4b23      	ldr	r3, [pc, #140]	@ (8002dfc <HAL_GPIO_Init+0x304>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	43db      	mvns	r3, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d92:	4a1a      	ldr	r2, [pc, #104]	@ (8002dfc <HAL_GPIO_Init+0x304>)
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d98:	4b18      	ldr	r3, [pc, #96]	@ (8002dfc <HAL_GPIO_Init+0x304>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	43db      	mvns	r3, r3
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4013      	ands	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dbc:	4a0f      	ldr	r2, [pc, #60]	@ (8002dfc <HAL_GPIO_Init+0x304>)
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	61fb      	str	r3, [r7, #28]
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	2b0f      	cmp	r3, #15
 8002dcc:	f67f aea2 	bls.w	8002b14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	bf00      	nop
 8002dd4:	3724      	adds	r7, #36	@ 0x24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40023800 	.word	0x40023800
 8002de4:	40013800 	.word	0x40013800
 8002de8:	40020000 	.word	0x40020000
 8002dec:	40020400 	.word	0x40020400
 8002df0:	40020800 	.word	0x40020800
 8002df4:	40020c00 	.word	0x40020c00
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	40013c00 	.word	0x40013c00

08002e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	807b      	strh	r3, [r7, #2]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e10:	787b      	ldrb	r3, [r7, #1]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e16:	887a      	ldrh	r2, [r7, #2]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e1c:	e003      	b.n	8002e26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e1e:	887b      	ldrh	r3, [r7, #2]
 8002e20:	041a      	lsls	r2, r3, #16
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	619a      	str	r2, [r3, #24]
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b085      	sub	sp, #20
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e44:	887a      	ldrh	r2, [r7, #2]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	041a      	lsls	r2, r3, #16
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	43d9      	mvns	r1, r3
 8002e50:	887b      	ldrh	r3, [r7, #2]
 8002e52:	400b      	ands	r3, r1
 8002e54:	431a      	orrs	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	619a      	str	r2, [r3, #24]
}
 8002e5a:	bf00      	nop
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
	...

08002e68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e267      	b.n	800334a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d075      	beq.n	8002f72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e86:	4b88      	ldr	r3, [pc, #544]	@ (80030a8 <HAL_RCC_OscConfig+0x240>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d00c      	beq.n	8002eac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e92:	4b85      	ldr	r3, [pc, #532]	@ (80030a8 <HAL_RCC_OscConfig+0x240>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	d112      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e9e:	4b82      	ldr	r3, [pc, #520]	@ (80030a8 <HAL_RCC_OscConfig+0x240>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ea6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002eaa:	d10b      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eac:	4b7e      	ldr	r3, [pc, #504]	@ (80030a8 <HAL_RCC_OscConfig+0x240>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d05b      	beq.n	8002f70 <HAL_RCC_OscConfig+0x108>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d157      	bne.n	8002f70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e242      	b.n	800334a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ecc:	d106      	bne.n	8002edc <HAL_RCC_OscConfig+0x74>
 8002ece:	4b76      	ldr	r3, [pc, #472]	@ (80030a8 <HAL_RCC_OscConfig+0x240>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a75      	ldr	r2, [pc, #468]	@ (80030a8 <HAL_RCC_OscConfig+0x240>)
 8002ed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	e01d      	b.n	8002f18 <HAL_RCC_OscConfig+0xb0>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ee4:	d10c      	bne.n	8002f00 <HAL_RCC_OscConfig+0x98>
 8002ee6:	4b70      	ldr	r3, [pc, #448]	@ (80030a8 <HAL_RCC_OscConfig+0x240>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a6f      	ldr	r2, [pc, #444]	@ (80030a8 <HAL_RCC_OscConfig+0x240>)
 8002eec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	4b6d      	ldr	r3, [pc, #436]	@ (80030a8 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a6c      	ldr	r2, [pc, #432]	@ (80030a8 <HAL_RCC_OscConfig+0x240>)
 8002ef8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	e00b      	b.n	8002f18 <HAL_RCC_OscConfig+0xb0>
 8002f00:	4b69      	ldr	r3, [pc, #420]	@ (80030a8 <HAL_RCC_OscConfig+0x240>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a68      	ldr	r2, [pc, #416]	@ (80030a8 <HAL_RCC_OscConfig+0x240>)
 8002f06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f0a:	6013      	str	r3, [r2, #0]
 8002f0c:	4b66      	ldr	r3, [pc, #408]	@ (80030a8 <HAL_RCC_OscConfig+0x240>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a65      	ldr	r2, [pc, #404]	@ (80030a8 <HAL_RCC_OscConfig+0x240>)
 8002f12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d013      	beq.n	8002f48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f20:	f7ff f8be 	bl	80020a0 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f28:	f7ff f8ba 	bl	80020a0 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b64      	cmp	r3, #100	@ 0x64
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e207      	b.n	800334a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3a:	4b5b      	ldr	r3, [pc, #364]	@ (80030a8 <HAL_RCC_OscConfig+0x240>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0f0      	beq.n	8002f28 <HAL_RCC_OscConfig+0xc0>
 8002f46:	e014      	b.n	8002f72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f48:	f7ff f8aa 	bl	80020a0 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f50:	f7ff f8a6 	bl	80020a0 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b64      	cmp	r3, #100	@ 0x64
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e1f3      	b.n	800334a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f62:	4b51      	ldr	r3, [pc, #324]	@ (80030a8 <HAL_RCC_OscConfig+0x240>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f0      	bne.n	8002f50 <HAL_RCC_OscConfig+0xe8>
 8002f6e:	e000      	b.n	8002f72 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d063      	beq.n	8003046 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f7e:	4b4a      	ldr	r3, [pc, #296]	@ (80030a8 <HAL_RCC_OscConfig+0x240>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 030c 	and.w	r3, r3, #12
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00b      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f8a:	4b47      	ldr	r3, [pc, #284]	@ (80030a8 <HAL_RCC_OscConfig+0x240>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	d11c      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f96:	4b44      	ldr	r3, [pc, #272]	@ (80030a8 <HAL_RCC_OscConfig+0x240>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d116      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fa2:	4b41      	ldr	r3, [pc, #260]	@ (80030a8 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d005      	beq.n	8002fba <HAL_RCC_OscConfig+0x152>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d001      	beq.n	8002fba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e1c7      	b.n	800334a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fba:	4b3b      	ldr	r3, [pc, #236]	@ (80030a8 <HAL_RCC_OscConfig+0x240>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	4937      	ldr	r1, [pc, #220]	@ (80030a8 <HAL_RCC_OscConfig+0x240>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fce:	e03a      	b.n	8003046 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d020      	beq.n	800301a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fd8:	4b34      	ldr	r3, [pc, #208]	@ (80030ac <HAL_RCC_OscConfig+0x244>)
 8002fda:	2201      	movs	r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fde:	f7ff f85f 	bl	80020a0 <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fe6:	f7ff f85b 	bl	80020a0 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e1a8      	b.n	800334a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff8:	4b2b      	ldr	r3, [pc, #172]	@ (80030a8 <HAL_RCC_OscConfig+0x240>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0f0      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003004:	4b28      	ldr	r3, [pc, #160]	@ (80030a8 <HAL_RCC_OscConfig+0x240>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	4925      	ldr	r1, [pc, #148]	@ (80030a8 <HAL_RCC_OscConfig+0x240>)
 8003014:	4313      	orrs	r3, r2
 8003016:	600b      	str	r3, [r1, #0]
 8003018:	e015      	b.n	8003046 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800301a:	4b24      	ldr	r3, [pc, #144]	@ (80030ac <HAL_RCC_OscConfig+0x244>)
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003020:	f7ff f83e 	bl	80020a0 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003028:	f7ff f83a 	bl	80020a0 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e187      	b.n	800334a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800303a:	4b1b      	ldr	r3, [pc, #108]	@ (80030a8 <HAL_RCC_OscConfig+0x240>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f0      	bne.n	8003028 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	d036      	beq.n	80030c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d016      	beq.n	8003088 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800305a:	4b15      	ldr	r3, [pc, #84]	@ (80030b0 <HAL_RCC_OscConfig+0x248>)
 800305c:	2201      	movs	r2, #1
 800305e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003060:	f7ff f81e 	bl	80020a0 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003068:	f7ff f81a 	bl	80020a0 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e167      	b.n	800334a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800307a:	4b0b      	ldr	r3, [pc, #44]	@ (80030a8 <HAL_RCC_OscConfig+0x240>)
 800307c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0f0      	beq.n	8003068 <HAL_RCC_OscConfig+0x200>
 8003086:	e01b      	b.n	80030c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003088:	4b09      	ldr	r3, [pc, #36]	@ (80030b0 <HAL_RCC_OscConfig+0x248>)
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800308e:	f7ff f807 	bl	80020a0 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003094:	e00e      	b.n	80030b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003096:	f7ff f803 	bl	80020a0 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d907      	bls.n	80030b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e150      	b.n	800334a <HAL_RCC_OscConfig+0x4e2>
 80030a8:	40023800 	.word	0x40023800
 80030ac:	42470000 	.word	0x42470000
 80030b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b4:	4b88      	ldr	r3, [pc, #544]	@ (80032d8 <HAL_RCC_OscConfig+0x470>)
 80030b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1ea      	bne.n	8003096 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 8097 	beq.w	80031fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ce:	2300      	movs	r3, #0
 80030d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030d2:	4b81      	ldr	r3, [pc, #516]	@ (80032d8 <HAL_RCC_OscConfig+0x470>)
 80030d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10f      	bne.n	80030fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030de:	2300      	movs	r3, #0
 80030e0:	60bb      	str	r3, [r7, #8]
 80030e2:	4b7d      	ldr	r3, [pc, #500]	@ (80032d8 <HAL_RCC_OscConfig+0x470>)
 80030e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e6:	4a7c      	ldr	r2, [pc, #496]	@ (80032d8 <HAL_RCC_OscConfig+0x470>)
 80030e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80030ee:	4b7a      	ldr	r3, [pc, #488]	@ (80032d8 <HAL_RCC_OscConfig+0x470>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030f6:	60bb      	str	r3, [r7, #8]
 80030f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030fa:	2301      	movs	r3, #1
 80030fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030fe:	4b77      	ldr	r3, [pc, #476]	@ (80032dc <HAL_RCC_OscConfig+0x474>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003106:	2b00      	cmp	r3, #0
 8003108:	d118      	bne.n	800313c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800310a:	4b74      	ldr	r3, [pc, #464]	@ (80032dc <HAL_RCC_OscConfig+0x474>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a73      	ldr	r2, [pc, #460]	@ (80032dc <HAL_RCC_OscConfig+0x474>)
 8003110:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003114:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003116:	f7fe ffc3 	bl	80020a0 <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800311e:	f7fe ffbf 	bl	80020a0 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e10c      	b.n	800334a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003130:	4b6a      	ldr	r3, [pc, #424]	@ (80032dc <HAL_RCC_OscConfig+0x474>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0f0      	beq.n	800311e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d106      	bne.n	8003152 <HAL_RCC_OscConfig+0x2ea>
 8003144:	4b64      	ldr	r3, [pc, #400]	@ (80032d8 <HAL_RCC_OscConfig+0x470>)
 8003146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003148:	4a63      	ldr	r2, [pc, #396]	@ (80032d8 <HAL_RCC_OscConfig+0x470>)
 800314a:	f043 0301 	orr.w	r3, r3, #1
 800314e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003150:	e01c      	b.n	800318c <HAL_RCC_OscConfig+0x324>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	2b05      	cmp	r3, #5
 8003158:	d10c      	bne.n	8003174 <HAL_RCC_OscConfig+0x30c>
 800315a:	4b5f      	ldr	r3, [pc, #380]	@ (80032d8 <HAL_RCC_OscConfig+0x470>)
 800315c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800315e:	4a5e      	ldr	r2, [pc, #376]	@ (80032d8 <HAL_RCC_OscConfig+0x470>)
 8003160:	f043 0304 	orr.w	r3, r3, #4
 8003164:	6713      	str	r3, [r2, #112]	@ 0x70
 8003166:	4b5c      	ldr	r3, [pc, #368]	@ (80032d8 <HAL_RCC_OscConfig+0x470>)
 8003168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800316a:	4a5b      	ldr	r2, [pc, #364]	@ (80032d8 <HAL_RCC_OscConfig+0x470>)
 800316c:	f043 0301 	orr.w	r3, r3, #1
 8003170:	6713      	str	r3, [r2, #112]	@ 0x70
 8003172:	e00b      	b.n	800318c <HAL_RCC_OscConfig+0x324>
 8003174:	4b58      	ldr	r3, [pc, #352]	@ (80032d8 <HAL_RCC_OscConfig+0x470>)
 8003176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003178:	4a57      	ldr	r2, [pc, #348]	@ (80032d8 <HAL_RCC_OscConfig+0x470>)
 800317a:	f023 0301 	bic.w	r3, r3, #1
 800317e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003180:	4b55      	ldr	r3, [pc, #340]	@ (80032d8 <HAL_RCC_OscConfig+0x470>)
 8003182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003184:	4a54      	ldr	r2, [pc, #336]	@ (80032d8 <HAL_RCC_OscConfig+0x470>)
 8003186:	f023 0304 	bic.w	r3, r3, #4
 800318a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d015      	beq.n	80031c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003194:	f7fe ff84 	bl	80020a0 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800319a:	e00a      	b.n	80031b2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800319c:	f7fe ff80 	bl	80020a0 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e0cb      	b.n	800334a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b2:	4b49      	ldr	r3, [pc, #292]	@ (80032d8 <HAL_RCC_OscConfig+0x470>)
 80031b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0ee      	beq.n	800319c <HAL_RCC_OscConfig+0x334>
 80031be:	e014      	b.n	80031ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c0:	f7fe ff6e 	bl	80020a0 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031c6:	e00a      	b.n	80031de <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031c8:	f7fe ff6a 	bl	80020a0 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e0b5      	b.n	800334a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031de:	4b3e      	ldr	r3, [pc, #248]	@ (80032d8 <HAL_RCC_OscConfig+0x470>)
 80031e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1ee      	bne.n	80031c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031ea:	7dfb      	ldrb	r3, [r7, #23]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d105      	bne.n	80031fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031f0:	4b39      	ldr	r3, [pc, #228]	@ (80032d8 <HAL_RCC_OscConfig+0x470>)
 80031f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f4:	4a38      	ldr	r2, [pc, #224]	@ (80032d8 <HAL_RCC_OscConfig+0x470>)
 80031f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 80a1 	beq.w	8003348 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003206:	4b34      	ldr	r3, [pc, #208]	@ (80032d8 <HAL_RCC_OscConfig+0x470>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 030c 	and.w	r3, r3, #12
 800320e:	2b08      	cmp	r3, #8
 8003210:	d05c      	beq.n	80032cc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d141      	bne.n	800329e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800321a:	4b31      	ldr	r3, [pc, #196]	@ (80032e0 <HAL_RCC_OscConfig+0x478>)
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003220:	f7fe ff3e 	bl	80020a0 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003228:	f7fe ff3a 	bl	80020a0 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e087      	b.n	800334a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800323a:	4b27      	ldr	r3, [pc, #156]	@ (80032d8 <HAL_RCC_OscConfig+0x470>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f0      	bne.n	8003228 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69da      	ldr	r2, [r3, #28]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003254:	019b      	lsls	r3, r3, #6
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800325c:	085b      	lsrs	r3, r3, #1
 800325e:	3b01      	subs	r3, #1
 8003260:	041b      	lsls	r3, r3, #16
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003268:	061b      	lsls	r3, r3, #24
 800326a:	491b      	ldr	r1, [pc, #108]	@ (80032d8 <HAL_RCC_OscConfig+0x470>)
 800326c:	4313      	orrs	r3, r2
 800326e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003270:	4b1b      	ldr	r3, [pc, #108]	@ (80032e0 <HAL_RCC_OscConfig+0x478>)
 8003272:	2201      	movs	r2, #1
 8003274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003276:	f7fe ff13 	bl	80020a0 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800327e:	f7fe ff0f 	bl	80020a0 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e05c      	b.n	800334a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003290:	4b11      	ldr	r3, [pc, #68]	@ (80032d8 <HAL_RCC_OscConfig+0x470>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0f0      	beq.n	800327e <HAL_RCC_OscConfig+0x416>
 800329c:	e054      	b.n	8003348 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800329e:	4b10      	ldr	r3, [pc, #64]	@ (80032e0 <HAL_RCC_OscConfig+0x478>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a4:	f7fe fefc 	bl	80020a0 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ac:	f7fe fef8 	bl	80020a0 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e045      	b.n	800334a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032be:	4b06      	ldr	r3, [pc, #24]	@ (80032d8 <HAL_RCC_OscConfig+0x470>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1f0      	bne.n	80032ac <HAL_RCC_OscConfig+0x444>
 80032ca:	e03d      	b.n	8003348 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d107      	bne.n	80032e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e038      	b.n	800334a <HAL_RCC_OscConfig+0x4e2>
 80032d8:	40023800 	.word	0x40023800
 80032dc:	40007000 	.word	0x40007000
 80032e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003354 <HAL_RCC_OscConfig+0x4ec>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d028      	beq.n	8003344 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d121      	bne.n	8003344 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800330a:	429a      	cmp	r2, r3
 800330c:	d11a      	bne.n	8003344 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003314:	4013      	ands	r3, r2
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800331a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800331c:	4293      	cmp	r3, r2
 800331e:	d111      	bne.n	8003344 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800332a:	085b      	lsrs	r3, r3, #1
 800332c:	3b01      	subs	r3, #1
 800332e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003330:	429a      	cmp	r2, r3
 8003332:	d107      	bne.n	8003344 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800333e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003340:	429a      	cmp	r2, r3
 8003342:	d001      	beq.n	8003348 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e000      	b.n	800334a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40023800 	.word	0x40023800

08003358 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e0cc      	b.n	8003506 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800336c:	4b68      	ldr	r3, [pc, #416]	@ (8003510 <HAL_RCC_ClockConfig+0x1b8>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d90c      	bls.n	8003394 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337a:	4b65      	ldr	r3, [pc, #404]	@ (8003510 <HAL_RCC_ClockConfig+0x1b8>)
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	b2d2      	uxtb	r2, r2
 8003380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003382:	4b63      	ldr	r3, [pc, #396]	@ (8003510 <HAL_RCC_ClockConfig+0x1b8>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	429a      	cmp	r2, r3
 800338e:	d001      	beq.n	8003394 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e0b8      	b.n	8003506 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d020      	beq.n	80033e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d005      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033ac:	4b59      	ldr	r3, [pc, #356]	@ (8003514 <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	4a58      	ldr	r2, [pc, #352]	@ (8003514 <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80033b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0308 	and.w	r3, r3, #8
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d005      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033c4:	4b53      	ldr	r3, [pc, #332]	@ (8003514 <HAL_RCC_ClockConfig+0x1bc>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	4a52      	ldr	r2, [pc, #328]	@ (8003514 <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80033ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033d0:	4b50      	ldr	r3, [pc, #320]	@ (8003514 <HAL_RCC_ClockConfig+0x1bc>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	494d      	ldr	r1, [pc, #308]	@ (8003514 <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d044      	beq.n	8003478 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d107      	bne.n	8003406 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f6:	4b47      	ldr	r3, [pc, #284]	@ (8003514 <HAL_RCC_ClockConfig+0x1bc>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d119      	bne.n	8003436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e07f      	b.n	8003506 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b02      	cmp	r3, #2
 800340c:	d003      	beq.n	8003416 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003412:	2b03      	cmp	r3, #3
 8003414:	d107      	bne.n	8003426 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003416:	4b3f      	ldr	r3, [pc, #252]	@ (8003514 <HAL_RCC_ClockConfig+0x1bc>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d109      	bne.n	8003436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e06f      	b.n	8003506 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003426:	4b3b      	ldr	r3, [pc, #236]	@ (8003514 <HAL_RCC_ClockConfig+0x1bc>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e067      	b.n	8003506 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003436:	4b37      	ldr	r3, [pc, #220]	@ (8003514 <HAL_RCC_ClockConfig+0x1bc>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f023 0203 	bic.w	r2, r3, #3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	4934      	ldr	r1, [pc, #208]	@ (8003514 <HAL_RCC_ClockConfig+0x1bc>)
 8003444:	4313      	orrs	r3, r2
 8003446:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003448:	f7fe fe2a 	bl	80020a0 <HAL_GetTick>
 800344c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344e:	e00a      	b.n	8003466 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003450:	f7fe fe26 	bl	80020a0 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800345e:	4293      	cmp	r3, r2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e04f      	b.n	8003506 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003466:	4b2b      	ldr	r3, [pc, #172]	@ (8003514 <HAL_RCC_ClockConfig+0x1bc>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 020c 	and.w	r2, r3, #12
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	429a      	cmp	r2, r3
 8003476:	d1eb      	bne.n	8003450 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003478:	4b25      	ldr	r3, [pc, #148]	@ (8003510 <HAL_RCC_ClockConfig+0x1b8>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	429a      	cmp	r2, r3
 8003484:	d20c      	bcs.n	80034a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003486:	4b22      	ldr	r3, [pc, #136]	@ (8003510 <HAL_RCC_ClockConfig+0x1b8>)
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	b2d2      	uxtb	r2, r2
 800348c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800348e:	4b20      	ldr	r3, [pc, #128]	@ (8003510 <HAL_RCC_ClockConfig+0x1b8>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	429a      	cmp	r2, r3
 800349a:	d001      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e032      	b.n	8003506 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d008      	beq.n	80034be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034ac:	4b19      	ldr	r3, [pc, #100]	@ (8003514 <HAL_RCC_ClockConfig+0x1bc>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	4916      	ldr	r1, [pc, #88]	@ (8003514 <HAL_RCC_ClockConfig+0x1bc>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d009      	beq.n	80034de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ca:	4b12      	ldr	r3, [pc, #72]	@ (8003514 <HAL_RCC_ClockConfig+0x1bc>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	490e      	ldr	r1, [pc, #56]	@ (8003514 <HAL_RCC_ClockConfig+0x1bc>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034de:	f000 f821 	bl	8003524 <HAL_RCC_GetSysClockFreq>
 80034e2:	4602      	mov	r2, r0
 80034e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003514 <HAL_RCC_ClockConfig+0x1bc>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	091b      	lsrs	r3, r3, #4
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	490a      	ldr	r1, [pc, #40]	@ (8003518 <HAL_RCC_ClockConfig+0x1c0>)
 80034f0:	5ccb      	ldrb	r3, [r1, r3]
 80034f2:	fa22 f303 	lsr.w	r3, r2, r3
 80034f6:	4a09      	ldr	r2, [pc, #36]	@ (800351c <HAL_RCC_ClockConfig+0x1c4>)
 80034f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80034fa:	4b09      	ldr	r3, [pc, #36]	@ (8003520 <HAL_RCC_ClockConfig+0x1c8>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f7fe fd8a 	bl	8002018 <HAL_InitTick>

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	40023c00 	.word	0x40023c00
 8003514:	40023800 	.word	0x40023800
 8003518:	080068c4 	.word	0x080068c4
 800351c:	20000000 	.word	0x20000000
 8003520:	20000004 	.word	0x20000004

08003524 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003524:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003528:	b094      	sub	sp, #80	@ 0x50
 800352a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800352c:	2300      	movs	r3, #0
 800352e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003530:	2300      	movs	r3, #0
 8003532:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003534:	2300      	movs	r3, #0
 8003536:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800353c:	4b79      	ldr	r3, [pc, #484]	@ (8003724 <HAL_RCC_GetSysClockFreq+0x200>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f003 030c 	and.w	r3, r3, #12
 8003544:	2b08      	cmp	r3, #8
 8003546:	d00d      	beq.n	8003564 <HAL_RCC_GetSysClockFreq+0x40>
 8003548:	2b08      	cmp	r3, #8
 800354a:	f200 80e1 	bhi.w	8003710 <HAL_RCC_GetSysClockFreq+0x1ec>
 800354e:	2b00      	cmp	r3, #0
 8003550:	d002      	beq.n	8003558 <HAL_RCC_GetSysClockFreq+0x34>
 8003552:	2b04      	cmp	r3, #4
 8003554:	d003      	beq.n	800355e <HAL_RCC_GetSysClockFreq+0x3a>
 8003556:	e0db      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003558:	4b73      	ldr	r3, [pc, #460]	@ (8003728 <HAL_RCC_GetSysClockFreq+0x204>)
 800355a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800355c:	e0db      	b.n	8003716 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800355e:	4b73      	ldr	r3, [pc, #460]	@ (800372c <HAL_RCC_GetSysClockFreq+0x208>)
 8003560:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003562:	e0d8      	b.n	8003716 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003564:	4b6f      	ldr	r3, [pc, #444]	@ (8003724 <HAL_RCC_GetSysClockFreq+0x200>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800356c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800356e:	4b6d      	ldr	r3, [pc, #436]	@ (8003724 <HAL_RCC_GetSysClockFreq+0x200>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d063      	beq.n	8003642 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800357a:	4b6a      	ldr	r3, [pc, #424]	@ (8003724 <HAL_RCC_GetSysClockFreq+0x200>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	099b      	lsrs	r3, r3, #6
 8003580:	2200      	movs	r2, #0
 8003582:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003584:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800358c:	633b      	str	r3, [r7, #48]	@ 0x30
 800358e:	2300      	movs	r3, #0
 8003590:	637b      	str	r3, [r7, #52]	@ 0x34
 8003592:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003596:	4622      	mov	r2, r4
 8003598:	462b      	mov	r3, r5
 800359a:	f04f 0000 	mov.w	r0, #0
 800359e:	f04f 0100 	mov.w	r1, #0
 80035a2:	0159      	lsls	r1, r3, #5
 80035a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035a8:	0150      	lsls	r0, r2, #5
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	4621      	mov	r1, r4
 80035b0:	1a51      	subs	r1, r2, r1
 80035b2:	6139      	str	r1, [r7, #16]
 80035b4:	4629      	mov	r1, r5
 80035b6:	eb63 0301 	sbc.w	r3, r3, r1
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	f04f 0200 	mov.w	r2, #0
 80035c0:	f04f 0300 	mov.w	r3, #0
 80035c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035c8:	4659      	mov	r1, fp
 80035ca:	018b      	lsls	r3, r1, #6
 80035cc:	4651      	mov	r1, sl
 80035ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035d2:	4651      	mov	r1, sl
 80035d4:	018a      	lsls	r2, r1, #6
 80035d6:	4651      	mov	r1, sl
 80035d8:	ebb2 0801 	subs.w	r8, r2, r1
 80035dc:	4659      	mov	r1, fp
 80035de:	eb63 0901 	sbc.w	r9, r3, r1
 80035e2:	f04f 0200 	mov.w	r2, #0
 80035e6:	f04f 0300 	mov.w	r3, #0
 80035ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035f6:	4690      	mov	r8, r2
 80035f8:	4699      	mov	r9, r3
 80035fa:	4623      	mov	r3, r4
 80035fc:	eb18 0303 	adds.w	r3, r8, r3
 8003600:	60bb      	str	r3, [r7, #8]
 8003602:	462b      	mov	r3, r5
 8003604:	eb49 0303 	adc.w	r3, r9, r3
 8003608:	60fb      	str	r3, [r7, #12]
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003616:	4629      	mov	r1, r5
 8003618:	024b      	lsls	r3, r1, #9
 800361a:	4621      	mov	r1, r4
 800361c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003620:	4621      	mov	r1, r4
 8003622:	024a      	lsls	r2, r1, #9
 8003624:	4610      	mov	r0, r2
 8003626:	4619      	mov	r1, r3
 8003628:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800362a:	2200      	movs	r2, #0
 800362c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800362e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003630:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003634:	f7fc fe2c 	bl	8000290 <__aeabi_uldivmod>
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	4613      	mov	r3, r2
 800363e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003640:	e058      	b.n	80036f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003642:	4b38      	ldr	r3, [pc, #224]	@ (8003724 <HAL_RCC_GetSysClockFreq+0x200>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	099b      	lsrs	r3, r3, #6
 8003648:	2200      	movs	r2, #0
 800364a:	4618      	mov	r0, r3
 800364c:	4611      	mov	r1, r2
 800364e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003652:	623b      	str	r3, [r7, #32]
 8003654:	2300      	movs	r3, #0
 8003656:	627b      	str	r3, [r7, #36]	@ 0x24
 8003658:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800365c:	4642      	mov	r2, r8
 800365e:	464b      	mov	r3, r9
 8003660:	f04f 0000 	mov.w	r0, #0
 8003664:	f04f 0100 	mov.w	r1, #0
 8003668:	0159      	lsls	r1, r3, #5
 800366a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800366e:	0150      	lsls	r0, r2, #5
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	4641      	mov	r1, r8
 8003676:	ebb2 0a01 	subs.w	sl, r2, r1
 800367a:	4649      	mov	r1, r9
 800367c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800368c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003690:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003694:	ebb2 040a 	subs.w	r4, r2, sl
 8003698:	eb63 050b 	sbc.w	r5, r3, fp
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	f04f 0300 	mov.w	r3, #0
 80036a4:	00eb      	lsls	r3, r5, #3
 80036a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036aa:	00e2      	lsls	r2, r4, #3
 80036ac:	4614      	mov	r4, r2
 80036ae:	461d      	mov	r5, r3
 80036b0:	4643      	mov	r3, r8
 80036b2:	18e3      	adds	r3, r4, r3
 80036b4:	603b      	str	r3, [r7, #0]
 80036b6:	464b      	mov	r3, r9
 80036b8:	eb45 0303 	adc.w	r3, r5, r3
 80036bc:	607b      	str	r3, [r7, #4]
 80036be:	f04f 0200 	mov.w	r2, #0
 80036c2:	f04f 0300 	mov.w	r3, #0
 80036c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036ca:	4629      	mov	r1, r5
 80036cc:	028b      	lsls	r3, r1, #10
 80036ce:	4621      	mov	r1, r4
 80036d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036d4:	4621      	mov	r1, r4
 80036d6:	028a      	lsls	r2, r1, #10
 80036d8:	4610      	mov	r0, r2
 80036da:	4619      	mov	r1, r3
 80036dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036de:	2200      	movs	r2, #0
 80036e0:	61bb      	str	r3, [r7, #24]
 80036e2:	61fa      	str	r2, [r7, #28]
 80036e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036e8:	f7fc fdd2 	bl	8000290 <__aeabi_uldivmod>
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	4613      	mov	r3, r2
 80036f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80036f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003724 <HAL_RCC_GetSysClockFreq+0x200>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	0c1b      	lsrs	r3, r3, #16
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	3301      	adds	r3, #1
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003704:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003706:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003708:	fbb2 f3f3 	udiv	r3, r2, r3
 800370c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800370e:	e002      	b.n	8003716 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003710:	4b05      	ldr	r3, [pc, #20]	@ (8003728 <HAL_RCC_GetSysClockFreq+0x204>)
 8003712:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003714:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003716:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003718:	4618      	mov	r0, r3
 800371a:	3750      	adds	r7, #80	@ 0x50
 800371c:	46bd      	mov	sp, r7
 800371e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003722:	bf00      	nop
 8003724:	40023800 	.word	0x40023800
 8003728:	00f42400 	.word	0x00f42400
 800372c:	007a1200 	.word	0x007a1200

08003730 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003734:	4b03      	ldr	r3, [pc, #12]	@ (8003744 <HAL_RCC_GetHCLKFreq+0x14>)
 8003736:	681b      	ldr	r3, [r3, #0]
}
 8003738:	4618      	mov	r0, r3
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	20000000 	.word	0x20000000

08003748 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800374c:	f7ff fff0 	bl	8003730 <HAL_RCC_GetHCLKFreq>
 8003750:	4602      	mov	r2, r0
 8003752:	4b05      	ldr	r3, [pc, #20]	@ (8003768 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	0a9b      	lsrs	r3, r3, #10
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	4903      	ldr	r1, [pc, #12]	@ (800376c <HAL_RCC_GetPCLK1Freq+0x24>)
 800375e:	5ccb      	ldrb	r3, [r1, r3]
 8003760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003764:	4618      	mov	r0, r3
 8003766:	bd80      	pop	{r7, pc}
 8003768:	40023800 	.word	0x40023800
 800376c:	080068d4 	.word	0x080068d4

08003770 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003774:	f7ff ffdc 	bl	8003730 <HAL_RCC_GetHCLKFreq>
 8003778:	4602      	mov	r2, r0
 800377a:	4b05      	ldr	r3, [pc, #20]	@ (8003790 <HAL_RCC_GetPCLK2Freq+0x20>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	0b5b      	lsrs	r3, r3, #13
 8003780:	f003 0307 	and.w	r3, r3, #7
 8003784:	4903      	ldr	r1, [pc, #12]	@ (8003794 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003786:	5ccb      	ldrb	r3, [r1, r3]
 8003788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800378c:	4618      	mov	r0, r3
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40023800 	.word	0x40023800
 8003794:	080068d4 	.word	0x080068d4

08003798 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e042      	b.n	8003830 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d106      	bne.n	80037c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7fe f8e2 	bl	8001988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2224      	movs	r2, #36	@ 0x24
 80037c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68da      	ldr	r2, [r3, #12]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f001 f8bd 	bl	800495c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	695a      	ldr	r2, [r3, #20]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003800:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68da      	ldr	r2, [r3, #12]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003810:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2220      	movs	r2, #32
 800381c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2220      	movs	r2, #32
 8003824:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08a      	sub	sp, #40	@ 0x28
 800383c:	af02      	add	r7, sp, #8
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	603b      	str	r3, [r7, #0]
 8003844:	4613      	mov	r3, r2
 8003846:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b20      	cmp	r3, #32
 8003856:	d175      	bne.n	8003944 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <HAL_UART_Transmit+0x2c>
 800385e:	88fb      	ldrh	r3, [r7, #6]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e06e      	b.n	8003946 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2221      	movs	r2, #33	@ 0x21
 8003872:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003876:	f7fe fc13 	bl	80020a0 <HAL_GetTick>
 800387a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	88fa      	ldrh	r2, [r7, #6]
 8003880:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	88fa      	ldrh	r2, [r7, #6]
 8003886:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003890:	d108      	bne.n	80038a4 <HAL_UART_Transmit+0x6c>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d104      	bne.n	80038a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800389a:	2300      	movs	r3, #0
 800389c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	61bb      	str	r3, [r7, #24]
 80038a2:	e003      	b.n	80038ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038ac:	e02e      	b.n	800390c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2200      	movs	r2, #0
 80038b6:	2180      	movs	r1, #128	@ 0x80
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f000 fd96 	bl	80043ea <UART_WaitOnFlagUntilTimeout>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e03a      	b.n	8003946 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10b      	bne.n	80038ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	881b      	ldrh	r3, [r3, #0]
 80038da:	461a      	mov	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	3302      	adds	r3, #2
 80038ea:	61bb      	str	r3, [r7, #24]
 80038ec:	e007      	b.n	80038fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	781a      	ldrb	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	3301      	adds	r3, #1
 80038fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003902:	b29b      	uxth	r3, r3
 8003904:	3b01      	subs	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003910:	b29b      	uxth	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1cb      	bne.n	80038ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2200      	movs	r2, #0
 800391e:	2140      	movs	r1, #64	@ 0x40
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 fd62 	bl	80043ea <UART_WaitOnFlagUntilTimeout>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2220      	movs	r2, #32
 8003930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e006      	b.n	8003946 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	e000      	b.n	8003946 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003944:	2302      	movs	r3, #2
  }
}
 8003946:	4618      	mov	r0, r3
 8003948:	3720      	adds	r7, #32
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
	...

08003950 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08c      	sub	sp, #48	@ 0x30
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	4613      	mov	r3, r2
 800395c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b20      	cmp	r3, #32
 8003968:	d156      	bne.n	8003a18 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <HAL_UART_Transmit_DMA+0x26>
 8003970:	88fb      	ldrh	r3, [r7, #6]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e04f      	b.n	8003a1a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	88fa      	ldrh	r2, [r7, #6]
 8003984:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	88fa      	ldrh	r2, [r7, #6]
 800398a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2221      	movs	r2, #33	@ 0x21
 8003996:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800399e:	4a21      	ldr	r2, [pc, #132]	@ (8003a24 <HAL_UART_Transmit_DMA+0xd4>)
 80039a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a6:	4a20      	ldr	r2, [pc, #128]	@ (8003a28 <HAL_UART_Transmit_DMA+0xd8>)
 80039a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ae:	4a1f      	ldr	r2, [pc, #124]	@ (8003a2c <HAL_UART_Transmit_DMA+0xdc>)
 80039b0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b6:	2200      	movs	r2, #0
 80039b8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80039ba:	f107 0308 	add.w	r3, r7, #8
 80039be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80039c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039c6:	6819      	ldr	r1, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	3304      	adds	r3, #4
 80039ce:	461a      	mov	r2, r3
 80039d0:	88fb      	ldrh	r3, [r7, #6]
 80039d2:	f7fe fd31 	bl	8002438 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80039de:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	3314      	adds	r3, #20
 80039e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	e853 3f00 	ldrex	r3, [r3]
 80039ee:	617b      	str	r3, [r7, #20]
   return(result);
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	3314      	adds	r3, #20
 80039fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a00:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a04:	6a39      	ldr	r1, [r7, #32]
 8003a06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a08:	e841 2300 	strex	r3, r2, [r1]
 8003a0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1e5      	bne.n	80039e0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003a14:	2300      	movs	r3, #0
 8003a16:	e000      	b.n	8003a1a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003a18:	2302      	movs	r3, #2
  }
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3730      	adds	r7, #48	@ 0x30
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	08004139 	.word	0x08004139
 8003a28:	080041d3 	.word	0x080041d3
 8003a2c:	08004357 	.word	0x08004357

08003a30 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b20      	cmp	r3, #32
 8003a48:	d112      	bne.n	8003a70 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <HAL_UART_Receive_DMA+0x26>
 8003a50:	88fb      	ldrh	r3, [r7, #6]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e00b      	b.n	8003a72 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003a60:	88fb      	ldrh	r3, [r7, #6]
 8003a62:	461a      	mov	r2, r3
 8003a64:	68b9      	ldr	r1, [r7, #8]
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 fd18 	bl	800449c <UART_Start_Receive_DMA>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	e000      	b.n	8003a72 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003a70:	2302      	movs	r3, #2
  }
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b09a      	sub	sp, #104	@ 0x68
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	330c      	adds	r3, #12
 8003a88:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a8c:	e853 3f00 	ldrex	r3, [r3]
 8003a90:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003a92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a98:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	330c      	adds	r3, #12
 8003aa0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003aa2:	657a      	str	r2, [r7, #84]	@ 0x54
 8003aa4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003aa8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003aaa:	e841 2300 	strex	r3, r2, [r1]
 8003aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003ab0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1e5      	bne.n	8003a82 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	3314      	adds	r3, #20
 8003abc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ac0:	e853 3f00 	ldrex	r3, [r3]
 8003ac4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac8:	f023 0301 	bic.w	r3, r3, #1
 8003acc:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3314      	adds	r3, #20
 8003ad4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003ad6:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ada:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003adc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ade:	e841 2300 	strex	r3, r2, [r1]
 8003ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1e5      	bne.n	8003ab6 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d119      	bne.n	8003b26 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	330c      	adds	r3, #12
 8003af8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	e853 3f00 	ldrex	r3, [r3]
 8003b00:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	f023 0310 	bic.w	r3, r3, #16
 8003b08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	330c      	adds	r3, #12
 8003b10:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003b12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b1a:	e841 2300 	strex	r3, r2, [r1]
 8003b1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1e5      	bne.n	8003af2 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b30:	2b40      	cmp	r3, #64	@ 0x40
 8003b32:	d136      	bne.n	8003ba2 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	3314      	adds	r3, #20
 8003b3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	e853 3f00 	ldrex	r3, [r3]
 8003b42:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	3314      	adds	r3, #20
 8003b52:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b54:	61ba      	str	r2, [r7, #24]
 8003b56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b58:	6979      	ldr	r1, [r7, #20]
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	e841 2300 	strex	r3, r2, [r1]
 8003b60:	613b      	str	r3, [r7, #16]
   return(result);
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1e5      	bne.n	8003b34 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d018      	beq.n	8003ba2 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b74:	2200      	movs	r2, #0
 8003b76:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7fe fcb3 	bl	80024e8 <HAL_DMA_Abort>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00c      	beq.n	8003ba2 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fe fec7 	bl	8002920 <HAL_DMA_GetError>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b20      	cmp	r3, #32
 8003b96:	d104      	bne.n	8003ba2 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2210      	movs	r2, #16
 8003b9c:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e00a      	b.n	8003bb8 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2220      	movs	r2, #32
 8003bac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3768      	adds	r7, #104	@ 0x68
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b0ba      	sub	sp, #232	@ 0xe8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003bec:	2300      	movs	r3, #0
 8003bee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003bfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10f      	bne.n	8003c26 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c0a:	f003 0320 	and.w	r3, r3, #32
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d009      	beq.n	8003c26 <HAL_UART_IRQHandler+0x66>
 8003c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c16:	f003 0320 	and.w	r3, r3, #32
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 fddd 	bl	80047de <UART_Receive_IT>
      return;
 8003c24:	e25b      	b.n	80040de <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 80de 	beq.w	8003dec <HAL_UART_IRQHandler+0x22c>
 8003c30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d106      	bne.n	8003c4a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c40:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 80d1 	beq.w	8003dec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00b      	beq.n	8003c6e <HAL_UART_IRQHandler+0xae>
 8003c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d005      	beq.n	8003c6e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c66:	f043 0201 	orr.w	r2, r3, #1
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c72:	f003 0304 	and.w	r3, r3, #4
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00b      	beq.n	8003c92 <HAL_UART_IRQHandler+0xd2>
 8003c7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d005      	beq.n	8003c92 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c8a:	f043 0202 	orr.w	r2, r3, #2
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00b      	beq.n	8003cb6 <HAL_UART_IRQHandler+0xf6>
 8003c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d005      	beq.n	8003cb6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cae:	f043 0204 	orr.w	r2, r3, #4
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cba:	f003 0308 	and.w	r3, r3, #8
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d011      	beq.n	8003ce6 <HAL_UART_IRQHandler+0x126>
 8003cc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cc6:	f003 0320 	and.w	r3, r3, #32
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d105      	bne.n	8003cda <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003cce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d005      	beq.n	8003ce6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cde:	f043 0208 	orr.w	r2, r3, #8
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 81f2 	beq.w	80040d4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cf4:	f003 0320 	and.w	r3, r3, #32
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d008      	beq.n	8003d0e <HAL_UART_IRQHandler+0x14e>
 8003cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d00:	f003 0320 	and.w	r3, r3, #32
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d002      	beq.n	8003d0e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 fd68 	bl	80047de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d18:	2b40      	cmp	r3, #64	@ 0x40
 8003d1a:	bf0c      	ite	eq
 8003d1c:	2301      	moveq	r3, #1
 8003d1e:	2300      	movne	r3, #0
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d103      	bne.n	8003d3a <HAL_UART_IRQHandler+0x17a>
 8003d32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d04f      	beq.n	8003dda <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 fc70 	bl	8004620 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d4a:	2b40      	cmp	r3, #64	@ 0x40
 8003d4c:	d141      	bne.n	8003dd2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	3314      	adds	r3, #20
 8003d54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d5c:	e853 3f00 	ldrex	r3, [r3]
 8003d60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003d64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	3314      	adds	r3, #20
 8003d76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003d7a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003d7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003d86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003d8a:	e841 2300 	strex	r3, r2, [r1]
 8003d8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003d92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1d9      	bne.n	8003d4e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d013      	beq.n	8003dca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003da6:	4a7e      	ldr	r2, [pc, #504]	@ (8003fa0 <HAL_UART_IRQHandler+0x3e0>)
 8003da8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fe fc0a 	bl	80025c8 <HAL_DMA_Abort_IT>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d016      	beq.n	8003de8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc8:	e00e      	b.n	8003de8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f99e 	bl	800410c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd0:	e00a      	b.n	8003de8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f99a 	bl	800410c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd8:	e006      	b.n	8003de8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f996 	bl	800410c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003de6:	e175      	b.n	80040d4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de8:	bf00      	nop
    return;
 8003dea:	e173      	b.n	80040d4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	f040 814f 	bne.w	8004094 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dfa:	f003 0310 	and.w	r3, r3, #16
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 8148 	beq.w	8004094 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e08:	f003 0310 	and.w	r3, r3, #16
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 8141 	beq.w	8004094 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e12:	2300      	movs	r3, #0
 8003e14:	60bb      	str	r3, [r7, #8]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	60bb      	str	r3, [r7, #8]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	60bb      	str	r3, [r7, #8]
 8003e26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e32:	2b40      	cmp	r3, #64	@ 0x40
 8003e34:	f040 80b6 	bne.w	8003fa4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 8145 	beq.w	80040d8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e56:	429a      	cmp	r2, r3
 8003e58:	f080 813e 	bcs.w	80040d8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e62:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e6e:	f000 8088 	beq.w	8003f82 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	330c      	adds	r3, #12
 8003e78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e80:	e853 3f00 	ldrex	r3, [r3]
 8003e84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003e88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	330c      	adds	r3, #12
 8003e9a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003e9e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ea2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003eaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003eae:	e841 2300 	strex	r3, r2, [r1]
 8003eb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003eb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1d9      	bne.n	8003e72 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	3314      	adds	r3, #20
 8003ec4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ec8:	e853 3f00 	ldrex	r3, [r3]
 8003ecc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003ece:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ed0:	f023 0301 	bic.w	r3, r3, #1
 8003ed4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	3314      	adds	r3, #20
 8003ede:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003ee2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003ee6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003eea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003eee:	e841 2300 	strex	r3, r2, [r1]
 8003ef2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003ef4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1e1      	bne.n	8003ebe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	3314      	adds	r3, #20
 8003f00:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f04:	e853 3f00 	ldrex	r3, [r3]
 8003f08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	3314      	adds	r3, #20
 8003f1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f20:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f22:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f26:	e841 2300 	strex	r3, r2, [r1]
 8003f2a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003f2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1e3      	bne.n	8003efa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2220      	movs	r2, #32
 8003f36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	330c      	adds	r3, #12
 8003f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f4a:	e853 3f00 	ldrex	r3, [r3]
 8003f4e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f52:	f023 0310 	bic.w	r3, r3, #16
 8003f56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	330c      	adds	r3, #12
 8003f60:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003f64:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003f66:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f6c:	e841 2300 	strex	r3, r2, [r1]
 8003f70:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1e3      	bne.n	8003f40 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fe fab3 	bl	80024e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2202      	movs	r2, #2
 8003f86:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	4619      	mov	r1, r3
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f8c1 	bl	8004120 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f9e:	e09b      	b.n	80040d8 <HAL_UART_IRQHandler+0x518>
 8003fa0:	080046e7 	.word	0x080046e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 808e 	beq.w	80040dc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003fc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 8089 	beq.w	80040dc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	330c      	adds	r3, #12
 8003fd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fd4:	e853 3f00 	ldrex	r3, [r3]
 8003fd8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fe0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	330c      	adds	r3, #12
 8003fea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003fee:	647a      	str	r2, [r7, #68]	@ 0x44
 8003ff0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ff4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ff6:	e841 2300 	strex	r3, r2, [r1]
 8003ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ffc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1e3      	bne.n	8003fca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	3314      	adds	r3, #20
 8004008:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400c:	e853 3f00 	ldrex	r3, [r3]
 8004010:	623b      	str	r3, [r7, #32]
   return(result);
 8004012:	6a3b      	ldr	r3, [r7, #32]
 8004014:	f023 0301 	bic.w	r3, r3, #1
 8004018:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	3314      	adds	r3, #20
 8004022:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004026:	633a      	str	r2, [r7, #48]	@ 0x30
 8004028:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800402c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800402e:	e841 2300 	strex	r3, r2, [r1]
 8004032:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1e3      	bne.n	8004002 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2220      	movs	r2, #32
 800403e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	330c      	adds	r3, #12
 800404e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	e853 3f00 	ldrex	r3, [r3]
 8004056:	60fb      	str	r3, [r7, #12]
   return(result);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 0310 	bic.w	r3, r3, #16
 800405e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	330c      	adds	r3, #12
 8004068:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800406c:	61fa      	str	r2, [r7, #28]
 800406e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004070:	69b9      	ldr	r1, [r7, #24]
 8004072:	69fa      	ldr	r2, [r7, #28]
 8004074:	e841 2300 	strex	r3, r2, [r1]
 8004078:	617b      	str	r3, [r7, #20]
   return(result);
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1e3      	bne.n	8004048 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2202      	movs	r2, #2
 8004084:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004086:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800408a:	4619      	mov	r1, r3
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f847 	bl	8004120 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004092:	e023      	b.n	80040dc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004098:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800409c:	2b00      	cmp	r3, #0
 800409e:	d009      	beq.n	80040b4 <HAL_UART_IRQHandler+0x4f4>
 80040a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d003      	beq.n	80040b4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 fb2e 	bl	800470e <UART_Transmit_IT>
    return;
 80040b2:	e014      	b.n	80040de <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00e      	beq.n	80040de <HAL_UART_IRQHandler+0x51e>
 80040c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d008      	beq.n	80040de <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 fb6e 	bl	80047ae <UART_EndTransmit_IT>
    return;
 80040d2:	e004      	b.n	80040de <HAL_UART_IRQHandler+0x51e>
    return;
 80040d4:	bf00      	nop
 80040d6:	e002      	b.n	80040de <HAL_UART_IRQHandler+0x51e>
      return;
 80040d8:	bf00      	nop
 80040da:	e000      	b.n	80040de <HAL_UART_IRQHandler+0x51e>
      return;
 80040dc:	bf00      	nop
  }
}
 80040de:	37e8      	adds	r7, #232	@ 0xe8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b090      	sub	sp, #64	@ 0x40
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004144:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004150:	2b00      	cmp	r3, #0
 8004152:	d137      	bne.n	80041c4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004154:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004156:	2200      	movs	r2, #0
 8004158:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800415a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	3314      	adds	r3, #20
 8004160:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004164:	e853 3f00 	ldrex	r3, [r3]
 8004168:	623b      	str	r3, [r7, #32]
   return(result);
 800416a:	6a3b      	ldr	r3, [r7, #32]
 800416c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004170:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	3314      	adds	r3, #20
 8004178:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800417a:	633a      	str	r2, [r7, #48]	@ 0x30
 800417c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004180:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004182:	e841 2300 	strex	r3, r2, [r1]
 8004186:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1e5      	bne.n	800415a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800418e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	330c      	adds	r3, #12
 8004194:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	e853 3f00 	ldrex	r3, [r3]
 800419c:	60fb      	str	r3, [r7, #12]
   return(result);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80041a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	330c      	adds	r3, #12
 80041ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80041ae:	61fa      	str	r2, [r7, #28]
 80041b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b2:	69b9      	ldr	r1, [r7, #24]
 80041b4:	69fa      	ldr	r2, [r7, #28]
 80041b6:	e841 2300 	strex	r3, r2, [r1]
 80041ba:	617b      	str	r3, [r7, #20]
   return(result);
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1e5      	bne.n	800418e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80041c2:	e002      	b.n	80041ca <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80041c4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80041c6:	f7fc fcd3 	bl	8000b70 <HAL_UART_TxCpltCallback>
}
 80041ca:	bf00      	nop
 80041cc:	3740      	adds	r7, #64	@ 0x40
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b084      	sub	sp, #16
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041de:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f7ff ff7f 	bl	80040e4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041e6:	bf00      	nop
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b09c      	sub	sp, #112	@ 0x70
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041fa:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004206:	2b00      	cmp	r3, #0
 8004208:	d172      	bne.n	80042f0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800420a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800420c:	2200      	movs	r2, #0
 800420e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004210:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	330c      	adds	r3, #12
 8004216:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004218:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800421a:	e853 3f00 	ldrex	r3, [r3]
 800421e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004220:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004222:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004226:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004228:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	330c      	adds	r3, #12
 800422e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004230:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004232:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004234:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004236:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004238:	e841 2300 	strex	r3, r2, [r1]
 800423c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800423e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1e5      	bne.n	8004210 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004244:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3314      	adds	r3, #20
 800424a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800424e:	e853 3f00 	ldrex	r3, [r3]
 8004252:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004256:	f023 0301 	bic.w	r3, r3, #1
 800425a:	667b      	str	r3, [r7, #100]	@ 0x64
 800425c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3314      	adds	r3, #20
 8004262:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004264:	647a      	str	r2, [r7, #68]	@ 0x44
 8004266:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004268:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800426a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800426c:	e841 2300 	strex	r3, r2, [r1]
 8004270:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1e5      	bne.n	8004244 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004278:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3314      	adds	r3, #20
 800427e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004282:	e853 3f00 	ldrex	r3, [r3]
 8004286:	623b      	str	r3, [r7, #32]
   return(result);
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800428e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004290:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3314      	adds	r3, #20
 8004296:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004298:	633a      	str	r2, [r7, #48]	@ 0x30
 800429a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800429e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042a0:	e841 2300 	strex	r3, r2, [r1]
 80042a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1e5      	bne.n	8004278 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80042ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042ae:	2220      	movs	r2, #32
 80042b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d119      	bne.n	80042f0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	330c      	adds	r3, #12
 80042c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	e853 3f00 	ldrex	r3, [r3]
 80042ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f023 0310 	bic.w	r3, r3, #16
 80042d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	330c      	adds	r3, #12
 80042da:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80042dc:	61fa      	str	r2, [r7, #28]
 80042de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e0:	69b9      	ldr	r1, [r7, #24]
 80042e2:	69fa      	ldr	r2, [r7, #28]
 80042e4:	e841 2300 	strex	r3, r2, [r1]
 80042e8:	617b      	str	r3, [r7, #20]
   return(result);
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1e5      	bne.n	80042bc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042f2:	2200      	movs	r2, #0
 80042f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d106      	bne.n	800430c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004300:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004302:	4619      	mov	r1, r3
 8004304:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004306:	f7ff ff0b 	bl	8004120 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800430a:	e002      	b.n	8004312 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800430c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800430e:	f7fc fc4b 	bl	8000ba8 <HAL_UART_RxCpltCallback>
}
 8004312:	bf00      	nop
 8004314:	3770      	adds	r7, #112	@ 0x70
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b084      	sub	sp, #16
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004326:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2201      	movs	r2, #1
 800432c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004332:	2b01      	cmp	r3, #1
 8004334:	d108      	bne.n	8004348 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800433a:	085b      	lsrs	r3, r3, #1
 800433c:	b29b      	uxth	r3, r3
 800433e:	4619      	mov	r1, r3
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f7ff feed 	bl	8004120 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004346:	e002      	b.n	800434e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f7ff fed5 	bl	80040f8 <HAL_UART_RxHalfCpltCallback>
}
 800434e:	bf00      	nop
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b084      	sub	sp, #16
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800435e:	2300      	movs	r3, #0
 8004360:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004366:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004372:	2b80      	cmp	r3, #128	@ 0x80
 8004374:	bf0c      	ite	eq
 8004376:	2301      	moveq	r3, #1
 8004378:	2300      	movne	r3, #0
 800437a:	b2db      	uxtb	r3, r3
 800437c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b21      	cmp	r3, #33	@ 0x21
 8004388:	d108      	bne.n	800439c <UART_DMAError+0x46>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d005      	beq.n	800439c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2200      	movs	r2, #0
 8004394:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004396:	68b8      	ldr	r0, [r7, #8]
 8004398:	f000 f91a 	bl	80045d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043a6:	2b40      	cmp	r3, #64	@ 0x40
 80043a8:	bf0c      	ite	eq
 80043aa:	2301      	moveq	r3, #1
 80043ac:	2300      	movne	r3, #0
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b22      	cmp	r3, #34	@ 0x22
 80043bc:	d108      	bne.n	80043d0 <UART_DMAError+0x7a>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d005      	beq.n	80043d0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	2200      	movs	r2, #0
 80043c8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80043ca:	68b8      	ldr	r0, [r7, #8]
 80043cc:	f000 f928 	bl	8004620 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043d4:	f043 0210 	orr.w	r2, r3, #16
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043dc:	68b8      	ldr	r0, [r7, #8]
 80043de:	f7ff fe95 	bl	800410c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043e2:	bf00      	nop
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b086      	sub	sp, #24
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	60f8      	str	r0, [r7, #12]
 80043f2:	60b9      	str	r1, [r7, #8]
 80043f4:	603b      	str	r3, [r7, #0]
 80043f6:	4613      	mov	r3, r2
 80043f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043fa:	e03b      	b.n	8004474 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004402:	d037      	beq.n	8004474 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004404:	f7fd fe4c 	bl	80020a0 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	6a3a      	ldr	r2, [r7, #32]
 8004410:	429a      	cmp	r2, r3
 8004412:	d302      	bcc.n	800441a <UART_WaitOnFlagUntilTimeout+0x30>
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e03a      	b.n	8004494 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	2b00      	cmp	r3, #0
 800442a:	d023      	beq.n	8004474 <UART_WaitOnFlagUntilTimeout+0x8a>
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2b80      	cmp	r3, #128	@ 0x80
 8004430:	d020      	beq.n	8004474 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	2b40      	cmp	r3, #64	@ 0x40
 8004436:	d01d      	beq.n	8004474 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0308 	and.w	r3, r3, #8
 8004442:	2b08      	cmp	r3, #8
 8004444:	d116      	bne.n	8004474 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004446:	2300      	movs	r3, #0
 8004448:	617b      	str	r3, [r7, #20]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	617b      	str	r3, [r7, #20]
 800445a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 f8df 	bl	8004620 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2208      	movs	r2, #8
 8004466:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e00f      	b.n	8004494 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	4013      	ands	r3, r2
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	429a      	cmp	r2, r3
 8004482:	bf0c      	ite	eq
 8004484:	2301      	moveq	r3, #1
 8004486:	2300      	movne	r3, #0
 8004488:	b2db      	uxtb	r3, r3
 800448a:	461a      	mov	r2, r3
 800448c:	79fb      	ldrb	r3, [r7, #7]
 800448e:	429a      	cmp	r2, r3
 8004490:	d0b4      	beq.n	80043fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3718      	adds	r7, #24
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b098      	sub	sp, #96	@ 0x60
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	4613      	mov	r3, r2
 80044a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	88fa      	ldrh	r2, [r7, #6]
 80044b4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2222      	movs	r2, #34	@ 0x22
 80044c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044c8:	4a3e      	ldr	r2, [pc, #248]	@ (80045c4 <UART_Start_Receive_DMA+0x128>)
 80044ca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044d0:	4a3d      	ldr	r2, [pc, #244]	@ (80045c8 <UART_Start_Receive_DMA+0x12c>)
 80044d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044d8:	4a3c      	ldr	r2, [pc, #240]	@ (80045cc <UART_Start_Receive_DMA+0x130>)
 80044da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e0:	2200      	movs	r2, #0
 80044e2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80044e4:	f107 0308 	add.w	r3, r7, #8
 80044e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	3304      	adds	r3, #4
 80044f4:	4619      	mov	r1, r3
 80044f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	88fb      	ldrh	r3, [r7, #6]
 80044fc:	f7fd ff9c 	bl	8002438 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004500:	2300      	movs	r3, #0
 8004502:	613b      	str	r3, [r7, #16]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	613b      	str	r3, [r7, #16]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	613b      	str	r3, [r7, #16]
 8004514:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d019      	beq.n	8004552 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	330c      	adds	r3, #12
 8004524:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004526:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004528:	e853 3f00 	ldrex	r3, [r3]
 800452c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800452e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004534:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	330c      	adds	r3, #12
 800453c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800453e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004540:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004542:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004544:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004546:	e841 2300 	strex	r3, r2, [r1]
 800454a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800454c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1e5      	bne.n	800451e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	3314      	adds	r3, #20
 8004558:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800455c:	e853 3f00 	ldrex	r3, [r3]
 8004560:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004564:	f043 0301 	orr.w	r3, r3, #1
 8004568:	657b      	str	r3, [r7, #84]	@ 0x54
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3314      	adds	r3, #20
 8004570:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004572:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004574:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004576:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004578:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800457a:	e841 2300 	strex	r3, r2, [r1]
 800457e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1e5      	bne.n	8004552 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	3314      	adds	r3, #20
 800458c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	e853 3f00 	ldrex	r3, [r3]
 8004594:	617b      	str	r3, [r7, #20]
   return(result);
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800459c:	653b      	str	r3, [r7, #80]	@ 0x50
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3314      	adds	r3, #20
 80045a4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80045a6:	627a      	str	r2, [r7, #36]	@ 0x24
 80045a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045aa:	6a39      	ldr	r1, [r7, #32]
 80045ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ae:	e841 2300 	strex	r3, r2, [r1]
 80045b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1e5      	bne.n	8004586 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3760      	adds	r7, #96	@ 0x60
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	080041ef 	.word	0x080041ef
 80045c8:	0800431b 	.word	0x0800431b
 80045cc:	08004357 	.word	0x08004357

080045d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b089      	sub	sp, #36	@ 0x24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	330c      	adds	r3, #12
 80045de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	e853 3f00 	ldrex	r3, [r3]
 80045e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80045ee:	61fb      	str	r3, [r7, #28]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	330c      	adds	r3, #12
 80045f6:	69fa      	ldr	r2, [r7, #28]
 80045f8:	61ba      	str	r2, [r7, #24]
 80045fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fc:	6979      	ldr	r1, [r7, #20]
 80045fe:	69ba      	ldr	r2, [r7, #24]
 8004600:	e841 2300 	strex	r3, r2, [r1]
 8004604:	613b      	str	r3, [r7, #16]
   return(result);
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1e5      	bne.n	80045d8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2220      	movs	r2, #32
 8004610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004614:	bf00      	nop
 8004616:	3724      	adds	r7, #36	@ 0x24
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004620:	b480      	push	{r7}
 8004622:	b095      	sub	sp, #84	@ 0x54
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	330c      	adds	r3, #12
 800462e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004632:	e853 3f00 	ldrex	r3, [r3]
 8004636:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800463a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800463e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	330c      	adds	r3, #12
 8004646:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004648:	643a      	str	r2, [r7, #64]	@ 0x40
 800464a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800464e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004650:	e841 2300 	strex	r3, r2, [r1]
 8004654:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1e5      	bne.n	8004628 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	3314      	adds	r3, #20
 8004662:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	e853 3f00 	ldrex	r3, [r3]
 800466a:	61fb      	str	r3, [r7, #28]
   return(result);
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	f023 0301 	bic.w	r3, r3, #1
 8004672:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	3314      	adds	r3, #20
 800467a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800467c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800467e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004680:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004682:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004684:	e841 2300 	strex	r3, r2, [r1]
 8004688:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800468a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1e5      	bne.n	800465c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004694:	2b01      	cmp	r3, #1
 8004696:	d119      	bne.n	80046cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	330c      	adds	r3, #12
 800469e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	e853 3f00 	ldrex	r3, [r3]
 80046a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	f023 0310 	bic.w	r3, r3, #16
 80046ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	330c      	adds	r3, #12
 80046b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046b8:	61ba      	str	r2, [r7, #24]
 80046ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046bc:	6979      	ldr	r1, [r7, #20]
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	e841 2300 	strex	r3, r2, [r1]
 80046c4:	613b      	str	r3, [r7, #16]
   return(result);
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1e5      	bne.n	8004698 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2220      	movs	r2, #32
 80046d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80046da:	bf00      	nop
 80046dc:	3754      	adds	r7, #84	@ 0x54
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b084      	sub	sp, #16
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f7ff fd03 	bl	800410c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004706:	bf00      	nop
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800470e:	b480      	push	{r7}
 8004710:	b085      	sub	sp, #20
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b21      	cmp	r3, #33	@ 0x21
 8004720:	d13e      	bne.n	80047a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800472a:	d114      	bne.n	8004756 <UART_Transmit_IT+0x48>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d110      	bne.n	8004756 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	461a      	mov	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004748:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	1c9a      	adds	r2, r3, #2
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	621a      	str	r2, [r3, #32]
 8004754:	e008      	b.n	8004768 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	1c59      	adds	r1, r3, #1
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6211      	str	r1, [r2, #32]
 8004760:	781a      	ldrb	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800476c:	b29b      	uxth	r3, r3
 800476e:	3b01      	subs	r3, #1
 8004770:	b29b      	uxth	r3, r3
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	4619      	mov	r1, r3
 8004776:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10f      	bne.n	800479c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800478a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68da      	ldr	r2, [r3, #12]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800479a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800479c:	2300      	movs	r3, #0
 800479e:	e000      	b.n	80047a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047a0:	2302      	movs	r3, #2
  }
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b082      	sub	sp, #8
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68da      	ldr	r2, [r3, #12]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2220      	movs	r2, #32
 80047ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7fc f9ce 	bl	8000b70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b08c      	sub	sp, #48	@ 0x30
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b22      	cmp	r3, #34	@ 0x22
 80047f0:	f040 80ae 	bne.w	8004950 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047fc:	d117      	bne.n	800482e <UART_Receive_IT+0x50>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d113      	bne.n	800482e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004806:	2300      	movs	r3, #0
 8004808:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800480e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	b29b      	uxth	r3, r3
 8004818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800481c:	b29a      	uxth	r2, r3
 800481e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004820:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004826:	1c9a      	adds	r2, r3, #2
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	629a      	str	r2, [r3, #40]	@ 0x28
 800482c:	e026      	b.n	800487c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004832:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004834:	2300      	movs	r3, #0
 8004836:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004840:	d007      	beq.n	8004852 <UART_Receive_IT+0x74>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10a      	bne.n	8004860 <UART_Receive_IT+0x82>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d106      	bne.n	8004860 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	b2da      	uxtb	r2, r3
 800485a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800485c:	701a      	strb	r2, [r3, #0]
 800485e:	e008      	b.n	8004872 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	b2db      	uxtb	r3, r3
 8004868:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800486c:	b2da      	uxtb	r2, r3
 800486e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004870:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004876:	1c5a      	adds	r2, r3, #1
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004880:	b29b      	uxth	r3, r3
 8004882:	3b01      	subs	r3, #1
 8004884:	b29b      	uxth	r3, r3
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	4619      	mov	r1, r3
 800488a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800488c:	2b00      	cmp	r3, #0
 800488e:	d15d      	bne.n	800494c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68da      	ldr	r2, [r3, #12]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 0220 	bic.w	r2, r2, #32
 800489e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	695a      	ldr	r2, [r3, #20]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0201 	bic.w	r2, r2, #1
 80048be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2220      	movs	r2, #32
 80048c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d135      	bne.n	8004942 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	330c      	adds	r3, #12
 80048e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	e853 3f00 	ldrex	r3, [r3]
 80048ea:	613b      	str	r3, [r7, #16]
   return(result);
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	f023 0310 	bic.w	r3, r3, #16
 80048f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	330c      	adds	r3, #12
 80048fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048fc:	623a      	str	r2, [r7, #32]
 80048fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004900:	69f9      	ldr	r1, [r7, #28]
 8004902:	6a3a      	ldr	r2, [r7, #32]
 8004904:	e841 2300 	strex	r3, r2, [r1]
 8004908:	61bb      	str	r3, [r7, #24]
   return(result);
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1e5      	bne.n	80048dc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0310 	and.w	r3, r3, #16
 800491a:	2b10      	cmp	r3, #16
 800491c:	d10a      	bne.n	8004934 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800491e:	2300      	movs	r3, #0
 8004920:	60fb      	str	r3, [r7, #12]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	60fb      	str	r3, [r7, #12]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004938:	4619      	mov	r1, r3
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7ff fbf0 	bl	8004120 <HAL_UARTEx_RxEventCallback>
 8004940:	e002      	b.n	8004948 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7fc f930 	bl	8000ba8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004948:	2300      	movs	r3, #0
 800494a:	e002      	b.n	8004952 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800494c:	2300      	movs	r3, #0
 800494e:	e000      	b.n	8004952 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004950:	2302      	movs	r3, #2
  }
}
 8004952:	4618      	mov	r0, r3
 8004954:	3730      	adds	r7, #48	@ 0x30
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
	...

0800495c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800495c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004960:	b0c0      	sub	sp, #256	@ 0x100
 8004962:	af00      	add	r7, sp, #0
 8004964:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004978:	68d9      	ldr	r1, [r3, #12]
 800497a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	ea40 0301 	orr.w	r3, r0, r1
 8004984:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	431a      	orrs	r2, r3
 8004994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	431a      	orrs	r2, r3
 800499c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80049b4:	f021 010c 	bic.w	r1, r1, #12
 80049b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80049c2:	430b      	orrs	r3, r1
 80049c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80049d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d6:	6999      	ldr	r1, [r3, #24]
 80049d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	ea40 0301 	orr.w	r3, r0, r1
 80049e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	4b8f      	ldr	r3, [pc, #572]	@ (8004c28 <UART_SetConfig+0x2cc>)
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d005      	beq.n	80049fc <UART_SetConfig+0xa0>
 80049f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	4b8d      	ldr	r3, [pc, #564]	@ (8004c2c <UART_SetConfig+0x2d0>)
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d104      	bne.n	8004a06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049fc:	f7fe feb8 	bl	8003770 <HAL_RCC_GetPCLK2Freq>
 8004a00:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004a04:	e003      	b.n	8004a0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a06:	f7fe fe9f 	bl	8003748 <HAL_RCC_GetPCLK1Freq>
 8004a0a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a12:	69db      	ldr	r3, [r3, #28]
 8004a14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a18:	f040 810c 	bne.w	8004c34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a20:	2200      	movs	r2, #0
 8004a22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a26:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004a2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004a2e:	4622      	mov	r2, r4
 8004a30:	462b      	mov	r3, r5
 8004a32:	1891      	adds	r1, r2, r2
 8004a34:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004a36:	415b      	adcs	r3, r3
 8004a38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004a3e:	4621      	mov	r1, r4
 8004a40:	eb12 0801 	adds.w	r8, r2, r1
 8004a44:	4629      	mov	r1, r5
 8004a46:	eb43 0901 	adc.w	r9, r3, r1
 8004a4a:	f04f 0200 	mov.w	r2, #0
 8004a4e:	f04f 0300 	mov.w	r3, #0
 8004a52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a5e:	4690      	mov	r8, r2
 8004a60:	4699      	mov	r9, r3
 8004a62:	4623      	mov	r3, r4
 8004a64:	eb18 0303 	adds.w	r3, r8, r3
 8004a68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004a6c:	462b      	mov	r3, r5
 8004a6e:	eb49 0303 	adc.w	r3, r9, r3
 8004a72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004a82:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004a86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	18db      	adds	r3, r3, r3
 8004a8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a90:	4613      	mov	r3, r2
 8004a92:	eb42 0303 	adc.w	r3, r2, r3
 8004a96:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004a9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004aa0:	f7fb fbf6 	bl	8000290 <__aeabi_uldivmod>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	4b61      	ldr	r3, [pc, #388]	@ (8004c30 <UART_SetConfig+0x2d4>)
 8004aaa:	fba3 2302 	umull	r2, r3, r3, r2
 8004aae:	095b      	lsrs	r3, r3, #5
 8004ab0:	011c      	lsls	r4, r3, #4
 8004ab2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004abc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004ac0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004ac4:	4642      	mov	r2, r8
 8004ac6:	464b      	mov	r3, r9
 8004ac8:	1891      	adds	r1, r2, r2
 8004aca:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004acc:	415b      	adcs	r3, r3
 8004ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ad0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004ad4:	4641      	mov	r1, r8
 8004ad6:	eb12 0a01 	adds.w	sl, r2, r1
 8004ada:	4649      	mov	r1, r9
 8004adc:	eb43 0b01 	adc.w	fp, r3, r1
 8004ae0:	f04f 0200 	mov.w	r2, #0
 8004ae4:	f04f 0300 	mov.w	r3, #0
 8004ae8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004aec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004af0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004af4:	4692      	mov	sl, r2
 8004af6:	469b      	mov	fp, r3
 8004af8:	4643      	mov	r3, r8
 8004afa:	eb1a 0303 	adds.w	r3, sl, r3
 8004afe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b02:	464b      	mov	r3, r9
 8004b04:	eb4b 0303 	adc.w	r3, fp, r3
 8004b08:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b18:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004b1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b20:	460b      	mov	r3, r1
 8004b22:	18db      	adds	r3, r3, r3
 8004b24:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b26:	4613      	mov	r3, r2
 8004b28:	eb42 0303 	adc.w	r3, r2, r3
 8004b2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004b32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004b36:	f7fb fbab 	bl	8000290 <__aeabi_uldivmod>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	4611      	mov	r1, r2
 8004b40:	4b3b      	ldr	r3, [pc, #236]	@ (8004c30 <UART_SetConfig+0x2d4>)
 8004b42:	fba3 2301 	umull	r2, r3, r3, r1
 8004b46:	095b      	lsrs	r3, r3, #5
 8004b48:	2264      	movs	r2, #100	@ 0x64
 8004b4a:	fb02 f303 	mul.w	r3, r2, r3
 8004b4e:	1acb      	subs	r3, r1, r3
 8004b50:	00db      	lsls	r3, r3, #3
 8004b52:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004b56:	4b36      	ldr	r3, [pc, #216]	@ (8004c30 <UART_SetConfig+0x2d4>)
 8004b58:	fba3 2302 	umull	r2, r3, r3, r2
 8004b5c:	095b      	lsrs	r3, r3, #5
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004b64:	441c      	add	r4, r3
 8004b66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b70:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004b74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004b78:	4642      	mov	r2, r8
 8004b7a:	464b      	mov	r3, r9
 8004b7c:	1891      	adds	r1, r2, r2
 8004b7e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004b80:	415b      	adcs	r3, r3
 8004b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004b88:	4641      	mov	r1, r8
 8004b8a:	1851      	adds	r1, r2, r1
 8004b8c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004b8e:	4649      	mov	r1, r9
 8004b90:	414b      	adcs	r3, r1
 8004b92:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b94:	f04f 0200 	mov.w	r2, #0
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004ba0:	4659      	mov	r1, fp
 8004ba2:	00cb      	lsls	r3, r1, #3
 8004ba4:	4651      	mov	r1, sl
 8004ba6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004baa:	4651      	mov	r1, sl
 8004bac:	00ca      	lsls	r2, r1, #3
 8004bae:	4610      	mov	r0, r2
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	4642      	mov	r2, r8
 8004bb6:	189b      	adds	r3, r3, r2
 8004bb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004bbc:	464b      	mov	r3, r9
 8004bbe:	460a      	mov	r2, r1
 8004bc0:	eb42 0303 	adc.w	r3, r2, r3
 8004bc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004bd4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004bd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004bdc:	460b      	mov	r3, r1
 8004bde:	18db      	adds	r3, r3, r3
 8004be0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004be2:	4613      	mov	r3, r2
 8004be4:	eb42 0303 	adc.w	r3, r2, r3
 8004be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004bee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004bf2:	f7fb fb4d 	bl	8000290 <__aeabi_uldivmod>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8004c30 <UART_SetConfig+0x2d4>)
 8004bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8004c00:	095b      	lsrs	r3, r3, #5
 8004c02:	2164      	movs	r1, #100	@ 0x64
 8004c04:	fb01 f303 	mul.w	r3, r1, r3
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	3332      	adds	r3, #50	@ 0x32
 8004c0e:	4a08      	ldr	r2, [pc, #32]	@ (8004c30 <UART_SetConfig+0x2d4>)
 8004c10:	fba2 2303 	umull	r2, r3, r2, r3
 8004c14:	095b      	lsrs	r3, r3, #5
 8004c16:	f003 0207 	and.w	r2, r3, #7
 8004c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4422      	add	r2, r4
 8004c22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c24:	e106      	b.n	8004e34 <UART_SetConfig+0x4d8>
 8004c26:	bf00      	nop
 8004c28:	40011000 	.word	0x40011000
 8004c2c:	40011400 	.word	0x40011400
 8004c30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004c3e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004c42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004c46:	4642      	mov	r2, r8
 8004c48:	464b      	mov	r3, r9
 8004c4a:	1891      	adds	r1, r2, r2
 8004c4c:	6239      	str	r1, [r7, #32]
 8004c4e:	415b      	adcs	r3, r3
 8004c50:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c56:	4641      	mov	r1, r8
 8004c58:	1854      	adds	r4, r2, r1
 8004c5a:	4649      	mov	r1, r9
 8004c5c:	eb43 0501 	adc.w	r5, r3, r1
 8004c60:	f04f 0200 	mov.w	r2, #0
 8004c64:	f04f 0300 	mov.w	r3, #0
 8004c68:	00eb      	lsls	r3, r5, #3
 8004c6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c6e:	00e2      	lsls	r2, r4, #3
 8004c70:	4614      	mov	r4, r2
 8004c72:	461d      	mov	r5, r3
 8004c74:	4643      	mov	r3, r8
 8004c76:	18e3      	adds	r3, r4, r3
 8004c78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c7c:	464b      	mov	r3, r9
 8004c7e:	eb45 0303 	adc.w	r3, r5, r3
 8004c82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c96:	f04f 0200 	mov.w	r2, #0
 8004c9a:	f04f 0300 	mov.w	r3, #0
 8004c9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ca2:	4629      	mov	r1, r5
 8004ca4:	008b      	lsls	r3, r1, #2
 8004ca6:	4621      	mov	r1, r4
 8004ca8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cac:	4621      	mov	r1, r4
 8004cae:	008a      	lsls	r2, r1, #2
 8004cb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004cb4:	f7fb faec 	bl	8000290 <__aeabi_uldivmod>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4b60      	ldr	r3, [pc, #384]	@ (8004e40 <UART_SetConfig+0x4e4>)
 8004cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	011c      	lsls	r4, r3, #4
 8004cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004cd0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004cd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004cd8:	4642      	mov	r2, r8
 8004cda:	464b      	mov	r3, r9
 8004cdc:	1891      	adds	r1, r2, r2
 8004cde:	61b9      	str	r1, [r7, #24]
 8004ce0:	415b      	adcs	r3, r3
 8004ce2:	61fb      	str	r3, [r7, #28]
 8004ce4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ce8:	4641      	mov	r1, r8
 8004cea:	1851      	adds	r1, r2, r1
 8004cec:	6139      	str	r1, [r7, #16]
 8004cee:	4649      	mov	r1, r9
 8004cf0:	414b      	adcs	r3, r1
 8004cf2:	617b      	str	r3, [r7, #20]
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	f04f 0300 	mov.w	r3, #0
 8004cfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d00:	4659      	mov	r1, fp
 8004d02:	00cb      	lsls	r3, r1, #3
 8004d04:	4651      	mov	r1, sl
 8004d06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d0a:	4651      	mov	r1, sl
 8004d0c:	00ca      	lsls	r2, r1, #3
 8004d0e:	4610      	mov	r0, r2
 8004d10:	4619      	mov	r1, r3
 8004d12:	4603      	mov	r3, r0
 8004d14:	4642      	mov	r2, r8
 8004d16:	189b      	adds	r3, r3, r2
 8004d18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d1c:	464b      	mov	r3, r9
 8004d1e:	460a      	mov	r2, r1
 8004d20:	eb42 0303 	adc.w	r3, r2, r3
 8004d24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d32:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004d34:	f04f 0200 	mov.w	r2, #0
 8004d38:	f04f 0300 	mov.w	r3, #0
 8004d3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004d40:	4649      	mov	r1, r9
 8004d42:	008b      	lsls	r3, r1, #2
 8004d44:	4641      	mov	r1, r8
 8004d46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d4a:	4641      	mov	r1, r8
 8004d4c:	008a      	lsls	r2, r1, #2
 8004d4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004d52:	f7fb fa9d 	bl	8000290 <__aeabi_uldivmod>
 8004d56:	4602      	mov	r2, r0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	4b38      	ldr	r3, [pc, #224]	@ (8004e40 <UART_SetConfig+0x4e4>)
 8004d5e:	fba3 2301 	umull	r2, r3, r3, r1
 8004d62:	095b      	lsrs	r3, r3, #5
 8004d64:	2264      	movs	r2, #100	@ 0x64
 8004d66:	fb02 f303 	mul.w	r3, r2, r3
 8004d6a:	1acb      	subs	r3, r1, r3
 8004d6c:	011b      	lsls	r3, r3, #4
 8004d6e:	3332      	adds	r3, #50	@ 0x32
 8004d70:	4a33      	ldr	r2, [pc, #204]	@ (8004e40 <UART_SetConfig+0x4e4>)
 8004d72:	fba2 2303 	umull	r2, r3, r2, r3
 8004d76:	095b      	lsrs	r3, r3, #5
 8004d78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d7c:	441c      	add	r4, r3
 8004d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d82:	2200      	movs	r2, #0
 8004d84:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d86:	677a      	str	r2, [r7, #116]	@ 0x74
 8004d88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004d8c:	4642      	mov	r2, r8
 8004d8e:	464b      	mov	r3, r9
 8004d90:	1891      	adds	r1, r2, r2
 8004d92:	60b9      	str	r1, [r7, #8]
 8004d94:	415b      	adcs	r3, r3
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d9c:	4641      	mov	r1, r8
 8004d9e:	1851      	adds	r1, r2, r1
 8004da0:	6039      	str	r1, [r7, #0]
 8004da2:	4649      	mov	r1, r9
 8004da4:	414b      	adcs	r3, r1
 8004da6:	607b      	str	r3, [r7, #4]
 8004da8:	f04f 0200 	mov.w	r2, #0
 8004dac:	f04f 0300 	mov.w	r3, #0
 8004db0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004db4:	4659      	mov	r1, fp
 8004db6:	00cb      	lsls	r3, r1, #3
 8004db8:	4651      	mov	r1, sl
 8004dba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dbe:	4651      	mov	r1, sl
 8004dc0:	00ca      	lsls	r2, r1, #3
 8004dc2:	4610      	mov	r0, r2
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	4642      	mov	r2, r8
 8004dca:	189b      	adds	r3, r3, r2
 8004dcc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dce:	464b      	mov	r3, r9
 8004dd0:	460a      	mov	r2, r1
 8004dd2:	eb42 0303 	adc.w	r3, r2, r3
 8004dd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004de2:	667a      	str	r2, [r7, #100]	@ 0x64
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004df0:	4649      	mov	r1, r9
 8004df2:	008b      	lsls	r3, r1, #2
 8004df4:	4641      	mov	r1, r8
 8004df6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dfa:	4641      	mov	r1, r8
 8004dfc:	008a      	lsls	r2, r1, #2
 8004dfe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004e02:	f7fb fa45 	bl	8000290 <__aeabi_uldivmod>
 8004e06:	4602      	mov	r2, r0
 8004e08:	460b      	mov	r3, r1
 8004e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e40 <UART_SetConfig+0x4e4>)
 8004e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e10:	095b      	lsrs	r3, r3, #5
 8004e12:	2164      	movs	r1, #100	@ 0x64
 8004e14:	fb01 f303 	mul.w	r3, r1, r3
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	011b      	lsls	r3, r3, #4
 8004e1c:	3332      	adds	r3, #50	@ 0x32
 8004e1e:	4a08      	ldr	r2, [pc, #32]	@ (8004e40 <UART_SetConfig+0x4e4>)
 8004e20:	fba2 2303 	umull	r2, r3, r2, r3
 8004e24:	095b      	lsrs	r3, r3, #5
 8004e26:	f003 020f 	and.w	r2, r3, #15
 8004e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4422      	add	r2, r4
 8004e32:	609a      	str	r2, [r3, #8]
}
 8004e34:	bf00      	nop
 8004e36:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e40:	51eb851f 	.word	0x51eb851f

08004e44 <std>:
 8004e44:	2300      	movs	r3, #0
 8004e46:	b510      	push	{r4, lr}
 8004e48:	4604      	mov	r4, r0
 8004e4a:	e9c0 3300 	strd	r3, r3, [r0]
 8004e4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e52:	6083      	str	r3, [r0, #8]
 8004e54:	8181      	strh	r1, [r0, #12]
 8004e56:	6643      	str	r3, [r0, #100]	@ 0x64
 8004e58:	81c2      	strh	r2, [r0, #14]
 8004e5a:	6183      	str	r3, [r0, #24]
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	2208      	movs	r2, #8
 8004e60:	305c      	adds	r0, #92	@ 0x5c
 8004e62:	f000 f952 	bl	800510a <memset>
 8004e66:	4b0d      	ldr	r3, [pc, #52]	@ (8004e9c <std+0x58>)
 8004e68:	6263      	str	r3, [r4, #36]	@ 0x24
 8004e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ea0 <std+0x5c>)
 8004e6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ea4 <std+0x60>)
 8004e70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004e72:	4b0d      	ldr	r3, [pc, #52]	@ (8004ea8 <std+0x64>)
 8004e74:	6323      	str	r3, [r4, #48]	@ 0x30
 8004e76:	4b0d      	ldr	r3, [pc, #52]	@ (8004eac <std+0x68>)
 8004e78:	6224      	str	r4, [r4, #32]
 8004e7a:	429c      	cmp	r4, r3
 8004e7c:	d006      	beq.n	8004e8c <std+0x48>
 8004e7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004e82:	4294      	cmp	r4, r2
 8004e84:	d002      	beq.n	8004e8c <std+0x48>
 8004e86:	33d0      	adds	r3, #208	@ 0xd0
 8004e88:	429c      	cmp	r4, r3
 8004e8a:	d105      	bne.n	8004e98 <std+0x54>
 8004e8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e94:	f000 b9c0 	b.w	8005218 <__retarget_lock_init_recursive>
 8004e98:	bd10      	pop	{r4, pc}
 8004e9a:	bf00      	nop
 8004e9c:	08005031 	.word	0x08005031
 8004ea0:	08005053 	.word	0x08005053
 8004ea4:	0800508b 	.word	0x0800508b
 8004ea8:	080050af 	.word	0x080050af
 8004eac:	200006bc 	.word	0x200006bc

08004eb0 <stdio_exit_handler>:
 8004eb0:	4a02      	ldr	r2, [pc, #8]	@ (8004ebc <stdio_exit_handler+0xc>)
 8004eb2:	4903      	ldr	r1, [pc, #12]	@ (8004ec0 <stdio_exit_handler+0x10>)
 8004eb4:	4803      	ldr	r0, [pc, #12]	@ (8004ec4 <stdio_exit_handler+0x14>)
 8004eb6:	f000 b869 	b.w	8004f8c <_fwalk_sglue>
 8004eba:	bf00      	nop
 8004ebc:	2000000c 	.word	0x2000000c
 8004ec0:	08005d81 	.word	0x08005d81
 8004ec4:	2000001c 	.word	0x2000001c

08004ec8 <cleanup_stdio>:
 8004ec8:	6841      	ldr	r1, [r0, #4]
 8004eca:	4b0c      	ldr	r3, [pc, #48]	@ (8004efc <cleanup_stdio+0x34>)
 8004ecc:	4299      	cmp	r1, r3
 8004ece:	b510      	push	{r4, lr}
 8004ed0:	4604      	mov	r4, r0
 8004ed2:	d001      	beq.n	8004ed8 <cleanup_stdio+0x10>
 8004ed4:	f000 ff54 	bl	8005d80 <_fflush_r>
 8004ed8:	68a1      	ldr	r1, [r4, #8]
 8004eda:	4b09      	ldr	r3, [pc, #36]	@ (8004f00 <cleanup_stdio+0x38>)
 8004edc:	4299      	cmp	r1, r3
 8004ede:	d002      	beq.n	8004ee6 <cleanup_stdio+0x1e>
 8004ee0:	4620      	mov	r0, r4
 8004ee2:	f000 ff4d 	bl	8005d80 <_fflush_r>
 8004ee6:	68e1      	ldr	r1, [r4, #12]
 8004ee8:	4b06      	ldr	r3, [pc, #24]	@ (8004f04 <cleanup_stdio+0x3c>)
 8004eea:	4299      	cmp	r1, r3
 8004eec:	d004      	beq.n	8004ef8 <cleanup_stdio+0x30>
 8004eee:	4620      	mov	r0, r4
 8004ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ef4:	f000 bf44 	b.w	8005d80 <_fflush_r>
 8004ef8:	bd10      	pop	{r4, pc}
 8004efa:	bf00      	nop
 8004efc:	200006bc 	.word	0x200006bc
 8004f00:	20000724 	.word	0x20000724
 8004f04:	2000078c 	.word	0x2000078c

08004f08 <global_stdio_init.part.0>:
 8004f08:	b510      	push	{r4, lr}
 8004f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8004f38 <global_stdio_init.part.0+0x30>)
 8004f0c:	4c0b      	ldr	r4, [pc, #44]	@ (8004f3c <global_stdio_init.part.0+0x34>)
 8004f0e:	4a0c      	ldr	r2, [pc, #48]	@ (8004f40 <global_stdio_init.part.0+0x38>)
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	4620      	mov	r0, r4
 8004f14:	2200      	movs	r2, #0
 8004f16:	2104      	movs	r1, #4
 8004f18:	f7ff ff94 	bl	8004e44 <std>
 8004f1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004f20:	2201      	movs	r2, #1
 8004f22:	2109      	movs	r1, #9
 8004f24:	f7ff ff8e 	bl	8004e44 <std>
 8004f28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f32:	2112      	movs	r1, #18
 8004f34:	f7ff bf86 	b.w	8004e44 <std>
 8004f38:	200007f4 	.word	0x200007f4
 8004f3c:	200006bc 	.word	0x200006bc
 8004f40:	08004eb1 	.word	0x08004eb1

08004f44 <__sfp_lock_acquire>:
 8004f44:	4801      	ldr	r0, [pc, #4]	@ (8004f4c <__sfp_lock_acquire+0x8>)
 8004f46:	f000 b968 	b.w	800521a <__retarget_lock_acquire_recursive>
 8004f4a:	bf00      	nop
 8004f4c:	200007fd 	.word	0x200007fd

08004f50 <__sfp_lock_release>:
 8004f50:	4801      	ldr	r0, [pc, #4]	@ (8004f58 <__sfp_lock_release+0x8>)
 8004f52:	f000 b963 	b.w	800521c <__retarget_lock_release_recursive>
 8004f56:	bf00      	nop
 8004f58:	200007fd 	.word	0x200007fd

08004f5c <__sinit>:
 8004f5c:	b510      	push	{r4, lr}
 8004f5e:	4604      	mov	r4, r0
 8004f60:	f7ff fff0 	bl	8004f44 <__sfp_lock_acquire>
 8004f64:	6a23      	ldr	r3, [r4, #32]
 8004f66:	b11b      	cbz	r3, 8004f70 <__sinit+0x14>
 8004f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f6c:	f7ff bff0 	b.w	8004f50 <__sfp_lock_release>
 8004f70:	4b04      	ldr	r3, [pc, #16]	@ (8004f84 <__sinit+0x28>)
 8004f72:	6223      	str	r3, [r4, #32]
 8004f74:	4b04      	ldr	r3, [pc, #16]	@ (8004f88 <__sinit+0x2c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1f5      	bne.n	8004f68 <__sinit+0xc>
 8004f7c:	f7ff ffc4 	bl	8004f08 <global_stdio_init.part.0>
 8004f80:	e7f2      	b.n	8004f68 <__sinit+0xc>
 8004f82:	bf00      	nop
 8004f84:	08004ec9 	.word	0x08004ec9
 8004f88:	200007f4 	.word	0x200007f4

08004f8c <_fwalk_sglue>:
 8004f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f90:	4607      	mov	r7, r0
 8004f92:	4688      	mov	r8, r1
 8004f94:	4614      	mov	r4, r2
 8004f96:	2600      	movs	r6, #0
 8004f98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f9c:	f1b9 0901 	subs.w	r9, r9, #1
 8004fa0:	d505      	bpl.n	8004fae <_fwalk_sglue+0x22>
 8004fa2:	6824      	ldr	r4, [r4, #0]
 8004fa4:	2c00      	cmp	r4, #0
 8004fa6:	d1f7      	bne.n	8004f98 <_fwalk_sglue+0xc>
 8004fa8:	4630      	mov	r0, r6
 8004faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fae:	89ab      	ldrh	r3, [r5, #12]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d907      	bls.n	8004fc4 <_fwalk_sglue+0x38>
 8004fb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	d003      	beq.n	8004fc4 <_fwalk_sglue+0x38>
 8004fbc:	4629      	mov	r1, r5
 8004fbe:	4638      	mov	r0, r7
 8004fc0:	47c0      	blx	r8
 8004fc2:	4306      	orrs	r6, r0
 8004fc4:	3568      	adds	r5, #104	@ 0x68
 8004fc6:	e7e9      	b.n	8004f9c <_fwalk_sglue+0x10>

08004fc8 <iprintf>:
 8004fc8:	b40f      	push	{r0, r1, r2, r3}
 8004fca:	b507      	push	{r0, r1, r2, lr}
 8004fcc:	4906      	ldr	r1, [pc, #24]	@ (8004fe8 <iprintf+0x20>)
 8004fce:	ab04      	add	r3, sp, #16
 8004fd0:	6808      	ldr	r0, [r1, #0]
 8004fd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fd6:	6881      	ldr	r1, [r0, #8]
 8004fd8:	9301      	str	r3, [sp, #4]
 8004fda:	f000 fba9 	bl	8005730 <_vfiprintf_r>
 8004fde:	b003      	add	sp, #12
 8004fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fe4:	b004      	add	sp, #16
 8004fe6:	4770      	bx	lr
 8004fe8:	20000018 	.word	0x20000018

08004fec <siprintf>:
 8004fec:	b40e      	push	{r1, r2, r3}
 8004fee:	b510      	push	{r4, lr}
 8004ff0:	b09d      	sub	sp, #116	@ 0x74
 8004ff2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004ff4:	9002      	str	r0, [sp, #8]
 8004ff6:	9006      	str	r0, [sp, #24]
 8004ff8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004ffc:	480a      	ldr	r0, [pc, #40]	@ (8005028 <siprintf+0x3c>)
 8004ffe:	9107      	str	r1, [sp, #28]
 8005000:	9104      	str	r1, [sp, #16]
 8005002:	490a      	ldr	r1, [pc, #40]	@ (800502c <siprintf+0x40>)
 8005004:	f853 2b04 	ldr.w	r2, [r3], #4
 8005008:	9105      	str	r1, [sp, #20]
 800500a:	2400      	movs	r4, #0
 800500c:	a902      	add	r1, sp, #8
 800500e:	6800      	ldr	r0, [r0, #0]
 8005010:	9301      	str	r3, [sp, #4]
 8005012:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005014:	f000 fa66 	bl	80054e4 <_svfiprintf_r>
 8005018:	9b02      	ldr	r3, [sp, #8]
 800501a:	701c      	strb	r4, [r3, #0]
 800501c:	b01d      	add	sp, #116	@ 0x74
 800501e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005022:	b003      	add	sp, #12
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	20000018 	.word	0x20000018
 800502c:	ffff0208 	.word	0xffff0208

08005030 <__sread>:
 8005030:	b510      	push	{r4, lr}
 8005032:	460c      	mov	r4, r1
 8005034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005038:	f000 f8a0 	bl	800517c <_read_r>
 800503c:	2800      	cmp	r0, #0
 800503e:	bfab      	itete	ge
 8005040:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005042:	89a3      	ldrhlt	r3, [r4, #12]
 8005044:	181b      	addge	r3, r3, r0
 8005046:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800504a:	bfac      	ite	ge
 800504c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800504e:	81a3      	strhlt	r3, [r4, #12]
 8005050:	bd10      	pop	{r4, pc}

08005052 <__swrite>:
 8005052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005056:	461f      	mov	r7, r3
 8005058:	898b      	ldrh	r3, [r1, #12]
 800505a:	05db      	lsls	r3, r3, #23
 800505c:	4605      	mov	r5, r0
 800505e:	460c      	mov	r4, r1
 8005060:	4616      	mov	r6, r2
 8005062:	d505      	bpl.n	8005070 <__swrite+0x1e>
 8005064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005068:	2302      	movs	r3, #2
 800506a:	2200      	movs	r2, #0
 800506c:	f000 f874 	bl	8005158 <_lseek_r>
 8005070:	89a3      	ldrh	r3, [r4, #12]
 8005072:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005076:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800507a:	81a3      	strh	r3, [r4, #12]
 800507c:	4632      	mov	r2, r6
 800507e:	463b      	mov	r3, r7
 8005080:	4628      	mov	r0, r5
 8005082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005086:	f000 b88b 	b.w	80051a0 <_write_r>

0800508a <__sseek>:
 800508a:	b510      	push	{r4, lr}
 800508c:	460c      	mov	r4, r1
 800508e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005092:	f000 f861 	bl	8005158 <_lseek_r>
 8005096:	1c43      	adds	r3, r0, #1
 8005098:	89a3      	ldrh	r3, [r4, #12]
 800509a:	bf15      	itete	ne
 800509c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800509e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80050a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80050a6:	81a3      	strheq	r3, [r4, #12]
 80050a8:	bf18      	it	ne
 80050aa:	81a3      	strhne	r3, [r4, #12]
 80050ac:	bd10      	pop	{r4, pc}

080050ae <__sclose>:
 80050ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050b2:	f000 b841 	b.w	8005138 <_close_r>

080050b6 <memcmp>:
 80050b6:	b510      	push	{r4, lr}
 80050b8:	3901      	subs	r1, #1
 80050ba:	4402      	add	r2, r0
 80050bc:	4290      	cmp	r0, r2
 80050be:	d101      	bne.n	80050c4 <memcmp+0xe>
 80050c0:	2000      	movs	r0, #0
 80050c2:	e005      	b.n	80050d0 <memcmp+0x1a>
 80050c4:	7803      	ldrb	r3, [r0, #0]
 80050c6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80050ca:	42a3      	cmp	r3, r4
 80050cc:	d001      	beq.n	80050d2 <memcmp+0x1c>
 80050ce:	1b18      	subs	r0, r3, r4
 80050d0:	bd10      	pop	{r4, pc}
 80050d2:	3001      	adds	r0, #1
 80050d4:	e7f2      	b.n	80050bc <memcmp+0x6>

080050d6 <memmove>:
 80050d6:	4288      	cmp	r0, r1
 80050d8:	b510      	push	{r4, lr}
 80050da:	eb01 0402 	add.w	r4, r1, r2
 80050de:	d902      	bls.n	80050e6 <memmove+0x10>
 80050e0:	4284      	cmp	r4, r0
 80050e2:	4623      	mov	r3, r4
 80050e4:	d807      	bhi.n	80050f6 <memmove+0x20>
 80050e6:	1e43      	subs	r3, r0, #1
 80050e8:	42a1      	cmp	r1, r4
 80050ea:	d008      	beq.n	80050fe <memmove+0x28>
 80050ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050f0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050f4:	e7f8      	b.n	80050e8 <memmove+0x12>
 80050f6:	4402      	add	r2, r0
 80050f8:	4601      	mov	r1, r0
 80050fa:	428a      	cmp	r2, r1
 80050fc:	d100      	bne.n	8005100 <memmove+0x2a>
 80050fe:	bd10      	pop	{r4, pc}
 8005100:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005104:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005108:	e7f7      	b.n	80050fa <memmove+0x24>

0800510a <memset>:
 800510a:	4402      	add	r2, r0
 800510c:	4603      	mov	r3, r0
 800510e:	4293      	cmp	r3, r2
 8005110:	d100      	bne.n	8005114 <memset+0xa>
 8005112:	4770      	bx	lr
 8005114:	f803 1b01 	strb.w	r1, [r3], #1
 8005118:	e7f9      	b.n	800510e <memset+0x4>

0800511a <strcat>:
 800511a:	b510      	push	{r4, lr}
 800511c:	4602      	mov	r2, r0
 800511e:	7814      	ldrb	r4, [r2, #0]
 8005120:	4613      	mov	r3, r2
 8005122:	3201      	adds	r2, #1
 8005124:	2c00      	cmp	r4, #0
 8005126:	d1fa      	bne.n	800511e <strcat+0x4>
 8005128:	3b01      	subs	r3, #1
 800512a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800512e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005132:	2a00      	cmp	r2, #0
 8005134:	d1f9      	bne.n	800512a <strcat+0x10>
 8005136:	bd10      	pop	{r4, pc}

08005138 <_close_r>:
 8005138:	b538      	push	{r3, r4, r5, lr}
 800513a:	4d06      	ldr	r5, [pc, #24]	@ (8005154 <_close_r+0x1c>)
 800513c:	2300      	movs	r3, #0
 800513e:	4604      	mov	r4, r0
 8005140:	4608      	mov	r0, r1
 8005142:	602b      	str	r3, [r5, #0]
 8005144:	f7fc fe9f 	bl	8001e86 <_close>
 8005148:	1c43      	adds	r3, r0, #1
 800514a:	d102      	bne.n	8005152 <_close_r+0x1a>
 800514c:	682b      	ldr	r3, [r5, #0]
 800514e:	b103      	cbz	r3, 8005152 <_close_r+0x1a>
 8005150:	6023      	str	r3, [r4, #0]
 8005152:	bd38      	pop	{r3, r4, r5, pc}
 8005154:	200007f8 	.word	0x200007f8

08005158 <_lseek_r>:
 8005158:	b538      	push	{r3, r4, r5, lr}
 800515a:	4d07      	ldr	r5, [pc, #28]	@ (8005178 <_lseek_r+0x20>)
 800515c:	4604      	mov	r4, r0
 800515e:	4608      	mov	r0, r1
 8005160:	4611      	mov	r1, r2
 8005162:	2200      	movs	r2, #0
 8005164:	602a      	str	r2, [r5, #0]
 8005166:	461a      	mov	r2, r3
 8005168:	f7fc feb4 	bl	8001ed4 <_lseek>
 800516c:	1c43      	adds	r3, r0, #1
 800516e:	d102      	bne.n	8005176 <_lseek_r+0x1e>
 8005170:	682b      	ldr	r3, [r5, #0]
 8005172:	b103      	cbz	r3, 8005176 <_lseek_r+0x1e>
 8005174:	6023      	str	r3, [r4, #0]
 8005176:	bd38      	pop	{r3, r4, r5, pc}
 8005178:	200007f8 	.word	0x200007f8

0800517c <_read_r>:
 800517c:	b538      	push	{r3, r4, r5, lr}
 800517e:	4d07      	ldr	r5, [pc, #28]	@ (800519c <_read_r+0x20>)
 8005180:	4604      	mov	r4, r0
 8005182:	4608      	mov	r0, r1
 8005184:	4611      	mov	r1, r2
 8005186:	2200      	movs	r2, #0
 8005188:	602a      	str	r2, [r5, #0]
 800518a:	461a      	mov	r2, r3
 800518c:	f7fc fe42 	bl	8001e14 <_read>
 8005190:	1c43      	adds	r3, r0, #1
 8005192:	d102      	bne.n	800519a <_read_r+0x1e>
 8005194:	682b      	ldr	r3, [r5, #0]
 8005196:	b103      	cbz	r3, 800519a <_read_r+0x1e>
 8005198:	6023      	str	r3, [r4, #0]
 800519a:	bd38      	pop	{r3, r4, r5, pc}
 800519c:	200007f8 	.word	0x200007f8

080051a0 <_write_r>:
 80051a0:	b538      	push	{r3, r4, r5, lr}
 80051a2:	4d07      	ldr	r5, [pc, #28]	@ (80051c0 <_write_r+0x20>)
 80051a4:	4604      	mov	r4, r0
 80051a6:	4608      	mov	r0, r1
 80051a8:	4611      	mov	r1, r2
 80051aa:	2200      	movs	r2, #0
 80051ac:	602a      	str	r2, [r5, #0]
 80051ae:	461a      	mov	r2, r3
 80051b0:	f7fc fe4d 	bl	8001e4e <_write>
 80051b4:	1c43      	adds	r3, r0, #1
 80051b6:	d102      	bne.n	80051be <_write_r+0x1e>
 80051b8:	682b      	ldr	r3, [r5, #0]
 80051ba:	b103      	cbz	r3, 80051be <_write_r+0x1e>
 80051bc:	6023      	str	r3, [r4, #0]
 80051be:	bd38      	pop	{r3, r4, r5, pc}
 80051c0:	200007f8 	.word	0x200007f8

080051c4 <__errno>:
 80051c4:	4b01      	ldr	r3, [pc, #4]	@ (80051cc <__errno+0x8>)
 80051c6:	6818      	ldr	r0, [r3, #0]
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	20000018 	.word	0x20000018

080051d0 <__libc_init_array>:
 80051d0:	b570      	push	{r4, r5, r6, lr}
 80051d2:	4d0d      	ldr	r5, [pc, #52]	@ (8005208 <__libc_init_array+0x38>)
 80051d4:	4c0d      	ldr	r4, [pc, #52]	@ (800520c <__libc_init_array+0x3c>)
 80051d6:	1b64      	subs	r4, r4, r5
 80051d8:	10a4      	asrs	r4, r4, #2
 80051da:	2600      	movs	r6, #0
 80051dc:	42a6      	cmp	r6, r4
 80051de:	d109      	bne.n	80051f4 <__libc_init_array+0x24>
 80051e0:	4d0b      	ldr	r5, [pc, #44]	@ (8005210 <__libc_init_array+0x40>)
 80051e2:	4c0c      	ldr	r4, [pc, #48]	@ (8005214 <__libc_init_array+0x44>)
 80051e4:	f000 ff52 	bl	800608c <_init>
 80051e8:	1b64      	subs	r4, r4, r5
 80051ea:	10a4      	asrs	r4, r4, #2
 80051ec:	2600      	movs	r6, #0
 80051ee:	42a6      	cmp	r6, r4
 80051f0:	d105      	bne.n	80051fe <__libc_init_array+0x2e>
 80051f2:	bd70      	pop	{r4, r5, r6, pc}
 80051f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80051f8:	4798      	blx	r3
 80051fa:	3601      	adds	r6, #1
 80051fc:	e7ee      	b.n	80051dc <__libc_init_array+0xc>
 80051fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005202:	4798      	blx	r3
 8005204:	3601      	adds	r6, #1
 8005206:	e7f2      	b.n	80051ee <__libc_init_array+0x1e>
 8005208:	08006920 	.word	0x08006920
 800520c:	08006920 	.word	0x08006920
 8005210:	08006920 	.word	0x08006920
 8005214:	08006924 	.word	0x08006924

08005218 <__retarget_lock_init_recursive>:
 8005218:	4770      	bx	lr

0800521a <__retarget_lock_acquire_recursive>:
 800521a:	4770      	bx	lr

0800521c <__retarget_lock_release_recursive>:
 800521c:	4770      	bx	lr

0800521e <memcpy>:
 800521e:	440a      	add	r2, r1
 8005220:	4291      	cmp	r1, r2
 8005222:	f100 33ff 	add.w	r3, r0, #4294967295
 8005226:	d100      	bne.n	800522a <memcpy+0xc>
 8005228:	4770      	bx	lr
 800522a:	b510      	push	{r4, lr}
 800522c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005230:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005234:	4291      	cmp	r1, r2
 8005236:	d1f9      	bne.n	800522c <memcpy+0xe>
 8005238:	bd10      	pop	{r4, pc}
	...

0800523c <_free_r>:
 800523c:	b538      	push	{r3, r4, r5, lr}
 800523e:	4605      	mov	r5, r0
 8005240:	2900      	cmp	r1, #0
 8005242:	d041      	beq.n	80052c8 <_free_r+0x8c>
 8005244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005248:	1f0c      	subs	r4, r1, #4
 800524a:	2b00      	cmp	r3, #0
 800524c:	bfb8      	it	lt
 800524e:	18e4      	addlt	r4, r4, r3
 8005250:	f000 f8e0 	bl	8005414 <__malloc_lock>
 8005254:	4a1d      	ldr	r2, [pc, #116]	@ (80052cc <_free_r+0x90>)
 8005256:	6813      	ldr	r3, [r2, #0]
 8005258:	b933      	cbnz	r3, 8005268 <_free_r+0x2c>
 800525a:	6063      	str	r3, [r4, #4]
 800525c:	6014      	str	r4, [r2, #0]
 800525e:	4628      	mov	r0, r5
 8005260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005264:	f000 b8dc 	b.w	8005420 <__malloc_unlock>
 8005268:	42a3      	cmp	r3, r4
 800526a:	d908      	bls.n	800527e <_free_r+0x42>
 800526c:	6820      	ldr	r0, [r4, #0]
 800526e:	1821      	adds	r1, r4, r0
 8005270:	428b      	cmp	r3, r1
 8005272:	bf01      	itttt	eq
 8005274:	6819      	ldreq	r1, [r3, #0]
 8005276:	685b      	ldreq	r3, [r3, #4]
 8005278:	1809      	addeq	r1, r1, r0
 800527a:	6021      	streq	r1, [r4, #0]
 800527c:	e7ed      	b.n	800525a <_free_r+0x1e>
 800527e:	461a      	mov	r2, r3
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	b10b      	cbz	r3, 8005288 <_free_r+0x4c>
 8005284:	42a3      	cmp	r3, r4
 8005286:	d9fa      	bls.n	800527e <_free_r+0x42>
 8005288:	6811      	ldr	r1, [r2, #0]
 800528a:	1850      	adds	r0, r2, r1
 800528c:	42a0      	cmp	r0, r4
 800528e:	d10b      	bne.n	80052a8 <_free_r+0x6c>
 8005290:	6820      	ldr	r0, [r4, #0]
 8005292:	4401      	add	r1, r0
 8005294:	1850      	adds	r0, r2, r1
 8005296:	4283      	cmp	r3, r0
 8005298:	6011      	str	r1, [r2, #0]
 800529a:	d1e0      	bne.n	800525e <_free_r+0x22>
 800529c:	6818      	ldr	r0, [r3, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	6053      	str	r3, [r2, #4]
 80052a2:	4408      	add	r0, r1
 80052a4:	6010      	str	r0, [r2, #0]
 80052a6:	e7da      	b.n	800525e <_free_r+0x22>
 80052a8:	d902      	bls.n	80052b0 <_free_r+0x74>
 80052aa:	230c      	movs	r3, #12
 80052ac:	602b      	str	r3, [r5, #0]
 80052ae:	e7d6      	b.n	800525e <_free_r+0x22>
 80052b0:	6820      	ldr	r0, [r4, #0]
 80052b2:	1821      	adds	r1, r4, r0
 80052b4:	428b      	cmp	r3, r1
 80052b6:	bf04      	itt	eq
 80052b8:	6819      	ldreq	r1, [r3, #0]
 80052ba:	685b      	ldreq	r3, [r3, #4]
 80052bc:	6063      	str	r3, [r4, #4]
 80052be:	bf04      	itt	eq
 80052c0:	1809      	addeq	r1, r1, r0
 80052c2:	6021      	streq	r1, [r4, #0]
 80052c4:	6054      	str	r4, [r2, #4]
 80052c6:	e7ca      	b.n	800525e <_free_r+0x22>
 80052c8:	bd38      	pop	{r3, r4, r5, pc}
 80052ca:	bf00      	nop
 80052cc:	20000804 	.word	0x20000804

080052d0 <sbrk_aligned>:
 80052d0:	b570      	push	{r4, r5, r6, lr}
 80052d2:	4e0f      	ldr	r6, [pc, #60]	@ (8005310 <sbrk_aligned+0x40>)
 80052d4:	460c      	mov	r4, r1
 80052d6:	6831      	ldr	r1, [r6, #0]
 80052d8:	4605      	mov	r5, r0
 80052da:	b911      	cbnz	r1, 80052e2 <sbrk_aligned+0x12>
 80052dc:	f000 fe0c 	bl	8005ef8 <_sbrk_r>
 80052e0:	6030      	str	r0, [r6, #0]
 80052e2:	4621      	mov	r1, r4
 80052e4:	4628      	mov	r0, r5
 80052e6:	f000 fe07 	bl	8005ef8 <_sbrk_r>
 80052ea:	1c43      	adds	r3, r0, #1
 80052ec:	d103      	bne.n	80052f6 <sbrk_aligned+0x26>
 80052ee:	f04f 34ff 	mov.w	r4, #4294967295
 80052f2:	4620      	mov	r0, r4
 80052f4:	bd70      	pop	{r4, r5, r6, pc}
 80052f6:	1cc4      	adds	r4, r0, #3
 80052f8:	f024 0403 	bic.w	r4, r4, #3
 80052fc:	42a0      	cmp	r0, r4
 80052fe:	d0f8      	beq.n	80052f2 <sbrk_aligned+0x22>
 8005300:	1a21      	subs	r1, r4, r0
 8005302:	4628      	mov	r0, r5
 8005304:	f000 fdf8 	bl	8005ef8 <_sbrk_r>
 8005308:	3001      	adds	r0, #1
 800530a:	d1f2      	bne.n	80052f2 <sbrk_aligned+0x22>
 800530c:	e7ef      	b.n	80052ee <sbrk_aligned+0x1e>
 800530e:	bf00      	nop
 8005310:	20000800 	.word	0x20000800

08005314 <_malloc_r>:
 8005314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005318:	1ccd      	adds	r5, r1, #3
 800531a:	f025 0503 	bic.w	r5, r5, #3
 800531e:	3508      	adds	r5, #8
 8005320:	2d0c      	cmp	r5, #12
 8005322:	bf38      	it	cc
 8005324:	250c      	movcc	r5, #12
 8005326:	2d00      	cmp	r5, #0
 8005328:	4606      	mov	r6, r0
 800532a:	db01      	blt.n	8005330 <_malloc_r+0x1c>
 800532c:	42a9      	cmp	r1, r5
 800532e:	d904      	bls.n	800533a <_malloc_r+0x26>
 8005330:	230c      	movs	r3, #12
 8005332:	6033      	str	r3, [r6, #0]
 8005334:	2000      	movs	r0, #0
 8005336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800533a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005410 <_malloc_r+0xfc>
 800533e:	f000 f869 	bl	8005414 <__malloc_lock>
 8005342:	f8d8 3000 	ldr.w	r3, [r8]
 8005346:	461c      	mov	r4, r3
 8005348:	bb44      	cbnz	r4, 800539c <_malloc_r+0x88>
 800534a:	4629      	mov	r1, r5
 800534c:	4630      	mov	r0, r6
 800534e:	f7ff ffbf 	bl	80052d0 <sbrk_aligned>
 8005352:	1c43      	adds	r3, r0, #1
 8005354:	4604      	mov	r4, r0
 8005356:	d158      	bne.n	800540a <_malloc_r+0xf6>
 8005358:	f8d8 4000 	ldr.w	r4, [r8]
 800535c:	4627      	mov	r7, r4
 800535e:	2f00      	cmp	r7, #0
 8005360:	d143      	bne.n	80053ea <_malloc_r+0xd6>
 8005362:	2c00      	cmp	r4, #0
 8005364:	d04b      	beq.n	80053fe <_malloc_r+0xea>
 8005366:	6823      	ldr	r3, [r4, #0]
 8005368:	4639      	mov	r1, r7
 800536a:	4630      	mov	r0, r6
 800536c:	eb04 0903 	add.w	r9, r4, r3
 8005370:	f000 fdc2 	bl	8005ef8 <_sbrk_r>
 8005374:	4581      	cmp	r9, r0
 8005376:	d142      	bne.n	80053fe <_malloc_r+0xea>
 8005378:	6821      	ldr	r1, [r4, #0]
 800537a:	1a6d      	subs	r5, r5, r1
 800537c:	4629      	mov	r1, r5
 800537e:	4630      	mov	r0, r6
 8005380:	f7ff ffa6 	bl	80052d0 <sbrk_aligned>
 8005384:	3001      	adds	r0, #1
 8005386:	d03a      	beq.n	80053fe <_malloc_r+0xea>
 8005388:	6823      	ldr	r3, [r4, #0]
 800538a:	442b      	add	r3, r5
 800538c:	6023      	str	r3, [r4, #0]
 800538e:	f8d8 3000 	ldr.w	r3, [r8]
 8005392:	685a      	ldr	r2, [r3, #4]
 8005394:	bb62      	cbnz	r2, 80053f0 <_malloc_r+0xdc>
 8005396:	f8c8 7000 	str.w	r7, [r8]
 800539a:	e00f      	b.n	80053bc <_malloc_r+0xa8>
 800539c:	6822      	ldr	r2, [r4, #0]
 800539e:	1b52      	subs	r2, r2, r5
 80053a0:	d420      	bmi.n	80053e4 <_malloc_r+0xd0>
 80053a2:	2a0b      	cmp	r2, #11
 80053a4:	d917      	bls.n	80053d6 <_malloc_r+0xc2>
 80053a6:	1961      	adds	r1, r4, r5
 80053a8:	42a3      	cmp	r3, r4
 80053aa:	6025      	str	r5, [r4, #0]
 80053ac:	bf18      	it	ne
 80053ae:	6059      	strne	r1, [r3, #4]
 80053b0:	6863      	ldr	r3, [r4, #4]
 80053b2:	bf08      	it	eq
 80053b4:	f8c8 1000 	streq.w	r1, [r8]
 80053b8:	5162      	str	r2, [r4, r5]
 80053ba:	604b      	str	r3, [r1, #4]
 80053bc:	4630      	mov	r0, r6
 80053be:	f000 f82f 	bl	8005420 <__malloc_unlock>
 80053c2:	f104 000b 	add.w	r0, r4, #11
 80053c6:	1d23      	adds	r3, r4, #4
 80053c8:	f020 0007 	bic.w	r0, r0, #7
 80053cc:	1ac2      	subs	r2, r0, r3
 80053ce:	bf1c      	itt	ne
 80053d0:	1a1b      	subne	r3, r3, r0
 80053d2:	50a3      	strne	r3, [r4, r2]
 80053d4:	e7af      	b.n	8005336 <_malloc_r+0x22>
 80053d6:	6862      	ldr	r2, [r4, #4]
 80053d8:	42a3      	cmp	r3, r4
 80053da:	bf0c      	ite	eq
 80053dc:	f8c8 2000 	streq.w	r2, [r8]
 80053e0:	605a      	strne	r2, [r3, #4]
 80053e2:	e7eb      	b.n	80053bc <_malloc_r+0xa8>
 80053e4:	4623      	mov	r3, r4
 80053e6:	6864      	ldr	r4, [r4, #4]
 80053e8:	e7ae      	b.n	8005348 <_malloc_r+0x34>
 80053ea:	463c      	mov	r4, r7
 80053ec:	687f      	ldr	r7, [r7, #4]
 80053ee:	e7b6      	b.n	800535e <_malloc_r+0x4a>
 80053f0:	461a      	mov	r2, r3
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	42a3      	cmp	r3, r4
 80053f6:	d1fb      	bne.n	80053f0 <_malloc_r+0xdc>
 80053f8:	2300      	movs	r3, #0
 80053fa:	6053      	str	r3, [r2, #4]
 80053fc:	e7de      	b.n	80053bc <_malloc_r+0xa8>
 80053fe:	230c      	movs	r3, #12
 8005400:	6033      	str	r3, [r6, #0]
 8005402:	4630      	mov	r0, r6
 8005404:	f000 f80c 	bl	8005420 <__malloc_unlock>
 8005408:	e794      	b.n	8005334 <_malloc_r+0x20>
 800540a:	6005      	str	r5, [r0, #0]
 800540c:	e7d6      	b.n	80053bc <_malloc_r+0xa8>
 800540e:	bf00      	nop
 8005410:	20000804 	.word	0x20000804

08005414 <__malloc_lock>:
 8005414:	4801      	ldr	r0, [pc, #4]	@ (800541c <__malloc_lock+0x8>)
 8005416:	f7ff bf00 	b.w	800521a <__retarget_lock_acquire_recursive>
 800541a:	bf00      	nop
 800541c:	200007fc 	.word	0x200007fc

08005420 <__malloc_unlock>:
 8005420:	4801      	ldr	r0, [pc, #4]	@ (8005428 <__malloc_unlock+0x8>)
 8005422:	f7ff befb 	b.w	800521c <__retarget_lock_release_recursive>
 8005426:	bf00      	nop
 8005428:	200007fc 	.word	0x200007fc

0800542c <__ssputs_r>:
 800542c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005430:	688e      	ldr	r6, [r1, #8]
 8005432:	461f      	mov	r7, r3
 8005434:	42be      	cmp	r6, r7
 8005436:	680b      	ldr	r3, [r1, #0]
 8005438:	4682      	mov	sl, r0
 800543a:	460c      	mov	r4, r1
 800543c:	4690      	mov	r8, r2
 800543e:	d82d      	bhi.n	800549c <__ssputs_r+0x70>
 8005440:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005444:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005448:	d026      	beq.n	8005498 <__ssputs_r+0x6c>
 800544a:	6965      	ldr	r5, [r4, #20]
 800544c:	6909      	ldr	r1, [r1, #16]
 800544e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005452:	eba3 0901 	sub.w	r9, r3, r1
 8005456:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800545a:	1c7b      	adds	r3, r7, #1
 800545c:	444b      	add	r3, r9
 800545e:	106d      	asrs	r5, r5, #1
 8005460:	429d      	cmp	r5, r3
 8005462:	bf38      	it	cc
 8005464:	461d      	movcc	r5, r3
 8005466:	0553      	lsls	r3, r2, #21
 8005468:	d527      	bpl.n	80054ba <__ssputs_r+0x8e>
 800546a:	4629      	mov	r1, r5
 800546c:	f7ff ff52 	bl	8005314 <_malloc_r>
 8005470:	4606      	mov	r6, r0
 8005472:	b360      	cbz	r0, 80054ce <__ssputs_r+0xa2>
 8005474:	6921      	ldr	r1, [r4, #16]
 8005476:	464a      	mov	r2, r9
 8005478:	f7ff fed1 	bl	800521e <memcpy>
 800547c:	89a3      	ldrh	r3, [r4, #12]
 800547e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005486:	81a3      	strh	r3, [r4, #12]
 8005488:	6126      	str	r6, [r4, #16]
 800548a:	6165      	str	r5, [r4, #20]
 800548c:	444e      	add	r6, r9
 800548e:	eba5 0509 	sub.w	r5, r5, r9
 8005492:	6026      	str	r6, [r4, #0]
 8005494:	60a5      	str	r5, [r4, #8]
 8005496:	463e      	mov	r6, r7
 8005498:	42be      	cmp	r6, r7
 800549a:	d900      	bls.n	800549e <__ssputs_r+0x72>
 800549c:	463e      	mov	r6, r7
 800549e:	6820      	ldr	r0, [r4, #0]
 80054a0:	4632      	mov	r2, r6
 80054a2:	4641      	mov	r1, r8
 80054a4:	f7ff fe17 	bl	80050d6 <memmove>
 80054a8:	68a3      	ldr	r3, [r4, #8]
 80054aa:	1b9b      	subs	r3, r3, r6
 80054ac:	60a3      	str	r3, [r4, #8]
 80054ae:	6823      	ldr	r3, [r4, #0]
 80054b0:	4433      	add	r3, r6
 80054b2:	6023      	str	r3, [r4, #0]
 80054b4:	2000      	movs	r0, #0
 80054b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054ba:	462a      	mov	r2, r5
 80054bc:	f000 fd2c 	bl	8005f18 <_realloc_r>
 80054c0:	4606      	mov	r6, r0
 80054c2:	2800      	cmp	r0, #0
 80054c4:	d1e0      	bne.n	8005488 <__ssputs_r+0x5c>
 80054c6:	6921      	ldr	r1, [r4, #16]
 80054c8:	4650      	mov	r0, sl
 80054ca:	f7ff feb7 	bl	800523c <_free_r>
 80054ce:	230c      	movs	r3, #12
 80054d0:	f8ca 3000 	str.w	r3, [sl]
 80054d4:	89a3      	ldrh	r3, [r4, #12]
 80054d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054da:	81a3      	strh	r3, [r4, #12]
 80054dc:	f04f 30ff 	mov.w	r0, #4294967295
 80054e0:	e7e9      	b.n	80054b6 <__ssputs_r+0x8a>
	...

080054e4 <_svfiprintf_r>:
 80054e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e8:	4698      	mov	r8, r3
 80054ea:	898b      	ldrh	r3, [r1, #12]
 80054ec:	061b      	lsls	r3, r3, #24
 80054ee:	b09d      	sub	sp, #116	@ 0x74
 80054f0:	4607      	mov	r7, r0
 80054f2:	460d      	mov	r5, r1
 80054f4:	4614      	mov	r4, r2
 80054f6:	d510      	bpl.n	800551a <_svfiprintf_r+0x36>
 80054f8:	690b      	ldr	r3, [r1, #16]
 80054fa:	b973      	cbnz	r3, 800551a <_svfiprintf_r+0x36>
 80054fc:	2140      	movs	r1, #64	@ 0x40
 80054fe:	f7ff ff09 	bl	8005314 <_malloc_r>
 8005502:	6028      	str	r0, [r5, #0]
 8005504:	6128      	str	r0, [r5, #16]
 8005506:	b930      	cbnz	r0, 8005516 <_svfiprintf_r+0x32>
 8005508:	230c      	movs	r3, #12
 800550a:	603b      	str	r3, [r7, #0]
 800550c:	f04f 30ff 	mov.w	r0, #4294967295
 8005510:	b01d      	add	sp, #116	@ 0x74
 8005512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005516:	2340      	movs	r3, #64	@ 0x40
 8005518:	616b      	str	r3, [r5, #20]
 800551a:	2300      	movs	r3, #0
 800551c:	9309      	str	r3, [sp, #36]	@ 0x24
 800551e:	2320      	movs	r3, #32
 8005520:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005524:	f8cd 800c 	str.w	r8, [sp, #12]
 8005528:	2330      	movs	r3, #48	@ 0x30
 800552a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80056c8 <_svfiprintf_r+0x1e4>
 800552e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005532:	f04f 0901 	mov.w	r9, #1
 8005536:	4623      	mov	r3, r4
 8005538:	469a      	mov	sl, r3
 800553a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800553e:	b10a      	cbz	r2, 8005544 <_svfiprintf_r+0x60>
 8005540:	2a25      	cmp	r2, #37	@ 0x25
 8005542:	d1f9      	bne.n	8005538 <_svfiprintf_r+0x54>
 8005544:	ebba 0b04 	subs.w	fp, sl, r4
 8005548:	d00b      	beq.n	8005562 <_svfiprintf_r+0x7e>
 800554a:	465b      	mov	r3, fp
 800554c:	4622      	mov	r2, r4
 800554e:	4629      	mov	r1, r5
 8005550:	4638      	mov	r0, r7
 8005552:	f7ff ff6b 	bl	800542c <__ssputs_r>
 8005556:	3001      	adds	r0, #1
 8005558:	f000 80a7 	beq.w	80056aa <_svfiprintf_r+0x1c6>
 800555c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800555e:	445a      	add	r2, fp
 8005560:	9209      	str	r2, [sp, #36]	@ 0x24
 8005562:	f89a 3000 	ldrb.w	r3, [sl]
 8005566:	2b00      	cmp	r3, #0
 8005568:	f000 809f 	beq.w	80056aa <_svfiprintf_r+0x1c6>
 800556c:	2300      	movs	r3, #0
 800556e:	f04f 32ff 	mov.w	r2, #4294967295
 8005572:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005576:	f10a 0a01 	add.w	sl, sl, #1
 800557a:	9304      	str	r3, [sp, #16]
 800557c:	9307      	str	r3, [sp, #28]
 800557e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005582:	931a      	str	r3, [sp, #104]	@ 0x68
 8005584:	4654      	mov	r4, sl
 8005586:	2205      	movs	r2, #5
 8005588:	f814 1b01 	ldrb.w	r1, [r4], #1
 800558c:	484e      	ldr	r0, [pc, #312]	@ (80056c8 <_svfiprintf_r+0x1e4>)
 800558e:	f7fa fe2f 	bl	80001f0 <memchr>
 8005592:	9a04      	ldr	r2, [sp, #16]
 8005594:	b9d8      	cbnz	r0, 80055ce <_svfiprintf_r+0xea>
 8005596:	06d0      	lsls	r0, r2, #27
 8005598:	bf44      	itt	mi
 800559a:	2320      	movmi	r3, #32
 800559c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80055a0:	0711      	lsls	r1, r2, #28
 80055a2:	bf44      	itt	mi
 80055a4:	232b      	movmi	r3, #43	@ 0x2b
 80055a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80055aa:	f89a 3000 	ldrb.w	r3, [sl]
 80055ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80055b0:	d015      	beq.n	80055de <_svfiprintf_r+0xfa>
 80055b2:	9a07      	ldr	r2, [sp, #28]
 80055b4:	4654      	mov	r4, sl
 80055b6:	2000      	movs	r0, #0
 80055b8:	f04f 0c0a 	mov.w	ip, #10
 80055bc:	4621      	mov	r1, r4
 80055be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055c2:	3b30      	subs	r3, #48	@ 0x30
 80055c4:	2b09      	cmp	r3, #9
 80055c6:	d94b      	bls.n	8005660 <_svfiprintf_r+0x17c>
 80055c8:	b1b0      	cbz	r0, 80055f8 <_svfiprintf_r+0x114>
 80055ca:	9207      	str	r2, [sp, #28]
 80055cc:	e014      	b.n	80055f8 <_svfiprintf_r+0x114>
 80055ce:	eba0 0308 	sub.w	r3, r0, r8
 80055d2:	fa09 f303 	lsl.w	r3, r9, r3
 80055d6:	4313      	orrs	r3, r2
 80055d8:	9304      	str	r3, [sp, #16]
 80055da:	46a2      	mov	sl, r4
 80055dc:	e7d2      	b.n	8005584 <_svfiprintf_r+0xa0>
 80055de:	9b03      	ldr	r3, [sp, #12]
 80055e0:	1d19      	adds	r1, r3, #4
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	9103      	str	r1, [sp, #12]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	bfbb      	ittet	lt
 80055ea:	425b      	neglt	r3, r3
 80055ec:	f042 0202 	orrlt.w	r2, r2, #2
 80055f0:	9307      	strge	r3, [sp, #28]
 80055f2:	9307      	strlt	r3, [sp, #28]
 80055f4:	bfb8      	it	lt
 80055f6:	9204      	strlt	r2, [sp, #16]
 80055f8:	7823      	ldrb	r3, [r4, #0]
 80055fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80055fc:	d10a      	bne.n	8005614 <_svfiprintf_r+0x130>
 80055fe:	7863      	ldrb	r3, [r4, #1]
 8005600:	2b2a      	cmp	r3, #42	@ 0x2a
 8005602:	d132      	bne.n	800566a <_svfiprintf_r+0x186>
 8005604:	9b03      	ldr	r3, [sp, #12]
 8005606:	1d1a      	adds	r2, r3, #4
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	9203      	str	r2, [sp, #12]
 800560c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005610:	3402      	adds	r4, #2
 8005612:	9305      	str	r3, [sp, #20]
 8005614:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80056d8 <_svfiprintf_r+0x1f4>
 8005618:	7821      	ldrb	r1, [r4, #0]
 800561a:	2203      	movs	r2, #3
 800561c:	4650      	mov	r0, sl
 800561e:	f7fa fde7 	bl	80001f0 <memchr>
 8005622:	b138      	cbz	r0, 8005634 <_svfiprintf_r+0x150>
 8005624:	9b04      	ldr	r3, [sp, #16]
 8005626:	eba0 000a 	sub.w	r0, r0, sl
 800562a:	2240      	movs	r2, #64	@ 0x40
 800562c:	4082      	lsls	r2, r0
 800562e:	4313      	orrs	r3, r2
 8005630:	3401      	adds	r4, #1
 8005632:	9304      	str	r3, [sp, #16]
 8005634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005638:	4824      	ldr	r0, [pc, #144]	@ (80056cc <_svfiprintf_r+0x1e8>)
 800563a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800563e:	2206      	movs	r2, #6
 8005640:	f7fa fdd6 	bl	80001f0 <memchr>
 8005644:	2800      	cmp	r0, #0
 8005646:	d036      	beq.n	80056b6 <_svfiprintf_r+0x1d2>
 8005648:	4b21      	ldr	r3, [pc, #132]	@ (80056d0 <_svfiprintf_r+0x1ec>)
 800564a:	bb1b      	cbnz	r3, 8005694 <_svfiprintf_r+0x1b0>
 800564c:	9b03      	ldr	r3, [sp, #12]
 800564e:	3307      	adds	r3, #7
 8005650:	f023 0307 	bic.w	r3, r3, #7
 8005654:	3308      	adds	r3, #8
 8005656:	9303      	str	r3, [sp, #12]
 8005658:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800565a:	4433      	add	r3, r6
 800565c:	9309      	str	r3, [sp, #36]	@ 0x24
 800565e:	e76a      	b.n	8005536 <_svfiprintf_r+0x52>
 8005660:	fb0c 3202 	mla	r2, ip, r2, r3
 8005664:	460c      	mov	r4, r1
 8005666:	2001      	movs	r0, #1
 8005668:	e7a8      	b.n	80055bc <_svfiprintf_r+0xd8>
 800566a:	2300      	movs	r3, #0
 800566c:	3401      	adds	r4, #1
 800566e:	9305      	str	r3, [sp, #20]
 8005670:	4619      	mov	r1, r3
 8005672:	f04f 0c0a 	mov.w	ip, #10
 8005676:	4620      	mov	r0, r4
 8005678:	f810 2b01 	ldrb.w	r2, [r0], #1
 800567c:	3a30      	subs	r2, #48	@ 0x30
 800567e:	2a09      	cmp	r2, #9
 8005680:	d903      	bls.n	800568a <_svfiprintf_r+0x1a6>
 8005682:	2b00      	cmp	r3, #0
 8005684:	d0c6      	beq.n	8005614 <_svfiprintf_r+0x130>
 8005686:	9105      	str	r1, [sp, #20]
 8005688:	e7c4      	b.n	8005614 <_svfiprintf_r+0x130>
 800568a:	fb0c 2101 	mla	r1, ip, r1, r2
 800568e:	4604      	mov	r4, r0
 8005690:	2301      	movs	r3, #1
 8005692:	e7f0      	b.n	8005676 <_svfiprintf_r+0x192>
 8005694:	ab03      	add	r3, sp, #12
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	462a      	mov	r2, r5
 800569a:	4b0e      	ldr	r3, [pc, #56]	@ (80056d4 <_svfiprintf_r+0x1f0>)
 800569c:	a904      	add	r1, sp, #16
 800569e:	4638      	mov	r0, r7
 80056a0:	f3af 8000 	nop.w
 80056a4:	1c42      	adds	r2, r0, #1
 80056a6:	4606      	mov	r6, r0
 80056a8:	d1d6      	bne.n	8005658 <_svfiprintf_r+0x174>
 80056aa:	89ab      	ldrh	r3, [r5, #12]
 80056ac:	065b      	lsls	r3, r3, #25
 80056ae:	f53f af2d 	bmi.w	800550c <_svfiprintf_r+0x28>
 80056b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80056b4:	e72c      	b.n	8005510 <_svfiprintf_r+0x2c>
 80056b6:	ab03      	add	r3, sp, #12
 80056b8:	9300      	str	r3, [sp, #0]
 80056ba:	462a      	mov	r2, r5
 80056bc:	4b05      	ldr	r3, [pc, #20]	@ (80056d4 <_svfiprintf_r+0x1f0>)
 80056be:	a904      	add	r1, sp, #16
 80056c0:	4638      	mov	r0, r7
 80056c2:	f000 f9bb 	bl	8005a3c <_printf_i>
 80056c6:	e7ed      	b.n	80056a4 <_svfiprintf_r+0x1c0>
 80056c8:	080068e4 	.word	0x080068e4
 80056cc:	080068ee 	.word	0x080068ee
 80056d0:	00000000 	.word	0x00000000
 80056d4:	0800542d 	.word	0x0800542d
 80056d8:	080068ea 	.word	0x080068ea

080056dc <__sfputc_r>:
 80056dc:	6893      	ldr	r3, [r2, #8]
 80056de:	3b01      	subs	r3, #1
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	b410      	push	{r4}
 80056e4:	6093      	str	r3, [r2, #8]
 80056e6:	da08      	bge.n	80056fa <__sfputc_r+0x1e>
 80056e8:	6994      	ldr	r4, [r2, #24]
 80056ea:	42a3      	cmp	r3, r4
 80056ec:	db01      	blt.n	80056f2 <__sfputc_r+0x16>
 80056ee:	290a      	cmp	r1, #10
 80056f0:	d103      	bne.n	80056fa <__sfputc_r+0x1e>
 80056f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056f6:	f000 bb6b 	b.w	8005dd0 <__swbuf_r>
 80056fa:	6813      	ldr	r3, [r2, #0]
 80056fc:	1c58      	adds	r0, r3, #1
 80056fe:	6010      	str	r0, [r2, #0]
 8005700:	7019      	strb	r1, [r3, #0]
 8005702:	4608      	mov	r0, r1
 8005704:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005708:	4770      	bx	lr

0800570a <__sfputs_r>:
 800570a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570c:	4606      	mov	r6, r0
 800570e:	460f      	mov	r7, r1
 8005710:	4614      	mov	r4, r2
 8005712:	18d5      	adds	r5, r2, r3
 8005714:	42ac      	cmp	r4, r5
 8005716:	d101      	bne.n	800571c <__sfputs_r+0x12>
 8005718:	2000      	movs	r0, #0
 800571a:	e007      	b.n	800572c <__sfputs_r+0x22>
 800571c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005720:	463a      	mov	r2, r7
 8005722:	4630      	mov	r0, r6
 8005724:	f7ff ffda 	bl	80056dc <__sfputc_r>
 8005728:	1c43      	adds	r3, r0, #1
 800572a:	d1f3      	bne.n	8005714 <__sfputs_r+0xa>
 800572c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005730 <_vfiprintf_r>:
 8005730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005734:	460d      	mov	r5, r1
 8005736:	b09d      	sub	sp, #116	@ 0x74
 8005738:	4614      	mov	r4, r2
 800573a:	4698      	mov	r8, r3
 800573c:	4606      	mov	r6, r0
 800573e:	b118      	cbz	r0, 8005748 <_vfiprintf_r+0x18>
 8005740:	6a03      	ldr	r3, [r0, #32]
 8005742:	b90b      	cbnz	r3, 8005748 <_vfiprintf_r+0x18>
 8005744:	f7ff fc0a 	bl	8004f5c <__sinit>
 8005748:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800574a:	07d9      	lsls	r1, r3, #31
 800574c:	d405      	bmi.n	800575a <_vfiprintf_r+0x2a>
 800574e:	89ab      	ldrh	r3, [r5, #12]
 8005750:	059a      	lsls	r2, r3, #22
 8005752:	d402      	bmi.n	800575a <_vfiprintf_r+0x2a>
 8005754:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005756:	f7ff fd60 	bl	800521a <__retarget_lock_acquire_recursive>
 800575a:	89ab      	ldrh	r3, [r5, #12]
 800575c:	071b      	lsls	r3, r3, #28
 800575e:	d501      	bpl.n	8005764 <_vfiprintf_r+0x34>
 8005760:	692b      	ldr	r3, [r5, #16]
 8005762:	b99b      	cbnz	r3, 800578c <_vfiprintf_r+0x5c>
 8005764:	4629      	mov	r1, r5
 8005766:	4630      	mov	r0, r6
 8005768:	f000 fb70 	bl	8005e4c <__swsetup_r>
 800576c:	b170      	cbz	r0, 800578c <_vfiprintf_r+0x5c>
 800576e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005770:	07dc      	lsls	r4, r3, #31
 8005772:	d504      	bpl.n	800577e <_vfiprintf_r+0x4e>
 8005774:	f04f 30ff 	mov.w	r0, #4294967295
 8005778:	b01d      	add	sp, #116	@ 0x74
 800577a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800577e:	89ab      	ldrh	r3, [r5, #12]
 8005780:	0598      	lsls	r0, r3, #22
 8005782:	d4f7      	bmi.n	8005774 <_vfiprintf_r+0x44>
 8005784:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005786:	f7ff fd49 	bl	800521c <__retarget_lock_release_recursive>
 800578a:	e7f3      	b.n	8005774 <_vfiprintf_r+0x44>
 800578c:	2300      	movs	r3, #0
 800578e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005790:	2320      	movs	r3, #32
 8005792:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005796:	f8cd 800c 	str.w	r8, [sp, #12]
 800579a:	2330      	movs	r3, #48	@ 0x30
 800579c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800594c <_vfiprintf_r+0x21c>
 80057a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80057a4:	f04f 0901 	mov.w	r9, #1
 80057a8:	4623      	mov	r3, r4
 80057aa:	469a      	mov	sl, r3
 80057ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057b0:	b10a      	cbz	r2, 80057b6 <_vfiprintf_r+0x86>
 80057b2:	2a25      	cmp	r2, #37	@ 0x25
 80057b4:	d1f9      	bne.n	80057aa <_vfiprintf_r+0x7a>
 80057b6:	ebba 0b04 	subs.w	fp, sl, r4
 80057ba:	d00b      	beq.n	80057d4 <_vfiprintf_r+0xa4>
 80057bc:	465b      	mov	r3, fp
 80057be:	4622      	mov	r2, r4
 80057c0:	4629      	mov	r1, r5
 80057c2:	4630      	mov	r0, r6
 80057c4:	f7ff ffa1 	bl	800570a <__sfputs_r>
 80057c8:	3001      	adds	r0, #1
 80057ca:	f000 80a7 	beq.w	800591c <_vfiprintf_r+0x1ec>
 80057ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057d0:	445a      	add	r2, fp
 80057d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80057d4:	f89a 3000 	ldrb.w	r3, [sl]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f000 809f 	beq.w	800591c <_vfiprintf_r+0x1ec>
 80057de:	2300      	movs	r3, #0
 80057e0:	f04f 32ff 	mov.w	r2, #4294967295
 80057e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057e8:	f10a 0a01 	add.w	sl, sl, #1
 80057ec:	9304      	str	r3, [sp, #16]
 80057ee:	9307      	str	r3, [sp, #28]
 80057f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80057f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80057f6:	4654      	mov	r4, sl
 80057f8:	2205      	movs	r2, #5
 80057fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057fe:	4853      	ldr	r0, [pc, #332]	@ (800594c <_vfiprintf_r+0x21c>)
 8005800:	f7fa fcf6 	bl	80001f0 <memchr>
 8005804:	9a04      	ldr	r2, [sp, #16]
 8005806:	b9d8      	cbnz	r0, 8005840 <_vfiprintf_r+0x110>
 8005808:	06d1      	lsls	r1, r2, #27
 800580a:	bf44      	itt	mi
 800580c:	2320      	movmi	r3, #32
 800580e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005812:	0713      	lsls	r3, r2, #28
 8005814:	bf44      	itt	mi
 8005816:	232b      	movmi	r3, #43	@ 0x2b
 8005818:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800581c:	f89a 3000 	ldrb.w	r3, [sl]
 8005820:	2b2a      	cmp	r3, #42	@ 0x2a
 8005822:	d015      	beq.n	8005850 <_vfiprintf_r+0x120>
 8005824:	9a07      	ldr	r2, [sp, #28]
 8005826:	4654      	mov	r4, sl
 8005828:	2000      	movs	r0, #0
 800582a:	f04f 0c0a 	mov.w	ip, #10
 800582e:	4621      	mov	r1, r4
 8005830:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005834:	3b30      	subs	r3, #48	@ 0x30
 8005836:	2b09      	cmp	r3, #9
 8005838:	d94b      	bls.n	80058d2 <_vfiprintf_r+0x1a2>
 800583a:	b1b0      	cbz	r0, 800586a <_vfiprintf_r+0x13a>
 800583c:	9207      	str	r2, [sp, #28]
 800583e:	e014      	b.n	800586a <_vfiprintf_r+0x13a>
 8005840:	eba0 0308 	sub.w	r3, r0, r8
 8005844:	fa09 f303 	lsl.w	r3, r9, r3
 8005848:	4313      	orrs	r3, r2
 800584a:	9304      	str	r3, [sp, #16]
 800584c:	46a2      	mov	sl, r4
 800584e:	e7d2      	b.n	80057f6 <_vfiprintf_r+0xc6>
 8005850:	9b03      	ldr	r3, [sp, #12]
 8005852:	1d19      	adds	r1, r3, #4
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	9103      	str	r1, [sp, #12]
 8005858:	2b00      	cmp	r3, #0
 800585a:	bfbb      	ittet	lt
 800585c:	425b      	neglt	r3, r3
 800585e:	f042 0202 	orrlt.w	r2, r2, #2
 8005862:	9307      	strge	r3, [sp, #28]
 8005864:	9307      	strlt	r3, [sp, #28]
 8005866:	bfb8      	it	lt
 8005868:	9204      	strlt	r2, [sp, #16]
 800586a:	7823      	ldrb	r3, [r4, #0]
 800586c:	2b2e      	cmp	r3, #46	@ 0x2e
 800586e:	d10a      	bne.n	8005886 <_vfiprintf_r+0x156>
 8005870:	7863      	ldrb	r3, [r4, #1]
 8005872:	2b2a      	cmp	r3, #42	@ 0x2a
 8005874:	d132      	bne.n	80058dc <_vfiprintf_r+0x1ac>
 8005876:	9b03      	ldr	r3, [sp, #12]
 8005878:	1d1a      	adds	r2, r3, #4
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	9203      	str	r2, [sp, #12]
 800587e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005882:	3402      	adds	r4, #2
 8005884:	9305      	str	r3, [sp, #20]
 8005886:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800595c <_vfiprintf_r+0x22c>
 800588a:	7821      	ldrb	r1, [r4, #0]
 800588c:	2203      	movs	r2, #3
 800588e:	4650      	mov	r0, sl
 8005890:	f7fa fcae 	bl	80001f0 <memchr>
 8005894:	b138      	cbz	r0, 80058a6 <_vfiprintf_r+0x176>
 8005896:	9b04      	ldr	r3, [sp, #16]
 8005898:	eba0 000a 	sub.w	r0, r0, sl
 800589c:	2240      	movs	r2, #64	@ 0x40
 800589e:	4082      	lsls	r2, r0
 80058a0:	4313      	orrs	r3, r2
 80058a2:	3401      	adds	r4, #1
 80058a4:	9304      	str	r3, [sp, #16]
 80058a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058aa:	4829      	ldr	r0, [pc, #164]	@ (8005950 <_vfiprintf_r+0x220>)
 80058ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80058b0:	2206      	movs	r2, #6
 80058b2:	f7fa fc9d 	bl	80001f0 <memchr>
 80058b6:	2800      	cmp	r0, #0
 80058b8:	d03f      	beq.n	800593a <_vfiprintf_r+0x20a>
 80058ba:	4b26      	ldr	r3, [pc, #152]	@ (8005954 <_vfiprintf_r+0x224>)
 80058bc:	bb1b      	cbnz	r3, 8005906 <_vfiprintf_r+0x1d6>
 80058be:	9b03      	ldr	r3, [sp, #12]
 80058c0:	3307      	adds	r3, #7
 80058c2:	f023 0307 	bic.w	r3, r3, #7
 80058c6:	3308      	adds	r3, #8
 80058c8:	9303      	str	r3, [sp, #12]
 80058ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058cc:	443b      	add	r3, r7
 80058ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80058d0:	e76a      	b.n	80057a8 <_vfiprintf_r+0x78>
 80058d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80058d6:	460c      	mov	r4, r1
 80058d8:	2001      	movs	r0, #1
 80058da:	e7a8      	b.n	800582e <_vfiprintf_r+0xfe>
 80058dc:	2300      	movs	r3, #0
 80058de:	3401      	adds	r4, #1
 80058e0:	9305      	str	r3, [sp, #20]
 80058e2:	4619      	mov	r1, r3
 80058e4:	f04f 0c0a 	mov.w	ip, #10
 80058e8:	4620      	mov	r0, r4
 80058ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058ee:	3a30      	subs	r2, #48	@ 0x30
 80058f0:	2a09      	cmp	r2, #9
 80058f2:	d903      	bls.n	80058fc <_vfiprintf_r+0x1cc>
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d0c6      	beq.n	8005886 <_vfiprintf_r+0x156>
 80058f8:	9105      	str	r1, [sp, #20]
 80058fa:	e7c4      	b.n	8005886 <_vfiprintf_r+0x156>
 80058fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005900:	4604      	mov	r4, r0
 8005902:	2301      	movs	r3, #1
 8005904:	e7f0      	b.n	80058e8 <_vfiprintf_r+0x1b8>
 8005906:	ab03      	add	r3, sp, #12
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	462a      	mov	r2, r5
 800590c:	4b12      	ldr	r3, [pc, #72]	@ (8005958 <_vfiprintf_r+0x228>)
 800590e:	a904      	add	r1, sp, #16
 8005910:	4630      	mov	r0, r6
 8005912:	f3af 8000 	nop.w
 8005916:	4607      	mov	r7, r0
 8005918:	1c78      	adds	r0, r7, #1
 800591a:	d1d6      	bne.n	80058ca <_vfiprintf_r+0x19a>
 800591c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800591e:	07d9      	lsls	r1, r3, #31
 8005920:	d405      	bmi.n	800592e <_vfiprintf_r+0x1fe>
 8005922:	89ab      	ldrh	r3, [r5, #12]
 8005924:	059a      	lsls	r2, r3, #22
 8005926:	d402      	bmi.n	800592e <_vfiprintf_r+0x1fe>
 8005928:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800592a:	f7ff fc77 	bl	800521c <__retarget_lock_release_recursive>
 800592e:	89ab      	ldrh	r3, [r5, #12]
 8005930:	065b      	lsls	r3, r3, #25
 8005932:	f53f af1f 	bmi.w	8005774 <_vfiprintf_r+0x44>
 8005936:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005938:	e71e      	b.n	8005778 <_vfiprintf_r+0x48>
 800593a:	ab03      	add	r3, sp, #12
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	462a      	mov	r2, r5
 8005940:	4b05      	ldr	r3, [pc, #20]	@ (8005958 <_vfiprintf_r+0x228>)
 8005942:	a904      	add	r1, sp, #16
 8005944:	4630      	mov	r0, r6
 8005946:	f000 f879 	bl	8005a3c <_printf_i>
 800594a:	e7e4      	b.n	8005916 <_vfiprintf_r+0x1e6>
 800594c:	080068e4 	.word	0x080068e4
 8005950:	080068ee 	.word	0x080068ee
 8005954:	00000000 	.word	0x00000000
 8005958:	0800570b 	.word	0x0800570b
 800595c:	080068ea 	.word	0x080068ea

08005960 <_printf_common>:
 8005960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005964:	4616      	mov	r6, r2
 8005966:	4698      	mov	r8, r3
 8005968:	688a      	ldr	r2, [r1, #8]
 800596a:	690b      	ldr	r3, [r1, #16]
 800596c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005970:	4293      	cmp	r3, r2
 8005972:	bfb8      	it	lt
 8005974:	4613      	movlt	r3, r2
 8005976:	6033      	str	r3, [r6, #0]
 8005978:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800597c:	4607      	mov	r7, r0
 800597e:	460c      	mov	r4, r1
 8005980:	b10a      	cbz	r2, 8005986 <_printf_common+0x26>
 8005982:	3301      	adds	r3, #1
 8005984:	6033      	str	r3, [r6, #0]
 8005986:	6823      	ldr	r3, [r4, #0]
 8005988:	0699      	lsls	r1, r3, #26
 800598a:	bf42      	ittt	mi
 800598c:	6833      	ldrmi	r3, [r6, #0]
 800598e:	3302      	addmi	r3, #2
 8005990:	6033      	strmi	r3, [r6, #0]
 8005992:	6825      	ldr	r5, [r4, #0]
 8005994:	f015 0506 	ands.w	r5, r5, #6
 8005998:	d106      	bne.n	80059a8 <_printf_common+0x48>
 800599a:	f104 0a19 	add.w	sl, r4, #25
 800599e:	68e3      	ldr	r3, [r4, #12]
 80059a0:	6832      	ldr	r2, [r6, #0]
 80059a2:	1a9b      	subs	r3, r3, r2
 80059a4:	42ab      	cmp	r3, r5
 80059a6:	dc26      	bgt.n	80059f6 <_printf_common+0x96>
 80059a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80059ac:	6822      	ldr	r2, [r4, #0]
 80059ae:	3b00      	subs	r3, #0
 80059b0:	bf18      	it	ne
 80059b2:	2301      	movne	r3, #1
 80059b4:	0692      	lsls	r2, r2, #26
 80059b6:	d42b      	bmi.n	8005a10 <_printf_common+0xb0>
 80059b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80059bc:	4641      	mov	r1, r8
 80059be:	4638      	mov	r0, r7
 80059c0:	47c8      	blx	r9
 80059c2:	3001      	adds	r0, #1
 80059c4:	d01e      	beq.n	8005a04 <_printf_common+0xa4>
 80059c6:	6823      	ldr	r3, [r4, #0]
 80059c8:	6922      	ldr	r2, [r4, #16]
 80059ca:	f003 0306 	and.w	r3, r3, #6
 80059ce:	2b04      	cmp	r3, #4
 80059d0:	bf02      	ittt	eq
 80059d2:	68e5      	ldreq	r5, [r4, #12]
 80059d4:	6833      	ldreq	r3, [r6, #0]
 80059d6:	1aed      	subeq	r5, r5, r3
 80059d8:	68a3      	ldr	r3, [r4, #8]
 80059da:	bf0c      	ite	eq
 80059dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059e0:	2500      	movne	r5, #0
 80059e2:	4293      	cmp	r3, r2
 80059e4:	bfc4      	itt	gt
 80059e6:	1a9b      	subgt	r3, r3, r2
 80059e8:	18ed      	addgt	r5, r5, r3
 80059ea:	2600      	movs	r6, #0
 80059ec:	341a      	adds	r4, #26
 80059ee:	42b5      	cmp	r5, r6
 80059f0:	d11a      	bne.n	8005a28 <_printf_common+0xc8>
 80059f2:	2000      	movs	r0, #0
 80059f4:	e008      	b.n	8005a08 <_printf_common+0xa8>
 80059f6:	2301      	movs	r3, #1
 80059f8:	4652      	mov	r2, sl
 80059fa:	4641      	mov	r1, r8
 80059fc:	4638      	mov	r0, r7
 80059fe:	47c8      	blx	r9
 8005a00:	3001      	adds	r0, #1
 8005a02:	d103      	bne.n	8005a0c <_printf_common+0xac>
 8005a04:	f04f 30ff 	mov.w	r0, #4294967295
 8005a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a0c:	3501      	adds	r5, #1
 8005a0e:	e7c6      	b.n	800599e <_printf_common+0x3e>
 8005a10:	18e1      	adds	r1, r4, r3
 8005a12:	1c5a      	adds	r2, r3, #1
 8005a14:	2030      	movs	r0, #48	@ 0x30
 8005a16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005a1a:	4422      	add	r2, r4
 8005a1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a24:	3302      	adds	r3, #2
 8005a26:	e7c7      	b.n	80059b8 <_printf_common+0x58>
 8005a28:	2301      	movs	r3, #1
 8005a2a:	4622      	mov	r2, r4
 8005a2c:	4641      	mov	r1, r8
 8005a2e:	4638      	mov	r0, r7
 8005a30:	47c8      	blx	r9
 8005a32:	3001      	adds	r0, #1
 8005a34:	d0e6      	beq.n	8005a04 <_printf_common+0xa4>
 8005a36:	3601      	adds	r6, #1
 8005a38:	e7d9      	b.n	80059ee <_printf_common+0x8e>
	...

08005a3c <_printf_i>:
 8005a3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a40:	7e0f      	ldrb	r7, [r1, #24]
 8005a42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a44:	2f78      	cmp	r7, #120	@ 0x78
 8005a46:	4691      	mov	r9, r2
 8005a48:	4680      	mov	r8, r0
 8005a4a:	460c      	mov	r4, r1
 8005a4c:	469a      	mov	sl, r3
 8005a4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005a52:	d807      	bhi.n	8005a64 <_printf_i+0x28>
 8005a54:	2f62      	cmp	r7, #98	@ 0x62
 8005a56:	d80a      	bhi.n	8005a6e <_printf_i+0x32>
 8005a58:	2f00      	cmp	r7, #0
 8005a5a:	f000 80d1 	beq.w	8005c00 <_printf_i+0x1c4>
 8005a5e:	2f58      	cmp	r7, #88	@ 0x58
 8005a60:	f000 80b8 	beq.w	8005bd4 <_printf_i+0x198>
 8005a64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a6c:	e03a      	b.n	8005ae4 <_printf_i+0xa8>
 8005a6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a72:	2b15      	cmp	r3, #21
 8005a74:	d8f6      	bhi.n	8005a64 <_printf_i+0x28>
 8005a76:	a101      	add	r1, pc, #4	@ (adr r1, 8005a7c <_printf_i+0x40>)
 8005a78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a7c:	08005ad5 	.word	0x08005ad5
 8005a80:	08005ae9 	.word	0x08005ae9
 8005a84:	08005a65 	.word	0x08005a65
 8005a88:	08005a65 	.word	0x08005a65
 8005a8c:	08005a65 	.word	0x08005a65
 8005a90:	08005a65 	.word	0x08005a65
 8005a94:	08005ae9 	.word	0x08005ae9
 8005a98:	08005a65 	.word	0x08005a65
 8005a9c:	08005a65 	.word	0x08005a65
 8005aa0:	08005a65 	.word	0x08005a65
 8005aa4:	08005a65 	.word	0x08005a65
 8005aa8:	08005be7 	.word	0x08005be7
 8005aac:	08005b13 	.word	0x08005b13
 8005ab0:	08005ba1 	.word	0x08005ba1
 8005ab4:	08005a65 	.word	0x08005a65
 8005ab8:	08005a65 	.word	0x08005a65
 8005abc:	08005c09 	.word	0x08005c09
 8005ac0:	08005a65 	.word	0x08005a65
 8005ac4:	08005b13 	.word	0x08005b13
 8005ac8:	08005a65 	.word	0x08005a65
 8005acc:	08005a65 	.word	0x08005a65
 8005ad0:	08005ba9 	.word	0x08005ba9
 8005ad4:	6833      	ldr	r3, [r6, #0]
 8005ad6:	1d1a      	adds	r2, r3, #4
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	6032      	str	r2, [r6, #0]
 8005adc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ae0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e09c      	b.n	8005c22 <_printf_i+0x1e6>
 8005ae8:	6833      	ldr	r3, [r6, #0]
 8005aea:	6820      	ldr	r0, [r4, #0]
 8005aec:	1d19      	adds	r1, r3, #4
 8005aee:	6031      	str	r1, [r6, #0]
 8005af0:	0606      	lsls	r6, r0, #24
 8005af2:	d501      	bpl.n	8005af8 <_printf_i+0xbc>
 8005af4:	681d      	ldr	r5, [r3, #0]
 8005af6:	e003      	b.n	8005b00 <_printf_i+0xc4>
 8005af8:	0645      	lsls	r5, r0, #25
 8005afa:	d5fb      	bpl.n	8005af4 <_printf_i+0xb8>
 8005afc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005b00:	2d00      	cmp	r5, #0
 8005b02:	da03      	bge.n	8005b0c <_printf_i+0xd0>
 8005b04:	232d      	movs	r3, #45	@ 0x2d
 8005b06:	426d      	negs	r5, r5
 8005b08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b0c:	4858      	ldr	r0, [pc, #352]	@ (8005c70 <_printf_i+0x234>)
 8005b0e:	230a      	movs	r3, #10
 8005b10:	e011      	b.n	8005b36 <_printf_i+0xfa>
 8005b12:	6821      	ldr	r1, [r4, #0]
 8005b14:	6833      	ldr	r3, [r6, #0]
 8005b16:	0608      	lsls	r0, r1, #24
 8005b18:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b1c:	d402      	bmi.n	8005b24 <_printf_i+0xe8>
 8005b1e:	0649      	lsls	r1, r1, #25
 8005b20:	bf48      	it	mi
 8005b22:	b2ad      	uxthmi	r5, r5
 8005b24:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b26:	4852      	ldr	r0, [pc, #328]	@ (8005c70 <_printf_i+0x234>)
 8005b28:	6033      	str	r3, [r6, #0]
 8005b2a:	bf14      	ite	ne
 8005b2c:	230a      	movne	r3, #10
 8005b2e:	2308      	moveq	r3, #8
 8005b30:	2100      	movs	r1, #0
 8005b32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b36:	6866      	ldr	r6, [r4, #4]
 8005b38:	60a6      	str	r6, [r4, #8]
 8005b3a:	2e00      	cmp	r6, #0
 8005b3c:	db05      	blt.n	8005b4a <_printf_i+0x10e>
 8005b3e:	6821      	ldr	r1, [r4, #0]
 8005b40:	432e      	orrs	r6, r5
 8005b42:	f021 0104 	bic.w	r1, r1, #4
 8005b46:	6021      	str	r1, [r4, #0]
 8005b48:	d04b      	beq.n	8005be2 <_printf_i+0x1a6>
 8005b4a:	4616      	mov	r6, r2
 8005b4c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b50:	fb03 5711 	mls	r7, r3, r1, r5
 8005b54:	5dc7      	ldrb	r7, [r0, r7]
 8005b56:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b5a:	462f      	mov	r7, r5
 8005b5c:	42bb      	cmp	r3, r7
 8005b5e:	460d      	mov	r5, r1
 8005b60:	d9f4      	bls.n	8005b4c <_printf_i+0x110>
 8005b62:	2b08      	cmp	r3, #8
 8005b64:	d10b      	bne.n	8005b7e <_printf_i+0x142>
 8005b66:	6823      	ldr	r3, [r4, #0]
 8005b68:	07df      	lsls	r7, r3, #31
 8005b6a:	d508      	bpl.n	8005b7e <_printf_i+0x142>
 8005b6c:	6923      	ldr	r3, [r4, #16]
 8005b6e:	6861      	ldr	r1, [r4, #4]
 8005b70:	4299      	cmp	r1, r3
 8005b72:	bfde      	ittt	le
 8005b74:	2330      	movle	r3, #48	@ 0x30
 8005b76:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b7a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b7e:	1b92      	subs	r2, r2, r6
 8005b80:	6122      	str	r2, [r4, #16]
 8005b82:	f8cd a000 	str.w	sl, [sp]
 8005b86:	464b      	mov	r3, r9
 8005b88:	aa03      	add	r2, sp, #12
 8005b8a:	4621      	mov	r1, r4
 8005b8c:	4640      	mov	r0, r8
 8005b8e:	f7ff fee7 	bl	8005960 <_printf_common>
 8005b92:	3001      	adds	r0, #1
 8005b94:	d14a      	bne.n	8005c2c <_printf_i+0x1f0>
 8005b96:	f04f 30ff 	mov.w	r0, #4294967295
 8005b9a:	b004      	add	sp, #16
 8005b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ba0:	6823      	ldr	r3, [r4, #0]
 8005ba2:	f043 0320 	orr.w	r3, r3, #32
 8005ba6:	6023      	str	r3, [r4, #0]
 8005ba8:	4832      	ldr	r0, [pc, #200]	@ (8005c74 <_printf_i+0x238>)
 8005baa:	2778      	movs	r7, #120	@ 0x78
 8005bac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005bb0:	6823      	ldr	r3, [r4, #0]
 8005bb2:	6831      	ldr	r1, [r6, #0]
 8005bb4:	061f      	lsls	r7, r3, #24
 8005bb6:	f851 5b04 	ldr.w	r5, [r1], #4
 8005bba:	d402      	bmi.n	8005bc2 <_printf_i+0x186>
 8005bbc:	065f      	lsls	r7, r3, #25
 8005bbe:	bf48      	it	mi
 8005bc0:	b2ad      	uxthmi	r5, r5
 8005bc2:	6031      	str	r1, [r6, #0]
 8005bc4:	07d9      	lsls	r1, r3, #31
 8005bc6:	bf44      	itt	mi
 8005bc8:	f043 0320 	orrmi.w	r3, r3, #32
 8005bcc:	6023      	strmi	r3, [r4, #0]
 8005bce:	b11d      	cbz	r5, 8005bd8 <_printf_i+0x19c>
 8005bd0:	2310      	movs	r3, #16
 8005bd2:	e7ad      	b.n	8005b30 <_printf_i+0xf4>
 8005bd4:	4826      	ldr	r0, [pc, #152]	@ (8005c70 <_printf_i+0x234>)
 8005bd6:	e7e9      	b.n	8005bac <_printf_i+0x170>
 8005bd8:	6823      	ldr	r3, [r4, #0]
 8005bda:	f023 0320 	bic.w	r3, r3, #32
 8005bde:	6023      	str	r3, [r4, #0]
 8005be0:	e7f6      	b.n	8005bd0 <_printf_i+0x194>
 8005be2:	4616      	mov	r6, r2
 8005be4:	e7bd      	b.n	8005b62 <_printf_i+0x126>
 8005be6:	6833      	ldr	r3, [r6, #0]
 8005be8:	6825      	ldr	r5, [r4, #0]
 8005bea:	6961      	ldr	r1, [r4, #20]
 8005bec:	1d18      	adds	r0, r3, #4
 8005bee:	6030      	str	r0, [r6, #0]
 8005bf0:	062e      	lsls	r6, r5, #24
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	d501      	bpl.n	8005bfa <_printf_i+0x1be>
 8005bf6:	6019      	str	r1, [r3, #0]
 8005bf8:	e002      	b.n	8005c00 <_printf_i+0x1c4>
 8005bfa:	0668      	lsls	r0, r5, #25
 8005bfc:	d5fb      	bpl.n	8005bf6 <_printf_i+0x1ba>
 8005bfe:	8019      	strh	r1, [r3, #0]
 8005c00:	2300      	movs	r3, #0
 8005c02:	6123      	str	r3, [r4, #16]
 8005c04:	4616      	mov	r6, r2
 8005c06:	e7bc      	b.n	8005b82 <_printf_i+0x146>
 8005c08:	6833      	ldr	r3, [r6, #0]
 8005c0a:	1d1a      	adds	r2, r3, #4
 8005c0c:	6032      	str	r2, [r6, #0]
 8005c0e:	681e      	ldr	r6, [r3, #0]
 8005c10:	6862      	ldr	r2, [r4, #4]
 8005c12:	2100      	movs	r1, #0
 8005c14:	4630      	mov	r0, r6
 8005c16:	f7fa faeb 	bl	80001f0 <memchr>
 8005c1a:	b108      	cbz	r0, 8005c20 <_printf_i+0x1e4>
 8005c1c:	1b80      	subs	r0, r0, r6
 8005c1e:	6060      	str	r0, [r4, #4]
 8005c20:	6863      	ldr	r3, [r4, #4]
 8005c22:	6123      	str	r3, [r4, #16]
 8005c24:	2300      	movs	r3, #0
 8005c26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c2a:	e7aa      	b.n	8005b82 <_printf_i+0x146>
 8005c2c:	6923      	ldr	r3, [r4, #16]
 8005c2e:	4632      	mov	r2, r6
 8005c30:	4649      	mov	r1, r9
 8005c32:	4640      	mov	r0, r8
 8005c34:	47d0      	blx	sl
 8005c36:	3001      	adds	r0, #1
 8005c38:	d0ad      	beq.n	8005b96 <_printf_i+0x15a>
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	079b      	lsls	r3, r3, #30
 8005c3e:	d413      	bmi.n	8005c68 <_printf_i+0x22c>
 8005c40:	68e0      	ldr	r0, [r4, #12]
 8005c42:	9b03      	ldr	r3, [sp, #12]
 8005c44:	4298      	cmp	r0, r3
 8005c46:	bfb8      	it	lt
 8005c48:	4618      	movlt	r0, r3
 8005c4a:	e7a6      	b.n	8005b9a <_printf_i+0x15e>
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	4632      	mov	r2, r6
 8005c50:	4649      	mov	r1, r9
 8005c52:	4640      	mov	r0, r8
 8005c54:	47d0      	blx	sl
 8005c56:	3001      	adds	r0, #1
 8005c58:	d09d      	beq.n	8005b96 <_printf_i+0x15a>
 8005c5a:	3501      	adds	r5, #1
 8005c5c:	68e3      	ldr	r3, [r4, #12]
 8005c5e:	9903      	ldr	r1, [sp, #12]
 8005c60:	1a5b      	subs	r3, r3, r1
 8005c62:	42ab      	cmp	r3, r5
 8005c64:	dcf2      	bgt.n	8005c4c <_printf_i+0x210>
 8005c66:	e7eb      	b.n	8005c40 <_printf_i+0x204>
 8005c68:	2500      	movs	r5, #0
 8005c6a:	f104 0619 	add.w	r6, r4, #25
 8005c6e:	e7f5      	b.n	8005c5c <_printf_i+0x220>
 8005c70:	080068f5 	.word	0x080068f5
 8005c74:	08006906 	.word	0x08006906

08005c78 <__sflush_r>:
 8005c78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c80:	0716      	lsls	r6, r2, #28
 8005c82:	4605      	mov	r5, r0
 8005c84:	460c      	mov	r4, r1
 8005c86:	d454      	bmi.n	8005d32 <__sflush_r+0xba>
 8005c88:	684b      	ldr	r3, [r1, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	dc02      	bgt.n	8005c94 <__sflush_r+0x1c>
 8005c8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	dd48      	ble.n	8005d26 <__sflush_r+0xae>
 8005c94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c96:	2e00      	cmp	r6, #0
 8005c98:	d045      	beq.n	8005d26 <__sflush_r+0xae>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005ca0:	682f      	ldr	r7, [r5, #0]
 8005ca2:	6a21      	ldr	r1, [r4, #32]
 8005ca4:	602b      	str	r3, [r5, #0]
 8005ca6:	d030      	beq.n	8005d0a <__sflush_r+0x92>
 8005ca8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005caa:	89a3      	ldrh	r3, [r4, #12]
 8005cac:	0759      	lsls	r1, r3, #29
 8005cae:	d505      	bpl.n	8005cbc <__sflush_r+0x44>
 8005cb0:	6863      	ldr	r3, [r4, #4]
 8005cb2:	1ad2      	subs	r2, r2, r3
 8005cb4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005cb6:	b10b      	cbz	r3, 8005cbc <__sflush_r+0x44>
 8005cb8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005cba:	1ad2      	subs	r2, r2, r3
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005cc0:	6a21      	ldr	r1, [r4, #32]
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	47b0      	blx	r6
 8005cc6:	1c43      	adds	r3, r0, #1
 8005cc8:	89a3      	ldrh	r3, [r4, #12]
 8005cca:	d106      	bne.n	8005cda <__sflush_r+0x62>
 8005ccc:	6829      	ldr	r1, [r5, #0]
 8005cce:	291d      	cmp	r1, #29
 8005cd0:	d82b      	bhi.n	8005d2a <__sflush_r+0xb2>
 8005cd2:	4a2a      	ldr	r2, [pc, #168]	@ (8005d7c <__sflush_r+0x104>)
 8005cd4:	40ca      	lsrs	r2, r1
 8005cd6:	07d6      	lsls	r6, r2, #31
 8005cd8:	d527      	bpl.n	8005d2a <__sflush_r+0xb2>
 8005cda:	2200      	movs	r2, #0
 8005cdc:	6062      	str	r2, [r4, #4]
 8005cde:	04d9      	lsls	r1, r3, #19
 8005ce0:	6922      	ldr	r2, [r4, #16]
 8005ce2:	6022      	str	r2, [r4, #0]
 8005ce4:	d504      	bpl.n	8005cf0 <__sflush_r+0x78>
 8005ce6:	1c42      	adds	r2, r0, #1
 8005ce8:	d101      	bne.n	8005cee <__sflush_r+0x76>
 8005cea:	682b      	ldr	r3, [r5, #0]
 8005cec:	b903      	cbnz	r3, 8005cf0 <__sflush_r+0x78>
 8005cee:	6560      	str	r0, [r4, #84]	@ 0x54
 8005cf0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005cf2:	602f      	str	r7, [r5, #0]
 8005cf4:	b1b9      	cbz	r1, 8005d26 <__sflush_r+0xae>
 8005cf6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005cfa:	4299      	cmp	r1, r3
 8005cfc:	d002      	beq.n	8005d04 <__sflush_r+0x8c>
 8005cfe:	4628      	mov	r0, r5
 8005d00:	f7ff fa9c 	bl	800523c <_free_r>
 8005d04:	2300      	movs	r3, #0
 8005d06:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d08:	e00d      	b.n	8005d26 <__sflush_r+0xae>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	47b0      	blx	r6
 8005d10:	4602      	mov	r2, r0
 8005d12:	1c50      	adds	r0, r2, #1
 8005d14:	d1c9      	bne.n	8005caa <__sflush_r+0x32>
 8005d16:	682b      	ldr	r3, [r5, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d0c6      	beq.n	8005caa <__sflush_r+0x32>
 8005d1c:	2b1d      	cmp	r3, #29
 8005d1e:	d001      	beq.n	8005d24 <__sflush_r+0xac>
 8005d20:	2b16      	cmp	r3, #22
 8005d22:	d11e      	bne.n	8005d62 <__sflush_r+0xea>
 8005d24:	602f      	str	r7, [r5, #0]
 8005d26:	2000      	movs	r0, #0
 8005d28:	e022      	b.n	8005d70 <__sflush_r+0xf8>
 8005d2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d2e:	b21b      	sxth	r3, r3
 8005d30:	e01b      	b.n	8005d6a <__sflush_r+0xf2>
 8005d32:	690f      	ldr	r7, [r1, #16]
 8005d34:	2f00      	cmp	r7, #0
 8005d36:	d0f6      	beq.n	8005d26 <__sflush_r+0xae>
 8005d38:	0793      	lsls	r3, r2, #30
 8005d3a:	680e      	ldr	r6, [r1, #0]
 8005d3c:	bf08      	it	eq
 8005d3e:	694b      	ldreq	r3, [r1, #20]
 8005d40:	600f      	str	r7, [r1, #0]
 8005d42:	bf18      	it	ne
 8005d44:	2300      	movne	r3, #0
 8005d46:	eba6 0807 	sub.w	r8, r6, r7
 8005d4a:	608b      	str	r3, [r1, #8]
 8005d4c:	f1b8 0f00 	cmp.w	r8, #0
 8005d50:	dde9      	ble.n	8005d26 <__sflush_r+0xae>
 8005d52:	6a21      	ldr	r1, [r4, #32]
 8005d54:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005d56:	4643      	mov	r3, r8
 8005d58:	463a      	mov	r2, r7
 8005d5a:	4628      	mov	r0, r5
 8005d5c:	47b0      	blx	r6
 8005d5e:	2800      	cmp	r0, #0
 8005d60:	dc08      	bgt.n	8005d74 <__sflush_r+0xfc>
 8005d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d6a:	81a3      	strh	r3, [r4, #12]
 8005d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d74:	4407      	add	r7, r0
 8005d76:	eba8 0800 	sub.w	r8, r8, r0
 8005d7a:	e7e7      	b.n	8005d4c <__sflush_r+0xd4>
 8005d7c:	20400001 	.word	0x20400001

08005d80 <_fflush_r>:
 8005d80:	b538      	push	{r3, r4, r5, lr}
 8005d82:	690b      	ldr	r3, [r1, #16]
 8005d84:	4605      	mov	r5, r0
 8005d86:	460c      	mov	r4, r1
 8005d88:	b913      	cbnz	r3, 8005d90 <_fflush_r+0x10>
 8005d8a:	2500      	movs	r5, #0
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	bd38      	pop	{r3, r4, r5, pc}
 8005d90:	b118      	cbz	r0, 8005d9a <_fflush_r+0x1a>
 8005d92:	6a03      	ldr	r3, [r0, #32]
 8005d94:	b90b      	cbnz	r3, 8005d9a <_fflush_r+0x1a>
 8005d96:	f7ff f8e1 	bl	8004f5c <__sinit>
 8005d9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d0f3      	beq.n	8005d8a <_fflush_r+0xa>
 8005da2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005da4:	07d0      	lsls	r0, r2, #31
 8005da6:	d404      	bmi.n	8005db2 <_fflush_r+0x32>
 8005da8:	0599      	lsls	r1, r3, #22
 8005daa:	d402      	bmi.n	8005db2 <_fflush_r+0x32>
 8005dac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005dae:	f7ff fa34 	bl	800521a <__retarget_lock_acquire_recursive>
 8005db2:	4628      	mov	r0, r5
 8005db4:	4621      	mov	r1, r4
 8005db6:	f7ff ff5f 	bl	8005c78 <__sflush_r>
 8005dba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005dbc:	07da      	lsls	r2, r3, #31
 8005dbe:	4605      	mov	r5, r0
 8005dc0:	d4e4      	bmi.n	8005d8c <_fflush_r+0xc>
 8005dc2:	89a3      	ldrh	r3, [r4, #12]
 8005dc4:	059b      	lsls	r3, r3, #22
 8005dc6:	d4e1      	bmi.n	8005d8c <_fflush_r+0xc>
 8005dc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005dca:	f7ff fa27 	bl	800521c <__retarget_lock_release_recursive>
 8005dce:	e7dd      	b.n	8005d8c <_fflush_r+0xc>

08005dd0 <__swbuf_r>:
 8005dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dd2:	460e      	mov	r6, r1
 8005dd4:	4614      	mov	r4, r2
 8005dd6:	4605      	mov	r5, r0
 8005dd8:	b118      	cbz	r0, 8005de2 <__swbuf_r+0x12>
 8005dda:	6a03      	ldr	r3, [r0, #32]
 8005ddc:	b90b      	cbnz	r3, 8005de2 <__swbuf_r+0x12>
 8005dde:	f7ff f8bd 	bl	8004f5c <__sinit>
 8005de2:	69a3      	ldr	r3, [r4, #24]
 8005de4:	60a3      	str	r3, [r4, #8]
 8005de6:	89a3      	ldrh	r3, [r4, #12]
 8005de8:	071a      	lsls	r2, r3, #28
 8005dea:	d501      	bpl.n	8005df0 <__swbuf_r+0x20>
 8005dec:	6923      	ldr	r3, [r4, #16]
 8005dee:	b943      	cbnz	r3, 8005e02 <__swbuf_r+0x32>
 8005df0:	4621      	mov	r1, r4
 8005df2:	4628      	mov	r0, r5
 8005df4:	f000 f82a 	bl	8005e4c <__swsetup_r>
 8005df8:	b118      	cbz	r0, 8005e02 <__swbuf_r+0x32>
 8005dfa:	f04f 37ff 	mov.w	r7, #4294967295
 8005dfe:	4638      	mov	r0, r7
 8005e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e02:	6823      	ldr	r3, [r4, #0]
 8005e04:	6922      	ldr	r2, [r4, #16]
 8005e06:	1a98      	subs	r0, r3, r2
 8005e08:	6963      	ldr	r3, [r4, #20]
 8005e0a:	b2f6      	uxtb	r6, r6
 8005e0c:	4283      	cmp	r3, r0
 8005e0e:	4637      	mov	r7, r6
 8005e10:	dc05      	bgt.n	8005e1e <__swbuf_r+0x4e>
 8005e12:	4621      	mov	r1, r4
 8005e14:	4628      	mov	r0, r5
 8005e16:	f7ff ffb3 	bl	8005d80 <_fflush_r>
 8005e1a:	2800      	cmp	r0, #0
 8005e1c:	d1ed      	bne.n	8005dfa <__swbuf_r+0x2a>
 8005e1e:	68a3      	ldr	r3, [r4, #8]
 8005e20:	3b01      	subs	r3, #1
 8005e22:	60a3      	str	r3, [r4, #8]
 8005e24:	6823      	ldr	r3, [r4, #0]
 8005e26:	1c5a      	adds	r2, r3, #1
 8005e28:	6022      	str	r2, [r4, #0]
 8005e2a:	701e      	strb	r6, [r3, #0]
 8005e2c:	6962      	ldr	r2, [r4, #20]
 8005e2e:	1c43      	adds	r3, r0, #1
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d004      	beq.n	8005e3e <__swbuf_r+0x6e>
 8005e34:	89a3      	ldrh	r3, [r4, #12]
 8005e36:	07db      	lsls	r3, r3, #31
 8005e38:	d5e1      	bpl.n	8005dfe <__swbuf_r+0x2e>
 8005e3a:	2e0a      	cmp	r6, #10
 8005e3c:	d1df      	bne.n	8005dfe <__swbuf_r+0x2e>
 8005e3e:	4621      	mov	r1, r4
 8005e40:	4628      	mov	r0, r5
 8005e42:	f7ff ff9d 	bl	8005d80 <_fflush_r>
 8005e46:	2800      	cmp	r0, #0
 8005e48:	d0d9      	beq.n	8005dfe <__swbuf_r+0x2e>
 8005e4a:	e7d6      	b.n	8005dfa <__swbuf_r+0x2a>

08005e4c <__swsetup_r>:
 8005e4c:	b538      	push	{r3, r4, r5, lr}
 8005e4e:	4b29      	ldr	r3, [pc, #164]	@ (8005ef4 <__swsetup_r+0xa8>)
 8005e50:	4605      	mov	r5, r0
 8005e52:	6818      	ldr	r0, [r3, #0]
 8005e54:	460c      	mov	r4, r1
 8005e56:	b118      	cbz	r0, 8005e60 <__swsetup_r+0x14>
 8005e58:	6a03      	ldr	r3, [r0, #32]
 8005e5a:	b90b      	cbnz	r3, 8005e60 <__swsetup_r+0x14>
 8005e5c:	f7ff f87e 	bl	8004f5c <__sinit>
 8005e60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e64:	0719      	lsls	r1, r3, #28
 8005e66:	d422      	bmi.n	8005eae <__swsetup_r+0x62>
 8005e68:	06da      	lsls	r2, r3, #27
 8005e6a:	d407      	bmi.n	8005e7c <__swsetup_r+0x30>
 8005e6c:	2209      	movs	r2, #9
 8005e6e:	602a      	str	r2, [r5, #0]
 8005e70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e74:	81a3      	strh	r3, [r4, #12]
 8005e76:	f04f 30ff 	mov.w	r0, #4294967295
 8005e7a:	e033      	b.n	8005ee4 <__swsetup_r+0x98>
 8005e7c:	0758      	lsls	r0, r3, #29
 8005e7e:	d512      	bpl.n	8005ea6 <__swsetup_r+0x5a>
 8005e80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e82:	b141      	cbz	r1, 8005e96 <__swsetup_r+0x4a>
 8005e84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e88:	4299      	cmp	r1, r3
 8005e8a:	d002      	beq.n	8005e92 <__swsetup_r+0x46>
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	f7ff f9d5 	bl	800523c <_free_r>
 8005e92:	2300      	movs	r3, #0
 8005e94:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e96:	89a3      	ldrh	r3, [r4, #12]
 8005e98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005e9c:	81a3      	strh	r3, [r4, #12]
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	6063      	str	r3, [r4, #4]
 8005ea2:	6923      	ldr	r3, [r4, #16]
 8005ea4:	6023      	str	r3, [r4, #0]
 8005ea6:	89a3      	ldrh	r3, [r4, #12]
 8005ea8:	f043 0308 	orr.w	r3, r3, #8
 8005eac:	81a3      	strh	r3, [r4, #12]
 8005eae:	6923      	ldr	r3, [r4, #16]
 8005eb0:	b94b      	cbnz	r3, 8005ec6 <__swsetup_r+0x7a>
 8005eb2:	89a3      	ldrh	r3, [r4, #12]
 8005eb4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005eb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ebc:	d003      	beq.n	8005ec6 <__swsetup_r+0x7a>
 8005ebe:	4621      	mov	r1, r4
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	f000 f87d 	bl	8005fc0 <__smakebuf_r>
 8005ec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eca:	f013 0201 	ands.w	r2, r3, #1
 8005ece:	d00a      	beq.n	8005ee6 <__swsetup_r+0x9a>
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	60a2      	str	r2, [r4, #8]
 8005ed4:	6962      	ldr	r2, [r4, #20]
 8005ed6:	4252      	negs	r2, r2
 8005ed8:	61a2      	str	r2, [r4, #24]
 8005eda:	6922      	ldr	r2, [r4, #16]
 8005edc:	b942      	cbnz	r2, 8005ef0 <__swsetup_r+0xa4>
 8005ede:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005ee2:	d1c5      	bne.n	8005e70 <__swsetup_r+0x24>
 8005ee4:	bd38      	pop	{r3, r4, r5, pc}
 8005ee6:	0799      	lsls	r1, r3, #30
 8005ee8:	bf58      	it	pl
 8005eea:	6962      	ldrpl	r2, [r4, #20]
 8005eec:	60a2      	str	r2, [r4, #8]
 8005eee:	e7f4      	b.n	8005eda <__swsetup_r+0x8e>
 8005ef0:	2000      	movs	r0, #0
 8005ef2:	e7f7      	b.n	8005ee4 <__swsetup_r+0x98>
 8005ef4:	20000018 	.word	0x20000018

08005ef8 <_sbrk_r>:
 8005ef8:	b538      	push	{r3, r4, r5, lr}
 8005efa:	4d06      	ldr	r5, [pc, #24]	@ (8005f14 <_sbrk_r+0x1c>)
 8005efc:	2300      	movs	r3, #0
 8005efe:	4604      	mov	r4, r0
 8005f00:	4608      	mov	r0, r1
 8005f02:	602b      	str	r3, [r5, #0]
 8005f04:	f7fb fff4 	bl	8001ef0 <_sbrk>
 8005f08:	1c43      	adds	r3, r0, #1
 8005f0a:	d102      	bne.n	8005f12 <_sbrk_r+0x1a>
 8005f0c:	682b      	ldr	r3, [r5, #0]
 8005f0e:	b103      	cbz	r3, 8005f12 <_sbrk_r+0x1a>
 8005f10:	6023      	str	r3, [r4, #0]
 8005f12:	bd38      	pop	{r3, r4, r5, pc}
 8005f14:	200007f8 	.word	0x200007f8

08005f18 <_realloc_r>:
 8005f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f1c:	4607      	mov	r7, r0
 8005f1e:	4614      	mov	r4, r2
 8005f20:	460d      	mov	r5, r1
 8005f22:	b921      	cbnz	r1, 8005f2e <_realloc_r+0x16>
 8005f24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f28:	4611      	mov	r1, r2
 8005f2a:	f7ff b9f3 	b.w	8005314 <_malloc_r>
 8005f2e:	b92a      	cbnz	r2, 8005f3c <_realloc_r+0x24>
 8005f30:	f7ff f984 	bl	800523c <_free_r>
 8005f34:	4625      	mov	r5, r4
 8005f36:	4628      	mov	r0, r5
 8005f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f3c:	f000 f89e 	bl	800607c <_malloc_usable_size_r>
 8005f40:	4284      	cmp	r4, r0
 8005f42:	4606      	mov	r6, r0
 8005f44:	d802      	bhi.n	8005f4c <_realloc_r+0x34>
 8005f46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005f4a:	d8f4      	bhi.n	8005f36 <_realloc_r+0x1e>
 8005f4c:	4621      	mov	r1, r4
 8005f4e:	4638      	mov	r0, r7
 8005f50:	f7ff f9e0 	bl	8005314 <_malloc_r>
 8005f54:	4680      	mov	r8, r0
 8005f56:	b908      	cbnz	r0, 8005f5c <_realloc_r+0x44>
 8005f58:	4645      	mov	r5, r8
 8005f5a:	e7ec      	b.n	8005f36 <_realloc_r+0x1e>
 8005f5c:	42b4      	cmp	r4, r6
 8005f5e:	4622      	mov	r2, r4
 8005f60:	4629      	mov	r1, r5
 8005f62:	bf28      	it	cs
 8005f64:	4632      	movcs	r2, r6
 8005f66:	f7ff f95a 	bl	800521e <memcpy>
 8005f6a:	4629      	mov	r1, r5
 8005f6c:	4638      	mov	r0, r7
 8005f6e:	f7ff f965 	bl	800523c <_free_r>
 8005f72:	e7f1      	b.n	8005f58 <_realloc_r+0x40>

08005f74 <__swhatbuf_r>:
 8005f74:	b570      	push	{r4, r5, r6, lr}
 8005f76:	460c      	mov	r4, r1
 8005f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f7c:	2900      	cmp	r1, #0
 8005f7e:	b096      	sub	sp, #88	@ 0x58
 8005f80:	4615      	mov	r5, r2
 8005f82:	461e      	mov	r6, r3
 8005f84:	da0d      	bge.n	8005fa2 <__swhatbuf_r+0x2e>
 8005f86:	89a3      	ldrh	r3, [r4, #12]
 8005f88:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005f8c:	f04f 0100 	mov.w	r1, #0
 8005f90:	bf14      	ite	ne
 8005f92:	2340      	movne	r3, #64	@ 0x40
 8005f94:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005f98:	2000      	movs	r0, #0
 8005f9a:	6031      	str	r1, [r6, #0]
 8005f9c:	602b      	str	r3, [r5, #0]
 8005f9e:	b016      	add	sp, #88	@ 0x58
 8005fa0:	bd70      	pop	{r4, r5, r6, pc}
 8005fa2:	466a      	mov	r2, sp
 8005fa4:	f000 f848 	bl	8006038 <_fstat_r>
 8005fa8:	2800      	cmp	r0, #0
 8005faa:	dbec      	blt.n	8005f86 <__swhatbuf_r+0x12>
 8005fac:	9901      	ldr	r1, [sp, #4]
 8005fae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005fb2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005fb6:	4259      	negs	r1, r3
 8005fb8:	4159      	adcs	r1, r3
 8005fba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005fbe:	e7eb      	b.n	8005f98 <__swhatbuf_r+0x24>

08005fc0 <__smakebuf_r>:
 8005fc0:	898b      	ldrh	r3, [r1, #12]
 8005fc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fc4:	079d      	lsls	r5, r3, #30
 8005fc6:	4606      	mov	r6, r0
 8005fc8:	460c      	mov	r4, r1
 8005fca:	d507      	bpl.n	8005fdc <__smakebuf_r+0x1c>
 8005fcc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005fd0:	6023      	str	r3, [r4, #0]
 8005fd2:	6123      	str	r3, [r4, #16]
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	6163      	str	r3, [r4, #20]
 8005fd8:	b003      	add	sp, #12
 8005fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fdc:	ab01      	add	r3, sp, #4
 8005fde:	466a      	mov	r2, sp
 8005fe0:	f7ff ffc8 	bl	8005f74 <__swhatbuf_r>
 8005fe4:	9f00      	ldr	r7, [sp, #0]
 8005fe6:	4605      	mov	r5, r0
 8005fe8:	4639      	mov	r1, r7
 8005fea:	4630      	mov	r0, r6
 8005fec:	f7ff f992 	bl	8005314 <_malloc_r>
 8005ff0:	b948      	cbnz	r0, 8006006 <__smakebuf_r+0x46>
 8005ff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ff6:	059a      	lsls	r2, r3, #22
 8005ff8:	d4ee      	bmi.n	8005fd8 <__smakebuf_r+0x18>
 8005ffa:	f023 0303 	bic.w	r3, r3, #3
 8005ffe:	f043 0302 	orr.w	r3, r3, #2
 8006002:	81a3      	strh	r3, [r4, #12]
 8006004:	e7e2      	b.n	8005fcc <__smakebuf_r+0xc>
 8006006:	89a3      	ldrh	r3, [r4, #12]
 8006008:	6020      	str	r0, [r4, #0]
 800600a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800600e:	81a3      	strh	r3, [r4, #12]
 8006010:	9b01      	ldr	r3, [sp, #4]
 8006012:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006016:	b15b      	cbz	r3, 8006030 <__smakebuf_r+0x70>
 8006018:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800601c:	4630      	mov	r0, r6
 800601e:	f000 f81d 	bl	800605c <_isatty_r>
 8006022:	b128      	cbz	r0, 8006030 <__smakebuf_r+0x70>
 8006024:	89a3      	ldrh	r3, [r4, #12]
 8006026:	f023 0303 	bic.w	r3, r3, #3
 800602a:	f043 0301 	orr.w	r3, r3, #1
 800602e:	81a3      	strh	r3, [r4, #12]
 8006030:	89a3      	ldrh	r3, [r4, #12]
 8006032:	431d      	orrs	r5, r3
 8006034:	81a5      	strh	r5, [r4, #12]
 8006036:	e7cf      	b.n	8005fd8 <__smakebuf_r+0x18>

08006038 <_fstat_r>:
 8006038:	b538      	push	{r3, r4, r5, lr}
 800603a:	4d07      	ldr	r5, [pc, #28]	@ (8006058 <_fstat_r+0x20>)
 800603c:	2300      	movs	r3, #0
 800603e:	4604      	mov	r4, r0
 8006040:	4608      	mov	r0, r1
 8006042:	4611      	mov	r1, r2
 8006044:	602b      	str	r3, [r5, #0]
 8006046:	f7fb ff2a 	bl	8001e9e <_fstat>
 800604a:	1c43      	adds	r3, r0, #1
 800604c:	d102      	bne.n	8006054 <_fstat_r+0x1c>
 800604e:	682b      	ldr	r3, [r5, #0]
 8006050:	b103      	cbz	r3, 8006054 <_fstat_r+0x1c>
 8006052:	6023      	str	r3, [r4, #0]
 8006054:	bd38      	pop	{r3, r4, r5, pc}
 8006056:	bf00      	nop
 8006058:	200007f8 	.word	0x200007f8

0800605c <_isatty_r>:
 800605c:	b538      	push	{r3, r4, r5, lr}
 800605e:	4d06      	ldr	r5, [pc, #24]	@ (8006078 <_isatty_r+0x1c>)
 8006060:	2300      	movs	r3, #0
 8006062:	4604      	mov	r4, r0
 8006064:	4608      	mov	r0, r1
 8006066:	602b      	str	r3, [r5, #0]
 8006068:	f7fb ff29 	bl	8001ebe <_isatty>
 800606c:	1c43      	adds	r3, r0, #1
 800606e:	d102      	bne.n	8006076 <_isatty_r+0x1a>
 8006070:	682b      	ldr	r3, [r5, #0]
 8006072:	b103      	cbz	r3, 8006076 <_isatty_r+0x1a>
 8006074:	6023      	str	r3, [r4, #0]
 8006076:	bd38      	pop	{r3, r4, r5, pc}
 8006078:	200007f8 	.word	0x200007f8

0800607c <_malloc_usable_size_r>:
 800607c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006080:	1f18      	subs	r0, r3, #4
 8006082:	2b00      	cmp	r3, #0
 8006084:	bfbc      	itt	lt
 8006086:	580b      	ldrlt	r3, [r1, r0]
 8006088:	18c0      	addlt	r0, r0, r3
 800608a:	4770      	bx	lr

0800608c <_init>:
 800608c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800608e:	bf00      	nop
 8006090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006092:	bc08      	pop	{r3}
 8006094:	469e      	mov	lr, r3
 8006096:	4770      	bx	lr

08006098 <_fini>:
 8006098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800609a:	bf00      	nop
 800609c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800609e:	bc08      	pop	{r3}
 80060a0:	469e      	mov	lr, r3
 80060a2:	4770      	bx	lr
