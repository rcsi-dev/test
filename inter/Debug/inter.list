
inter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e90  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  08004030  08004030  00005030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043b8  080043b8  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080043b8  080043b8  000053b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043c0  080043c0  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043c0  080043c0  000053c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080043c4  080043c4  000053c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080043c8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000046c  2000005c  08004424  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  08004424  000064c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098de  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b8a  00000000  00000000  0000f96a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000778  00000000  00000000  000114f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005c4  00000000  00000000  00011c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f0f  00000000  00000000  00012234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a1a1  00000000  00000000  00028143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008640a  00000000  00000000  000322e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b86ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002224  00000000  00000000  000b8734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003f  00000000  00000000  000ba958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004018 	.word	0x08004018

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08004018 	.word	0x08004018

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <Benchmark_Init>:
#include "uart_protocol.h"
#include <stdio.h>
#include <string.h>

// Инициализация DWT для точного измерения тактов
void Benchmark_Init(void) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b09c      	sub	sp, #112	@ 0x70
 80005c0:	af00      	add	r7, sp, #0
    // Разрешаем доступ к регистрам DWT
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80005c2:	4b13      	ldr	r3, [pc, #76]	@ (8000610 <Benchmark_Init+0x54>)
 80005c4:	68db      	ldr	r3, [r3, #12]
 80005c6:	4a12      	ldr	r2, [pc, #72]	@ (8000610 <Benchmark_Init+0x54>)
 80005c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005cc:	60d3      	str	r3, [r2, #12]
    // Сбрасываем счетчик
    DWT->CYCCNT = 0;
 80005ce:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <Benchmark_Init+0x58>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	605a      	str	r2, [r3, #4]
    // Включаем счетчик
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80005d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000614 <Benchmark_Init+0x58>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a0e      	ldr	r2, [pc, #56]	@ (8000614 <Benchmark_Init+0x58>)
 80005da:	f043 0301 	orr.w	r3, r3, #1
 80005de:	6013      	str	r3, [r2, #0]

    // Выводим информацию об инициализации
    char log_message[] = "Система измерения производительности инициализирована\r\n";
 80005e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000618 <Benchmark_Init+0x5c>)
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	4611      	mov	r1, r2
 80005e6:	226a      	movs	r2, #106	@ 0x6a
 80005e8:	4618      	mov	r0, r3
 80005ea:	f003 f8cb 	bl	8003784 <memcpy>
    HAL_UART_Transmit(&huart2, (uint8_t *)log_message, strlen(log_message), HAL_MAX_DELAY);
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff fdf5 	bl	80001e0 <strlen>
 80005f6:	4603      	mov	r3, r0
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	1d39      	adds	r1, r7, #4
 80005fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000600:	4806      	ldr	r0, [pc, #24]	@ (800061c <Benchmark_Init+0x60>)
 8000602:	f002 f84f 	bl	80026a4 <HAL_UART_Transmit>
}
 8000606:	bf00      	nop
 8000608:	3770      	adds	r7, #112	@ 0x70
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	e000edf0 	.word	0xe000edf0
 8000614:	e0001000 	.word	0xe0001000
 8000618:	08004030 	.word	0x08004030
 800061c:	200000c0 	.word	0x200000c0

08000620 <Benchmark_GetCycles>:

// Получение текущего значения счетчика тактов
uint32_t Benchmark_GetCycles(void) {
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
    return DWT->CYCCNT;
 8000624:	4b03      	ldr	r3, [pc, #12]	@ (8000634 <Benchmark_GetCycles+0x14>)
 8000626:	685b      	ldr	r3, [r3, #4]
}
 8000628:	4618      	mov	r0, r3
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	e0001000 	.word	0xe0001000

08000638 <Benchmark_ReportElapsed>:

// Вывод информации о затраченном времени
void Benchmark_ReportElapsed(const char *label, uint32_t start, uint32_t end) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b0a0      	sub	sp, #128	@ 0x80
 800063c:	af02      	add	r7, sp, #8
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	607a      	str	r2, [r7, #4]
    uint32_t elapsed = end - start;
 8000644:	687a      	ldr	r2, [r7, #4]
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	677b      	str	r3, [r7, #116]	@ 0x74
    char message[100];
    snprintf(message, sizeof(message), "Benchmark [%s]: %lu тактов\r\n", label, elapsed);
 800064c:	f107 0010 	add.w	r0, r7, #16
 8000650:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	4a0b      	ldr	r2, [pc, #44]	@ (8000684 <Benchmark_ReportElapsed+0x4c>)
 8000658:	2164      	movs	r1, #100	@ 0x64
 800065a:	f003 f829 	bl	80036b0 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 800065e:	f107 0310 	add.w	r3, r7, #16
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff fdbc 	bl	80001e0 <strlen>
 8000668:	4603      	mov	r3, r0
 800066a:	b29a      	uxth	r2, r3
 800066c:	f107 0110 	add.w	r1, r7, #16
 8000670:	f04f 33ff 	mov.w	r3, #4294967295
 8000674:	4804      	ldr	r0, [pc, #16]	@ (8000688 <Benchmark_ReportElapsed+0x50>)
 8000676:	f002 f815 	bl	80026a4 <HAL_UART_Transmit>
}
 800067a:	bf00      	nop
 800067c:	3778      	adds	r7, #120	@ 0x78
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	0800409c 	.word	0x0800409c
 8000688:	200000c0 	.word	0x200000c0

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b5b0      	push	{r4, r5, r7, lr}
 800068e:	b0a2      	sub	sp, #136	@ 0x88
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000692:	f000 ff2d 	bl	80014f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000696:	f000 f8ad 	bl	80007f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069a:	f000 f993 	bl	80009c4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800069e:	f000 f913 	bl	80008c8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80006a2:	f000 f93b 	bl	800091c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80006a6:	f000 f963 	bl	8000970 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  // Инициализация протокола и бенчмарка
  UartProtocol_Init();
 80006aa:	f000 fbc1 	bl	8000e30 <UartProtocol_Init>
  Benchmark_Init();
 80006ae:	f7ff ff85 	bl	80005bc <Benchmark_Init>

  // Начинаем прием по UART
  HAL_UART_Receive_IT(&huart1, &uart1_rx_byte, 1);
 80006b2:	2201      	movs	r2, #1
 80006b4:	4943      	ldr	r1, [pc, #268]	@ (80007c4 <main+0x138>)
 80006b6:	4844      	ldr	r0, [pc, #272]	@ (80007c8 <main+0x13c>)
 80006b8:	f002 f87f 	bl	80027ba <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &uart6_rx_byte, 1);
 80006bc:	2201      	movs	r2, #1
 80006be:	4943      	ldr	r1, [pc, #268]	@ (80007cc <main+0x140>)
 80006c0:	4843      	ldr	r0, [pc, #268]	@ (80007d0 <main+0x144>)
 80006c2:	f002 f87a 	bl	80027ba <HAL_UART_Receive_IT>

  // Выводим приветствие через USART2 (мониторинг)
  char welcome_message[] = "=== Защищенный UART протокол запущен ===\r\n";
 80006c6:	4a43      	ldr	r2, [pc, #268]	@ (80007d4 <main+0x148>)
 80006c8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006cc:	4611      	mov	r1, r2
 80006ce:	2244      	movs	r2, #68	@ 0x44
 80006d0:	4618      	mov	r0, r3
 80006d2:	f003 f857 	bl	8003784 <memcpy>
  HAL_UART_Transmit(&huart2, (uint8_t *)welcome_message, strlen(welcome_message), HAL_MAX_DELAY);
 80006d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff fd80 	bl	80001e0 <strlen>
 80006e0:	4603      	mov	r3, r0
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80006e8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ec:	483a      	ldr	r0, [pc, #232]	@ (80007d8 <main+0x14c>)
 80006ee:	f001 ffd9 	bl	80026a4 <HAL_UART_Transmit>

  // Инициализация времени последней отправки
  last_send_time = HAL_GetTick();
 80006f2:	f000 ff63 	bl	80015bc <HAL_GetTick>
 80006f6:	4603      	mov	r3, r0
 80006f8:	4a38      	ldr	r2, [pc, #224]	@ (80007dc <main+0x150>)
 80006fa:	6013      	str	r3, [r2, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Отправляем тестовые сообщения каждые 2 секунды, чередуя USART1 и USART6
    uint32_t current_time = HAL_GetTick();
 80006fc:	f000 ff5e 	bl	80015bc <HAL_GetTick>
 8000700:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    if (current_time - last_send_time >= 2000) {
 8000704:	4b35      	ldr	r3, [pc, #212]	@ (80007dc <main+0x150>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000712:	d3f3      	bcc.n	80006fc <main+0x70>
      last_send_time = current_time;
 8000714:	4a31      	ldr	r2, [pc, #196]	@ (80007dc <main+0x150>)
 8000716:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800071a:	6013      	str	r3, [r2, #0]

      if (send_test_message1) {
 800071c:	4b30      	ldr	r3, [pc, #192]	@ (80007e0 <main+0x154>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d021      	beq.n	8000768 <main+0xdc>
        // Измеряем производительность отправки
        uint32_t start_time = Benchmark_GetCycles();
 8000724:	f7ff ff7c 	bl	8000620 <Benchmark_GetCycles>
 8000728:	67b8      	str	r0, [r7, #120]	@ 0x78

        // Отправляем тестовое сообщение через USART1
        uint8_t test_data[] = "Тестовое сообщение от USART1";
 800072a:	4b2e      	ldr	r3, [pc, #184]	@ (80007e4 <main+0x158>)
 800072c:	463c      	mov	r4, r7
 800072e:	461d      	mov	r5, r3
 8000730:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000734:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000736:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000738:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800073c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        UartProtocol_SendFrame(&huart1, test_data, strlen((char *)test_data));
 8000740:	463b      	mov	r3, r7
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff fd4c 	bl	80001e0 <strlen>
 8000748:	4603      	mov	r3, r0
 800074a:	b29a      	uxth	r2, r3
 800074c:	463b      	mov	r3, r7
 800074e:	4619      	mov	r1, r3
 8000750:	481d      	ldr	r0, [pc, #116]	@ (80007c8 <main+0x13c>)
 8000752:	f000 fbad 	bl	8000eb0 <UartProtocol_SendFrame>

        // Измеряем и выводим информацию о производительности
        uint32_t end_time = Benchmark_GetCycles();
 8000756:	f7ff ff63 	bl	8000620 <Benchmark_GetCycles>
 800075a:	6778      	str	r0, [r7, #116]	@ 0x74
        Benchmark_ReportElapsed("Отправка фрейма через USART1", start_time, end_time);
 800075c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800075e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000760:	4821      	ldr	r0, [pc, #132]	@ (80007e8 <main+0x15c>)
 8000762:	f7ff ff69 	bl	8000638 <Benchmark_ReportElapsed>
 8000766:	e022      	b.n	80007ae <main+0x122>
      } else {
        // Измеряем производительность отправки
        uint32_t start_time = Benchmark_GetCycles();
 8000768:	f7ff ff5a 	bl	8000620 <Benchmark_GetCycles>
 800076c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80

        // Отправляем тестовое сообщение через USART6
        uint8_t test_data[] = "Тестовое сообщение от USART6";
 8000770:	4b1e      	ldr	r3, [pc, #120]	@ (80007ec <main+0x160>)
 8000772:	463c      	mov	r4, r7
 8000774:	461d      	mov	r5, r3
 8000776:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000778:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800077a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800077c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800077e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000782:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        UartProtocol_SendFrame(&huart6, test_data, strlen((char *)test_data));
 8000786:	463b      	mov	r3, r7
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff fd29 	bl	80001e0 <strlen>
 800078e:	4603      	mov	r3, r0
 8000790:	b29a      	uxth	r2, r3
 8000792:	463b      	mov	r3, r7
 8000794:	4619      	mov	r1, r3
 8000796:	480e      	ldr	r0, [pc, #56]	@ (80007d0 <main+0x144>)
 8000798:	f000 fb8a 	bl	8000eb0 <UartProtocol_SendFrame>

        // Измеряем и выводим информацию о производительности
        uint32_t end_time = Benchmark_GetCycles();
 800079c:	f7ff ff40 	bl	8000620 <Benchmark_GetCycles>
 80007a0:	67f8      	str	r0, [r7, #124]	@ 0x7c
        Benchmark_ReportElapsed("Отправка фрейма через USART6", start_time, end_time);
 80007a2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80007a4:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80007a8:	4811      	ldr	r0, [pc, #68]	@ (80007f0 <main+0x164>)
 80007aa:	f7ff ff45 	bl	8000638 <Benchmark_ReportElapsed>
      }

      // Переключаем флаг для следующей отправки
      send_test_message1 = !send_test_message1;
 80007ae:	4b0c      	ldr	r3, [pc, #48]	@ (80007e0 <main+0x154>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	bf0c      	ite	eq
 80007b6:	2301      	moveq	r3, #1
 80007b8:	2300      	movne	r3, #0
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	461a      	mov	r2, r3
 80007be:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <main+0x154>)
 80007c0:	701a      	strb	r2, [r3, #0]
  {
 80007c2:	e79b      	b.n	80006fc <main+0x70>
 80007c4:	20000150 	.word	0x20000150
 80007c8:	20000078 	.word	0x20000078
 80007cc:	20000151 	.word	0x20000151
 80007d0:	20000108 	.word	0x20000108
 80007d4:	08004120 	.word	0x08004120
 80007d8:	200000c0 	.word	0x200000c0
 80007dc:	20000154 	.word	0x20000154
 80007e0:	20000152 	.word	0x20000152
 80007e4:	08004164 	.word	0x08004164
 80007e8:	080040c0 	.word	0x080040c0
 80007ec:	08004194 	.word	0x08004194
 80007f0:	080040f0 	.word	0x080040f0

080007f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b094      	sub	sp, #80	@ 0x50
 80007f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fa:	f107 0320 	add.w	r3, r7, #32
 80007fe:	2230      	movs	r2, #48	@ 0x30
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f002 ff8a 	bl	800371c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	4b28      	ldr	r3, [pc, #160]	@ (80008c0 <SystemClock_Config+0xcc>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000820:	4a27      	ldr	r2, [pc, #156]	@ (80008c0 <SystemClock_Config+0xcc>)
 8000822:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000826:	6413      	str	r3, [r2, #64]	@ 0x40
 8000828:	4b25      	ldr	r3, [pc, #148]	@ (80008c0 <SystemClock_Config+0xcc>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000834:	2300      	movs	r3, #0
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	4b22      	ldr	r3, [pc, #136]	@ (80008c4 <SystemClock_Config+0xd0>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a21      	ldr	r2, [pc, #132]	@ (80008c4 <SystemClock_Config+0xd0>)
 800083e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000842:	6013      	str	r3, [r2, #0]
 8000844:	4b1f      	ldr	r3, [pc, #124]	@ (80008c4 <SystemClock_Config+0xd0>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000850:	2302      	movs	r3, #2
 8000852:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000854:	2301      	movs	r3, #1
 8000856:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000858:	2310      	movs	r3, #16
 800085a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085c:	2302      	movs	r3, #2
 800085e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000860:	2300      	movs	r3, #0
 8000862:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000864:	2310      	movs	r3, #16
 8000866:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000868:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800086c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800086e:	2304      	movs	r3, #4
 8000870:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000872:	2304      	movs	r3, #4
 8000874:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000876:	f107 0320 	add.w	r3, r7, #32
 800087a:	4618      	mov	r0, r3
 800087c:	f001 fa2a 	bl	8001cd4 <HAL_RCC_OscConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000886:	f000 f94d 	bl	8000b24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088a:	230f      	movs	r3, #15
 800088c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088e:	2302      	movs	r3, #2
 8000890:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000896:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800089a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	2102      	movs	r1, #2
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 fc8c 	bl	80021c4 <HAL_RCC_ClockConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008b2:	f000 f937 	bl	8000b24 <Error_Handler>
  }
}
 80008b6:	bf00      	nop
 80008b8:	3750      	adds	r7, #80	@ 0x50
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40007000 	.word	0x40007000

080008c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008cc:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <MX_USART1_UART_Init+0x4c>)
 80008ce:	4a12      	ldr	r2, [pc, #72]	@ (8000918 <MX_USART1_UART_Init+0x50>)
 80008d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008d2:	4b10      	ldr	r3, [pc, #64]	@ (8000914 <MX_USART1_UART_Init+0x4c>)
 80008d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008da:	4b0e      	ldr	r3, [pc, #56]	@ (8000914 <MX_USART1_UART_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <MX_USART1_UART_Init+0x4c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000914 <MX_USART1_UART_Init+0x4c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008ec:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <MX_USART1_UART_Init+0x4c>)
 80008ee:	220c      	movs	r2, #12
 80008f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f2:	4b08      	ldr	r3, [pc, #32]	@ (8000914 <MX_USART1_UART_Init+0x4c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f8:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <MX_USART1_UART_Init+0x4c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008fe:	4805      	ldr	r0, [pc, #20]	@ (8000914 <MX_USART1_UART_Init+0x4c>)
 8000900:	f001 fe80 	bl	8002604 <HAL_UART_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800090a:	f000 f90b 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000078 	.word	0x20000078
 8000918:	40011000 	.word	0x40011000

0800091c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000920:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <MX_USART2_UART_Init+0x4c>)
 8000922:	4a12      	ldr	r2, [pc, #72]	@ (800096c <MX_USART2_UART_Init+0x50>)
 8000924:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000926:	4b10      	ldr	r3, [pc, #64]	@ (8000968 <MX_USART2_UART_Init+0x4c>)
 8000928:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800092c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800092e:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <MX_USART2_UART_Init+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000934:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <MX_USART2_UART_Init+0x4c>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800093a:	4b0b      	ldr	r3, [pc, #44]	@ (8000968 <MX_USART2_UART_Init+0x4c>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000940:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <MX_USART2_UART_Init+0x4c>)
 8000942:	220c      	movs	r2, #12
 8000944:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000946:	4b08      	ldr	r3, [pc, #32]	@ (8000968 <MX_USART2_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800094c:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <MX_USART2_UART_Init+0x4c>)
 800094e:	2200      	movs	r2, #0
 8000950:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000952:	4805      	ldr	r0, [pc, #20]	@ (8000968 <MX_USART2_UART_Init+0x4c>)
 8000954:	f001 fe56 	bl	8002604 <HAL_UART_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800095e:	f000 f8e1 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	200000c0 	.word	0x200000c0
 800096c:	40004400 	.word	0x40004400

08000970 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000974:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <MX_USART6_UART_Init+0x4c>)
 8000976:	4a12      	ldr	r2, [pc, #72]	@ (80009c0 <MX_USART6_UART_Init+0x50>)
 8000978:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800097a:	4b10      	ldr	r3, [pc, #64]	@ (80009bc <MX_USART6_UART_Init+0x4c>)
 800097c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000980:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000982:	4b0e      	ldr	r3, [pc, #56]	@ (80009bc <MX_USART6_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000988:	4b0c      	ldr	r3, [pc, #48]	@ (80009bc <MX_USART6_UART_Init+0x4c>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800098e:	4b0b      	ldr	r3, [pc, #44]	@ (80009bc <MX_USART6_UART_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000994:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <MX_USART6_UART_Init+0x4c>)
 8000996:	220c      	movs	r2, #12
 8000998:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099a:	4b08      	ldr	r3, [pc, #32]	@ (80009bc <MX_USART6_UART_Init+0x4c>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a0:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <MX_USART6_UART_Init+0x4c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80009a6:	4805      	ldr	r0, [pc, #20]	@ (80009bc <MX_USART6_UART_Init+0x4c>)
 80009a8:	f001 fe2c 	bl	8002604 <HAL_UART_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80009b2:	f000 f8b7 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000108 	.word	0x20000108
 80009c0:	40011400 	.word	0x40011400

080009c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08a      	sub	sp, #40	@ 0x28
 80009c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
 80009d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]
 80009de:	4b2d      	ldr	r3, [pc, #180]	@ (8000a94 <MX_GPIO_Init+0xd0>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	4a2c      	ldr	r2, [pc, #176]	@ (8000a94 <MX_GPIO_Init+0xd0>)
 80009e4:	f043 0304 	orr.w	r3, r3, #4
 80009e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ea:	4b2a      	ldr	r3, [pc, #168]	@ (8000a94 <MX_GPIO_Init+0xd0>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	f003 0304 	and.w	r3, r3, #4
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	4b26      	ldr	r3, [pc, #152]	@ (8000a94 <MX_GPIO_Init+0xd0>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	4a25      	ldr	r2, [pc, #148]	@ (8000a94 <MX_GPIO_Init+0xd0>)
 8000a00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a06:	4b23      	ldr	r3, [pc, #140]	@ (8000a94 <MX_GPIO_Init+0xd0>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	4b1f      	ldr	r3, [pc, #124]	@ (8000a94 <MX_GPIO_Init+0xd0>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	4a1e      	ldr	r2, [pc, #120]	@ (8000a94 <MX_GPIO_Init+0xd0>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a22:	4b1c      	ldr	r3, [pc, #112]	@ (8000a94 <MX_GPIO_Init+0xd0>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	4b18      	ldr	r3, [pc, #96]	@ (8000a94 <MX_GPIO_Init+0xd0>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	4a17      	ldr	r2, [pc, #92]	@ (8000a94 <MX_GPIO_Init+0xd0>)
 8000a38:	f043 0302 	orr.w	r3, r3, #2
 8000a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3e:	4b15      	ldr	r3, [pc, #84]	@ (8000a94 <MX_GPIO_Init+0xd0>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2120      	movs	r1, #32
 8000a4e:	4812      	ldr	r0, [pc, #72]	@ (8000a98 <MX_GPIO_Init+0xd4>)
 8000a50:	f001 f90c 	bl	8001c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a5a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4619      	mov	r1, r3
 8000a6a:	480c      	ldr	r0, [pc, #48]	@ (8000a9c <MX_GPIO_Init+0xd8>)
 8000a6c:	f000 ff7a 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a70:	2320      	movs	r3, #32
 8000a72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4619      	mov	r1, r3
 8000a86:	4804      	ldr	r0, [pc, #16]	@ (8000a98 <MX_GPIO_Init+0xd4>)
 8000a88:	f000 ff6c 	bl	8001964 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a8c:	bf00      	nop
 8000a8e:	3728      	adds	r7, #40	@ 0x28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020000 	.word	0x40020000
 8000a9c:	40020800 	.word	0x40020800

08000aa0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// Обработчик прерывания приема UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
    uint32_t start_time, end_time;

    // Определяем, от какого UART пришли данные
    if (huart->Instance == USART1) {
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a17      	ldr	r2, [pc, #92]	@ (8000b0c <HAL_UART_RxCpltCallback+0x6c>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d111      	bne.n	8000ad6 <HAL_UART_RxCpltCallback+0x36>
        // Засекаем время начала обработки
        start_time = Benchmark_GetCycles();
 8000ab2:	f7ff fdb5 	bl	8000620 <Benchmark_GetCycles>
 8000ab6:	60f8      	str	r0, [r7, #12]

        // Обрабатываем принятый байт
        UartProtocol_ProcessRxByte(huart, uart1_rx_byte);
 8000ab8:	4b15      	ldr	r3, [pc, #84]	@ (8000b10 <HAL_UART_RxCpltCallback+0x70>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	4619      	mov	r1, r3
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f000 fb12 	bl	80010e8 <UartProtocol_ProcessRxByte>

        // Измеряем время обработки
        end_time = Benchmark_GetCycles();
 8000ac4:	f7ff fdac 	bl	8000620 <Benchmark_GetCycles>
 8000ac8:	60b8      	str	r0, [r7, #8]

        // В целях оптимизации, не выводим информацию о времени обработки каждого байта
        // Benchmark_ReportElapsed("Обработка байта USART1", start_time, end_time);

        // Продолжаем прием
        HAL_UART_Receive_IT(&huart1, &uart1_rx_byte, 1);
 8000aca:	2201      	movs	r2, #1
 8000acc:	4910      	ldr	r1, [pc, #64]	@ (8000b10 <HAL_UART_RxCpltCallback+0x70>)
 8000ace:	4811      	ldr	r0, [pc, #68]	@ (8000b14 <HAL_UART_RxCpltCallback+0x74>)
 8000ad0:	f001 fe73 	bl	80027ba <HAL_UART_Receive_IT>
        // Benchmark_ReportElapsed("Обработка байта USART6", start_time, end_time);

        // Продолжаем прием
        HAL_UART_Receive_IT(&huart6, &uart6_rx_byte, 1);
    }
}
 8000ad4:	e015      	b.n	8000b02 <HAL_UART_RxCpltCallback+0x62>
    } else if (huart->Instance == USART6) {
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a0f      	ldr	r2, [pc, #60]	@ (8000b18 <HAL_UART_RxCpltCallback+0x78>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d110      	bne.n	8000b02 <HAL_UART_RxCpltCallback+0x62>
        start_time = Benchmark_GetCycles();
 8000ae0:	f7ff fd9e 	bl	8000620 <Benchmark_GetCycles>
 8000ae4:	60f8      	str	r0, [r7, #12]
        UartProtocol_ProcessRxByte(huart, uart6_rx_byte);
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8000b1c <HAL_UART_RxCpltCallback+0x7c>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	4619      	mov	r1, r3
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f000 fafb 	bl	80010e8 <UartProtocol_ProcessRxByte>
        end_time = Benchmark_GetCycles();
 8000af2:	f7ff fd95 	bl	8000620 <Benchmark_GetCycles>
 8000af6:	60b8      	str	r0, [r7, #8]
        HAL_UART_Receive_IT(&huart6, &uart6_rx_byte, 1);
 8000af8:	2201      	movs	r2, #1
 8000afa:	4908      	ldr	r1, [pc, #32]	@ (8000b1c <HAL_UART_RxCpltCallback+0x7c>)
 8000afc:	4808      	ldr	r0, [pc, #32]	@ (8000b20 <HAL_UART_RxCpltCallback+0x80>)
 8000afe:	f001 fe5c 	bl	80027ba <HAL_UART_Receive_IT>
}
 8000b02:	bf00      	nop
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40011000 	.word	0x40011000
 8000b10:	20000150 	.word	0x20000150
 8000b14:	20000078 	.word	0x20000078
 8000b18:	40011400 	.word	0x40011400
 8000b1c:	20000151 	.word	0x20000151
 8000b20:	20000108 	.word	0x20000108

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b28:	b672      	cpsid	i
}
 8000b2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);  // Мигаем LED
 8000b2c:	2120      	movs	r1, #32
 8000b2e:	4804      	ldr	r0, [pc, #16]	@ (8000b40 <Error_Handler+0x1c>)
 8000b30:	f001 f8b5 	bl	8001c9e <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8000b34:	2064      	movs	r0, #100	@ 0x64
 8000b36:	f000 fd4d 	bl	80015d4 <HAL_Delay>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);  // Мигаем LED
 8000b3a:	bf00      	nop
 8000b3c:	e7f6      	b.n	8000b2c <Error_Handler+0x8>
 8000b3e:	bf00      	nop
 8000b40:	40020000 	.word	0x40020000

08000b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	4b10      	ldr	r3, [pc, #64]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b52:	4a0f      	ldr	r2, [pc, #60]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6e:	4a08      	ldr	r2, [pc, #32]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b82:	2007      	movs	r0, #7
 8000b84:	f000 fe1a 	bl	80017bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40023800 	.word	0x40023800

08000b94 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08e      	sub	sp, #56	@ 0x38
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a53      	ldr	r2, [pc, #332]	@ (8000d00 <HAL_UART_MspInit+0x16c>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d135      	bne.n	8000c22 <HAL_UART_MspInit+0x8e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	623b      	str	r3, [r7, #32]
 8000bba:	4b52      	ldr	r3, [pc, #328]	@ (8000d04 <HAL_UART_MspInit+0x170>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bbe:	4a51      	ldr	r2, [pc, #324]	@ (8000d04 <HAL_UART_MspInit+0x170>)
 8000bc0:	f043 0310 	orr.w	r3, r3, #16
 8000bc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bc6:	4b4f      	ldr	r3, [pc, #316]	@ (8000d04 <HAL_UART_MspInit+0x170>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bca:	f003 0310 	and.w	r3, r3, #16
 8000bce:	623b      	str	r3, [r7, #32]
 8000bd0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
 8000bd6:	4b4b      	ldr	r3, [pc, #300]	@ (8000d04 <HAL_UART_MspInit+0x170>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	4a4a      	ldr	r2, [pc, #296]	@ (8000d04 <HAL_UART_MspInit+0x170>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be2:	4b48      	ldr	r3, [pc, #288]	@ (8000d04 <HAL_UART_MspInit+0x170>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	61fb      	str	r3, [r7, #28]
 8000bec:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bee:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000bf2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c00:	2307      	movs	r3, #7
 8000c02:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	483f      	ldr	r0, [pc, #252]	@ (8000d08 <HAL_UART_MspInit+0x174>)
 8000c0c:	f000 feaa 	bl	8001964 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2100      	movs	r1, #0
 8000c14:	2025      	movs	r0, #37	@ 0x25
 8000c16:	f000 fddc 	bl	80017d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c1a:	2025      	movs	r0, #37	@ 0x25
 8000c1c:	f000 fdf5 	bl	800180a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8000c20:	e06a      	b.n	8000cf8 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART2)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a39      	ldr	r2, [pc, #228]	@ (8000d0c <HAL_UART_MspInit+0x178>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d12c      	bne.n	8000c86 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61bb      	str	r3, [r7, #24]
 8000c30:	4b34      	ldr	r3, [pc, #208]	@ (8000d04 <HAL_UART_MspInit+0x170>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c34:	4a33      	ldr	r2, [pc, #204]	@ (8000d04 <HAL_UART_MspInit+0x170>)
 8000c36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c3c:	4b31      	ldr	r3, [pc, #196]	@ (8000d04 <HAL_UART_MspInit+0x170>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c44:	61bb      	str	r3, [r7, #24]
 8000c46:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	4b2d      	ldr	r3, [pc, #180]	@ (8000d04 <HAL_UART_MspInit+0x170>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c50:	4a2c      	ldr	r2, [pc, #176]	@ (8000d04 <HAL_UART_MspInit+0x170>)
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c58:	4b2a      	ldr	r3, [pc, #168]	@ (8000d04 <HAL_UART_MspInit+0x170>)
 8000c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c64:	230c      	movs	r3, #12
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c70:	2303      	movs	r3, #3
 8000c72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c74:	2307      	movs	r3, #7
 8000c76:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4822      	ldr	r0, [pc, #136]	@ (8000d08 <HAL_UART_MspInit+0x174>)
 8000c80:	f000 fe70 	bl	8001964 <HAL_GPIO_Init>
}
 8000c84:	e038      	b.n	8000cf8 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART6)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a21      	ldr	r2, [pc, #132]	@ (8000d10 <HAL_UART_MspInit+0x17c>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d133      	bne.n	8000cf8 <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000c90:	2300      	movs	r3, #0
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	4b1b      	ldr	r3, [pc, #108]	@ (8000d04 <HAL_UART_MspInit+0x170>)
 8000c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c98:	4a1a      	ldr	r2, [pc, #104]	@ (8000d04 <HAL_UART_MspInit+0x170>)
 8000c9a:	f043 0320 	orr.w	r3, r3, #32
 8000c9e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ca0:	4b18      	ldr	r3, [pc, #96]	@ (8000d04 <HAL_UART_MspInit+0x170>)
 8000ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca4:	f003 0320 	and.w	r3, r3, #32
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cac:	2300      	movs	r3, #0
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	4b14      	ldr	r3, [pc, #80]	@ (8000d04 <HAL_UART_MspInit+0x170>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb4:	4a13      	ldr	r2, [pc, #76]	@ (8000d04 <HAL_UART_MspInit+0x170>)
 8000cb6:	f043 0304 	orr.w	r3, r3, #4
 8000cba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cbc:	4b11      	ldr	r3, [pc, #68]	@ (8000d04 <HAL_UART_MspInit+0x170>)
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc0:	f003 0304 	and.w	r3, r3, #4
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cc8:	23c0      	movs	r3, #192	@ 0xc0
 8000cca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000cd8:	2308      	movs	r3, #8
 8000cda:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	480c      	ldr	r0, [pc, #48]	@ (8000d14 <HAL_UART_MspInit+0x180>)
 8000ce4:	f000 fe3e 	bl	8001964 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2100      	movs	r1, #0
 8000cec:	2047      	movs	r0, #71	@ 0x47
 8000cee:	f000 fd70 	bl	80017d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000cf2:	2047      	movs	r0, #71	@ 0x47
 8000cf4:	f000 fd89 	bl	800180a <HAL_NVIC_EnableIRQ>
}
 8000cf8:	bf00      	nop
 8000cfa:	3738      	adds	r7, #56	@ 0x38
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40011000 	.word	0x40011000
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40020000 	.word	0x40020000
 8000d0c:	40004400 	.word	0x40004400
 8000d10:	40011400 	.word	0x40011400
 8000d14:	40020800 	.word	0x40020800

08000d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <NMI_Handler+0x4>

08000d20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <HardFault_Handler+0x4>

08000d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <MemManage_Handler+0x4>

08000d30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <BusFault_Handler+0x4>

08000d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <UsageFault_Handler+0x4>

08000d40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d6e:	f000 fc11 	bl	8001594 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d7c:	4802      	ldr	r0, [pc, #8]	@ (8000d88 <USART1_IRQHandler+0x10>)
 8000d7e:	f001 fd41 	bl	8002804 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000078 	.word	0x20000078

08000d8c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000d90:	4802      	ldr	r0, [pc, #8]	@ (8000d9c <USART6_IRQHandler+0x10>)
 8000d92:	f001 fd37 	bl	8002804 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000108 	.word	0x20000108

08000da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da8:	4a14      	ldr	r2, [pc, #80]	@ (8000dfc <_sbrk+0x5c>)
 8000daa:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <_sbrk+0x60>)
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db4:	4b13      	ldr	r3, [pc, #76]	@ (8000e04 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d102      	bne.n	8000dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <_sbrk+0x64>)
 8000dbe:	4a12      	ldr	r2, [pc, #72]	@ (8000e08 <_sbrk+0x68>)
 8000dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dc2:	4b10      	ldr	r3, [pc, #64]	@ (8000e04 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d207      	bcs.n	8000de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd0:	f002 fcac 	bl	800372c <__errno>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295
 8000dde:	e009      	b.n	8000df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de0:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <_sbrk+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de6:	4b07      	ldr	r3, [pc, #28]	@ (8000e04 <_sbrk+0x64>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	4a05      	ldr	r2, [pc, #20]	@ (8000e04 <_sbrk+0x64>)
 8000df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000df2:	68fb      	ldr	r3, [r7, #12]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3718      	adds	r7, #24
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20020000 	.word	0x20020000
 8000e00:	00000400 	.word	0x00000400
 8000e04:	20000158 	.word	0x20000158
 8000e08:	200004c8 	.word	0x200004c8

08000e0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e10:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <SystemInit+0x20>)
 8000e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e16:	4a05      	ldr	r2, [pc, #20]	@ (8000e2c <SystemInit+0x20>)
 8000e18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <UartProtocol_Init>:
// Буферы для приема данных
static RxBuffer usart1_rx_buffer;
static RxBuffer usart6_rx_buffer;

// Инициализация протокола
void UartProtocol_Init(void) {
 8000e30:	b5b0      	push	{r4, r5, r7, lr}
 8000e32:	b08e      	sub	sp, #56	@ 0x38
 8000e34:	af00      	add	r7, sp, #0
    // Инициализация буферов
    memset(&usart1_rx_buffer, 0, sizeof(RxBuffer));
 8000e36:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4818      	ldr	r0, [pc, #96]	@ (8000ea0 <UartProtocol_Init+0x70>)
 8000e3e:	f002 fc6d 	bl	800371c <memset>
    memset(&usart6_rx_buffer, 0, sizeof(RxBuffer));
 8000e42:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8000e46:	2100      	movs	r1, #0
 8000e48:	4816      	ldr	r0, [pc, #88]	@ (8000ea4 <UartProtocol_Init+0x74>)
 8000e4a:	f002 fc67 	bl	800371c <memset>

    // Установка начального состояния
    usart1_rx_buffer.state = WAIT_START;
 8000e4e:	4b14      	ldr	r3, [pc, #80]	@ (8000ea0 <UartProtocol_Init+0x70>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
    usart6_rx_buffer.state = WAIT_START;
 8000e56:	4b13      	ldr	r3, [pc, #76]	@ (8000ea4 <UartProtocol_Init+0x74>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e

    // Выводим информацию об инициализации
    char log_message[] = "Протокол UART инициализирован\r\n";
 8000e5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ea8 <UartProtocol_Init+0x78>)
 8000e60:	463c      	mov	r4, r7
 8000e62:	461d      	mov	r5, r3
 8000e64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e70:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e74:	6020      	str	r0, [r4, #0]
 8000e76:	3404      	adds	r4, #4
 8000e78:	8021      	strh	r1, [r4, #0]
 8000e7a:	3402      	adds	r4, #2
 8000e7c:	0c0b      	lsrs	r3, r1, #16
 8000e7e:	7023      	strb	r3, [r4, #0]
    HAL_UART_Transmit(&huart2, (uint8_t *)log_message, strlen(log_message), HAL_MAX_DELAY);
 8000e80:	463b      	mov	r3, r7
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff f9ac 	bl	80001e0 <strlen>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	4639      	mov	r1, r7
 8000e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e92:	4806      	ldr	r0, [pc, #24]	@ (8000eac <UartProtocol_Init+0x7c>)
 8000e94:	f001 fc06 	bl	80026a4 <HAL_UART_Transmit>
}
 8000e98:	bf00      	nop
 8000e9a:	3738      	adds	r7, #56	@ 0x38
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bdb0      	pop	{r4, r5, r7, pc}
 8000ea0:	2000015c 	.word	0x2000015c
 8000ea4:	2000026c 	.word	0x2000026c
 8000ea8:	080041c4 	.word	0x080041c4
 8000eac:	200000c0 	.word	0x200000c0

08000eb0 <UartProtocol_SendFrame>:

// Отправка фрейма по UART
void UartProtocol_SendFrame(UART_HandleTypeDef *huart, uint8_t *data, uint16_t length) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b0e6      	sub	sp, #408	@ 0x198
 8000eb4:	af02      	add	r7, sp, #8
 8000eb6:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8000eba:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8000ebe:	6018      	str	r0, [r3, #0]
 8000ec0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8000ec4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8000ec8:	6019      	str	r1, [r3, #0]
 8000eca:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8000ece:	f5a3 73c5 	sub.w	r3, r3, #394	@ 0x18a
 8000ed2:	801a      	strh	r2, [r3, #0]
    char source[10];

    // Определяем источник сообщения для логирования
    if (huart->Instance == USART1) {
 8000ed4:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8000ed8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a79      	ldr	r2, [pc, #484]	@ (80010c8 <UartProtocol_SendFrame+0x218>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d10b      	bne.n	8000efe <UartProtocol_SendFrame+0x4e>
        strcpy(source, "USART1");
 8000ee6:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 8000eea:	4a78      	ldr	r2, [pc, #480]	@ (80010cc <UartProtocol_SendFrame+0x21c>)
 8000eec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ef0:	6018      	str	r0, [r3, #0]
 8000ef2:	3304      	adds	r3, #4
 8000ef4:	8019      	strh	r1, [r3, #0]
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	0c0a      	lsrs	r2, r1, #16
 8000efa:	701a      	strb	r2, [r3, #0]
 8000efc:	e01b      	b.n	8000f36 <UartProtocol_SendFrame+0x86>
    } else if (huart->Instance == USART6) {
 8000efe:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8000f02:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a71      	ldr	r2, [pc, #452]	@ (80010d0 <UartProtocol_SendFrame+0x220>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d10b      	bne.n	8000f28 <UartProtocol_SendFrame+0x78>
        strcpy(source, "USART6");
 8000f10:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 8000f14:	4a6f      	ldr	r2, [pc, #444]	@ (80010d4 <UartProtocol_SendFrame+0x224>)
 8000f16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f1a:	6018      	str	r0, [r3, #0]
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	8019      	strh	r1, [r3, #0]
 8000f20:	3302      	adds	r3, #2
 8000f22:	0c0a      	lsrs	r2, r1, #16
 8000f24:	701a      	strb	r2, [r3, #0]
 8000f26:	e006      	b.n	8000f36 <UartProtocol_SendFrame+0x86>
    } else {
        strcpy(source, "UNKNOWN");
 8000f28:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 8000f2c:	4a6a      	ldr	r2, [pc, #424]	@ (80010d8 <UartProtocol_SendFrame+0x228>)
 8000f2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f32:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    // Выводим информацию о начале отправки
    char log_message[100];
    snprintf(log_message, sizeof(log_message), "[%s] Отправка фрейма, длина данных: %u\r\n",
 8000f36:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8000f3a:	f5a3 73c5 	sub.w	r3, r3, #394	@ 0x18a
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	f507 72c2 	add.w	r2, r7, #388	@ 0x184
 8000f44:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	4a63      	ldr	r2, [pc, #396]	@ (80010dc <UartProtocol_SendFrame+0x22c>)
 8000f4e:	2164      	movs	r1, #100	@ 0x64
 8000f50:	f002 fbae 	bl	80036b0 <sniprintf>
             source, length);
    HAL_UART_Transmit(&huart2, (uint8_t *)log_message, strlen(log_message), HAL_MAX_DELAY);
 8000f54:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff f941 	bl	80001e0 <strlen>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6a:	485d      	ldr	r0, [pc, #372]	@ (80010e0 <UartProtocol_SendFrame+0x230>)
 8000f6c:	f001 fb9a 	bl	80026a4 <HAL_UART_Transmit>

    // Создаем фрейм
    UartFrame frame;

    // Заполнение структуры фрейма
    frame.start_marker = FRAME_START_MARKER;
 8000f70:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8000f74:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8000f78:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 8000f7c:	801a      	strh	r2, [r3, #0]
    frame.data_length = length;
 8000f7e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8000f82:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8000f86:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 8000f8a:	f5a2 72c5 	sub.w	r2, r2, #394	@ 0x18a
 8000f8e:	8812      	ldrh	r2, [r2, #0]
 8000f90:	805a      	strh	r2, [r3, #2]
    memcpy(frame.data, data, length);
 8000f92:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8000f96:	f5a3 73c5 	sub.w	r3, r3, #394	@ 0x18a
 8000f9a:	8819      	ldrh	r1, [r3, #0]
 8000f9c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8000fa0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8000fa4:	f107 0214 	add.w	r2, r7, #20
 8000fa8:	1d10      	adds	r0, r2, #4
 8000faa:	460a      	mov	r2, r1
 8000fac:	6819      	ldr	r1, [r3, #0]
 8000fae:	f002 fbe9 	bl	8003784 <memcpy>
    frame.crc = UartProtocol_CalculateCRC(data, length);
 8000fb2:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8000fb6:	f5a3 73c5 	sub.w	r3, r3, #394	@ 0x18a
 8000fba:	881a      	ldrh	r2, [r3, #0]
 8000fbc:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8000fc0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	6818      	ldr	r0, [r3, #0]
 8000fc8:	f000 fa2c 	bl	8001424 <UartProtocol_CalculateCRC>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8000fd2:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8000fd6:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
    frame.end_marker = FRAME_END_MARKER;
 8000fda:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8000fde:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8000fe2:	f245 52aa 	movw	r2, #21930	@ 0x55aa
 8000fe6:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108

    // Отправка фрейма по частям для надежности
    // Отправляем маркер начала
    HAL_UART_Transmit(huart, (uint8_t *)&frame.start_marker, sizeof(frame.start_marker), HAL_MAX_DELAY);
 8000fea:	f107 0114 	add.w	r1, r7, #20
 8000fee:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8000ff2:	f5a3 70c2 	sub.w	r0, r3, #388	@ 0x184
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	6800      	ldr	r0, [r0, #0]
 8000ffe:	f001 fb51 	bl	80026a4 <HAL_UART_Transmit>
    // Отправляем длину данных
    HAL_UART_Transmit(huart, (uint8_t *)&frame.data_length, sizeof(frame.data_length), HAL_MAX_DELAY);
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	1c99      	adds	r1, r3, #2
 8001008:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800100c:	f5a3 70c2 	sub.w	r0, r3, #388	@ 0x184
 8001010:	f04f 33ff 	mov.w	r3, #4294967295
 8001014:	2202      	movs	r2, #2
 8001016:	6800      	ldr	r0, [r0, #0]
 8001018:	f001 fb44 	bl	80026a4 <HAL_UART_Transmit>
    // Отправляем данные
    HAL_UART_Transmit(huart, frame.data, length, HAL_MAX_DELAY);
 800101c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001020:	f5a3 73c5 	sub.w	r3, r3, #394	@ 0x18a
 8001024:	881a      	ldrh	r2, [r3, #0]
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	1d19      	adds	r1, r3, #4
 800102c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001030:	f5a3 70c2 	sub.w	r0, r3, #388	@ 0x184
 8001034:	f04f 33ff 	mov.w	r3, #4294967295
 8001038:	6800      	ldr	r0, [r0, #0]
 800103a:	f001 fb33 	bl	80026a4 <HAL_UART_Transmit>
    // Отправляем CRC
    HAL_UART_Transmit(huart, (uint8_t *)&frame.crc, sizeof(frame.crc), HAL_MAX_DELAY);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	f503 7182 	add.w	r1, r3, #260	@ 0x104
 8001046:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800104a:	f5a3 70c2 	sub.w	r0, r3, #388	@ 0x184
 800104e:	f04f 33ff 	mov.w	r3, #4294967295
 8001052:	2204      	movs	r2, #4
 8001054:	6800      	ldr	r0, [r0, #0]
 8001056:	f001 fb25 	bl	80026a4 <HAL_UART_Transmit>
    // Отправляем маркер конца
    HAL_UART_Transmit(huart, (uint8_t *)&frame.end_marker, sizeof(frame.end_marker), HAL_MAX_DELAY);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	f503 7184 	add.w	r1, r3, #264	@ 0x108
 8001062:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001066:	f5a3 70c2 	sub.w	r0, r3, #388	@ 0x184
 800106a:	f04f 33ff 	mov.w	r3, #4294967295
 800106e:	2202      	movs	r2, #2
 8001070:	6800      	ldr	r0, [r0, #0]
 8001072:	f001 fb17 	bl	80026a4 <HAL_UART_Transmit>

    // Выводим информацию о содержимом отправленных данных
    snprintf(log_message, sizeof(log_message), "[%s] Отправлено: '%.*s'\r\n",
 8001076:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800107a:	f5a3 73c5 	sub.w	r3, r3, #394	@ 0x18a
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	f507 71c2 	add.w	r1, r7, #388	@ 0x184
 8001084:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8001088:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 800108c:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 8001090:	6812      	ldr	r2, [r2, #0]
 8001092:	9201      	str	r2, [sp, #4]
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	460b      	mov	r3, r1
 8001098:	4a12      	ldr	r2, [pc, #72]	@ (80010e4 <UartProtocol_SendFrame+0x234>)
 800109a:	2164      	movs	r1, #100	@ 0x64
 800109c:	f002 fb08 	bl	80036b0 <sniprintf>
             source, length, data);
    HAL_UART_Transmit(&huart2, (uint8_t *)log_message, strlen(log_message), HAL_MAX_DELAY);
 80010a0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff f89b 	bl	80001e0 <strlen>
 80010aa:	4603      	mov	r3, r0
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295
 80010b6:	480a      	ldr	r0, [pc, #40]	@ (80010e0 <UartProtocol_SendFrame+0x230>)
 80010b8:	f001 faf4 	bl	80026a4 <HAL_UART_Transmit>
}
 80010bc:	bf00      	nop
 80010be:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40011000 	.word	0x40011000
 80010cc:	080041fc 	.word	0x080041fc
 80010d0:	40011400 	.word	0x40011400
 80010d4:	08004204 	.word	0x08004204
 80010d8:	0800420c 	.word	0x0800420c
 80010dc:	08004214 	.word	0x08004214
 80010e0:	200000c0 	.word	0x200000c0
 80010e4:	08004258 	.word	0x08004258

080010e8 <UartProtocol_ProcessRxByte>:

// Обработка принятого байта
void UartProtocol_ProcessRxByte(UART_HandleTypeDef *huart, uint8_t byte) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b0e6      	sub	sp, #408	@ 0x198
 80010ec:	af02      	add	r7, sp, #8
 80010ee:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80010f2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80010f6:	6018      	str	r0, [r3, #0]
 80010f8:	460a      	mov	r2, r1
 80010fa:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80010fe:	f2a3 138d 	subw	r3, r3, #397	@ 0x18d
 8001102:	701a      	strb	r2, [r3, #0]
    RxBuffer *rxBuffer;
    char source[10];

    // Определяем, какой буфер использовать
    if (huart->Instance == USART1) {
 8001104:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001108:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4ab9      	ldr	r2, [pc, #740]	@ (80013f8 <UartProtocol_ProcessRxByte+0x310>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d10e      	bne.n	8001134 <UartProtocol_ProcessRxByte+0x4c>
        rxBuffer = &usart1_rx_buffer;
 8001116:	4bb9      	ldr	r3, [pc, #740]	@ (80013fc <UartProtocol_ProcessRxByte+0x314>)
 8001118:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
        strcpy(source, "USART1");
 800111c:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001120:	4ab7      	ldr	r2, [pc, #732]	@ (8001400 <UartProtocol_ProcessRxByte+0x318>)
 8001122:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001126:	6018      	str	r0, [r3, #0]
 8001128:	3304      	adds	r3, #4
 800112a:	8019      	strh	r1, [r3, #0]
 800112c:	3302      	adds	r3, #2
 800112e:	0c0a      	lsrs	r2, r1, #16
 8001130:	701a      	strb	r2, [r3, #0]
 8001132:	e017      	b.n	8001164 <UartProtocol_ProcessRxByte+0x7c>
    } else if (huart->Instance == USART6) {
 8001134:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001138:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4ab0      	ldr	r2, [pc, #704]	@ (8001404 <UartProtocol_ProcessRxByte+0x31c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	f040 8148 	bne.w	80013d8 <UartProtocol_ProcessRxByte+0x2f0>
        rxBuffer = &usart6_rx_buffer;
 8001148:	4baf      	ldr	r3, [pc, #700]	@ (8001408 <UartProtocol_ProcessRxByte+0x320>)
 800114a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
        strcpy(source, "USART6");
 800114e:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001152:	4aae      	ldr	r2, [pc, #696]	@ (800140c <UartProtocol_ProcessRxByte+0x324>)
 8001154:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001158:	6018      	str	r0, [r3, #0]
 800115a:	3304      	adds	r3, #4
 800115c:	8019      	strh	r1, [r3, #0]
 800115e:	3302      	adds	r3, #2
 8001160:	0c0a      	lsrs	r2, r1, #16
 8001162:	701a      	strb	r2, [r3, #0]
    } else {
        return; // Неизвестный UART
    }

    // Добавляем байт в буфер
    rxBuffer->buffer[rxBuffer->position++] = byte;
 8001164:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001168:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 800116c:	1c5a      	adds	r2, r3, #1
 800116e:	b291      	uxth	r1, r2
 8001170:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8001174:	f8a2 110c 	strh.w	r1, [r2, #268]	@ 0x10c
 8001178:	4619      	mov	r1, r3
 800117a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800117e:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 8001182:	f2a2 128d 	subw	r2, r2, #397	@ 0x18d
 8001186:	7812      	ldrb	r2, [r2, #0]
 8001188:	545a      	strb	r2, [r3, r1]

    // Обработка в зависимости от текущего состояния
    switch (rxBuffer->state) {
 800118a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800118e:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 8001192:	2b04      	cmp	r3, #4
 8001194:	f200 812b 	bhi.w	80013ee <UartProtocol_ProcessRxByte+0x306>
 8001198:	a201      	add	r2, pc, #4	@ (adr r2, 80011a0 <UartProtocol_ProcessRxByte+0xb8>)
 800119a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119e:	bf00      	nop
 80011a0:	080011b5 	.word	0x080011b5
 80011a4:	080011f1 	.word	0x080011f1
 80011a8:	0800120b 	.word	0x0800120b
 80011ac:	08001239 	.word	0x08001239
 80011b0:	0800125f 	.word	0x0800125f
        case WAIT_START:
            if (rxBuffer->position == 2) {
 80011b4:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80011b8:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 80011bc:	2b02      	cmp	r3, #2
 80011be:	f040 810d 	bne.w	80013dc <UartProtocol_ProcessRxByte+0x2f4>
                uint16_t marker = *(uint16_t *)rxBuffer->buffer;
 80011c2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	f8a7 3178 	strh.w	r3, [r7, #376]	@ 0x178
                if (marker == FRAME_START_MARKER) {
 80011cc:	f8b7 3178 	ldrh.w	r3, [r7, #376]	@ 0x178
 80011d0:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d105      	bne.n	80011e4 <UartProtocol_ProcessRxByte+0xfc>
                    rxBuffer->state = READ_LENGTH;
 80011d8:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80011dc:	2201      	movs	r2, #1
 80011de:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                } else {
                    // Неверный маркер, сбрасываем позицию
                    rxBuffer->position = 0;
                }
            }
            break;
 80011e2:	e0fb      	b.n	80013dc <UartProtocol_ProcessRxByte+0x2f4>
                    rxBuffer->position = 0;
 80011e4:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80011e8:	2200      	movs	r2, #0
 80011ea:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
            break;
 80011ee:	e0f5      	b.n	80013dc <UartProtocol_ProcessRxByte+0x2f4>

        case READ_LENGTH:
            if (rxBuffer->position == 4) {
 80011f0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80011f4:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 80011f8:	2b04      	cmp	r3, #4
 80011fa:	f040 80f1 	bne.w	80013e0 <UartProtocol_ProcessRxByte+0x2f8>
                // Маркер (2) + длина (2) = 4 байта
                rxBuffer->state = READ_DATA;
 80011fe:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001202:	2202      	movs	r2, #2
 8001204:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            }
            break;
 8001208:	e0ea      	b.n	80013e0 <UartProtocol_ProcessRxByte+0x2f8>

        case READ_DATA: {
            uint16_t data_length = *(uint16_t *)(rxBuffer->buffer + 2);
 800120a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800120e:	3302      	adds	r3, #2
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	f8a7 317a 	strh.w	r3, [r7, #378]	@ 0x17a
            if (rxBuffer->position == 4 + data_length) {
 8001216:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800121a:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 800121e:	461a      	mov	r2, r3
 8001220:	f8b7 317a 	ldrh.w	r3, [r7, #378]	@ 0x17a
 8001224:	3304      	adds	r3, #4
 8001226:	429a      	cmp	r2, r3
 8001228:	f040 80dc 	bne.w	80013e4 <UartProtocol_ProcessRxByte+0x2fc>
                rxBuffer->state = READ_CRC;
 800122c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001230:	2203      	movs	r2, #3
 8001232:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            }
            break;
 8001236:	e0d5      	b.n	80013e4 <UartProtocol_ProcessRxByte+0x2fc>
        }

        case READ_CRC:
            if (rxBuffer->position == 4 + *(uint16_t *)(rxBuffer->buffer + 2) + 4) {
 8001238:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800123c:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 8001240:	461a      	mov	r2, r3
 8001242:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001246:	3302      	adds	r3, #2
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	3308      	adds	r3, #8
 800124c:	429a      	cmp	r2, r3
 800124e:	f040 80cb 	bne.w	80013e8 <UartProtocol_ProcessRxByte+0x300>
                rxBuffer->state = READ_END;
 8001252:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001256:	2204      	movs	r2, #4
 8001258:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            }
            break;
 800125c:	e0c4      	b.n	80013e8 <UartProtocol_ProcessRxByte+0x300>

        case READ_END:
            if (rxBuffer->position == 4 + *(uint16_t *)(rxBuffer->buffer + 2) + 4 + 2) {
 800125e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001262:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 8001266:	461a      	mov	r2, r3
 8001268:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800126c:	3302      	adds	r3, #2
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	330a      	adds	r3, #10
 8001272:	429a      	cmp	r2, r3
 8001274:	f040 80ba 	bne.w	80013ec <UartProtocol_ProcessRxByte+0x304>
                // Полный фрейм получен, проверяем маркер конца
                uint16_t end_marker = *(uint16_t *)(rxBuffer->buffer + rxBuffer->position - 2);
 8001278:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 800127c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001280:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 8001284:	3b02      	subs	r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	881b      	ldrh	r3, [r3, #0]
 800128a:	f8a7 318a 	strh.w	r3, [r7, #394]	@ 0x18a
                if (end_marker == FRAME_END_MARKER) {
 800128e:	f8b7 318a 	ldrh.w	r3, [r7, #394]	@ 0x18a
 8001292:	f245 52aa 	movw	r2, #21930	@ 0x55aa
 8001296:	4293      	cmp	r3, r2
 8001298:	d179      	bne.n	800138e <UartProtocol_ProcessRxByte+0x2a6>
                    // Проверяем CRC
                    uint16_t data_length = *(uint16_t *)(rxBuffer->buffer + 2);
 800129a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800129e:	3302      	adds	r3, #2
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	f8a7 3188 	strh.w	r3, [r7, #392]	@ 0x188
                    uint8_t *data = rxBuffer->buffer + 4;
 80012a6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80012aa:	3304      	adds	r3, #4
 80012ac:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
                    uint32_t received_crc = *(uint32_t *)(data + data_length);
 80012b0:	f8b7 3188 	ldrh.w	r3, [r7, #392]	@ 0x188
 80012b4:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 80012b8:	4413      	add	r3, r2
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
                    uint32_t calculated_crc = UartProtocol_CalculateCRC(data, data_length);
 80012c0:	f8b7 3188 	ldrh.w	r3, [r7, #392]	@ 0x188
 80012c4:	4619      	mov	r1, r3
 80012c6:	f8d7 0184 	ldr.w	r0, [r7, #388]	@ 0x184
 80012ca:	f000 f8ab 	bl	8001424 <UartProtocol_CalculateCRC>
 80012ce:	f8c7 017c 	str.w	r0, [r7, #380]	@ 0x17c

                    if (received_crc == calculated_crc) {
 80012d2:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 80012d6:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80012da:	429a      	cmp	r2, r3
 80012dc:	d139      	bne.n	8001352 <UartProtocol_ProcessRxByte+0x26a>
                        // Фрейм успешно принят, выводим информацию
                        char log_message[MAX_DATA_SIZE + 100];
                        snprintf(log_message, sizeof(log_message),
 80012de:	f8b7 3188 	ldrh.w	r3, [r7, #392]	@ 0x188
 80012e2:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 80012e6:	f107 0008 	add.w	r0, r7, #8
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	4613      	mov	r3, r2
 80012ee:	4a48      	ldr	r2, [pc, #288]	@ (8001410 <UartProtocol_ProcessRxByte+0x328>)
 80012f0:	f44f 71b2 	mov.w	r1, #356	@ 0x164
 80012f4:	f002 f9dc 	bl	80036b0 <sniprintf>
                                 "[%s] Принят фрейм, длина данных: %u\r\n",
                                 source, data_length);
                        HAL_UART_Transmit(&huart2, (uint8_t *)log_message, strlen(log_message), HAL_MAX_DELAY);
 80012f8:	f107 0308 	add.w	r3, r7, #8
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7fe ff6f 	bl	80001e0 <strlen>
 8001302:	4603      	mov	r3, r0
 8001304:	b29a      	uxth	r2, r3
 8001306:	f107 0108 	add.w	r1, r7, #8
 800130a:	f04f 33ff 	mov.w	r3, #4294967295
 800130e:	4841      	ldr	r0, [pc, #260]	@ (8001414 <UartProtocol_ProcessRxByte+0x32c>)
 8001310:	f001 f9c8 	bl	80026a4 <HAL_UART_Transmit>

                        // Выводим принятые данные в консоль
                        snprintf(log_message, sizeof(log_message),
 8001314:	f8b7 3188 	ldrh.w	r3, [r7, #392]	@ 0x188
 8001318:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 800131c:	f107 0008 	add.w	r0, r7, #8
 8001320:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8001324:	9201      	str	r2, [sp, #4]
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	460b      	mov	r3, r1
 800132a:	4a3b      	ldr	r2, [pc, #236]	@ (8001418 <UartProtocol_ProcessRxByte+0x330>)
 800132c:	f44f 71b2 	mov.w	r1, #356	@ 0x164
 8001330:	f002 f9be 	bl	80036b0 <sniprintf>
                                 "[%s] Принято: '%.*s'\r\n",
                                 source, data_length, data);
                        HAL_UART_Transmit(&huart2, (uint8_t *)log_message, strlen(log_message), HAL_MAX_DELAY);
 8001334:	f107 0308 	add.w	r3, r7, #8
 8001338:	4618      	mov	r0, r3
 800133a:	f7fe ff51 	bl	80001e0 <strlen>
 800133e:	4603      	mov	r3, r0
 8001340:	b29a      	uxth	r2, r3
 8001342:	f107 0108 	add.w	r1, r7, #8
 8001346:	f04f 33ff 	mov.w	r3, #4294967295
 800134a:	4832      	ldr	r0, [pc, #200]	@ (8001414 <UartProtocol_ProcessRxByte+0x32c>)
 800134c:	f001 f9aa 	bl	80026a4 <HAL_UART_Transmit>
 8001350:	e037      	b.n	80013c2 <UartProtocol_ProcessRxByte+0x2da>
                    } else {
                        // Ошибка CRC
                        char log_message[100];
                        snprintf(log_message, sizeof(log_message),
 8001352:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8001356:	f107 0008 	add.w	r0, r7, #8
 800135a:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800135e:	9301      	str	r3, [sp, #4]
 8001360:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	4613      	mov	r3, r2
 8001368:	4a2c      	ldr	r2, [pc, #176]	@ (800141c <UartProtocol_ProcessRxByte+0x334>)
 800136a:	2164      	movs	r1, #100	@ 0x64
 800136c:	f002 f9a0 	bl	80036b0 <sniprintf>
                                 "[%s] Ошибка CRC: получено 0x%08X, вычислено 0x%08X\r\n",
                                 source, received_crc, calculated_crc);
                        HAL_UART_Transmit(&huart2, (uint8_t *)log_message, strlen(log_message), HAL_MAX_DELAY);
 8001370:	f107 0308 	add.w	r3, r7, #8
 8001374:	4618      	mov	r0, r3
 8001376:	f7fe ff33 	bl	80001e0 <strlen>
 800137a:	4603      	mov	r3, r0
 800137c:	b29a      	uxth	r2, r3
 800137e:	f107 0108 	add.w	r1, r7, #8
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
 8001386:	4823      	ldr	r0, [pc, #140]	@ (8001414 <UartProtocol_ProcessRxByte+0x32c>)
 8001388:	f001 f98c 	bl	80026a4 <HAL_UART_Transmit>
 800138c:	e019      	b.n	80013c2 <UartProtocol_ProcessRxByte+0x2da>
                    }
                } else {
                    // Неверный маркер конца
                    char log_message[100];
                    snprintf(log_message, sizeof(log_message),
 800138e:	f8b7 318a 	ldrh.w	r3, [r7, #394]	@ 0x18a
 8001392:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8001396:	f107 0008 	add.w	r0, r7, #8
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	4613      	mov	r3, r2
 800139e:	4a20      	ldr	r2, [pc, #128]	@ (8001420 <UartProtocol_ProcessRxByte+0x338>)
 80013a0:	2164      	movs	r1, #100	@ 0x64
 80013a2:	f002 f985 	bl	80036b0 <sniprintf>
                             "[%s] Ошибка: неверный маркер конца 0x%04X\r\n",
                             source, end_marker);
                    HAL_UART_Transmit(&huart2, (uint8_t *)log_message, strlen(log_message), HAL_MAX_DELAY);
 80013a6:	f107 0308 	add.w	r3, r7, #8
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7fe ff18 	bl	80001e0 <strlen>
 80013b0:	4603      	mov	r3, r0
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	f107 0108 	add.w	r1, r7, #8
 80013b8:	f04f 33ff 	mov.w	r3, #4294967295
 80013bc:	4815      	ldr	r0, [pc, #84]	@ (8001414 <UartProtocol_ProcessRxByte+0x32c>)
 80013be:	f001 f971 	bl	80026a4 <HAL_UART_Transmit>
                }

                // Сбрасываем буфер для следующего фрейма
                rxBuffer->position = 0;
 80013c2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80013c6:	2200      	movs	r2, #0
 80013c8:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
                rxBuffer->state = WAIT_START;
 80013cc:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            }
            break;
 80013d6:	e009      	b.n	80013ec <UartProtocol_ProcessRxByte+0x304>
        return; // Неизвестный UART
 80013d8:	bf00      	nop
 80013da:	e008      	b.n	80013ee <UartProtocol_ProcessRxByte+0x306>
            break;
 80013dc:	bf00      	nop
 80013de:	e006      	b.n	80013ee <UartProtocol_ProcessRxByte+0x306>
            break;
 80013e0:	bf00      	nop
 80013e2:	e004      	b.n	80013ee <UartProtocol_ProcessRxByte+0x306>
            break;
 80013e4:	bf00      	nop
 80013e6:	e002      	b.n	80013ee <UartProtocol_ProcessRxByte+0x306>
            break;
 80013e8:	bf00      	nop
 80013ea:	e000      	b.n	80013ee <UartProtocol_ProcessRxByte+0x306>
            break;
 80013ec:	bf00      	nop
    }
}
 80013ee:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40011000 	.word	0x40011000
 80013fc:	2000015c 	.word	0x2000015c
 8001400:	080041fc 	.word	0x080041fc
 8001404:	40011400 	.word	0x40011400
 8001408:	2000026c 	.word	0x2000026c
 800140c:	08004204 	.word	0x08004204
 8001410:	0800427c 	.word	0x0800427c
 8001414:	200000c0 	.word	0x200000c0
 8001418:	080042b8 	.word	0x080042b8
 800141c:	080042d8 	.word	0x080042d8
 8001420:	08004324 	.word	0x08004324

08001424 <UartProtocol_CalculateCRC>:

// Расчет CRC32
uint32_t UartProtocol_CalculateCRC(uint8_t *data, uint16_t length) {
 8001424:	b480      	push	{r7}
 8001426:	b087      	sub	sp, #28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	807b      	strh	r3, [r7, #2]
    // Стандартная реализация CRC32
    uint32_t crc = 0xFFFFFFFF;
 8001430:	f04f 33ff 	mov.w	r3, #4294967295
 8001434:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < length; i++) {
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	e021      	b.n	8001480 <UartProtocol_CalculateCRC+0x5c>
        crc ^= data[i];
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	461a      	mov	r2, r3
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	4053      	eors	r3, r2
 800144a:	617b      	str	r3, [r7, #20]
        for (int j = 0; j < 8; j++) {
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	e010      	b.n	8001474 <UartProtocol_CalculateCRC+0x50>
            if (crc & 1) {
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	2b00      	cmp	r3, #0
 800145a:	d005      	beq.n	8001468 <UartProtocol_CalculateCRC+0x44>
                crc = (crc >> 1) ^ 0xEDB88320;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	085a      	lsrs	r2, r3, #1
 8001460:	4b0d      	ldr	r3, [pc, #52]	@ (8001498 <UartProtocol_CalculateCRC+0x74>)
 8001462:	4053      	eors	r3, r2
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	e002      	b.n	800146e <UartProtocol_CalculateCRC+0x4a>
            } else {
                crc = crc >> 1;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	085b      	lsrs	r3, r3, #1
 800146c:	617b      	str	r3, [r7, #20]
        for (int j = 0; j < 8; j++) {
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	3301      	adds	r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2b07      	cmp	r3, #7
 8001478:	ddeb      	ble.n	8001452 <UartProtocol_CalculateCRC+0x2e>
    for (int i = 0; i < length; i++) {
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	3301      	adds	r3, #1
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	887b      	ldrh	r3, [r7, #2]
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	429a      	cmp	r2, r3
 8001486:	dbd9      	blt.n	800143c <UartProtocol_CalculateCRC+0x18>
            }
        }
    }
    return ~crc;
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	43db      	mvns	r3, r3
}
 800148c:	4618      	mov	r0, r3
 800148e:	371c      	adds	r7, #28
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	edb88320 	.word	0xedb88320

0800149c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800149c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014a0:	f7ff fcb4 	bl	8000e0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014a4:	480c      	ldr	r0, [pc, #48]	@ (80014d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014a6:	490d      	ldr	r1, [pc, #52]	@ (80014dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014a8:	4a0d      	ldr	r2, [pc, #52]	@ (80014e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ac:	e002      	b.n	80014b4 <LoopCopyDataInit>

080014ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b2:	3304      	adds	r3, #4

080014b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b8:	d3f9      	bcc.n	80014ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ba:	4a0a      	ldr	r2, [pc, #40]	@ (80014e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014bc:	4c0a      	ldr	r4, [pc, #40]	@ (80014e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c0:	e001      	b.n	80014c6 <LoopFillZerobss>

080014c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c4:	3204      	adds	r2, #4

080014c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c8:	d3fb      	bcc.n	80014c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ca:	f002 f935 	bl	8003738 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ce:	f7ff f8dd 	bl	800068c <main>
  bx  lr    
 80014d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014dc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80014e0:	080043c8 	.word	0x080043c8
  ldr r2, =_sbss
 80014e4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80014e8:	200004c8 	.word	0x200004c8

080014ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014ec:	e7fe      	b.n	80014ec <ADC_IRQHandler>
	...

080014f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001530 <HAL_Init+0x40>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001530 <HAL_Init+0x40>)
 80014fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001500:	4b0b      	ldr	r3, [pc, #44]	@ (8001530 <HAL_Init+0x40>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a0a      	ldr	r2, [pc, #40]	@ (8001530 <HAL_Init+0x40>)
 8001506:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800150a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800150c:	4b08      	ldr	r3, [pc, #32]	@ (8001530 <HAL_Init+0x40>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a07      	ldr	r2, [pc, #28]	@ (8001530 <HAL_Init+0x40>)
 8001512:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001516:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001518:	2003      	movs	r0, #3
 800151a:	f000 f94f 	bl	80017bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800151e:	2000      	movs	r0, #0
 8001520:	f000 f808 	bl	8001534 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001524:	f7ff fb0e 	bl	8000b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40023c00 	.word	0x40023c00

08001534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800153c:	4b12      	ldr	r3, [pc, #72]	@ (8001588 <HAL_InitTick+0x54>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4b12      	ldr	r3, [pc, #72]	@ (800158c <HAL_InitTick+0x58>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4619      	mov	r1, r3
 8001546:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800154a:	fbb3 f3f1 	udiv	r3, r3, r1
 800154e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001552:	4618      	mov	r0, r3
 8001554:	f000 f967 	bl	8001826 <HAL_SYSTICK_Config>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e00e      	b.n	8001580 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b0f      	cmp	r3, #15
 8001566:	d80a      	bhi.n	800157e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001568:	2200      	movs	r2, #0
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	f04f 30ff 	mov.w	r0, #4294967295
 8001570:	f000 f92f 	bl	80017d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001574:	4a06      	ldr	r2, [pc, #24]	@ (8001590 <HAL_InitTick+0x5c>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800157a:	2300      	movs	r3, #0
 800157c:	e000      	b.n	8001580 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
}
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000000 	.word	0x20000000
 800158c:	20000008 	.word	0x20000008
 8001590:	20000004 	.word	0x20000004

08001594 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001598:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <HAL_IncTick+0x20>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <HAL_IncTick+0x24>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4413      	add	r3, r2
 80015a4:	4a04      	ldr	r2, [pc, #16]	@ (80015b8 <HAL_IncTick+0x24>)
 80015a6:	6013      	str	r3, [r2, #0]
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	20000008 	.word	0x20000008
 80015b8:	2000037c 	.word	0x2000037c

080015bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return uwTick;
 80015c0:	4b03      	ldr	r3, [pc, #12]	@ (80015d0 <HAL_GetTick+0x14>)
 80015c2:	681b      	ldr	r3, [r3, #0]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	2000037c 	.word	0x2000037c

080015d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015dc:	f7ff ffee 	bl	80015bc <HAL_GetTick>
 80015e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ec:	d005      	beq.n	80015fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001618 <HAL_Delay+0x44>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	461a      	mov	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4413      	add	r3, r2
 80015f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015fa:	bf00      	nop
 80015fc:	f7ff ffde 	bl	80015bc <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	429a      	cmp	r2, r3
 800160a:	d8f7      	bhi.n	80015fc <HAL_Delay+0x28>
  {
  }
}
 800160c:	bf00      	nop
 800160e:	bf00      	nop
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000008 	.word	0x20000008

0800161c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800162c:	4b0c      	ldr	r3, [pc, #48]	@ (8001660 <__NVIC_SetPriorityGrouping+0x44>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001638:	4013      	ands	r3, r2
 800163a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001644:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001648:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800164c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800164e:	4a04      	ldr	r2, [pc, #16]	@ (8001660 <__NVIC_SetPriorityGrouping+0x44>)
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	60d3      	str	r3, [r2, #12]
}
 8001654:	bf00      	nop
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001668:	4b04      	ldr	r3, [pc, #16]	@ (800167c <__NVIC_GetPriorityGrouping+0x18>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	0a1b      	lsrs	r3, r3, #8
 800166e:	f003 0307 	and.w	r3, r3, #7
}
 8001672:	4618      	mov	r0, r3
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	2b00      	cmp	r3, #0
 8001690:	db0b      	blt.n	80016aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	f003 021f 	and.w	r2, r3, #31
 8001698:	4907      	ldr	r1, [pc, #28]	@ (80016b8 <__NVIC_EnableIRQ+0x38>)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	095b      	lsrs	r3, r3, #5
 80016a0:	2001      	movs	r0, #1
 80016a2:	fa00 f202 	lsl.w	r2, r0, r2
 80016a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000e100 	.word	0xe000e100

080016bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	6039      	str	r1, [r7, #0]
 80016c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	db0a      	blt.n	80016e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	490c      	ldr	r1, [pc, #48]	@ (8001708 <__NVIC_SetPriority+0x4c>)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	0112      	lsls	r2, r2, #4
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	440b      	add	r3, r1
 80016e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e4:	e00a      	b.n	80016fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4908      	ldr	r1, [pc, #32]	@ (800170c <__NVIC_SetPriority+0x50>)
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	3b04      	subs	r3, #4
 80016f4:	0112      	lsls	r2, r2, #4
 80016f6:	b2d2      	uxtb	r2, r2
 80016f8:	440b      	add	r3, r1
 80016fa:	761a      	strb	r2, [r3, #24]
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000e100 	.word	0xe000e100
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001710:	b480      	push	{r7}
 8001712:	b089      	sub	sp, #36	@ 0x24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f1c3 0307 	rsb	r3, r3, #7
 800172a:	2b04      	cmp	r3, #4
 800172c:	bf28      	it	cs
 800172e:	2304      	movcs	r3, #4
 8001730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3304      	adds	r3, #4
 8001736:	2b06      	cmp	r3, #6
 8001738:	d902      	bls.n	8001740 <NVIC_EncodePriority+0x30>
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3b03      	subs	r3, #3
 800173e:	e000      	b.n	8001742 <NVIC_EncodePriority+0x32>
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001744:	f04f 32ff 	mov.w	r2, #4294967295
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43da      	mvns	r2, r3
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	401a      	ands	r2, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001758:	f04f 31ff 	mov.w	r1, #4294967295
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	fa01 f303 	lsl.w	r3, r1, r3
 8001762:	43d9      	mvns	r1, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001768:	4313      	orrs	r3, r2
         );
}
 800176a:	4618      	mov	r0, r3
 800176c:	3724      	adds	r7, #36	@ 0x24
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
	...

08001778 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3b01      	subs	r3, #1
 8001784:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001788:	d301      	bcc.n	800178e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800178a:	2301      	movs	r3, #1
 800178c:	e00f      	b.n	80017ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800178e:	4a0a      	ldr	r2, [pc, #40]	@ (80017b8 <SysTick_Config+0x40>)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3b01      	subs	r3, #1
 8001794:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001796:	210f      	movs	r1, #15
 8001798:	f04f 30ff 	mov.w	r0, #4294967295
 800179c:	f7ff ff8e 	bl	80016bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a0:	4b05      	ldr	r3, [pc, #20]	@ (80017b8 <SysTick_Config+0x40>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017a6:	4b04      	ldr	r3, [pc, #16]	@ (80017b8 <SysTick_Config+0x40>)
 80017a8:	2207      	movs	r2, #7
 80017aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	e000e010 	.word	0xe000e010

080017bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff ff29 	bl	800161c <__NVIC_SetPriorityGrouping>
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b086      	sub	sp, #24
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	4603      	mov	r3, r0
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	607a      	str	r2, [r7, #4]
 80017de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e4:	f7ff ff3e 	bl	8001664 <__NVIC_GetPriorityGrouping>
 80017e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	68b9      	ldr	r1, [r7, #8]
 80017ee:	6978      	ldr	r0, [r7, #20]
 80017f0:	f7ff ff8e 	bl	8001710 <NVIC_EncodePriority>
 80017f4:	4602      	mov	r2, r0
 80017f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fa:	4611      	mov	r1, r2
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff5d 	bl	80016bc <__NVIC_SetPriority>
}
 8001802:	bf00      	nop
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	4603      	mov	r3, r0
 8001812:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff31 	bl	8001680 <__NVIC_EnableIRQ>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff ffa2 	bl	8001778 <SysTick_Config>
 8001834:	4603      	mov	r3, r0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b084      	sub	sp, #16
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800184a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800184c:	f7ff feb6 	bl	80015bc <HAL_GetTick>
 8001850:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d008      	beq.n	8001870 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2280      	movs	r2, #128	@ 0x80
 8001862:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e052      	b.n	8001916 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 0216 	bic.w	r2, r2, #22
 800187e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	695a      	ldr	r2, [r3, #20]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800188e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001894:	2b00      	cmp	r3, #0
 8001896:	d103      	bne.n	80018a0 <HAL_DMA_Abort+0x62>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800189c:	2b00      	cmp	r3, #0
 800189e:	d007      	beq.n	80018b0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 0208 	bic.w	r2, r2, #8
 80018ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 0201 	bic.w	r2, r2, #1
 80018be:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018c0:	e013      	b.n	80018ea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018c2:	f7ff fe7b 	bl	80015bc <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b05      	cmp	r3, #5
 80018ce:	d90c      	bls.n	80018ea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2220      	movs	r2, #32
 80018d4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2203      	movs	r2, #3
 80018da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e015      	b.n	8001916 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1e4      	bne.n	80018c2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018fc:	223f      	movs	r2, #63	@ 0x3f
 80018fe:	409a      	lsls	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d004      	beq.n	800193c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2280      	movs	r2, #128	@ 0x80
 8001936:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e00c      	b.n	8001956 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2205      	movs	r2, #5
 8001940:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 0201 	bic.w	r2, r2, #1
 8001952:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
	...

08001964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001964:	b480      	push	{r7}
 8001966:	b089      	sub	sp, #36	@ 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001976:	2300      	movs	r3, #0
 8001978:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
 800197e:	e159      	b.n	8001c34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001980:	2201      	movs	r2, #1
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	429a      	cmp	r2, r3
 800199a:	f040 8148 	bne.w	8001c2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d005      	beq.n	80019b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d130      	bne.n	8001a18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	2203      	movs	r2, #3
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	68da      	ldr	r2, [r3, #12]
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4313      	orrs	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019ec:	2201      	movs	r2, #1
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	091b      	lsrs	r3, r3, #4
 8001a02:	f003 0201 	and.w	r2, r3, #1
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	d017      	beq.n	8001a54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	2203      	movs	r2, #3
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d123      	bne.n	8001aa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	08da      	lsrs	r2, r3, #3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3208      	adds	r2, #8
 8001a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	220f      	movs	r2, #15
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	691a      	ldr	r2, [r3, #16]
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	08da      	lsrs	r2, r3, #3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3208      	adds	r2, #8
 8001aa2:	69b9      	ldr	r1, [r7, #24]
 8001aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 0203 	and.w	r2, r3, #3
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 80a2 	beq.w	8001c2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	4b57      	ldr	r3, [pc, #348]	@ (8001c4c <HAL_GPIO_Init+0x2e8>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af2:	4a56      	ldr	r2, [pc, #344]	@ (8001c4c <HAL_GPIO_Init+0x2e8>)
 8001af4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001af8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001afa:	4b54      	ldr	r3, [pc, #336]	@ (8001c4c <HAL_GPIO_Init+0x2e8>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b06:	4a52      	ldr	r2, [pc, #328]	@ (8001c50 <HAL_GPIO_Init+0x2ec>)
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	089b      	lsrs	r3, r3, #2
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	220f      	movs	r2, #15
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4013      	ands	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a49      	ldr	r2, [pc, #292]	@ (8001c54 <HAL_GPIO_Init+0x2f0>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d019      	beq.n	8001b66 <HAL_GPIO_Init+0x202>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a48      	ldr	r2, [pc, #288]	@ (8001c58 <HAL_GPIO_Init+0x2f4>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d013      	beq.n	8001b62 <HAL_GPIO_Init+0x1fe>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a47      	ldr	r2, [pc, #284]	@ (8001c5c <HAL_GPIO_Init+0x2f8>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d00d      	beq.n	8001b5e <HAL_GPIO_Init+0x1fa>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a46      	ldr	r2, [pc, #280]	@ (8001c60 <HAL_GPIO_Init+0x2fc>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d007      	beq.n	8001b5a <HAL_GPIO_Init+0x1f6>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a45      	ldr	r2, [pc, #276]	@ (8001c64 <HAL_GPIO_Init+0x300>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d101      	bne.n	8001b56 <HAL_GPIO_Init+0x1f2>
 8001b52:	2304      	movs	r3, #4
 8001b54:	e008      	b.n	8001b68 <HAL_GPIO_Init+0x204>
 8001b56:	2307      	movs	r3, #7
 8001b58:	e006      	b.n	8001b68 <HAL_GPIO_Init+0x204>
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e004      	b.n	8001b68 <HAL_GPIO_Init+0x204>
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e002      	b.n	8001b68 <HAL_GPIO_Init+0x204>
 8001b62:	2301      	movs	r3, #1
 8001b64:	e000      	b.n	8001b68 <HAL_GPIO_Init+0x204>
 8001b66:	2300      	movs	r3, #0
 8001b68:	69fa      	ldr	r2, [r7, #28]
 8001b6a:	f002 0203 	and.w	r2, r2, #3
 8001b6e:	0092      	lsls	r2, r2, #2
 8001b70:	4093      	lsls	r3, r2
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b78:	4935      	ldr	r1, [pc, #212]	@ (8001c50 <HAL_GPIO_Init+0x2ec>)
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	089b      	lsrs	r3, r3, #2
 8001b7e:	3302      	adds	r3, #2
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b86:	4b38      	ldr	r3, [pc, #224]	@ (8001c68 <HAL_GPIO_Init+0x304>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4013      	ands	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001baa:	4a2f      	ldr	r2, [pc, #188]	@ (8001c68 <HAL_GPIO_Init+0x304>)
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bb0:	4b2d      	ldr	r3, [pc, #180]	@ (8001c68 <HAL_GPIO_Init+0x304>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d003      	beq.n	8001bd4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bd4:	4a24      	ldr	r2, [pc, #144]	@ (8001c68 <HAL_GPIO_Init+0x304>)
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bda:	4b23      	ldr	r3, [pc, #140]	@ (8001c68 <HAL_GPIO_Init+0x304>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	43db      	mvns	r3, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4013      	ands	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bfe:	4a1a      	ldr	r2, [pc, #104]	@ (8001c68 <HAL_GPIO_Init+0x304>)
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c04:	4b18      	ldr	r3, [pc, #96]	@ (8001c68 <HAL_GPIO_Init+0x304>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c28:	4a0f      	ldr	r2, [pc, #60]	@ (8001c68 <HAL_GPIO_Init+0x304>)
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3301      	adds	r3, #1
 8001c32:	61fb      	str	r3, [r7, #28]
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	2b0f      	cmp	r3, #15
 8001c38:	f67f aea2 	bls.w	8001980 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	bf00      	nop
 8001c40:	3724      	adds	r7, #36	@ 0x24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40013800 	.word	0x40013800
 8001c54:	40020000 	.word	0x40020000
 8001c58:	40020400 	.word	0x40020400
 8001c5c:	40020800 	.word	0x40020800
 8001c60:	40020c00 	.word	0x40020c00
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40013c00 	.word	0x40013c00

08001c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	807b      	strh	r3, [r7, #2]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c7c:	787b      	ldrb	r3, [r7, #1]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c82:	887a      	ldrh	r2, [r7, #2]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c88:	e003      	b.n	8001c92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c8a:	887b      	ldrh	r3, [r7, #2]
 8001c8c:	041a      	lsls	r2, r3, #16
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	619a      	str	r2, [r3, #24]
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b085      	sub	sp, #20
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cb0:	887a      	ldrh	r2, [r7, #2]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	041a      	lsls	r2, r3, #16
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	43d9      	mvns	r1, r3
 8001cbc:	887b      	ldrh	r3, [r7, #2]
 8001cbe:	400b      	ands	r3, r1
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	619a      	str	r2, [r3, #24]
}
 8001cc6:	bf00      	nop
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
	...

08001cd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e267      	b.n	80021b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d075      	beq.n	8001dde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001cf2:	4b88      	ldr	r3, [pc, #544]	@ (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	d00c      	beq.n	8001d18 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cfe:	4b85      	ldr	r3, [pc, #532]	@ (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d06:	2b08      	cmp	r3, #8
 8001d08:	d112      	bne.n	8001d30 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d0a:	4b82      	ldr	r3, [pc, #520]	@ (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d16:	d10b      	bne.n	8001d30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d18:	4b7e      	ldr	r3, [pc, #504]	@ (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d05b      	beq.n	8001ddc <HAL_RCC_OscConfig+0x108>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d157      	bne.n	8001ddc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e242      	b.n	80021b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d38:	d106      	bne.n	8001d48 <HAL_RCC_OscConfig+0x74>
 8001d3a:	4b76      	ldr	r3, [pc, #472]	@ (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a75      	ldr	r2, [pc, #468]	@ (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001d40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	e01d      	b.n	8001d84 <HAL_RCC_OscConfig+0xb0>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d50:	d10c      	bne.n	8001d6c <HAL_RCC_OscConfig+0x98>
 8001d52:	4b70      	ldr	r3, [pc, #448]	@ (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a6f      	ldr	r2, [pc, #444]	@ (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001d58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	4b6d      	ldr	r3, [pc, #436]	@ (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a6c      	ldr	r2, [pc, #432]	@ (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001d64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	e00b      	b.n	8001d84 <HAL_RCC_OscConfig+0xb0>
 8001d6c:	4b69      	ldr	r3, [pc, #420]	@ (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a68      	ldr	r2, [pc, #416]	@ (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001d72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	4b66      	ldr	r3, [pc, #408]	@ (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a65      	ldr	r2, [pc, #404]	@ (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001d7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d013      	beq.n	8001db4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8c:	f7ff fc16 	bl	80015bc <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d94:	f7ff fc12 	bl	80015bc <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b64      	cmp	r3, #100	@ 0x64
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e207      	b.n	80021b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da6:	4b5b      	ldr	r3, [pc, #364]	@ (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0f0      	beq.n	8001d94 <HAL_RCC_OscConfig+0xc0>
 8001db2:	e014      	b.n	8001dde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db4:	f7ff fc02 	bl	80015bc <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dbc:	f7ff fbfe 	bl	80015bc <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b64      	cmp	r3, #100	@ 0x64
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e1f3      	b.n	80021b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dce:	4b51      	ldr	r3, [pc, #324]	@ (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f0      	bne.n	8001dbc <HAL_RCC_OscConfig+0xe8>
 8001dda:	e000      	b.n	8001dde <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d063      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001dea:	4b4a      	ldr	r3, [pc, #296]	@ (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 030c 	and.w	r3, r3, #12
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00b      	beq.n	8001e0e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001df6:	4b47      	ldr	r3, [pc, #284]	@ (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d11c      	bne.n	8001e3c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e02:	4b44      	ldr	r3, [pc, #272]	@ (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d116      	bne.n	8001e3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e0e:	4b41      	ldr	r3, [pc, #260]	@ (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d005      	beq.n	8001e26 <HAL_RCC_OscConfig+0x152>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d001      	beq.n	8001e26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e1c7      	b.n	80021b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e26:	4b3b      	ldr	r3, [pc, #236]	@ (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4937      	ldr	r1, [pc, #220]	@ (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3a:	e03a      	b.n	8001eb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d020      	beq.n	8001e86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e44:	4b34      	ldr	r3, [pc, #208]	@ (8001f18 <HAL_RCC_OscConfig+0x244>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4a:	f7ff fbb7 	bl	80015bc <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e52:	f7ff fbb3 	bl	80015bc <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e1a8      	b.n	80021b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e64:	4b2b      	ldr	r3, [pc, #172]	@ (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e70:	4b28      	ldr	r3, [pc, #160]	@ (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4925      	ldr	r1, [pc, #148]	@ (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	600b      	str	r3, [r1, #0]
 8001e84:	e015      	b.n	8001eb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e86:	4b24      	ldr	r3, [pc, #144]	@ (8001f18 <HAL_RCC_OscConfig+0x244>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8c:	f7ff fb96 	bl	80015bc <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e94:	f7ff fb92 	bl	80015bc <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e187      	b.n	80021b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f0      	bne.n	8001e94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d036      	beq.n	8001f2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d016      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ec6:	4b15      	ldr	r3, [pc, #84]	@ (8001f1c <HAL_RCC_OscConfig+0x248>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ecc:	f7ff fb76 	bl	80015bc <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed4:	f7ff fb72 	bl	80015bc <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e167      	b.n	80021b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8001f14 <HAL_RCC_OscConfig+0x240>)
 8001ee8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0f0      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x200>
 8001ef2:	e01b      	b.n	8001f2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ef4:	4b09      	ldr	r3, [pc, #36]	@ (8001f1c <HAL_RCC_OscConfig+0x248>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efa:	f7ff fb5f 	bl	80015bc <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f00:	e00e      	b.n	8001f20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f02:	f7ff fb5b 	bl	80015bc <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d907      	bls.n	8001f20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e150      	b.n	80021b6 <HAL_RCC_OscConfig+0x4e2>
 8001f14:	40023800 	.word	0x40023800
 8001f18:	42470000 	.word	0x42470000
 8001f1c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f20:	4b88      	ldr	r3, [pc, #544]	@ (8002144 <HAL_RCC_OscConfig+0x470>)
 8001f22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1ea      	bne.n	8001f02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f000 8097 	beq.w	8002068 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f3e:	4b81      	ldr	r3, [pc, #516]	@ (8002144 <HAL_RCC_OscConfig+0x470>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10f      	bne.n	8001f6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	4b7d      	ldr	r3, [pc, #500]	@ (8002144 <HAL_RCC_OscConfig+0x470>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f52:	4a7c      	ldr	r2, [pc, #496]	@ (8002144 <HAL_RCC_OscConfig+0x470>)
 8001f54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f5a:	4b7a      	ldr	r3, [pc, #488]	@ (8002144 <HAL_RCC_OscConfig+0x470>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f66:	2301      	movs	r3, #1
 8001f68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6a:	4b77      	ldr	r3, [pc, #476]	@ (8002148 <HAL_RCC_OscConfig+0x474>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d118      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f76:	4b74      	ldr	r3, [pc, #464]	@ (8002148 <HAL_RCC_OscConfig+0x474>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a73      	ldr	r2, [pc, #460]	@ (8002148 <HAL_RCC_OscConfig+0x474>)
 8001f7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f82:	f7ff fb1b 	bl	80015bc <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f8a:	f7ff fb17 	bl	80015bc <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e10c      	b.n	80021b6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9c:	4b6a      	ldr	r3, [pc, #424]	@ (8002148 <HAL_RCC_OscConfig+0x474>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0f0      	beq.n	8001f8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d106      	bne.n	8001fbe <HAL_RCC_OscConfig+0x2ea>
 8001fb0:	4b64      	ldr	r3, [pc, #400]	@ (8002144 <HAL_RCC_OscConfig+0x470>)
 8001fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fb4:	4a63      	ldr	r2, [pc, #396]	@ (8002144 <HAL_RCC_OscConfig+0x470>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fbc:	e01c      	b.n	8001ff8 <HAL_RCC_OscConfig+0x324>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	2b05      	cmp	r3, #5
 8001fc4:	d10c      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x30c>
 8001fc6:	4b5f      	ldr	r3, [pc, #380]	@ (8002144 <HAL_RCC_OscConfig+0x470>)
 8001fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fca:	4a5e      	ldr	r2, [pc, #376]	@ (8002144 <HAL_RCC_OscConfig+0x470>)
 8001fcc:	f043 0304 	orr.w	r3, r3, #4
 8001fd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fd2:	4b5c      	ldr	r3, [pc, #368]	@ (8002144 <HAL_RCC_OscConfig+0x470>)
 8001fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fd6:	4a5b      	ldr	r2, [pc, #364]	@ (8002144 <HAL_RCC_OscConfig+0x470>)
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fde:	e00b      	b.n	8001ff8 <HAL_RCC_OscConfig+0x324>
 8001fe0:	4b58      	ldr	r3, [pc, #352]	@ (8002144 <HAL_RCC_OscConfig+0x470>)
 8001fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe4:	4a57      	ldr	r2, [pc, #348]	@ (8002144 <HAL_RCC_OscConfig+0x470>)
 8001fe6:	f023 0301 	bic.w	r3, r3, #1
 8001fea:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fec:	4b55      	ldr	r3, [pc, #340]	@ (8002144 <HAL_RCC_OscConfig+0x470>)
 8001fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ff0:	4a54      	ldr	r2, [pc, #336]	@ (8002144 <HAL_RCC_OscConfig+0x470>)
 8001ff2:	f023 0304 	bic.w	r3, r3, #4
 8001ff6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d015      	beq.n	800202c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002000:	f7ff fadc 	bl	80015bc <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002006:	e00a      	b.n	800201e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002008:	f7ff fad8 	bl	80015bc <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002016:	4293      	cmp	r3, r2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e0cb      	b.n	80021b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800201e:	4b49      	ldr	r3, [pc, #292]	@ (8002144 <HAL_RCC_OscConfig+0x470>)
 8002020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0ee      	beq.n	8002008 <HAL_RCC_OscConfig+0x334>
 800202a:	e014      	b.n	8002056 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800202c:	f7ff fac6 	bl	80015bc <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002032:	e00a      	b.n	800204a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002034:	f7ff fac2 	bl	80015bc <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002042:	4293      	cmp	r3, r2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e0b5      	b.n	80021b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800204a:	4b3e      	ldr	r3, [pc, #248]	@ (8002144 <HAL_RCC_OscConfig+0x470>)
 800204c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1ee      	bne.n	8002034 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002056:	7dfb      	ldrb	r3, [r7, #23]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d105      	bne.n	8002068 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800205c:	4b39      	ldr	r3, [pc, #228]	@ (8002144 <HAL_RCC_OscConfig+0x470>)
 800205e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002060:	4a38      	ldr	r2, [pc, #224]	@ (8002144 <HAL_RCC_OscConfig+0x470>)
 8002062:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002066:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 80a1 	beq.w	80021b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002072:	4b34      	ldr	r3, [pc, #208]	@ (8002144 <HAL_RCC_OscConfig+0x470>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 030c 	and.w	r3, r3, #12
 800207a:	2b08      	cmp	r3, #8
 800207c:	d05c      	beq.n	8002138 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	2b02      	cmp	r3, #2
 8002084:	d141      	bne.n	800210a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002086:	4b31      	ldr	r3, [pc, #196]	@ (800214c <HAL_RCC_OscConfig+0x478>)
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208c:	f7ff fa96 	bl	80015bc <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002094:	f7ff fa92 	bl	80015bc <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e087      	b.n	80021b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a6:	4b27      	ldr	r3, [pc, #156]	@ (8002144 <HAL_RCC_OscConfig+0x470>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f0      	bne.n	8002094 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69da      	ldr	r2, [r3, #28]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c0:	019b      	lsls	r3, r3, #6
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c8:	085b      	lsrs	r3, r3, #1
 80020ca:	3b01      	subs	r3, #1
 80020cc:	041b      	lsls	r3, r3, #16
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d4:	061b      	lsls	r3, r3, #24
 80020d6:	491b      	ldr	r1, [pc, #108]	@ (8002144 <HAL_RCC_OscConfig+0x470>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020dc:	4b1b      	ldr	r3, [pc, #108]	@ (800214c <HAL_RCC_OscConfig+0x478>)
 80020de:	2201      	movs	r2, #1
 80020e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e2:	f7ff fa6b 	bl	80015bc <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ea:	f7ff fa67 	bl	80015bc <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e05c      	b.n	80021b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fc:	4b11      	ldr	r3, [pc, #68]	@ (8002144 <HAL_RCC_OscConfig+0x470>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0f0      	beq.n	80020ea <HAL_RCC_OscConfig+0x416>
 8002108:	e054      	b.n	80021b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210a:	4b10      	ldr	r3, [pc, #64]	@ (800214c <HAL_RCC_OscConfig+0x478>)
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002110:	f7ff fa54 	bl	80015bc <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002118:	f7ff fa50 	bl	80015bc <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e045      	b.n	80021b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800212a:	4b06      	ldr	r3, [pc, #24]	@ (8002144 <HAL_RCC_OscConfig+0x470>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0x444>
 8002136:	e03d      	b.n	80021b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d107      	bne.n	8002150 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e038      	b.n	80021b6 <HAL_RCC_OscConfig+0x4e2>
 8002144:	40023800 	.word	0x40023800
 8002148:	40007000 	.word	0x40007000
 800214c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002150:	4b1b      	ldr	r3, [pc, #108]	@ (80021c0 <HAL_RCC_OscConfig+0x4ec>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d028      	beq.n	80021b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002168:	429a      	cmp	r2, r3
 800216a:	d121      	bne.n	80021b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002176:	429a      	cmp	r2, r3
 8002178:	d11a      	bne.n	80021b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002180:	4013      	ands	r3, r2
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002186:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002188:	4293      	cmp	r3, r2
 800218a:	d111      	bne.n	80021b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002196:	085b      	lsrs	r3, r3, #1
 8002198:	3b01      	subs	r3, #1
 800219a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800219c:	429a      	cmp	r2, r3
 800219e:	d107      	bne.n	80021b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d001      	beq.n	80021b4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e000      	b.n	80021b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40023800 	.word	0x40023800

080021c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e0cc      	b.n	8002372 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021d8:	4b68      	ldr	r3, [pc, #416]	@ (800237c <HAL_RCC_ClockConfig+0x1b8>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d90c      	bls.n	8002200 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e6:	4b65      	ldr	r3, [pc, #404]	@ (800237c <HAL_RCC_ClockConfig+0x1b8>)
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ee:	4b63      	ldr	r3, [pc, #396]	@ (800237c <HAL_RCC_ClockConfig+0x1b8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d001      	beq.n	8002200 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e0b8      	b.n	8002372 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d020      	beq.n	800224e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b00      	cmp	r3, #0
 8002216:	d005      	beq.n	8002224 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002218:	4b59      	ldr	r3, [pc, #356]	@ (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	4a58      	ldr	r2, [pc, #352]	@ (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 800221e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002222:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0308 	and.w	r3, r3, #8
 800222c:	2b00      	cmp	r3, #0
 800222e:	d005      	beq.n	800223c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002230:	4b53      	ldr	r3, [pc, #332]	@ (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	4a52      	ldr	r2, [pc, #328]	@ (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800223a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800223c:	4b50      	ldr	r3, [pc, #320]	@ (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	494d      	ldr	r1, [pc, #308]	@ (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	4313      	orrs	r3, r2
 800224c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d044      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d107      	bne.n	8002272 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002262:	4b47      	ldr	r3, [pc, #284]	@ (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d119      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e07f      	b.n	8002372 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b02      	cmp	r3, #2
 8002278:	d003      	beq.n	8002282 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800227e:	2b03      	cmp	r3, #3
 8002280:	d107      	bne.n	8002292 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002282:	4b3f      	ldr	r3, [pc, #252]	@ (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d109      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e06f      	b.n	8002372 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002292:	4b3b      	ldr	r3, [pc, #236]	@ (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e067      	b.n	8002372 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022a2:	4b37      	ldr	r3, [pc, #220]	@ (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f023 0203 	bic.w	r2, r3, #3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	4934      	ldr	r1, [pc, #208]	@ (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022b4:	f7ff f982 	bl	80015bc <HAL_GetTick>
 80022b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ba:	e00a      	b.n	80022d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022bc:	f7ff f97e 	bl	80015bc <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e04f      	b.n	8002372 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d2:	4b2b      	ldr	r3, [pc, #172]	@ (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 020c 	and.w	r2, r3, #12
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d1eb      	bne.n	80022bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022e4:	4b25      	ldr	r3, [pc, #148]	@ (800237c <HAL_RCC_ClockConfig+0x1b8>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d20c      	bcs.n	800230c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f2:	4b22      	ldr	r3, [pc, #136]	@ (800237c <HAL_RCC_ClockConfig+0x1b8>)
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fa:	4b20      	ldr	r3, [pc, #128]	@ (800237c <HAL_RCC_ClockConfig+0x1b8>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	429a      	cmp	r2, r3
 8002306:	d001      	beq.n	800230c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e032      	b.n	8002372 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	d008      	beq.n	800232a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002318:	4b19      	ldr	r3, [pc, #100]	@ (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	4916      	ldr	r1, [pc, #88]	@ (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 8002326:	4313      	orrs	r3, r2
 8002328:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d009      	beq.n	800234a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002336:	4b12      	ldr	r3, [pc, #72]	@ (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	490e      	ldr	r1, [pc, #56]	@ (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	4313      	orrs	r3, r2
 8002348:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800234a:	f000 f821 	bl	8002390 <HAL_RCC_GetSysClockFreq>
 800234e:	4602      	mov	r2, r0
 8002350:	4b0b      	ldr	r3, [pc, #44]	@ (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	091b      	lsrs	r3, r3, #4
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	490a      	ldr	r1, [pc, #40]	@ (8002384 <HAL_RCC_ClockConfig+0x1c0>)
 800235c:	5ccb      	ldrb	r3, [r1, r3]
 800235e:	fa22 f303 	lsr.w	r3, r2, r3
 8002362:	4a09      	ldr	r2, [pc, #36]	@ (8002388 <HAL_RCC_ClockConfig+0x1c4>)
 8002364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002366:	4b09      	ldr	r3, [pc, #36]	@ (800238c <HAL_RCC_ClockConfig+0x1c8>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff f8e2 	bl	8001534 <HAL_InitTick>

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40023c00 	.word	0x40023c00
 8002380:	40023800 	.word	0x40023800
 8002384:	0800436c 	.word	0x0800436c
 8002388:	20000000 	.word	0x20000000
 800238c:	20000004 	.word	0x20000004

08002390 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002394:	b094      	sub	sp, #80	@ 0x50
 8002396:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800239c:	2300      	movs	r3, #0
 800239e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023a8:	4b79      	ldr	r3, [pc, #484]	@ (8002590 <HAL_RCC_GetSysClockFreq+0x200>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 030c 	and.w	r3, r3, #12
 80023b0:	2b08      	cmp	r3, #8
 80023b2:	d00d      	beq.n	80023d0 <HAL_RCC_GetSysClockFreq+0x40>
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	f200 80e1 	bhi.w	800257c <HAL_RCC_GetSysClockFreq+0x1ec>
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d002      	beq.n	80023c4 <HAL_RCC_GetSysClockFreq+0x34>
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d003      	beq.n	80023ca <HAL_RCC_GetSysClockFreq+0x3a>
 80023c2:	e0db      	b.n	800257c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023c4:	4b73      	ldr	r3, [pc, #460]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x204>)
 80023c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023c8:	e0db      	b.n	8002582 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023ca:	4b73      	ldr	r3, [pc, #460]	@ (8002598 <HAL_RCC_GetSysClockFreq+0x208>)
 80023cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023ce:	e0d8      	b.n	8002582 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023d0:	4b6f      	ldr	r3, [pc, #444]	@ (8002590 <HAL_RCC_GetSysClockFreq+0x200>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023d8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023da:	4b6d      	ldr	r3, [pc, #436]	@ (8002590 <HAL_RCC_GetSysClockFreq+0x200>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d063      	beq.n	80024ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023e6:	4b6a      	ldr	r3, [pc, #424]	@ (8002590 <HAL_RCC_GetSysClockFreq+0x200>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	099b      	lsrs	r3, r3, #6
 80023ec:	2200      	movs	r2, #0
 80023ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80023f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80023f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80023fa:	2300      	movs	r3, #0
 80023fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80023fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002402:	4622      	mov	r2, r4
 8002404:	462b      	mov	r3, r5
 8002406:	f04f 0000 	mov.w	r0, #0
 800240a:	f04f 0100 	mov.w	r1, #0
 800240e:	0159      	lsls	r1, r3, #5
 8002410:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002414:	0150      	lsls	r0, r2, #5
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	4621      	mov	r1, r4
 800241c:	1a51      	subs	r1, r2, r1
 800241e:	6139      	str	r1, [r7, #16]
 8002420:	4629      	mov	r1, r5
 8002422:	eb63 0301 	sbc.w	r3, r3, r1
 8002426:	617b      	str	r3, [r7, #20]
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	f04f 0300 	mov.w	r3, #0
 8002430:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002434:	4659      	mov	r1, fp
 8002436:	018b      	lsls	r3, r1, #6
 8002438:	4651      	mov	r1, sl
 800243a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800243e:	4651      	mov	r1, sl
 8002440:	018a      	lsls	r2, r1, #6
 8002442:	4651      	mov	r1, sl
 8002444:	ebb2 0801 	subs.w	r8, r2, r1
 8002448:	4659      	mov	r1, fp
 800244a:	eb63 0901 	sbc.w	r9, r3, r1
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	f04f 0300 	mov.w	r3, #0
 8002456:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800245a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800245e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002462:	4690      	mov	r8, r2
 8002464:	4699      	mov	r9, r3
 8002466:	4623      	mov	r3, r4
 8002468:	eb18 0303 	adds.w	r3, r8, r3
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	462b      	mov	r3, r5
 8002470:	eb49 0303 	adc.w	r3, r9, r3
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	f04f 0300 	mov.w	r3, #0
 800247e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002482:	4629      	mov	r1, r5
 8002484:	024b      	lsls	r3, r1, #9
 8002486:	4621      	mov	r1, r4
 8002488:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800248c:	4621      	mov	r1, r4
 800248e:	024a      	lsls	r2, r1, #9
 8002490:	4610      	mov	r0, r2
 8002492:	4619      	mov	r1, r3
 8002494:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002496:	2200      	movs	r2, #0
 8002498:	62bb      	str	r3, [r7, #40]	@ 0x28
 800249a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800249c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80024a0:	f7fd fef6 	bl	8000290 <__aeabi_uldivmod>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	4613      	mov	r3, r2
 80024aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024ac:	e058      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ae:	4b38      	ldr	r3, [pc, #224]	@ (8002590 <HAL_RCC_GetSysClockFreq+0x200>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	099b      	lsrs	r3, r3, #6
 80024b4:	2200      	movs	r2, #0
 80024b6:	4618      	mov	r0, r3
 80024b8:	4611      	mov	r1, r2
 80024ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024be:	623b      	str	r3, [r7, #32]
 80024c0:	2300      	movs	r3, #0
 80024c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80024c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024c8:	4642      	mov	r2, r8
 80024ca:	464b      	mov	r3, r9
 80024cc:	f04f 0000 	mov.w	r0, #0
 80024d0:	f04f 0100 	mov.w	r1, #0
 80024d4:	0159      	lsls	r1, r3, #5
 80024d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024da:	0150      	lsls	r0, r2, #5
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	4641      	mov	r1, r8
 80024e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80024e6:	4649      	mov	r1, r9
 80024e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	f04f 0300 	mov.w	r3, #0
 80024f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80024fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002500:	ebb2 040a 	subs.w	r4, r2, sl
 8002504:	eb63 050b 	sbc.w	r5, r3, fp
 8002508:	f04f 0200 	mov.w	r2, #0
 800250c:	f04f 0300 	mov.w	r3, #0
 8002510:	00eb      	lsls	r3, r5, #3
 8002512:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002516:	00e2      	lsls	r2, r4, #3
 8002518:	4614      	mov	r4, r2
 800251a:	461d      	mov	r5, r3
 800251c:	4643      	mov	r3, r8
 800251e:	18e3      	adds	r3, r4, r3
 8002520:	603b      	str	r3, [r7, #0]
 8002522:	464b      	mov	r3, r9
 8002524:	eb45 0303 	adc.w	r3, r5, r3
 8002528:	607b      	str	r3, [r7, #4]
 800252a:	f04f 0200 	mov.w	r2, #0
 800252e:	f04f 0300 	mov.w	r3, #0
 8002532:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002536:	4629      	mov	r1, r5
 8002538:	028b      	lsls	r3, r1, #10
 800253a:	4621      	mov	r1, r4
 800253c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002540:	4621      	mov	r1, r4
 8002542:	028a      	lsls	r2, r1, #10
 8002544:	4610      	mov	r0, r2
 8002546:	4619      	mov	r1, r3
 8002548:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800254a:	2200      	movs	r2, #0
 800254c:	61bb      	str	r3, [r7, #24]
 800254e:	61fa      	str	r2, [r7, #28]
 8002550:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002554:	f7fd fe9c 	bl	8000290 <__aeabi_uldivmod>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4613      	mov	r3, r2
 800255e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002560:	4b0b      	ldr	r3, [pc, #44]	@ (8002590 <HAL_RCC_GetSysClockFreq+0x200>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	0c1b      	lsrs	r3, r3, #16
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	3301      	adds	r3, #1
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002570:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002572:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002574:	fbb2 f3f3 	udiv	r3, r2, r3
 8002578:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800257a:	e002      	b.n	8002582 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800257c:	4b05      	ldr	r3, [pc, #20]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x204>)
 800257e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002580:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002582:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002584:	4618      	mov	r0, r3
 8002586:	3750      	adds	r7, #80	@ 0x50
 8002588:	46bd      	mov	sp, r7
 800258a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800258e:	bf00      	nop
 8002590:	40023800 	.word	0x40023800
 8002594:	00f42400 	.word	0x00f42400
 8002598:	007a1200 	.word	0x007a1200

0800259c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025a0:	4b03      	ldr	r3, [pc, #12]	@ (80025b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80025a2:	681b      	ldr	r3, [r3, #0]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	20000000 	.word	0x20000000

080025b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025b8:	f7ff fff0 	bl	800259c <HAL_RCC_GetHCLKFreq>
 80025bc:	4602      	mov	r2, r0
 80025be:	4b05      	ldr	r3, [pc, #20]	@ (80025d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	0a9b      	lsrs	r3, r3, #10
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	4903      	ldr	r1, [pc, #12]	@ (80025d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ca:	5ccb      	ldrb	r3, [r1, r3]
 80025cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40023800 	.word	0x40023800
 80025d8:	0800437c 	.word	0x0800437c

080025dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025e0:	f7ff ffdc 	bl	800259c <HAL_RCC_GetHCLKFreq>
 80025e4:	4602      	mov	r2, r0
 80025e6:	4b05      	ldr	r3, [pc, #20]	@ (80025fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	0b5b      	lsrs	r3, r3, #13
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	4903      	ldr	r1, [pc, #12]	@ (8002600 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025f2:	5ccb      	ldrb	r3, [r1, r3]
 80025f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40023800 	.word	0x40023800
 8002600:	0800437c 	.word	0x0800437c

08002604 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e042      	b.n	800269c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d106      	bne.n	8002630 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7fe fab2 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2224      	movs	r2, #36	@ 0x24
 8002634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002646:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 fdbd 	bl	80031c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	691a      	ldr	r2, [r3, #16]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800265c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	695a      	ldr	r2, [r3, #20]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800266c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800267c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2220      	movs	r2, #32
 8002688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08a      	sub	sp, #40	@ 0x28
 80026a8:	af02      	add	r7, sp, #8
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	603b      	str	r3, [r7, #0]
 80026b0:	4613      	mov	r3, r2
 80026b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b20      	cmp	r3, #32
 80026c2:	d175      	bne.n	80027b0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d002      	beq.n	80026d0 <HAL_UART_Transmit+0x2c>
 80026ca:	88fb      	ldrh	r3, [r7, #6]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e06e      	b.n	80027b2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2221      	movs	r2, #33	@ 0x21
 80026de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026e2:	f7fe ff6b 	bl	80015bc <HAL_GetTick>
 80026e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	88fa      	ldrh	r2, [r7, #6]
 80026ec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	88fa      	ldrh	r2, [r7, #6]
 80026f2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026fc:	d108      	bne.n	8002710 <HAL_UART_Transmit+0x6c>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d104      	bne.n	8002710 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002706:	2300      	movs	r3, #0
 8002708:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	61bb      	str	r3, [r7, #24]
 800270e:	e003      	b.n	8002718 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002714:	2300      	movs	r3, #0
 8002716:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002718:	e02e      	b.n	8002778 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	2200      	movs	r2, #0
 8002722:	2180      	movs	r1, #128	@ 0x80
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 fb1f 	bl	8002d68 <UART_WaitOnFlagUntilTimeout>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2220      	movs	r2, #32
 8002734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e03a      	b.n	80027b2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10b      	bne.n	800275a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	461a      	mov	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002750:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	3302      	adds	r3, #2
 8002756:	61bb      	str	r3, [r7, #24]
 8002758:	e007      	b.n	800276a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	781a      	ldrb	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	3301      	adds	r3, #1
 8002768:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800276e:	b29b      	uxth	r3, r3
 8002770:	3b01      	subs	r3, #1
 8002772:	b29a      	uxth	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800277c:	b29b      	uxth	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1cb      	bne.n	800271a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	2200      	movs	r2, #0
 800278a:	2140      	movs	r1, #64	@ 0x40
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 faeb 	bl	8002d68 <UART_WaitOnFlagUntilTimeout>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d005      	beq.n	80027a4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2220      	movs	r2, #32
 800279c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e006      	b.n	80027b2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2220      	movs	r2, #32
 80027a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	e000      	b.n	80027b2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80027b0:	2302      	movs	r3, #2
  }
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3720      	adds	r7, #32
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b084      	sub	sp, #16
 80027be:	af00      	add	r7, sp, #0
 80027c0:	60f8      	str	r0, [r7, #12]
 80027c2:	60b9      	str	r1, [r7, #8]
 80027c4:	4613      	mov	r3, r2
 80027c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b20      	cmp	r3, #32
 80027d2:	d112      	bne.n	80027fa <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d002      	beq.n	80027e0 <HAL_UART_Receive_IT+0x26>
 80027da:	88fb      	ldrh	r3, [r7, #6]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e00b      	b.n	80027fc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80027ea:	88fb      	ldrh	r3, [r7, #6]
 80027ec:	461a      	mov	r2, r3
 80027ee:	68b9      	ldr	r1, [r7, #8]
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 fb12 	bl	8002e1a <UART_Start_Receive_IT>
 80027f6:	4603      	mov	r3, r0
 80027f8:	e000      	b.n	80027fc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80027fa:	2302      	movs	r3, #2
  }
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b0ba      	sub	sp, #232	@ 0xe8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800282a:	2300      	movs	r3, #0
 800282c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002830:	2300      	movs	r3, #0
 8002832:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002842:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10f      	bne.n	800286a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800284a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800284e:	f003 0320 	and.w	r3, r3, #32
 8002852:	2b00      	cmp	r3, #0
 8002854:	d009      	beq.n	800286a <HAL_UART_IRQHandler+0x66>
 8002856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800285a:	f003 0320 	and.w	r3, r3, #32
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 fbf2 	bl	800304c <UART_Receive_IT>
      return;
 8002868:	e25b      	b.n	8002d22 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800286a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 80de 	beq.w	8002a30 <HAL_UART_IRQHandler+0x22c>
 8002874:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b00      	cmp	r3, #0
 800287e:	d106      	bne.n	800288e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002884:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 80d1 	beq.w	8002a30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800288e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00b      	beq.n	80028b2 <HAL_UART_IRQHandler+0xae>
 800289a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800289e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d005      	beq.n	80028b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028aa:	f043 0201 	orr.w	r2, r3, #1
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00b      	beq.n	80028d6 <HAL_UART_IRQHandler+0xd2>
 80028be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d005      	beq.n	80028d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ce:	f043 0202 	orr.w	r2, r3, #2
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00b      	beq.n	80028fa <HAL_UART_IRQHandler+0xf6>
 80028e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d005      	beq.n	80028fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f2:	f043 0204 	orr.w	r2, r3, #4
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80028fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b00      	cmp	r3, #0
 8002904:	d011      	beq.n	800292a <HAL_UART_IRQHandler+0x126>
 8002906:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800290a:	f003 0320 	and.w	r3, r3, #32
 800290e:	2b00      	cmp	r3, #0
 8002910:	d105      	bne.n	800291e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002912:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	d005      	beq.n	800292a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002922:	f043 0208 	orr.w	r2, r3, #8
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 81f2 	beq.w	8002d18 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002938:	f003 0320 	and.w	r3, r3, #32
 800293c:	2b00      	cmp	r3, #0
 800293e:	d008      	beq.n	8002952 <HAL_UART_IRQHandler+0x14e>
 8002940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002944:	f003 0320 	and.w	r3, r3, #32
 8002948:	2b00      	cmp	r3, #0
 800294a:	d002      	beq.n	8002952 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 fb7d 	bl	800304c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800295c:	2b40      	cmp	r3, #64	@ 0x40
 800295e:	bf0c      	ite	eq
 8002960:	2301      	moveq	r3, #1
 8002962:	2300      	movne	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d103      	bne.n	800297e <HAL_UART_IRQHandler+0x17a>
 8002976:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800297a:	2b00      	cmp	r3, #0
 800297c:	d04f      	beq.n	8002a1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 fa85 	bl	8002e8e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800298e:	2b40      	cmp	r3, #64	@ 0x40
 8002990:	d141      	bne.n	8002a16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	3314      	adds	r3, #20
 8002998:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800299c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80029a0:	e853 3f00 	ldrex	r3, [r3]
 80029a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80029a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	3314      	adds	r3, #20
 80029ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80029be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80029c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80029ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80029ce:	e841 2300 	strex	r3, r2, [r1]
 80029d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80029d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1d9      	bne.n	8002992 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d013      	beq.n	8002a0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ea:	4a7e      	ldr	r2, [pc, #504]	@ (8002be4 <HAL_UART_IRQHandler+0x3e0>)
 80029ec:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fe ff93 	bl	800191e <HAL_DMA_Abort_IT>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d016      	beq.n	8002a2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a08:	4610      	mov	r0, r2
 8002a0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a0c:	e00e      	b.n	8002a2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f994 	bl	8002d3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a14:	e00a      	b.n	8002a2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f990 	bl	8002d3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a1c:	e006      	b.n	8002a2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f98c 	bl	8002d3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002a2a:	e175      	b.n	8002d18 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a2c:	bf00      	nop
    return;
 8002a2e:	e173      	b.n	8002d18 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	f040 814f 	bne.w	8002cd8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a3e:	f003 0310 	and.w	r3, r3, #16
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 8148 	beq.w	8002cd8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a4c:	f003 0310 	and.w	r3, r3, #16
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 8141 	beq.w	8002cd8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a56:	2300      	movs	r3, #0
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	60bb      	str	r3, [r7, #8]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a76:	2b40      	cmp	r3, #64	@ 0x40
 8002a78:	f040 80b6 	bne.w	8002be8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 8145 	beq.w	8002d1c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002a96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	f080 813e 	bcs.w	8002d1c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002aa6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ab2:	f000 8088 	beq.w	8002bc6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	330c      	adds	r3, #12
 8002abc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ac4:	e853 3f00 	ldrex	r3, [r3]
 8002ac8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002acc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ad0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ad4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	330c      	adds	r3, #12
 8002ade:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002ae2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002ae6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002aee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002af2:	e841 2300 	strex	r3, r2, [r1]
 8002af6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002afa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1d9      	bne.n	8002ab6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	3314      	adds	r3, #20
 8002b08:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b0c:	e853 3f00 	ldrex	r3, [r3]
 8002b10:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002b12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b14:	f023 0301 	bic.w	r3, r3, #1
 8002b18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	3314      	adds	r3, #20
 8002b22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002b26:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002b2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b2c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002b2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002b32:	e841 2300 	strex	r3, r2, [r1]
 8002b36:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002b38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1e1      	bne.n	8002b02 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	3314      	adds	r3, #20
 8002b44:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b48:	e853 3f00 	ldrex	r3, [r3]
 8002b4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002b4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	3314      	adds	r3, #20
 8002b5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002b62:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002b64:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b66:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002b68:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002b6a:	e841 2300 	strex	r3, r2, [r1]
 8002b6e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002b70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1e3      	bne.n	8002b3e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2220      	movs	r2, #32
 8002b7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	330c      	adds	r3, #12
 8002b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b8e:	e853 3f00 	ldrex	r3, [r3]
 8002b92:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002b94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b96:	f023 0310 	bic.w	r3, r3, #16
 8002b9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	330c      	adds	r3, #12
 8002ba4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002ba8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002baa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002bae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002bb0:	e841 2300 	strex	r3, r2, [r1]
 8002bb4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002bb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1e3      	bne.n	8002b84 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7fe fe3c 	bl	800183e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2202      	movs	r2, #2
 8002bca:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	4619      	mov	r1, r3
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f8b7 	bl	8002d50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002be2:	e09b      	b.n	8002d1c <HAL_UART_IRQHandler+0x518>
 8002be4:	08002f55 	.word	0x08002f55
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f000 808e 	beq.w	8002d20 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002c04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 8089 	beq.w	8002d20 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	330c      	adds	r3, #12
 8002c14:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c18:	e853 3f00 	ldrex	r3, [r3]
 8002c1c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	330c      	adds	r3, #12
 8002c2e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002c32:	647a      	str	r2, [r7, #68]	@ 0x44
 8002c34:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c36:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c3a:	e841 2300 	strex	r3, r2, [r1]
 8002c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002c40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1e3      	bne.n	8002c0e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	3314      	adds	r3, #20
 8002c4c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c50:	e853 3f00 	ldrex	r3, [r3]
 8002c54:	623b      	str	r3, [r7, #32]
   return(result);
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	f023 0301 	bic.w	r3, r3, #1
 8002c5c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	3314      	adds	r3, #20
 8002c66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002c6a:	633a      	str	r2, [r7, #48]	@ 0x30
 8002c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c72:	e841 2300 	strex	r3, r2, [r1]
 8002c76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1e3      	bne.n	8002c46 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2220      	movs	r2, #32
 8002c82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	330c      	adds	r3, #12
 8002c92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	e853 3f00 	ldrex	r3, [r3]
 8002c9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f023 0310 	bic.w	r3, r3, #16
 8002ca2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	330c      	adds	r3, #12
 8002cac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002cb0:	61fa      	str	r2, [r7, #28]
 8002cb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb4:	69b9      	ldr	r1, [r7, #24]
 8002cb6:	69fa      	ldr	r2, [r7, #28]
 8002cb8:	e841 2300 	strex	r3, r2, [r1]
 8002cbc:	617b      	str	r3, [r7, #20]
   return(result);
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1e3      	bne.n	8002c8c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002cca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002cce:	4619      	mov	r1, r3
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 f83d 	bl	8002d50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002cd6:	e023      	b.n	8002d20 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d009      	beq.n	8002cf8 <HAL_UART_IRQHandler+0x4f4>
 8002ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 f943 	bl	8002f7c <UART_Transmit_IT>
    return;
 8002cf6:	e014      	b.n	8002d22 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00e      	beq.n	8002d22 <HAL_UART_IRQHandler+0x51e>
 8002d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f983 	bl	800301c <UART_EndTransmit_IT>
    return;
 8002d16:	e004      	b.n	8002d22 <HAL_UART_IRQHandler+0x51e>
    return;
 8002d18:	bf00      	nop
 8002d1a:	e002      	b.n	8002d22 <HAL_UART_IRQHandler+0x51e>
      return;
 8002d1c:	bf00      	nop
 8002d1e:	e000      	b.n	8002d22 <HAL_UART_IRQHandler+0x51e>
      return;
 8002d20:	bf00      	nop
  }
}
 8002d22:	37e8      	adds	r7, #232	@ 0xe8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	603b      	str	r3, [r7, #0]
 8002d74:	4613      	mov	r3, r2
 8002d76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d78:	e03b      	b.n	8002df2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d7a:	6a3b      	ldr	r3, [r7, #32]
 8002d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d80:	d037      	beq.n	8002df2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d82:	f7fe fc1b 	bl	80015bc <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	6a3a      	ldr	r2, [r7, #32]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d302      	bcc.n	8002d98 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e03a      	b.n	8002e12 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f003 0304 	and.w	r3, r3, #4
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d023      	beq.n	8002df2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	2b80      	cmp	r3, #128	@ 0x80
 8002dae:	d020      	beq.n	8002df2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2b40      	cmp	r3, #64	@ 0x40
 8002db4:	d01d      	beq.n	8002df2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0308 	and.w	r3, r3, #8
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d116      	bne.n	8002df2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	617b      	str	r3, [r7, #20]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 f857 	bl	8002e8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2208      	movs	r2, #8
 8002de4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e00f      	b.n	8002e12 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	bf0c      	ite	eq
 8002e02:	2301      	moveq	r3, #1
 8002e04:	2300      	movne	r3, #0
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	461a      	mov	r2, r3
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d0b4      	beq.n	8002d7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b085      	sub	sp, #20
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	60f8      	str	r0, [r7, #12]
 8002e22:	60b9      	str	r1, [r7, #8]
 8002e24:	4613      	mov	r3, r2
 8002e26:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	88fa      	ldrh	r2, [r7, #6]
 8002e32:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	88fa      	ldrh	r2, [r7, #6]
 8002e38:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2222      	movs	r2, #34	@ 0x22
 8002e44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d007      	beq.n	8002e60 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e5e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695a      	ldr	r2, [r3, #20]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0201 	orr.w	r2, r2, #1
 8002e6e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0220 	orr.w	r2, r2, #32
 8002e7e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b095      	sub	sp, #84	@ 0x54
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	330c      	adds	r3, #12
 8002e9c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ea0:	e853 3f00 	ldrex	r3, [r3]
 8002ea4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002eac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	330c      	adds	r3, #12
 8002eb4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002eb6:	643a      	str	r2, [r7, #64]	@ 0x40
 8002eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ebc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ebe:	e841 2300 	strex	r3, r2, [r1]
 8002ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1e5      	bne.n	8002e96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	3314      	adds	r3, #20
 8002ed0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	e853 3f00 	ldrex	r3, [r3]
 8002ed8:	61fb      	str	r3, [r7, #28]
   return(result);
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	f023 0301 	bic.w	r3, r3, #1
 8002ee0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	3314      	adds	r3, #20
 8002ee8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002eea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002eec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ef0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ef2:	e841 2300 	strex	r3, r2, [r1]
 8002ef6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1e5      	bne.n	8002eca <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d119      	bne.n	8002f3a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	330c      	adds	r3, #12
 8002f0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	e853 3f00 	ldrex	r3, [r3]
 8002f14:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	f023 0310 	bic.w	r3, r3, #16
 8002f1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	330c      	adds	r3, #12
 8002f24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f26:	61ba      	str	r2, [r7, #24]
 8002f28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f2a:	6979      	ldr	r1, [r7, #20]
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	e841 2300 	strex	r3, r2, [r1]
 8002f32:	613b      	str	r3, [r7, #16]
   return(result);
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1e5      	bne.n	8002f06 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002f48:	bf00      	nop
 8002f4a:	3754      	adds	r7, #84	@ 0x54
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f7ff fee4 	bl	8002d3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f74:	bf00      	nop
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b21      	cmp	r3, #33	@ 0x21
 8002f8e:	d13e      	bne.n	800300e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f98:	d114      	bne.n	8002fc4 <UART_Transmit_IT+0x48>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d110      	bne.n	8002fc4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	881b      	ldrh	r3, [r3, #0]
 8002fac:	461a      	mov	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fb6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	1c9a      	adds	r2, r3, #2
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	621a      	str	r2, [r3, #32]
 8002fc2:	e008      	b.n	8002fd6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	1c59      	adds	r1, r3, #1
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	6211      	str	r1, [r2, #32]
 8002fce:	781a      	ldrb	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10f      	bne.n	800300a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ff8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68da      	ldr	r2, [r3, #12]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003008:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800300a:	2300      	movs	r3, #0
 800300c:	e000      	b.n	8003010 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800300e:	2302      	movs	r3, #2
  }
}
 8003010:	4618      	mov	r0, r3
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68da      	ldr	r2, [r3, #12]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003032:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2220      	movs	r2, #32
 8003038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7ff fe73 	bl	8002d28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08c      	sub	sp, #48	@ 0x30
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b22      	cmp	r3, #34	@ 0x22
 800305e:	f040 80ae 	bne.w	80031be <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800306a:	d117      	bne.n	800309c <UART_Receive_IT+0x50>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d113      	bne.n	800309c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003074:	2300      	movs	r3, #0
 8003076:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	b29b      	uxth	r3, r3
 8003086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800308a:	b29a      	uxth	r2, r3
 800308c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800308e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003094:	1c9a      	adds	r2, r3, #2
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	629a      	str	r2, [r3, #40]	@ 0x28
 800309a:	e026      	b.n	80030ea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80030a2:	2300      	movs	r3, #0
 80030a4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030ae:	d007      	beq.n	80030c0 <UART_Receive_IT+0x74>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10a      	bne.n	80030ce <UART_Receive_IT+0x82>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d106      	bne.n	80030ce <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ca:	701a      	strb	r2, [r3, #0]
 80030cc:	e008      	b.n	80030e0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030de:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e4:	1c5a      	adds	r2, r3, #1
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	4619      	mov	r1, r3
 80030f8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d15d      	bne.n	80031ba <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68da      	ldr	r2, [r3, #12]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0220 	bic.w	r2, r2, #32
 800310c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800311c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695a      	ldr	r2, [r3, #20]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 0201 	bic.w	r2, r2, #1
 800312c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2220      	movs	r2, #32
 8003132:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003140:	2b01      	cmp	r3, #1
 8003142:	d135      	bne.n	80031b0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	330c      	adds	r3, #12
 8003150:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	e853 3f00 	ldrex	r3, [r3]
 8003158:	613b      	str	r3, [r7, #16]
   return(result);
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	f023 0310 	bic.w	r3, r3, #16
 8003160:	627b      	str	r3, [r7, #36]	@ 0x24
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	330c      	adds	r3, #12
 8003168:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800316a:	623a      	str	r2, [r7, #32]
 800316c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800316e:	69f9      	ldr	r1, [r7, #28]
 8003170:	6a3a      	ldr	r2, [r7, #32]
 8003172:	e841 2300 	strex	r3, r2, [r1]
 8003176:	61bb      	str	r3, [r7, #24]
   return(result);
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1e5      	bne.n	800314a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0310 	and.w	r3, r3, #16
 8003188:	2b10      	cmp	r3, #16
 800318a:	d10a      	bne.n	80031a2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800318c:	2300      	movs	r3, #0
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80031a6:	4619      	mov	r1, r3
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7ff fdd1 	bl	8002d50 <HAL_UARTEx_RxEventCallback>
 80031ae:	e002      	b.n	80031b6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7fd fc75 	bl	8000aa0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80031b6:	2300      	movs	r3, #0
 80031b8:	e002      	b.n	80031c0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80031ba:	2300      	movs	r3, #0
 80031bc:	e000      	b.n	80031c0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80031be:	2302      	movs	r3, #2
  }
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3730      	adds	r7, #48	@ 0x30
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031cc:	b0c0      	sub	sp, #256	@ 0x100
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80031e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e4:	68d9      	ldr	r1, [r3, #12]
 80031e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	ea40 0301 	orr.w	r3, r0, r1
 80031f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	431a      	orrs	r2, r3
 8003200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	431a      	orrs	r2, r3
 8003208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	4313      	orrs	r3, r2
 8003210:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003220:	f021 010c 	bic.w	r1, r1, #12
 8003224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800322e:	430b      	orrs	r3, r1
 8003230:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800323e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003242:	6999      	ldr	r1, [r3, #24]
 8003244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	ea40 0301 	orr.w	r3, r0, r1
 800324e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	4b8f      	ldr	r3, [pc, #572]	@ (8003494 <UART_SetConfig+0x2cc>)
 8003258:	429a      	cmp	r2, r3
 800325a:	d005      	beq.n	8003268 <UART_SetConfig+0xa0>
 800325c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	4b8d      	ldr	r3, [pc, #564]	@ (8003498 <UART_SetConfig+0x2d0>)
 8003264:	429a      	cmp	r2, r3
 8003266:	d104      	bne.n	8003272 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003268:	f7ff f9b8 	bl	80025dc <HAL_RCC_GetPCLK2Freq>
 800326c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003270:	e003      	b.n	800327a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003272:	f7ff f99f 	bl	80025b4 <HAL_RCC_GetPCLK1Freq>
 8003276:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800327a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003284:	f040 810c 	bne.w	80034a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003288:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800328c:	2200      	movs	r2, #0
 800328e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003292:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003296:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800329a:	4622      	mov	r2, r4
 800329c:	462b      	mov	r3, r5
 800329e:	1891      	adds	r1, r2, r2
 80032a0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80032a2:	415b      	adcs	r3, r3
 80032a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80032aa:	4621      	mov	r1, r4
 80032ac:	eb12 0801 	adds.w	r8, r2, r1
 80032b0:	4629      	mov	r1, r5
 80032b2:	eb43 0901 	adc.w	r9, r3, r1
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	f04f 0300 	mov.w	r3, #0
 80032be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032ca:	4690      	mov	r8, r2
 80032cc:	4699      	mov	r9, r3
 80032ce:	4623      	mov	r3, r4
 80032d0:	eb18 0303 	adds.w	r3, r8, r3
 80032d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80032d8:	462b      	mov	r3, r5
 80032da:	eb49 0303 	adc.w	r3, r9, r3
 80032de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80032e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80032ee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80032f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80032f6:	460b      	mov	r3, r1
 80032f8:	18db      	adds	r3, r3, r3
 80032fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80032fc:	4613      	mov	r3, r2
 80032fe:	eb42 0303 	adc.w	r3, r2, r3
 8003302:	657b      	str	r3, [r7, #84]	@ 0x54
 8003304:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003308:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800330c:	f7fc ffc0 	bl	8000290 <__aeabi_uldivmod>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	4b61      	ldr	r3, [pc, #388]	@ (800349c <UART_SetConfig+0x2d4>)
 8003316:	fba3 2302 	umull	r2, r3, r3, r2
 800331a:	095b      	lsrs	r3, r3, #5
 800331c:	011c      	lsls	r4, r3, #4
 800331e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003322:	2200      	movs	r2, #0
 8003324:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003328:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800332c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003330:	4642      	mov	r2, r8
 8003332:	464b      	mov	r3, r9
 8003334:	1891      	adds	r1, r2, r2
 8003336:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003338:	415b      	adcs	r3, r3
 800333a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800333c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003340:	4641      	mov	r1, r8
 8003342:	eb12 0a01 	adds.w	sl, r2, r1
 8003346:	4649      	mov	r1, r9
 8003348:	eb43 0b01 	adc.w	fp, r3, r1
 800334c:	f04f 0200 	mov.w	r2, #0
 8003350:	f04f 0300 	mov.w	r3, #0
 8003354:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003358:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800335c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003360:	4692      	mov	sl, r2
 8003362:	469b      	mov	fp, r3
 8003364:	4643      	mov	r3, r8
 8003366:	eb1a 0303 	adds.w	r3, sl, r3
 800336a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800336e:	464b      	mov	r3, r9
 8003370:	eb4b 0303 	adc.w	r3, fp, r3
 8003374:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003384:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003388:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800338c:	460b      	mov	r3, r1
 800338e:	18db      	adds	r3, r3, r3
 8003390:	643b      	str	r3, [r7, #64]	@ 0x40
 8003392:	4613      	mov	r3, r2
 8003394:	eb42 0303 	adc.w	r3, r2, r3
 8003398:	647b      	str	r3, [r7, #68]	@ 0x44
 800339a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800339e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80033a2:	f7fc ff75 	bl	8000290 <__aeabi_uldivmod>
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	4611      	mov	r1, r2
 80033ac:	4b3b      	ldr	r3, [pc, #236]	@ (800349c <UART_SetConfig+0x2d4>)
 80033ae:	fba3 2301 	umull	r2, r3, r3, r1
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	2264      	movs	r2, #100	@ 0x64
 80033b6:	fb02 f303 	mul.w	r3, r2, r3
 80033ba:	1acb      	subs	r3, r1, r3
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80033c2:	4b36      	ldr	r3, [pc, #216]	@ (800349c <UART_SetConfig+0x2d4>)
 80033c4:	fba3 2302 	umull	r2, r3, r3, r2
 80033c8:	095b      	lsrs	r3, r3, #5
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80033d0:	441c      	add	r4, r3
 80033d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033d6:	2200      	movs	r2, #0
 80033d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80033e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80033e4:	4642      	mov	r2, r8
 80033e6:	464b      	mov	r3, r9
 80033e8:	1891      	adds	r1, r2, r2
 80033ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80033ec:	415b      	adcs	r3, r3
 80033ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80033f4:	4641      	mov	r1, r8
 80033f6:	1851      	adds	r1, r2, r1
 80033f8:	6339      	str	r1, [r7, #48]	@ 0x30
 80033fa:	4649      	mov	r1, r9
 80033fc:	414b      	adcs	r3, r1
 80033fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800340c:	4659      	mov	r1, fp
 800340e:	00cb      	lsls	r3, r1, #3
 8003410:	4651      	mov	r1, sl
 8003412:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003416:	4651      	mov	r1, sl
 8003418:	00ca      	lsls	r2, r1, #3
 800341a:	4610      	mov	r0, r2
 800341c:	4619      	mov	r1, r3
 800341e:	4603      	mov	r3, r0
 8003420:	4642      	mov	r2, r8
 8003422:	189b      	adds	r3, r3, r2
 8003424:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003428:	464b      	mov	r3, r9
 800342a:	460a      	mov	r2, r1
 800342c:	eb42 0303 	adc.w	r3, r2, r3
 8003430:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003440:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003444:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003448:	460b      	mov	r3, r1
 800344a:	18db      	adds	r3, r3, r3
 800344c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800344e:	4613      	mov	r3, r2
 8003450:	eb42 0303 	adc.w	r3, r2, r3
 8003454:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003456:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800345a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800345e:	f7fc ff17 	bl	8000290 <__aeabi_uldivmod>
 8003462:	4602      	mov	r2, r0
 8003464:	460b      	mov	r3, r1
 8003466:	4b0d      	ldr	r3, [pc, #52]	@ (800349c <UART_SetConfig+0x2d4>)
 8003468:	fba3 1302 	umull	r1, r3, r3, r2
 800346c:	095b      	lsrs	r3, r3, #5
 800346e:	2164      	movs	r1, #100	@ 0x64
 8003470:	fb01 f303 	mul.w	r3, r1, r3
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	3332      	adds	r3, #50	@ 0x32
 800347a:	4a08      	ldr	r2, [pc, #32]	@ (800349c <UART_SetConfig+0x2d4>)
 800347c:	fba2 2303 	umull	r2, r3, r2, r3
 8003480:	095b      	lsrs	r3, r3, #5
 8003482:	f003 0207 	and.w	r2, r3, #7
 8003486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4422      	add	r2, r4
 800348e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003490:	e106      	b.n	80036a0 <UART_SetConfig+0x4d8>
 8003492:	bf00      	nop
 8003494:	40011000 	.word	0x40011000
 8003498:	40011400 	.word	0x40011400
 800349c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034a4:	2200      	movs	r2, #0
 80034a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80034aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80034ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80034b2:	4642      	mov	r2, r8
 80034b4:	464b      	mov	r3, r9
 80034b6:	1891      	adds	r1, r2, r2
 80034b8:	6239      	str	r1, [r7, #32]
 80034ba:	415b      	adcs	r3, r3
 80034bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80034be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034c2:	4641      	mov	r1, r8
 80034c4:	1854      	adds	r4, r2, r1
 80034c6:	4649      	mov	r1, r9
 80034c8:	eb43 0501 	adc.w	r5, r3, r1
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	00eb      	lsls	r3, r5, #3
 80034d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034da:	00e2      	lsls	r2, r4, #3
 80034dc:	4614      	mov	r4, r2
 80034de:	461d      	mov	r5, r3
 80034e0:	4643      	mov	r3, r8
 80034e2:	18e3      	adds	r3, r4, r3
 80034e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80034e8:	464b      	mov	r3, r9
 80034ea:	eb45 0303 	adc.w	r3, r5, r3
 80034ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80034f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80034fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003502:	f04f 0200 	mov.w	r2, #0
 8003506:	f04f 0300 	mov.w	r3, #0
 800350a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800350e:	4629      	mov	r1, r5
 8003510:	008b      	lsls	r3, r1, #2
 8003512:	4621      	mov	r1, r4
 8003514:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003518:	4621      	mov	r1, r4
 800351a:	008a      	lsls	r2, r1, #2
 800351c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003520:	f7fc feb6 	bl	8000290 <__aeabi_uldivmod>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4b60      	ldr	r3, [pc, #384]	@ (80036ac <UART_SetConfig+0x4e4>)
 800352a:	fba3 2302 	umull	r2, r3, r3, r2
 800352e:	095b      	lsrs	r3, r3, #5
 8003530:	011c      	lsls	r4, r3, #4
 8003532:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003536:	2200      	movs	r2, #0
 8003538:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800353c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003540:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003544:	4642      	mov	r2, r8
 8003546:	464b      	mov	r3, r9
 8003548:	1891      	adds	r1, r2, r2
 800354a:	61b9      	str	r1, [r7, #24]
 800354c:	415b      	adcs	r3, r3
 800354e:	61fb      	str	r3, [r7, #28]
 8003550:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003554:	4641      	mov	r1, r8
 8003556:	1851      	adds	r1, r2, r1
 8003558:	6139      	str	r1, [r7, #16]
 800355a:	4649      	mov	r1, r9
 800355c:	414b      	adcs	r3, r1
 800355e:	617b      	str	r3, [r7, #20]
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	f04f 0300 	mov.w	r3, #0
 8003568:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800356c:	4659      	mov	r1, fp
 800356e:	00cb      	lsls	r3, r1, #3
 8003570:	4651      	mov	r1, sl
 8003572:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003576:	4651      	mov	r1, sl
 8003578:	00ca      	lsls	r2, r1, #3
 800357a:	4610      	mov	r0, r2
 800357c:	4619      	mov	r1, r3
 800357e:	4603      	mov	r3, r0
 8003580:	4642      	mov	r2, r8
 8003582:	189b      	adds	r3, r3, r2
 8003584:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003588:	464b      	mov	r3, r9
 800358a:	460a      	mov	r2, r1
 800358c:	eb42 0303 	adc.w	r3, r2, r3
 8003590:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800359e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80035ac:	4649      	mov	r1, r9
 80035ae:	008b      	lsls	r3, r1, #2
 80035b0:	4641      	mov	r1, r8
 80035b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035b6:	4641      	mov	r1, r8
 80035b8:	008a      	lsls	r2, r1, #2
 80035ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80035be:	f7fc fe67 	bl	8000290 <__aeabi_uldivmod>
 80035c2:	4602      	mov	r2, r0
 80035c4:	460b      	mov	r3, r1
 80035c6:	4611      	mov	r1, r2
 80035c8:	4b38      	ldr	r3, [pc, #224]	@ (80036ac <UART_SetConfig+0x4e4>)
 80035ca:	fba3 2301 	umull	r2, r3, r3, r1
 80035ce:	095b      	lsrs	r3, r3, #5
 80035d0:	2264      	movs	r2, #100	@ 0x64
 80035d2:	fb02 f303 	mul.w	r3, r2, r3
 80035d6:	1acb      	subs	r3, r1, r3
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	3332      	adds	r3, #50	@ 0x32
 80035dc:	4a33      	ldr	r2, [pc, #204]	@ (80036ac <UART_SetConfig+0x4e4>)
 80035de:	fba2 2303 	umull	r2, r3, r2, r3
 80035e2:	095b      	lsrs	r3, r3, #5
 80035e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035e8:	441c      	add	r4, r3
 80035ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035ee:	2200      	movs	r2, #0
 80035f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80035f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80035f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80035f8:	4642      	mov	r2, r8
 80035fa:	464b      	mov	r3, r9
 80035fc:	1891      	adds	r1, r2, r2
 80035fe:	60b9      	str	r1, [r7, #8]
 8003600:	415b      	adcs	r3, r3
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003608:	4641      	mov	r1, r8
 800360a:	1851      	adds	r1, r2, r1
 800360c:	6039      	str	r1, [r7, #0]
 800360e:	4649      	mov	r1, r9
 8003610:	414b      	adcs	r3, r1
 8003612:	607b      	str	r3, [r7, #4]
 8003614:	f04f 0200 	mov.w	r2, #0
 8003618:	f04f 0300 	mov.w	r3, #0
 800361c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003620:	4659      	mov	r1, fp
 8003622:	00cb      	lsls	r3, r1, #3
 8003624:	4651      	mov	r1, sl
 8003626:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800362a:	4651      	mov	r1, sl
 800362c:	00ca      	lsls	r2, r1, #3
 800362e:	4610      	mov	r0, r2
 8003630:	4619      	mov	r1, r3
 8003632:	4603      	mov	r3, r0
 8003634:	4642      	mov	r2, r8
 8003636:	189b      	adds	r3, r3, r2
 8003638:	66bb      	str	r3, [r7, #104]	@ 0x68
 800363a:	464b      	mov	r3, r9
 800363c:	460a      	mov	r2, r1
 800363e:	eb42 0303 	adc.w	r3, r2, r3
 8003642:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	663b      	str	r3, [r7, #96]	@ 0x60
 800364e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003650:	f04f 0200 	mov.w	r2, #0
 8003654:	f04f 0300 	mov.w	r3, #0
 8003658:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800365c:	4649      	mov	r1, r9
 800365e:	008b      	lsls	r3, r1, #2
 8003660:	4641      	mov	r1, r8
 8003662:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003666:	4641      	mov	r1, r8
 8003668:	008a      	lsls	r2, r1, #2
 800366a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800366e:	f7fc fe0f 	bl	8000290 <__aeabi_uldivmod>
 8003672:	4602      	mov	r2, r0
 8003674:	460b      	mov	r3, r1
 8003676:	4b0d      	ldr	r3, [pc, #52]	@ (80036ac <UART_SetConfig+0x4e4>)
 8003678:	fba3 1302 	umull	r1, r3, r3, r2
 800367c:	095b      	lsrs	r3, r3, #5
 800367e:	2164      	movs	r1, #100	@ 0x64
 8003680:	fb01 f303 	mul.w	r3, r1, r3
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	3332      	adds	r3, #50	@ 0x32
 800368a:	4a08      	ldr	r2, [pc, #32]	@ (80036ac <UART_SetConfig+0x4e4>)
 800368c:	fba2 2303 	umull	r2, r3, r2, r3
 8003690:	095b      	lsrs	r3, r3, #5
 8003692:	f003 020f 	and.w	r2, r3, #15
 8003696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4422      	add	r2, r4
 800369e:	609a      	str	r2, [r3, #8]
}
 80036a0:	bf00      	nop
 80036a2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80036a6:	46bd      	mov	sp, r7
 80036a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036ac:	51eb851f 	.word	0x51eb851f

080036b0 <sniprintf>:
 80036b0:	b40c      	push	{r2, r3}
 80036b2:	b530      	push	{r4, r5, lr}
 80036b4:	4b18      	ldr	r3, [pc, #96]	@ (8003718 <sniprintf+0x68>)
 80036b6:	1e0c      	subs	r4, r1, #0
 80036b8:	681d      	ldr	r5, [r3, #0]
 80036ba:	b09d      	sub	sp, #116	@ 0x74
 80036bc:	da08      	bge.n	80036d0 <sniprintf+0x20>
 80036be:	238b      	movs	r3, #139	@ 0x8b
 80036c0:	602b      	str	r3, [r5, #0]
 80036c2:	f04f 30ff 	mov.w	r0, #4294967295
 80036c6:	b01d      	add	sp, #116	@ 0x74
 80036c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80036cc:	b002      	add	sp, #8
 80036ce:	4770      	bx	lr
 80036d0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80036d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80036d8:	f04f 0300 	mov.w	r3, #0
 80036dc:	931b      	str	r3, [sp, #108]	@ 0x6c
 80036de:	bf14      	ite	ne
 80036e0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80036e4:	4623      	moveq	r3, r4
 80036e6:	9304      	str	r3, [sp, #16]
 80036e8:	9307      	str	r3, [sp, #28]
 80036ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80036ee:	9002      	str	r0, [sp, #8]
 80036f0:	9006      	str	r0, [sp, #24]
 80036f2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80036f6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80036f8:	ab21      	add	r3, sp, #132	@ 0x84
 80036fa:	a902      	add	r1, sp, #8
 80036fc:	4628      	mov	r0, r5
 80036fe:	9301      	str	r3, [sp, #4]
 8003700:	f000 f9a2 	bl	8003a48 <_svfiprintf_r>
 8003704:	1c43      	adds	r3, r0, #1
 8003706:	bfbc      	itt	lt
 8003708:	238b      	movlt	r3, #139	@ 0x8b
 800370a:	602b      	strlt	r3, [r5, #0]
 800370c:	2c00      	cmp	r4, #0
 800370e:	d0da      	beq.n	80036c6 <sniprintf+0x16>
 8003710:	9b02      	ldr	r3, [sp, #8]
 8003712:	2200      	movs	r2, #0
 8003714:	701a      	strb	r2, [r3, #0]
 8003716:	e7d6      	b.n	80036c6 <sniprintf+0x16>
 8003718:	2000000c 	.word	0x2000000c

0800371c <memset>:
 800371c:	4402      	add	r2, r0
 800371e:	4603      	mov	r3, r0
 8003720:	4293      	cmp	r3, r2
 8003722:	d100      	bne.n	8003726 <memset+0xa>
 8003724:	4770      	bx	lr
 8003726:	f803 1b01 	strb.w	r1, [r3], #1
 800372a:	e7f9      	b.n	8003720 <memset+0x4>

0800372c <__errno>:
 800372c:	4b01      	ldr	r3, [pc, #4]	@ (8003734 <__errno+0x8>)
 800372e:	6818      	ldr	r0, [r3, #0]
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	2000000c 	.word	0x2000000c

08003738 <__libc_init_array>:
 8003738:	b570      	push	{r4, r5, r6, lr}
 800373a:	4d0d      	ldr	r5, [pc, #52]	@ (8003770 <__libc_init_array+0x38>)
 800373c:	4c0d      	ldr	r4, [pc, #52]	@ (8003774 <__libc_init_array+0x3c>)
 800373e:	1b64      	subs	r4, r4, r5
 8003740:	10a4      	asrs	r4, r4, #2
 8003742:	2600      	movs	r6, #0
 8003744:	42a6      	cmp	r6, r4
 8003746:	d109      	bne.n	800375c <__libc_init_array+0x24>
 8003748:	4d0b      	ldr	r5, [pc, #44]	@ (8003778 <__libc_init_array+0x40>)
 800374a:	4c0c      	ldr	r4, [pc, #48]	@ (800377c <__libc_init_array+0x44>)
 800374c:	f000 fc64 	bl	8004018 <_init>
 8003750:	1b64      	subs	r4, r4, r5
 8003752:	10a4      	asrs	r4, r4, #2
 8003754:	2600      	movs	r6, #0
 8003756:	42a6      	cmp	r6, r4
 8003758:	d105      	bne.n	8003766 <__libc_init_array+0x2e>
 800375a:	bd70      	pop	{r4, r5, r6, pc}
 800375c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003760:	4798      	blx	r3
 8003762:	3601      	adds	r6, #1
 8003764:	e7ee      	b.n	8003744 <__libc_init_array+0xc>
 8003766:	f855 3b04 	ldr.w	r3, [r5], #4
 800376a:	4798      	blx	r3
 800376c:	3601      	adds	r6, #1
 800376e:	e7f2      	b.n	8003756 <__libc_init_array+0x1e>
 8003770:	080043c0 	.word	0x080043c0
 8003774:	080043c0 	.word	0x080043c0
 8003778:	080043c0 	.word	0x080043c0
 800377c:	080043c4 	.word	0x080043c4

08003780 <__retarget_lock_acquire_recursive>:
 8003780:	4770      	bx	lr

08003782 <__retarget_lock_release_recursive>:
 8003782:	4770      	bx	lr

08003784 <memcpy>:
 8003784:	440a      	add	r2, r1
 8003786:	4291      	cmp	r1, r2
 8003788:	f100 33ff 	add.w	r3, r0, #4294967295
 800378c:	d100      	bne.n	8003790 <memcpy+0xc>
 800378e:	4770      	bx	lr
 8003790:	b510      	push	{r4, lr}
 8003792:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003796:	f803 4f01 	strb.w	r4, [r3, #1]!
 800379a:	4291      	cmp	r1, r2
 800379c:	d1f9      	bne.n	8003792 <memcpy+0xe>
 800379e:	bd10      	pop	{r4, pc}

080037a0 <_free_r>:
 80037a0:	b538      	push	{r3, r4, r5, lr}
 80037a2:	4605      	mov	r5, r0
 80037a4:	2900      	cmp	r1, #0
 80037a6:	d041      	beq.n	800382c <_free_r+0x8c>
 80037a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037ac:	1f0c      	subs	r4, r1, #4
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	bfb8      	it	lt
 80037b2:	18e4      	addlt	r4, r4, r3
 80037b4:	f000 f8e0 	bl	8003978 <__malloc_lock>
 80037b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003830 <_free_r+0x90>)
 80037ba:	6813      	ldr	r3, [r2, #0]
 80037bc:	b933      	cbnz	r3, 80037cc <_free_r+0x2c>
 80037be:	6063      	str	r3, [r4, #4]
 80037c0:	6014      	str	r4, [r2, #0]
 80037c2:	4628      	mov	r0, r5
 80037c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037c8:	f000 b8dc 	b.w	8003984 <__malloc_unlock>
 80037cc:	42a3      	cmp	r3, r4
 80037ce:	d908      	bls.n	80037e2 <_free_r+0x42>
 80037d0:	6820      	ldr	r0, [r4, #0]
 80037d2:	1821      	adds	r1, r4, r0
 80037d4:	428b      	cmp	r3, r1
 80037d6:	bf01      	itttt	eq
 80037d8:	6819      	ldreq	r1, [r3, #0]
 80037da:	685b      	ldreq	r3, [r3, #4]
 80037dc:	1809      	addeq	r1, r1, r0
 80037de:	6021      	streq	r1, [r4, #0]
 80037e0:	e7ed      	b.n	80037be <_free_r+0x1e>
 80037e2:	461a      	mov	r2, r3
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	b10b      	cbz	r3, 80037ec <_free_r+0x4c>
 80037e8:	42a3      	cmp	r3, r4
 80037ea:	d9fa      	bls.n	80037e2 <_free_r+0x42>
 80037ec:	6811      	ldr	r1, [r2, #0]
 80037ee:	1850      	adds	r0, r2, r1
 80037f0:	42a0      	cmp	r0, r4
 80037f2:	d10b      	bne.n	800380c <_free_r+0x6c>
 80037f4:	6820      	ldr	r0, [r4, #0]
 80037f6:	4401      	add	r1, r0
 80037f8:	1850      	adds	r0, r2, r1
 80037fa:	4283      	cmp	r3, r0
 80037fc:	6011      	str	r1, [r2, #0]
 80037fe:	d1e0      	bne.n	80037c2 <_free_r+0x22>
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	6053      	str	r3, [r2, #4]
 8003806:	4408      	add	r0, r1
 8003808:	6010      	str	r0, [r2, #0]
 800380a:	e7da      	b.n	80037c2 <_free_r+0x22>
 800380c:	d902      	bls.n	8003814 <_free_r+0x74>
 800380e:	230c      	movs	r3, #12
 8003810:	602b      	str	r3, [r5, #0]
 8003812:	e7d6      	b.n	80037c2 <_free_r+0x22>
 8003814:	6820      	ldr	r0, [r4, #0]
 8003816:	1821      	adds	r1, r4, r0
 8003818:	428b      	cmp	r3, r1
 800381a:	bf04      	itt	eq
 800381c:	6819      	ldreq	r1, [r3, #0]
 800381e:	685b      	ldreq	r3, [r3, #4]
 8003820:	6063      	str	r3, [r4, #4]
 8003822:	bf04      	itt	eq
 8003824:	1809      	addeq	r1, r1, r0
 8003826:	6021      	streq	r1, [r4, #0]
 8003828:	6054      	str	r4, [r2, #4]
 800382a:	e7ca      	b.n	80037c2 <_free_r+0x22>
 800382c:	bd38      	pop	{r3, r4, r5, pc}
 800382e:	bf00      	nop
 8003830:	200004c4 	.word	0x200004c4

08003834 <sbrk_aligned>:
 8003834:	b570      	push	{r4, r5, r6, lr}
 8003836:	4e0f      	ldr	r6, [pc, #60]	@ (8003874 <sbrk_aligned+0x40>)
 8003838:	460c      	mov	r4, r1
 800383a:	6831      	ldr	r1, [r6, #0]
 800383c:	4605      	mov	r5, r0
 800383e:	b911      	cbnz	r1, 8003846 <sbrk_aligned+0x12>
 8003840:	f000 fba4 	bl	8003f8c <_sbrk_r>
 8003844:	6030      	str	r0, [r6, #0]
 8003846:	4621      	mov	r1, r4
 8003848:	4628      	mov	r0, r5
 800384a:	f000 fb9f 	bl	8003f8c <_sbrk_r>
 800384e:	1c43      	adds	r3, r0, #1
 8003850:	d103      	bne.n	800385a <sbrk_aligned+0x26>
 8003852:	f04f 34ff 	mov.w	r4, #4294967295
 8003856:	4620      	mov	r0, r4
 8003858:	bd70      	pop	{r4, r5, r6, pc}
 800385a:	1cc4      	adds	r4, r0, #3
 800385c:	f024 0403 	bic.w	r4, r4, #3
 8003860:	42a0      	cmp	r0, r4
 8003862:	d0f8      	beq.n	8003856 <sbrk_aligned+0x22>
 8003864:	1a21      	subs	r1, r4, r0
 8003866:	4628      	mov	r0, r5
 8003868:	f000 fb90 	bl	8003f8c <_sbrk_r>
 800386c:	3001      	adds	r0, #1
 800386e:	d1f2      	bne.n	8003856 <sbrk_aligned+0x22>
 8003870:	e7ef      	b.n	8003852 <sbrk_aligned+0x1e>
 8003872:	bf00      	nop
 8003874:	200004c0 	.word	0x200004c0

08003878 <_malloc_r>:
 8003878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800387c:	1ccd      	adds	r5, r1, #3
 800387e:	f025 0503 	bic.w	r5, r5, #3
 8003882:	3508      	adds	r5, #8
 8003884:	2d0c      	cmp	r5, #12
 8003886:	bf38      	it	cc
 8003888:	250c      	movcc	r5, #12
 800388a:	2d00      	cmp	r5, #0
 800388c:	4606      	mov	r6, r0
 800388e:	db01      	blt.n	8003894 <_malloc_r+0x1c>
 8003890:	42a9      	cmp	r1, r5
 8003892:	d904      	bls.n	800389e <_malloc_r+0x26>
 8003894:	230c      	movs	r3, #12
 8003896:	6033      	str	r3, [r6, #0]
 8003898:	2000      	movs	r0, #0
 800389a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800389e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003974 <_malloc_r+0xfc>
 80038a2:	f000 f869 	bl	8003978 <__malloc_lock>
 80038a6:	f8d8 3000 	ldr.w	r3, [r8]
 80038aa:	461c      	mov	r4, r3
 80038ac:	bb44      	cbnz	r4, 8003900 <_malloc_r+0x88>
 80038ae:	4629      	mov	r1, r5
 80038b0:	4630      	mov	r0, r6
 80038b2:	f7ff ffbf 	bl	8003834 <sbrk_aligned>
 80038b6:	1c43      	adds	r3, r0, #1
 80038b8:	4604      	mov	r4, r0
 80038ba:	d158      	bne.n	800396e <_malloc_r+0xf6>
 80038bc:	f8d8 4000 	ldr.w	r4, [r8]
 80038c0:	4627      	mov	r7, r4
 80038c2:	2f00      	cmp	r7, #0
 80038c4:	d143      	bne.n	800394e <_malloc_r+0xd6>
 80038c6:	2c00      	cmp	r4, #0
 80038c8:	d04b      	beq.n	8003962 <_malloc_r+0xea>
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	4639      	mov	r1, r7
 80038ce:	4630      	mov	r0, r6
 80038d0:	eb04 0903 	add.w	r9, r4, r3
 80038d4:	f000 fb5a 	bl	8003f8c <_sbrk_r>
 80038d8:	4581      	cmp	r9, r0
 80038da:	d142      	bne.n	8003962 <_malloc_r+0xea>
 80038dc:	6821      	ldr	r1, [r4, #0]
 80038de:	1a6d      	subs	r5, r5, r1
 80038e0:	4629      	mov	r1, r5
 80038e2:	4630      	mov	r0, r6
 80038e4:	f7ff ffa6 	bl	8003834 <sbrk_aligned>
 80038e8:	3001      	adds	r0, #1
 80038ea:	d03a      	beq.n	8003962 <_malloc_r+0xea>
 80038ec:	6823      	ldr	r3, [r4, #0]
 80038ee:	442b      	add	r3, r5
 80038f0:	6023      	str	r3, [r4, #0]
 80038f2:	f8d8 3000 	ldr.w	r3, [r8]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	bb62      	cbnz	r2, 8003954 <_malloc_r+0xdc>
 80038fa:	f8c8 7000 	str.w	r7, [r8]
 80038fe:	e00f      	b.n	8003920 <_malloc_r+0xa8>
 8003900:	6822      	ldr	r2, [r4, #0]
 8003902:	1b52      	subs	r2, r2, r5
 8003904:	d420      	bmi.n	8003948 <_malloc_r+0xd0>
 8003906:	2a0b      	cmp	r2, #11
 8003908:	d917      	bls.n	800393a <_malloc_r+0xc2>
 800390a:	1961      	adds	r1, r4, r5
 800390c:	42a3      	cmp	r3, r4
 800390e:	6025      	str	r5, [r4, #0]
 8003910:	bf18      	it	ne
 8003912:	6059      	strne	r1, [r3, #4]
 8003914:	6863      	ldr	r3, [r4, #4]
 8003916:	bf08      	it	eq
 8003918:	f8c8 1000 	streq.w	r1, [r8]
 800391c:	5162      	str	r2, [r4, r5]
 800391e:	604b      	str	r3, [r1, #4]
 8003920:	4630      	mov	r0, r6
 8003922:	f000 f82f 	bl	8003984 <__malloc_unlock>
 8003926:	f104 000b 	add.w	r0, r4, #11
 800392a:	1d23      	adds	r3, r4, #4
 800392c:	f020 0007 	bic.w	r0, r0, #7
 8003930:	1ac2      	subs	r2, r0, r3
 8003932:	bf1c      	itt	ne
 8003934:	1a1b      	subne	r3, r3, r0
 8003936:	50a3      	strne	r3, [r4, r2]
 8003938:	e7af      	b.n	800389a <_malloc_r+0x22>
 800393a:	6862      	ldr	r2, [r4, #4]
 800393c:	42a3      	cmp	r3, r4
 800393e:	bf0c      	ite	eq
 8003940:	f8c8 2000 	streq.w	r2, [r8]
 8003944:	605a      	strne	r2, [r3, #4]
 8003946:	e7eb      	b.n	8003920 <_malloc_r+0xa8>
 8003948:	4623      	mov	r3, r4
 800394a:	6864      	ldr	r4, [r4, #4]
 800394c:	e7ae      	b.n	80038ac <_malloc_r+0x34>
 800394e:	463c      	mov	r4, r7
 8003950:	687f      	ldr	r7, [r7, #4]
 8003952:	e7b6      	b.n	80038c2 <_malloc_r+0x4a>
 8003954:	461a      	mov	r2, r3
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	42a3      	cmp	r3, r4
 800395a:	d1fb      	bne.n	8003954 <_malloc_r+0xdc>
 800395c:	2300      	movs	r3, #0
 800395e:	6053      	str	r3, [r2, #4]
 8003960:	e7de      	b.n	8003920 <_malloc_r+0xa8>
 8003962:	230c      	movs	r3, #12
 8003964:	6033      	str	r3, [r6, #0]
 8003966:	4630      	mov	r0, r6
 8003968:	f000 f80c 	bl	8003984 <__malloc_unlock>
 800396c:	e794      	b.n	8003898 <_malloc_r+0x20>
 800396e:	6005      	str	r5, [r0, #0]
 8003970:	e7d6      	b.n	8003920 <_malloc_r+0xa8>
 8003972:	bf00      	nop
 8003974:	200004c4 	.word	0x200004c4

08003978 <__malloc_lock>:
 8003978:	4801      	ldr	r0, [pc, #4]	@ (8003980 <__malloc_lock+0x8>)
 800397a:	f7ff bf01 	b.w	8003780 <__retarget_lock_acquire_recursive>
 800397e:	bf00      	nop
 8003980:	200004bc 	.word	0x200004bc

08003984 <__malloc_unlock>:
 8003984:	4801      	ldr	r0, [pc, #4]	@ (800398c <__malloc_unlock+0x8>)
 8003986:	f7ff befc 	b.w	8003782 <__retarget_lock_release_recursive>
 800398a:	bf00      	nop
 800398c:	200004bc 	.word	0x200004bc

08003990 <__ssputs_r>:
 8003990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003994:	688e      	ldr	r6, [r1, #8]
 8003996:	461f      	mov	r7, r3
 8003998:	42be      	cmp	r6, r7
 800399a:	680b      	ldr	r3, [r1, #0]
 800399c:	4682      	mov	sl, r0
 800399e:	460c      	mov	r4, r1
 80039a0:	4690      	mov	r8, r2
 80039a2:	d82d      	bhi.n	8003a00 <__ssputs_r+0x70>
 80039a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80039a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80039ac:	d026      	beq.n	80039fc <__ssputs_r+0x6c>
 80039ae:	6965      	ldr	r5, [r4, #20]
 80039b0:	6909      	ldr	r1, [r1, #16]
 80039b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039b6:	eba3 0901 	sub.w	r9, r3, r1
 80039ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80039be:	1c7b      	adds	r3, r7, #1
 80039c0:	444b      	add	r3, r9
 80039c2:	106d      	asrs	r5, r5, #1
 80039c4:	429d      	cmp	r5, r3
 80039c6:	bf38      	it	cc
 80039c8:	461d      	movcc	r5, r3
 80039ca:	0553      	lsls	r3, r2, #21
 80039cc:	d527      	bpl.n	8003a1e <__ssputs_r+0x8e>
 80039ce:	4629      	mov	r1, r5
 80039d0:	f7ff ff52 	bl	8003878 <_malloc_r>
 80039d4:	4606      	mov	r6, r0
 80039d6:	b360      	cbz	r0, 8003a32 <__ssputs_r+0xa2>
 80039d8:	6921      	ldr	r1, [r4, #16]
 80039da:	464a      	mov	r2, r9
 80039dc:	f7ff fed2 	bl	8003784 <memcpy>
 80039e0:	89a3      	ldrh	r3, [r4, #12]
 80039e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80039e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039ea:	81a3      	strh	r3, [r4, #12]
 80039ec:	6126      	str	r6, [r4, #16]
 80039ee:	6165      	str	r5, [r4, #20]
 80039f0:	444e      	add	r6, r9
 80039f2:	eba5 0509 	sub.w	r5, r5, r9
 80039f6:	6026      	str	r6, [r4, #0]
 80039f8:	60a5      	str	r5, [r4, #8]
 80039fa:	463e      	mov	r6, r7
 80039fc:	42be      	cmp	r6, r7
 80039fe:	d900      	bls.n	8003a02 <__ssputs_r+0x72>
 8003a00:	463e      	mov	r6, r7
 8003a02:	6820      	ldr	r0, [r4, #0]
 8003a04:	4632      	mov	r2, r6
 8003a06:	4641      	mov	r1, r8
 8003a08:	f000 faa6 	bl	8003f58 <memmove>
 8003a0c:	68a3      	ldr	r3, [r4, #8]
 8003a0e:	1b9b      	subs	r3, r3, r6
 8003a10:	60a3      	str	r3, [r4, #8]
 8003a12:	6823      	ldr	r3, [r4, #0]
 8003a14:	4433      	add	r3, r6
 8003a16:	6023      	str	r3, [r4, #0]
 8003a18:	2000      	movs	r0, #0
 8003a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a1e:	462a      	mov	r2, r5
 8003a20:	f000 fac4 	bl	8003fac <_realloc_r>
 8003a24:	4606      	mov	r6, r0
 8003a26:	2800      	cmp	r0, #0
 8003a28:	d1e0      	bne.n	80039ec <__ssputs_r+0x5c>
 8003a2a:	6921      	ldr	r1, [r4, #16]
 8003a2c:	4650      	mov	r0, sl
 8003a2e:	f7ff feb7 	bl	80037a0 <_free_r>
 8003a32:	230c      	movs	r3, #12
 8003a34:	f8ca 3000 	str.w	r3, [sl]
 8003a38:	89a3      	ldrh	r3, [r4, #12]
 8003a3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a3e:	81a3      	strh	r3, [r4, #12]
 8003a40:	f04f 30ff 	mov.w	r0, #4294967295
 8003a44:	e7e9      	b.n	8003a1a <__ssputs_r+0x8a>
	...

08003a48 <_svfiprintf_r>:
 8003a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a4c:	4698      	mov	r8, r3
 8003a4e:	898b      	ldrh	r3, [r1, #12]
 8003a50:	061b      	lsls	r3, r3, #24
 8003a52:	b09d      	sub	sp, #116	@ 0x74
 8003a54:	4607      	mov	r7, r0
 8003a56:	460d      	mov	r5, r1
 8003a58:	4614      	mov	r4, r2
 8003a5a:	d510      	bpl.n	8003a7e <_svfiprintf_r+0x36>
 8003a5c:	690b      	ldr	r3, [r1, #16]
 8003a5e:	b973      	cbnz	r3, 8003a7e <_svfiprintf_r+0x36>
 8003a60:	2140      	movs	r1, #64	@ 0x40
 8003a62:	f7ff ff09 	bl	8003878 <_malloc_r>
 8003a66:	6028      	str	r0, [r5, #0]
 8003a68:	6128      	str	r0, [r5, #16]
 8003a6a:	b930      	cbnz	r0, 8003a7a <_svfiprintf_r+0x32>
 8003a6c:	230c      	movs	r3, #12
 8003a6e:	603b      	str	r3, [r7, #0]
 8003a70:	f04f 30ff 	mov.w	r0, #4294967295
 8003a74:	b01d      	add	sp, #116	@ 0x74
 8003a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a7a:	2340      	movs	r3, #64	@ 0x40
 8003a7c:	616b      	str	r3, [r5, #20]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a82:	2320      	movs	r3, #32
 8003a84:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003a88:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a8c:	2330      	movs	r3, #48	@ 0x30
 8003a8e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003c2c <_svfiprintf_r+0x1e4>
 8003a92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003a96:	f04f 0901 	mov.w	r9, #1
 8003a9a:	4623      	mov	r3, r4
 8003a9c:	469a      	mov	sl, r3
 8003a9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003aa2:	b10a      	cbz	r2, 8003aa8 <_svfiprintf_r+0x60>
 8003aa4:	2a25      	cmp	r2, #37	@ 0x25
 8003aa6:	d1f9      	bne.n	8003a9c <_svfiprintf_r+0x54>
 8003aa8:	ebba 0b04 	subs.w	fp, sl, r4
 8003aac:	d00b      	beq.n	8003ac6 <_svfiprintf_r+0x7e>
 8003aae:	465b      	mov	r3, fp
 8003ab0:	4622      	mov	r2, r4
 8003ab2:	4629      	mov	r1, r5
 8003ab4:	4638      	mov	r0, r7
 8003ab6:	f7ff ff6b 	bl	8003990 <__ssputs_r>
 8003aba:	3001      	adds	r0, #1
 8003abc:	f000 80a7 	beq.w	8003c0e <_svfiprintf_r+0x1c6>
 8003ac0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003ac2:	445a      	add	r2, fp
 8003ac4:	9209      	str	r2, [sp, #36]	@ 0x24
 8003ac6:	f89a 3000 	ldrb.w	r3, [sl]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 809f 	beq.w	8003c0e <_svfiprintf_r+0x1c6>
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ad6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ada:	f10a 0a01 	add.w	sl, sl, #1
 8003ade:	9304      	str	r3, [sp, #16]
 8003ae0:	9307      	str	r3, [sp, #28]
 8003ae2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003ae6:	931a      	str	r3, [sp, #104]	@ 0x68
 8003ae8:	4654      	mov	r4, sl
 8003aea:	2205      	movs	r2, #5
 8003aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003af0:	484e      	ldr	r0, [pc, #312]	@ (8003c2c <_svfiprintf_r+0x1e4>)
 8003af2:	f7fc fb7d 	bl	80001f0 <memchr>
 8003af6:	9a04      	ldr	r2, [sp, #16]
 8003af8:	b9d8      	cbnz	r0, 8003b32 <_svfiprintf_r+0xea>
 8003afa:	06d0      	lsls	r0, r2, #27
 8003afc:	bf44      	itt	mi
 8003afe:	2320      	movmi	r3, #32
 8003b00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b04:	0711      	lsls	r1, r2, #28
 8003b06:	bf44      	itt	mi
 8003b08:	232b      	movmi	r3, #43	@ 0x2b
 8003b0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b0e:	f89a 3000 	ldrb.w	r3, [sl]
 8003b12:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b14:	d015      	beq.n	8003b42 <_svfiprintf_r+0xfa>
 8003b16:	9a07      	ldr	r2, [sp, #28]
 8003b18:	4654      	mov	r4, sl
 8003b1a:	2000      	movs	r0, #0
 8003b1c:	f04f 0c0a 	mov.w	ip, #10
 8003b20:	4621      	mov	r1, r4
 8003b22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b26:	3b30      	subs	r3, #48	@ 0x30
 8003b28:	2b09      	cmp	r3, #9
 8003b2a:	d94b      	bls.n	8003bc4 <_svfiprintf_r+0x17c>
 8003b2c:	b1b0      	cbz	r0, 8003b5c <_svfiprintf_r+0x114>
 8003b2e:	9207      	str	r2, [sp, #28]
 8003b30:	e014      	b.n	8003b5c <_svfiprintf_r+0x114>
 8003b32:	eba0 0308 	sub.w	r3, r0, r8
 8003b36:	fa09 f303 	lsl.w	r3, r9, r3
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	9304      	str	r3, [sp, #16]
 8003b3e:	46a2      	mov	sl, r4
 8003b40:	e7d2      	b.n	8003ae8 <_svfiprintf_r+0xa0>
 8003b42:	9b03      	ldr	r3, [sp, #12]
 8003b44:	1d19      	adds	r1, r3, #4
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	9103      	str	r1, [sp, #12]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	bfbb      	ittet	lt
 8003b4e:	425b      	neglt	r3, r3
 8003b50:	f042 0202 	orrlt.w	r2, r2, #2
 8003b54:	9307      	strge	r3, [sp, #28]
 8003b56:	9307      	strlt	r3, [sp, #28]
 8003b58:	bfb8      	it	lt
 8003b5a:	9204      	strlt	r2, [sp, #16]
 8003b5c:	7823      	ldrb	r3, [r4, #0]
 8003b5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b60:	d10a      	bne.n	8003b78 <_svfiprintf_r+0x130>
 8003b62:	7863      	ldrb	r3, [r4, #1]
 8003b64:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b66:	d132      	bne.n	8003bce <_svfiprintf_r+0x186>
 8003b68:	9b03      	ldr	r3, [sp, #12]
 8003b6a:	1d1a      	adds	r2, r3, #4
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	9203      	str	r2, [sp, #12]
 8003b70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003b74:	3402      	adds	r4, #2
 8003b76:	9305      	str	r3, [sp, #20]
 8003b78:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003c3c <_svfiprintf_r+0x1f4>
 8003b7c:	7821      	ldrb	r1, [r4, #0]
 8003b7e:	2203      	movs	r2, #3
 8003b80:	4650      	mov	r0, sl
 8003b82:	f7fc fb35 	bl	80001f0 <memchr>
 8003b86:	b138      	cbz	r0, 8003b98 <_svfiprintf_r+0x150>
 8003b88:	9b04      	ldr	r3, [sp, #16]
 8003b8a:	eba0 000a 	sub.w	r0, r0, sl
 8003b8e:	2240      	movs	r2, #64	@ 0x40
 8003b90:	4082      	lsls	r2, r0
 8003b92:	4313      	orrs	r3, r2
 8003b94:	3401      	adds	r4, #1
 8003b96:	9304      	str	r3, [sp, #16]
 8003b98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b9c:	4824      	ldr	r0, [pc, #144]	@ (8003c30 <_svfiprintf_r+0x1e8>)
 8003b9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003ba2:	2206      	movs	r2, #6
 8003ba4:	f7fc fb24 	bl	80001f0 <memchr>
 8003ba8:	2800      	cmp	r0, #0
 8003baa:	d036      	beq.n	8003c1a <_svfiprintf_r+0x1d2>
 8003bac:	4b21      	ldr	r3, [pc, #132]	@ (8003c34 <_svfiprintf_r+0x1ec>)
 8003bae:	bb1b      	cbnz	r3, 8003bf8 <_svfiprintf_r+0x1b0>
 8003bb0:	9b03      	ldr	r3, [sp, #12]
 8003bb2:	3307      	adds	r3, #7
 8003bb4:	f023 0307 	bic.w	r3, r3, #7
 8003bb8:	3308      	adds	r3, #8
 8003bba:	9303      	str	r3, [sp, #12]
 8003bbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003bbe:	4433      	add	r3, r6
 8003bc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8003bc2:	e76a      	b.n	8003a9a <_svfiprintf_r+0x52>
 8003bc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bc8:	460c      	mov	r4, r1
 8003bca:	2001      	movs	r0, #1
 8003bcc:	e7a8      	b.n	8003b20 <_svfiprintf_r+0xd8>
 8003bce:	2300      	movs	r3, #0
 8003bd0:	3401      	adds	r4, #1
 8003bd2:	9305      	str	r3, [sp, #20]
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	f04f 0c0a 	mov.w	ip, #10
 8003bda:	4620      	mov	r0, r4
 8003bdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003be0:	3a30      	subs	r2, #48	@ 0x30
 8003be2:	2a09      	cmp	r2, #9
 8003be4:	d903      	bls.n	8003bee <_svfiprintf_r+0x1a6>
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0c6      	beq.n	8003b78 <_svfiprintf_r+0x130>
 8003bea:	9105      	str	r1, [sp, #20]
 8003bec:	e7c4      	b.n	8003b78 <_svfiprintf_r+0x130>
 8003bee:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bf2:	4604      	mov	r4, r0
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e7f0      	b.n	8003bda <_svfiprintf_r+0x192>
 8003bf8:	ab03      	add	r3, sp, #12
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	462a      	mov	r2, r5
 8003bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8003c38 <_svfiprintf_r+0x1f0>)
 8003c00:	a904      	add	r1, sp, #16
 8003c02:	4638      	mov	r0, r7
 8003c04:	f3af 8000 	nop.w
 8003c08:	1c42      	adds	r2, r0, #1
 8003c0a:	4606      	mov	r6, r0
 8003c0c:	d1d6      	bne.n	8003bbc <_svfiprintf_r+0x174>
 8003c0e:	89ab      	ldrh	r3, [r5, #12]
 8003c10:	065b      	lsls	r3, r3, #25
 8003c12:	f53f af2d 	bmi.w	8003a70 <_svfiprintf_r+0x28>
 8003c16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003c18:	e72c      	b.n	8003a74 <_svfiprintf_r+0x2c>
 8003c1a:	ab03      	add	r3, sp, #12
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	462a      	mov	r2, r5
 8003c20:	4b05      	ldr	r3, [pc, #20]	@ (8003c38 <_svfiprintf_r+0x1f0>)
 8003c22:	a904      	add	r1, sp, #16
 8003c24:	4638      	mov	r0, r7
 8003c26:	f000 f879 	bl	8003d1c <_printf_i>
 8003c2a:	e7ed      	b.n	8003c08 <_svfiprintf_r+0x1c0>
 8003c2c:	08004384 	.word	0x08004384
 8003c30:	0800438e 	.word	0x0800438e
 8003c34:	00000000 	.word	0x00000000
 8003c38:	08003991 	.word	0x08003991
 8003c3c:	0800438a 	.word	0x0800438a

08003c40 <_printf_common>:
 8003c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c44:	4616      	mov	r6, r2
 8003c46:	4698      	mov	r8, r3
 8003c48:	688a      	ldr	r2, [r1, #8]
 8003c4a:	690b      	ldr	r3, [r1, #16]
 8003c4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c50:	4293      	cmp	r3, r2
 8003c52:	bfb8      	it	lt
 8003c54:	4613      	movlt	r3, r2
 8003c56:	6033      	str	r3, [r6, #0]
 8003c58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003c5c:	4607      	mov	r7, r0
 8003c5e:	460c      	mov	r4, r1
 8003c60:	b10a      	cbz	r2, 8003c66 <_printf_common+0x26>
 8003c62:	3301      	adds	r3, #1
 8003c64:	6033      	str	r3, [r6, #0]
 8003c66:	6823      	ldr	r3, [r4, #0]
 8003c68:	0699      	lsls	r1, r3, #26
 8003c6a:	bf42      	ittt	mi
 8003c6c:	6833      	ldrmi	r3, [r6, #0]
 8003c6e:	3302      	addmi	r3, #2
 8003c70:	6033      	strmi	r3, [r6, #0]
 8003c72:	6825      	ldr	r5, [r4, #0]
 8003c74:	f015 0506 	ands.w	r5, r5, #6
 8003c78:	d106      	bne.n	8003c88 <_printf_common+0x48>
 8003c7a:	f104 0a19 	add.w	sl, r4, #25
 8003c7e:	68e3      	ldr	r3, [r4, #12]
 8003c80:	6832      	ldr	r2, [r6, #0]
 8003c82:	1a9b      	subs	r3, r3, r2
 8003c84:	42ab      	cmp	r3, r5
 8003c86:	dc26      	bgt.n	8003cd6 <_printf_common+0x96>
 8003c88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003c8c:	6822      	ldr	r2, [r4, #0]
 8003c8e:	3b00      	subs	r3, #0
 8003c90:	bf18      	it	ne
 8003c92:	2301      	movne	r3, #1
 8003c94:	0692      	lsls	r2, r2, #26
 8003c96:	d42b      	bmi.n	8003cf0 <_printf_common+0xb0>
 8003c98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003c9c:	4641      	mov	r1, r8
 8003c9e:	4638      	mov	r0, r7
 8003ca0:	47c8      	blx	r9
 8003ca2:	3001      	adds	r0, #1
 8003ca4:	d01e      	beq.n	8003ce4 <_printf_common+0xa4>
 8003ca6:	6823      	ldr	r3, [r4, #0]
 8003ca8:	6922      	ldr	r2, [r4, #16]
 8003caa:	f003 0306 	and.w	r3, r3, #6
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	bf02      	ittt	eq
 8003cb2:	68e5      	ldreq	r5, [r4, #12]
 8003cb4:	6833      	ldreq	r3, [r6, #0]
 8003cb6:	1aed      	subeq	r5, r5, r3
 8003cb8:	68a3      	ldr	r3, [r4, #8]
 8003cba:	bf0c      	ite	eq
 8003cbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cc0:	2500      	movne	r5, #0
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	bfc4      	itt	gt
 8003cc6:	1a9b      	subgt	r3, r3, r2
 8003cc8:	18ed      	addgt	r5, r5, r3
 8003cca:	2600      	movs	r6, #0
 8003ccc:	341a      	adds	r4, #26
 8003cce:	42b5      	cmp	r5, r6
 8003cd0:	d11a      	bne.n	8003d08 <_printf_common+0xc8>
 8003cd2:	2000      	movs	r0, #0
 8003cd4:	e008      	b.n	8003ce8 <_printf_common+0xa8>
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	4652      	mov	r2, sl
 8003cda:	4641      	mov	r1, r8
 8003cdc:	4638      	mov	r0, r7
 8003cde:	47c8      	blx	r9
 8003ce0:	3001      	adds	r0, #1
 8003ce2:	d103      	bne.n	8003cec <_printf_common+0xac>
 8003ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cec:	3501      	adds	r5, #1
 8003cee:	e7c6      	b.n	8003c7e <_printf_common+0x3e>
 8003cf0:	18e1      	adds	r1, r4, r3
 8003cf2:	1c5a      	adds	r2, r3, #1
 8003cf4:	2030      	movs	r0, #48	@ 0x30
 8003cf6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003cfa:	4422      	add	r2, r4
 8003cfc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003d00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003d04:	3302      	adds	r3, #2
 8003d06:	e7c7      	b.n	8003c98 <_printf_common+0x58>
 8003d08:	2301      	movs	r3, #1
 8003d0a:	4622      	mov	r2, r4
 8003d0c:	4641      	mov	r1, r8
 8003d0e:	4638      	mov	r0, r7
 8003d10:	47c8      	blx	r9
 8003d12:	3001      	adds	r0, #1
 8003d14:	d0e6      	beq.n	8003ce4 <_printf_common+0xa4>
 8003d16:	3601      	adds	r6, #1
 8003d18:	e7d9      	b.n	8003cce <_printf_common+0x8e>
	...

08003d1c <_printf_i>:
 8003d1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d20:	7e0f      	ldrb	r7, [r1, #24]
 8003d22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003d24:	2f78      	cmp	r7, #120	@ 0x78
 8003d26:	4691      	mov	r9, r2
 8003d28:	4680      	mov	r8, r0
 8003d2a:	460c      	mov	r4, r1
 8003d2c:	469a      	mov	sl, r3
 8003d2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003d32:	d807      	bhi.n	8003d44 <_printf_i+0x28>
 8003d34:	2f62      	cmp	r7, #98	@ 0x62
 8003d36:	d80a      	bhi.n	8003d4e <_printf_i+0x32>
 8003d38:	2f00      	cmp	r7, #0
 8003d3a:	f000 80d1 	beq.w	8003ee0 <_printf_i+0x1c4>
 8003d3e:	2f58      	cmp	r7, #88	@ 0x58
 8003d40:	f000 80b8 	beq.w	8003eb4 <_printf_i+0x198>
 8003d44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003d4c:	e03a      	b.n	8003dc4 <_printf_i+0xa8>
 8003d4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003d52:	2b15      	cmp	r3, #21
 8003d54:	d8f6      	bhi.n	8003d44 <_printf_i+0x28>
 8003d56:	a101      	add	r1, pc, #4	@ (adr r1, 8003d5c <_printf_i+0x40>)
 8003d58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d5c:	08003db5 	.word	0x08003db5
 8003d60:	08003dc9 	.word	0x08003dc9
 8003d64:	08003d45 	.word	0x08003d45
 8003d68:	08003d45 	.word	0x08003d45
 8003d6c:	08003d45 	.word	0x08003d45
 8003d70:	08003d45 	.word	0x08003d45
 8003d74:	08003dc9 	.word	0x08003dc9
 8003d78:	08003d45 	.word	0x08003d45
 8003d7c:	08003d45 	.word	0x08003d45
 8003d80:	08003d45 	.word	0x08003d45
 8003d84:	08003d45 	.word	0x08003d45
 8003d88:	08003ec7 	.word	0x08003ec7
 8003d8c:	08003df3 	.word	0x08003df3
 8003d90:	08003e81 	.word	0x08003e81
 8003d94:	08003d45 	.word	0x08003d45
 8003d98:	08003d45 	.word	0x08003d45
 8003d9c:	08003ee9 	.word	0x08003ee9
 8003da0:	08003d45 	.word	0x08003d45
 8003da4:	08003df3 	.word	0x08003df3
 8003da8:	08003d45 	.word	0x08003d45
 8003dac:	08003d45 	.word	0x08003d45
 8003db0:	08003e89 	.word	0x08003e89
 8003db4:	6833      	ldr	r3, [r6, #0]
 8003db6:	1d1a      	adds	r2, r3, #4
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6032      	str	r2, [r6, #0]
 8003dbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003dc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e09c      	b.n	8003f02 <_printf_i+0x1e6>
 8003dc8:	6833      	ldr	r3, [r6, #0]
 8003dca:	6820      	ldr	r0, [r4, #0]
 8003dcc:	1d19      	adds	r1, r3, #4
 8003dce:	6031      	str	r1, [r6, #0]
 8003dd0:	0606      	lsls	r6, r0, #24
 8003dd2:	d501      	bpl.n	8003dd8 <_printf_i+0xbc>
 8003dd4:	681d      	ldr	r5, [r3, #0]
 8003dd6:	e003      	b.n	8003de0 <_printf_i+0xc4>
 8003dd8:	0645      	lsls	r5, r0, #25
 8003dda:	d5fb      	bpl.n	8003dd4 <_printf_i+0xb8>
 8003ddc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003de0:	2d00      	cmp	r5, #0
 8003de2:	da03      	bge.n	8003dec <_printf_i+0xd0>
 8003de4:	232d      	movs	r3, #45	@ 0x2d
 8003de6:	426d      	negs	r5, r5
 8003de8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003dec:	4858      	ldr	r0, [pc, #352]	@ (8003f50 <_printf_i+0x234>)
 8003dee:	230a      	movs	r3, #10
 8003df0:	e011      	b.n	8003e16 <_printf_i+0xfa>
 8003df2:	6821      	ldr	r1, [r4, #0]
 8003df4:	6833      	ldr	r3, [r6, #0]
 8003df6:	0608      	lsls	r0, r1, #24
 8003df8:	f853 5b04 	ldr.w	r5, [r3], #4
 8003dfc:	d402      	bmi.n	8003e04 <_printf_i+0xe8>
 8003dfe:	0649      	lsls	r1, r1, #25
 8003e00:	bf48      	it	mi
 8003e02:	b2ad      	uxthmi	r5, r5
 8003e04:	2f6f      	cmp	r7, #111	@ 0x6f
 8003e06:	4852      	ldr	r0, [pc, #328]	@ (8003f50 <_printf_i+0x234>)
 8003e08:	6033      	str	r3, [r6, #0]
 8003e0a:	bf14      	ite	ne
 8003e0c:	230a      	movne	r3, #10
 8003e0e:	2308      	moveq	r3, #8
 8003e10:	2100      	movs	r1, #0
 8003e12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003e16:	6866      	ldr	r6, [r4, #4]
 8003e18:	60a6      	str	r6, [r4, #8]
 8003e1a:	2e00      	cmp	r6, #0
 8003e1c:	db05      	blt.n	8003e2a <_printf_i+0x10e>
 8003e1e:	6821      	ldr	r1, [r4, #0]
 8003e20:	432e      	orrs	r6, r5
 8003e22:	f021 0104 	bic.w	r1, r1, #4
 8003e26:	6021      	str	r1, [r4, #0]
 8003e28:	d04b      	beq.n	8003ec2 <_printf_i+0x1a6>
 8003e2a:	4616      	mov	r6, r2
 8003e2c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e30:	fb03 5711 	mls	r7, r3, r1, r5
 8003e34:	5dc7      	ldrb	r7, [r0, r7]
 8003e36:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e3a:	462f      	mov	r7, r5
 8003e3c:	42bb      	cmp	r3, r7
 8003e3e:	460d      	mov	r5, r1
 8003e40:	d9f4      	bls.n	8003e2c <_printf_i+0x110>
 8003e42:	2b08      	cmp	r3, #8
 8003e44:	d10b      	bne.n	8003e5e <_printf_i+0x142>
 8003e46:	6823      	ldr	r3, [r4, #0]
 8003e48:	07df      	lsls	r7, r3, #31
 8003e4a:	d508      	bpl.n	8003e5e <_printf_i+0x142>
 8003e4c:	6923      	ldr	r3, [r4, #16]
 8003e4e:	6861      	ldr	r1, [r4, #4]
 8003e50:	4299      	cmp	r1, r3
 8003e52:	bfde      	ittt	le
 8003e54:	2330      	movle	r3, #48	@ 0x30
 8003e56:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e5a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003e5e:	1b92      	subs	r2, r2, r6
 8003e60:	6122      	str	r2, [r4, #16]
 8003e62:	f8cd a000 	str.w	sl, [sp]
 8003e66:	464b      	mov	r3, r9
 8003e68:	aa03      	add	r2, sp, #12
 8003e6a:	4621      	mov	r1, r4
 8003e6c:	4640      	mov	r0, r8
 8003e6e:	f7ff fee7 	bl	8003c40 <_printf_common>
 8003e72:	3001      	adds	r0, #1
 8003e74:	d14a      	bne.n	8003f0c <_printf_i+0x1f0>
 8003e76:	f04f 30ff 	mov.w	r0, #4294967295
 8003e7a:	b004      	add	sp, #16
 8003e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e80:	6823      	ldr	r3, [r4, #0]
 8003e82:	f043 0320 	orr.w	r3, r3, #32
 8003e86:	6023      	str	r3, [r4, #0]
 8003e88:	4832      	ldr	r0, [pc, #200]	@ (8003f54 <_printf_i+0x238>)
 8003e8a:	2778      	movs	r7, #120	@ 0x78
 8003e8c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003e90:	6823      	ldr	r3, [r4, #0]
 8003e92:	6831      	ldr	r1, [r6, #0]
 8003e94:	061f      	lsls	r7, r3, #24
 8003e96:	f851 5b04 	ldr.w	r5, [r1], #4
 8003e9a:	d402      	bmi.n	8003ea2 <_printf_i+0x186>
 8003e9c:	065f      	lsls	r7, r3, #25
 8003e9e:	bf48      	it	mi
 8003ea0:	b2ad      	uxthmi	r5, r5
 8003ea2:	6031      	str	r1, [r6, #0]
 8003ea4:	07d9      	lsls	r1, r3, #31
 8003ea6:	bf44      	itt	mi
 8003ea8:	f043 0320 	orrmi.w	r3, r3, #32
 8003eac:	6023      	strmi	r3, [r4, #0]
 8003eae:	b11d      	cbz	r5, 8003eb8 <_printf_i+0x19c>
 8003eb0:	2310      	movs	r3, #16
 8003eb2:	e7ad      	b.n	8003e10 <_printf_i+0xf4>
 8003eb4:	4826      	ldr	r0, [pc, #152]	@ (8003f50 <_printf_i+0x234>)
 8003eb6:	e7e9      	b.n	8003e8c <_printf_i+0x170>
 8003eb8:	6823      	ldr	r3, [r4, #0]
 8003eba:	f023 0320 	bic.w	r3, r3, #32
 8003ebe:	6023      	str	r3, [r4, #0]
 8003ec0:	e7f6      	b.n	8003eb0 <_printf_i+0x194>
 8003ec2:	4616      	mov	r6, r2
 8003ec4:	e7bd      	b.n	8003e42 <_printf_i+0x126>
 8003ec6:	6833      	ldr	r3, [r6, #0]
 8003ec8:	6825      	ldr	r5, [r4, #0]
 8003eca:	6961      	ldr	r1, [r4, #20]
 8003ecc:	1d18      	adds	r0, r3, #4
 8003ece:	6030      	str	r0, [r6, #0]
 8003ed0:	062e      	lsls	r6, r5, #24
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	d501      	bpl.n	8003eda <_printf_i+0x1be>
 8003ed6:	6019      	str	r1, [r3, #0]
 8003ed8:	e002      	b.n	8003ee0 <_printf_i+0x1c4>
 8003eda:	0668      	lsls	r0, r5, #25
 8003edc:	d5fb      	bpl.n	8003ed6 <_printf_i+0x1ba>
 8003ede:	8019      	strh	r1, [r3, #0]
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	6123      	str	r3, [r4, #16]
 8003ee4:	4616      	mov	r6, r2
 8003ee6:	e7bc      	b.n	8003e62 <_printf_i+0x146>
 8003ee8:	6833      	ldr	r3, [r6, #0]
 8003eea:	1d1a      	adds	r2, r3, #4
 8003eec:	6032      	str	r2, [r6, #0]
 8003eee:	681e      	ldr	r6, [r3, #0]
 8003ef0:	6862      	ldr	r2, [r4, #4]
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	4630      	mov	r0, r6
 8003ef6:	f7fc f97b 	bl	80001f0 <memchr>
 8003efa:	b108      	cbz	r0, 8003f00 <_printf_i+0x1e4>
 8003efc:	1b80      	subs	r0, r0, r6
 8003efe:	6060      	str	r0, [r4, #4]
 8003f00:	6863      	ldr	r3, [r4, #4]
 8003f02:	6123      	str	r3, [r4, #16]
 8003f04:	2300      	movs	r3, #0
 8003f06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f0a:	e7aa      	b.n	8003e62 <_printf_i+0x146>
 8003f0c:	6923      	ldr	r3, [r4, #16]
 8003f0e:	4632      	mov	r2, r6
 8003f10:	4649      	mov	r1, r9
 8003f12:	4640      	mov	r0, r8
 8003f14:	47d0      	blx	sl
 8003f16:	3001      	adds	r0, #1
 8003f18:	d0ad      	beq.n	8003e76 <_printf_i+0x15a>
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	079b      	lsls	r3, r3, #30
 8003f1e:	d413      	bmi.n	8003f48 <_printf_i+0x22c>
 8003f20:	68e0      	ldr	r0, [r4, #12]
 8003f22:	9b03      	ldr	r3, [sp, #12]
 8003f24:	4298      	cmp	r0, r3
 8003f26:	bfb8      	it	lt
 8003f28:	4618      	movlt	r0, r3
 8003f2a:	e7a6      	b.n	8003e7a <_printf_i+0x15e>
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	4632      	mov	r2, r6
 8003f30:	4649      	mov	r1, r9
 8003f32:	4640      	mov	r0, r8
 8003f34:	47d0      	blx	sl
 8003f36:	3001      	adds	r0, #1
 8003f38:	d09d      	beq.n	8003e76 <_printf_i+0x15a>
 8003f3a:	3501      	adds	r5, #1
 8003f3c:	68e3      	ldr	r3, [r4, #12]
 8003f3e:	9903      	ldr	r1, [sp, #12]
 8003f40:	1a5b      	subs	r3, r3, r1
 8003f42:	42ab      	cmp	r3, r5
 8003f44:	dcf2      	bgt.n	8003f2c <_printf_i+0x210>
 8003f46:	e7eb      	b.n	8003f20 <_printf_i+0x204>
 8003f48:	2500      	movs	r5, #0
 8003f4a:	f104 0619 	add.w	r6, r4, #25
 8003f4e:	e7f5      	b.n	8003f3c <_printf_i+0x220>
 8003f50:	08004395 	.word	0x08004395
 8003f54:	080043a6 	.word	0x080043a6

08003f58 <memmove>:
 8003f58:	4288      	cmp	r0, r1
 8003f5a:	b510      	push	{r4, lr}
 8003f5c:	eb01 0402 	add.w	r4, r1, r2
 8003f60:	d902      	bls.n	8003f68 <memmove+0x10>
 8003f62:	4284      	cmp	r4, r0
 8003f64:	4623      	mov	r3, r4
 8003f66:	d807      	bhi.n	8003f78 <memmove+0x20>
 8003f68:	1e43      	subs	r3, r0, #1
 8003f6a:	42a1      	cmp	r1, r4
 8003f6c:	d008      	beq.n	8003f80 <memmove+0x28>
 8003f6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f76:	e7f8      	b.n	8003f6a <memmove+0x12>
 8003f78:	4402      	add	r2, r0
 8003f7a:	4601      	mov	r1, r0
 8003f7c:	428a      	cmp	r2, r1
 8003f7e:	d100      	bne.n	8003f82 <memmove+0x2a>
 8003f80:	bd10      	pop	{r4, pc}
 8003f82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f8a:	e7f7      	b.n	8003f7c <memmove+0x24>

08003f8c <_sbrk_r>:
 8003f8c:	b538      	push	{r3, r4, r5, lr}
 8003f8e:	4d06      	ldr	r5, [pc, #24]	@ (8003fa8 <_sbrk_r+0x1c>)
 8003f90:	2300      	movs	r3, #0
 8003f92:	4604      	mov	r4, r0
 8003f94:	4608      	mov	r0, r1
 8003f96:	602b      	str	r3, [r5, #0]
 8003f98:	f7fc ff02 	bl	8000da0 <_sbrk>
 8003f9c:	1c43      	adds	r3, r0, #1
 8003f9e:	d102      	bne.n	8003fa6 <_sbrk_r+0x1a>
 8003fa0:	682b      	ldr	r3, [r5, #0]
 8003fa2:	b103      	cbz	r3, 8003fa6 <_sbrk_r+0x1a>
 8003fa4:	6023      	str	r3, [r4, #0]
 8003fa6:	bd38      	pop	{r3, r4, r5, pc}
 8003fa8:	200004b8 	.word	0x200004b8

08003fac <_realloc_r>:
 8003fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fb0:	4607      	mov	r7, r0
 8003fb2:	4614      	mov	r4, r2
 8003fb4:	460d      	mov	r5, r1
 8003fb6:	b921      	cbnz	r1, 8003fc2 <_realloc_r+0x16>
 8003fb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fbc:	4611      	mov	r1, r2
 8003fbe:	f7ff bc5b 	b.w	8003878 <_malloc_r>
 8003fc2:	b92a      	cbnz	r2, 8003fd0 <_realloc_r+0x24>
 8003fc4:	f7ff fbec 	bl	80037a0 <_free_r>
 8003fc8:	4625      	mov	r5, r4
 8003fca:	4628      	mov	r0, r5
 8003fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fd0:	f000 f81a 	bl	8004008 <_malloc_usable_size_r>
 8003fd4:	4284      	cmp	r4, r0
 8003fd6:	4606      	mov	r6, r0
 8003fd8:	d802      	bhi.n	8003fe0 <_realloc_r+0x34>
 8003fda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003fde:	d8f4      	bhi.n	8003fca <_realloc_r+0x1e>
 8003fe0:	4621      	mov	r1, r4
 8003fe2:	4638      	mov	r0, r7
 8003fe4:	f7ff fc48 	bl	8003878 <_malloc_r>
 8003fe8:	4680      	mov	r8, r0
 8003fea:	b908      	cbnz	r0, 8003ff0 <_realloc_r+0x44>
 8003fec:	4645      	mov	r5, r8
 8003fee:	e7ec      	b.n	8003fca <_realloc_r+0x1e>
 8003ff0:	42b4      	cmp	r4, r6
 8003ff2:	4622      	mov	r2, r4
 8003ff4:	4629      	mov	r1, r5
 8003ff6:	bf28      	it	cs
 8003ff8:	4632      	movcs	r2, r6
 8003ffa:	f7ff fbc3 	bl	8003784 <memcpy>
 8003ffe:	4629      	mov	r1, r5
 8004000:	4638      	mov	r0, r7
 8004002:	f7ff fbcd 	bl	80037a0 <_free_r>
 8004006:	e7f1      	b.n	8003fec <_realloc_r+0x40>

08004008 <_malloc_usable_size_r>:
 8004008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800400c:	1f18      	subs	r0, r3, #4
 800400e:	2b00      	cmp	r3, #0
 8004010:	bfbc      	itt	lt
 8004012:	580b      	ldrlt	r3, [r1, r0]
 8004014:	18c0      	addlt	r0, r0, r3
 8004016:	4770      	bx	lr

08004018 <_init>:
 8004018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800401a:	bf00      	nop
 800401c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800401e:	bc08      	pop	{r3}
 8004020:	469e      	mov	lr, r3
 8004022:	4770      	bx	lr

08004024 <_fini>:
 8004024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004026:	bf00      	nop
 8004028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800402a:	bc08      	pop	{r3}
 800402c:	469e      	mov	lr, r3
 800402e:	4770      	bx	lr
