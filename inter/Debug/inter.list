
inter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000659c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000890  0800673c  0800673c  0000773c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fcc  08006fcc  0000809c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006fcc  08006fcc  00007fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fd4  08006fd4  0000809c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fd4  08006fd4  00007fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006fd8  08006fd8  00007fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  08006fdc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000610  2000009c  08007078  0000809c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006ac  08007078  000086ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a8f1  00000000  00000000  000080cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f7a  00000000  00000000  000129bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  00014938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006ae  00000000  00000000  00015210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ea6  00000000  00000000  000158be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b464  00000000  00000000  0002c764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000887d8  00000000  00000000  00037bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c03a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e0c  00000000  00000000  000c03e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003f  00000000  00000000  000c31f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000009c 	.word	0x2000009c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006724 	.word	0x08006724

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a0 	.word	0x200000a0
 80001dc:	08006724 	.word	0x08006724

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <HAL_UART_RxCpltCallback>:

/**
 * @brief Обработчик прерывания USART1
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a09      	ldr	r2, [pc, #36]	@ (80005f0 <HAL_UART_RxCpltCallback+0x34>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d103      	bne.n	80005d6 <HAL_UART_RxCpltCallback+0x1a>
        SecureUart_HandleUartRxEvent(&TxContext);
 80005ce:	4809      	ldr	r0, [pc, #36]	@ (80005f4 <HAL_UART_RxCpltCallback+0x38>)
 80005d0:	f000 fe6c 	bl	80012ac <SecureUart_HandleUartRxEvent>
    }
    else if (huart->Instance == USART6) {
        SecureUart_HandleUartRxEvent(&RxContext);
    }
}
 80005d4:	e007      	b.n	80005e6 <HAL_UART_RxCpltCallback+0x2a>
    else if (huart->Instance == USART6) {
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a07      	ldr	r2, [pc, #28]	@ (80005f8 <HAL_UART_RxCpltCallback+0x3c>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d102      	bne.n	80005e6 <HAL_UART_RxCpltCallback+0x2a>
        SecureUart_HandleUartRxEvent(&RxContext);
 80005e0:	4806      	ldr	r0, [pc, #24]	@ (80005fc <HAL_UART_RxCpltCallback+0x40>)
 80005e2:	f000 fe63 	bl	80012ac <SecureUart_HandleUartRxEvent>
}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40011000 	.word	0x40011000
 80005f4:	20000310 	.word	0x20000310
 80005f8:	40011400 	.word	0x40011400
 80005fc:	20000434 	.word	0x20000434

08000600 <TestDecryption>:

void TestDecryption() {
 8000600:	b590      	push	{r4, r7, lr}
 8000602:	b0b3      	sub	sp, #204	@ 0xcc
 8000604:	af00      	add	r7, sp, #0
    uint8_t known_plaintext[] = "Test message";
 8000606:	4b2c      	ldr	r3, [pc, #176]	@ (80006b8 <TestDecryption+0xb8>)
 8000608:	f107 04b0 	add.w	r4, r7, #176	@ 0xb0
 800060c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800060e:	c407      	stmia	r4!, {r0, r1, r2}
 8000610:	7023      	strb	r3, [r4, #0]
    uint8_t known_ciphertext[32];
    uint8_t decrypted[32];

    // Шифрование
    SpeckContext test_ctx;
    Speck_Init(&test_ctx, encryptionKey);
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	4929      	ldr	r1, [pc, #164]	@ (80006bc <TestDecryption+0xbc>)
 8000616:	4618      	mov	r0, r3
 8000618:	f001 ff52 	bl	80024c0 <Speck_Init>

    SecureUart_DebugPrint(&huart2, "Тестовый ключ: ");
 800061c:	4928      	ldr	r1, [pc, #160]	@ (80006c0 <TestDecryption+0xc0>)
 800061e:	4829      	ldr	r0, [pc, #164]	@ (80006c4 <TestDecryption+0xc4>)
 8000620:	f000 fe98 	bl	8001354 <SecureUart_DebugPrint>
    SecureUart_PrintHexBuffer(&huart2, "", encryptionKey, 16);
 8000624:	2310      	movs	r3, #16
 8000626:	4a25      	ldr	r2, [pc, #148]	@ (80006bc <TestDecryption+0xbc>)
 8000628:	4927      	ldr	r1, [pc, #156]	@ (80006c8 <TestDecryption+0xc8>)
 800062a:	4826      	ldr	r0, [pc, #152]	@ (80006c4 <TestDecryption+0xc4>)
 800062c:	f000 fed0 	bl	80013d0 <SecureUart_PrintHexBuffer>

    size_t enc_len = Speck_Encrypt_Simple(&test_ctx, known_plaintext, strlen((char*)known_plaintext), known_ciphertext);
 8000630:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff fdd3 	bl	80001e0 <strlen>
 800063a:	4602      	mov	r2, r0
 800063c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000640:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 8000644:	1d38      	adds	r0, r7, #4
 8000646:	f002 f8c2 	bl	80027ce <Speck_Encrypt_Simple>
 800064a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

    // Расшифрование
    size_t dec_len = Speck_Decrypt_Simple(&test_ctx, known_ciphertext, enc_len, decrypted);
 800064e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000652:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8000656:	1d38      	adds	r0, r7, #4
 8000658:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800065c:	f002 f91c 	bl	8002898 <Speck_Decrypt_Simple>
 8000660:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    // Проверка
    decrypted[dec_len] = 0; // Добавляем нулевой символ для вывода как строки
 8000664:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8000668:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800066c:	4413      	add	r3, r2
 800066e:	2200      	movs	r2, #0
 8000670:	701a      	strb	r2, [r3, #0]

    SecureUart_DebugPrint(&huart2, "Тест расшифрования:\r\n");
 8000672:	4916      	ldr	r1, [pc, #88]	@ (80006cc <TestDecryption+0xcc>)
 8000674:	4813      	ldr	r0, [pc, #76]	@ (80006c4 <TestDecryption+0xc4>)
 8000676:	f000 fe6d 	bl	8001354 <SecureUart_DebugPrint>
    SecureUart_DebugPrint(&huart2, "Оригинал: %s\r\n", known_plaintext);
 800067a:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800067e:	461a      	mov	r2, r3
 8000680:	4913      	ldr	r1, [pc, #76]	@ (80006d0 <TestDecryption+0xd0>)
 8000682:	4810      	ldr	r0, [pc, #64]	@ (80006c4 <TestDecryption+0xc4>)
 8000684:	f000 fe66 	bl	8001354 <SecureUart_DebugPrint>
    SecureUart_DebugPrint(&huart2, "Расшифровано: %s\r\n", decrypted);
 8000688:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800068c:	461a      	mov	r2, r3
 800068e:	4911      	ldr	r1, [pc, #68]	@ (80006d4 <TestDecryption+0xd4>)
 8000690:	480c      	ldr	r0, [pc, #48]	@ (80006c4 <TestDecryption+0xc4>)
 8000692:	f000 fe5f 	bl	8001354 <SecureUart_DebugPrint>
    SecureUart_DebugPrint(&huart2, "Длина оригинала: %d, длина расшифрованного: %d\r\n",
 8000696:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff fda0 	bl	80001e0 <strlen>
 80006a0:	4602      	mov	r2, r0
 80006a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80006a6:	490c      	ldr	r1, [pc, #48]	@ (80006d8 <TestDecryption+0xd8>)
 80006a8:	4806      	ldr	r0, [pc, #24]	@ (80006c4 <TestDecryption+0xc4>)
 80006aa:	f000 fe53 	bl	8001354 <SecureUart_DebugPrint>
                         strlen((char*)known_plaintext), dec_len);
}
 80006ae:	bf00      	nop
 80006b0:	37cc      	adds	r7, #204	@ 0xcc
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd90      	pop	{r4, r7, pc}
 80006b6:	bf00      	nop
 80006b8:	08006810 	.word	0x08006810
 80006bc:	20000000 	.word	0x20000000
 80006c0:	0800673c 	.word	0x0800673c
 80006c4:	20000100 	.word	0x20000100
 80006c8:	08006758 	.word	0x08006758
 80006cc:	0800675c 	.word	0x0800675c
 80006d0:	08006784 	.word	0x08006784
 80006d4:	0800679c 	.word	0x0800679c
 80006d8:	080067bc 	.word	0x080067bc

080006dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80006e2:	f002 fc4b 	bl	8002f7c <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80006e6:	f000 f8a9 	bl	800083c <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80006ea:	f000 f973 	bl	80009d4 <MX_GPIO_Init>
    MX_DMA_Init();
 80006ee:	f000 f92b 	bl	8000948 <MX_DMA_Init>
    MX_USART1_UART_Init();
 80006f2:	f000 f8ab 	bl	800084c <MX_USART1_UART_Init>
    MX_USART2_UART_Init();
 80006f6:	f000 f8d3 	bl	80008a0 <MX_USART2_UART_Init>
    MX_USART6_UART_Init();
 80006fa:	f000 f8fb 	bl	80008f4 <MX_USART6_UART_Init>

    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80006fe:	4b3a      	ldr	r3, [pc, #232]	@ (80007e8 <main+0x10c>)
 8000700:	68db      	ldr	r3, [r3, #12]
 8000702:	4a39      	ldr	r2, [pc, #228]	@ (80007e8 <main+0x10c>)
 8000704:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000708:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;
 800070a:	4b38      	ldr	r3, [pc, #224]	@ (80007ec <main+0x110>)
 800070c:	2200      	movs	r2, #0
 800070e:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000710:	4b36      	ldr	r3, [pc, #216]	@ (80007ec <main+0x110>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a35      	ldr	r2, [pc, #212]	@ (80007ec <main+0x110>)
 8000716:	f043 0301 	orr.w	r3, r3, #1
 800071a:	6013      	str	r3, [r2, #0]

    /* USER CODE BEGIN 2 */
    // Инициализация контекстов защищенного UART
    SecureUart_Init(&TxContext, &huart1, &huart2);
 800071c:	4a34      	ldr	r2, [pc, #208]	@ (80007f0 <main+0x114>)
 800071e:	4935      	ldr	r1, [pc, #212]	@ (80007f4 <main+0x118>)
 8000720:	4835      	ldr	r0, [pc, #212]	@ (80007f8 <main+0x11c>)
 8000722:	f000 f9cb 	bl	8000abc <SecureUart_Init>
    SecureUart_Init(&RxContext, &huart6, &huart2);
 8000726:	4a32      	ldr	r2, [pc, #200]	@ (80007f0 <main+0x114>)
 8000728:	4934      	ldr	r1, [pc, #208]	@ (80007fc <main+0x120>)
 800072a:	4835      	ldr	r0, [pc, #212]	@ (8000800 <main+0x124>)
 800072c:	f000 f9c6 	bl	8000abc <SecureUart_Init>

    // Включение шифрования и MAC
    SecureUart_EnableEncryption(&TxContext, encryptionKey);
 8000730:	4934      	ldr	r1, [pc, #208]	@ (8000804 <main+0x128>)
 8000732:	4831      	ldr	r0, [pc, #196]	@ (80007f8 <main+0x11c>)
 8000734:	f000 f9f6 	bl	8000b24 <SecureUart_EnableEncryption>
    SecureUart_EnableEncryption(&RxContext, encryptionKey);
 8000738:	4932      	ldr	r1, [pc, #200]	@ (8000804 <main+0x128>)
 800073a:	4831      	ldr	r0, [pc, #196]	@ (8000800 <main+0x124>)
 800073c:	f000 f9f2 	bl	8000b24 <SecureUart_EnableEncryption>

    SecureUart_EnableMAC(&TxContext, macKey);
 8000740:	4931      	ldr	r1, [pc, #196]	@ (8000808 <main+0x12c>)
 8000742:	482d      	ldr	r0, [pc, #180]	@ (80007f8 <main+0x11c>)
 8000744:	f000 fa0a 	bl	8000b5c <SecureUart_EnableMAC>
    SecureUart_EnableMAC(&RxContext, macKey);
 8000748:	492f      	ldr	r1, [pc, #188]	@ (8000808 <main+0x12c>)
 800074a:	482d      	ldr	r0, [pc, #180]	@ (8000800 <main+0x124>)
 800074c:	f000 fa06 	bl	8000b5c <SecureUart_EnableMAC>

    Speck_Init(&TxContext.speck_ctx, encryptionKey);
 8000750:	492c      	ldr	r1, [pc, #176]	@ (8000804 <main+0x128>)
 8000752:	482e      	ldr	r0, [pc, #184]	@ (800080c <main+0x130>)
 8000754:	f001 feb4 	bl	80024c0 <Speck_Init>
    Speck_Init(&RxContext.speck_ctx, encryptionKey);
 8000758:	492a      	ldr	r1, [pc, #168]	@ (8000804 <main+0x128>)
 800075a:	482d      	ldr	r0, [pc, #180]	@ (8000810 <main+0x134>)
 800075c:	f001 feb0 	bl	80024c0 <Speck_Init>

    // Запуск приема в режиме DMA с IDLE прерыванием
    SecureUart_StartReceive(&TxContext);
 8000760:	4825      	ldr	r0, [pc, #148]	@ (80007f8 <main+0x11c>)
 8000762:	f000 fa19 	bl	8000b98 <SecureUart_StartReceive>
    SecureUart_StartReceive(&RxContext);
 8000766:	4826      	ldr	r0, [pc, #152]	@ (8000800 <main+0x124>)
 8000768:	f000 fa16 	bl	8000b98 <SecureUart_StartReceive>

    SecureUart_DebugPrint(&huart2, "====================================\r\n");
 800076c:	4929      	ldr	r1, [pc, #164]	@ (8000814 <main+0x138>)
 800076e:	4820      	ldr	r0, [pc, #128]	@ (80007f0 <main+0x114>)
 8000770:	f000 fdf0 	bl	8001354 <SecureUart_DebugPrint>
    SecureUart_DebugPrint(&huart2, "   Защищенный UART протокол\r\n");
 8000774:	4928      	ldr	r1, [pc, #160]	@ (8000818 <main+0x13c>)
 8000776:	481e      	ldr	r0, [pc, #120]	@ (80007f0 <main+0x114>)
 8000778:	f000 fdec 	bl	8001354 <SecureUart_DebugPrint>
    SecureUart_DebugPrint(&huart2, "====================================\r\n");
 800077c:	4925      	ldr	r1, [pc, #148]	@ (8000814 <main+0x138>)
 800077e:	481c      	ldr	r0, [pc, #112]	@ (80007f0 <main+0x114>)
 8000780:	f000 fde8 	bl	8001354 <SecureUart_DebugPrint>
    SecureUart_DebugPrint(&huart2, "USART1 -> USART6: передача данных\r\n");
 8000784:	4925      	ldr	r1, [pc, #148]	@ (800081c <main+0x140>)
 8000786:	481a      	ldr	r0, [pc, #104]	@ (80007f0 <main+0x114>)
 8000788:	f000 fde4 	bl	8001354 <SecureUart_DebugPrint>
    SecureUart_DebugPrint(&huart2, "USART2: отладочный вывод\r\n");
 800078c:	4924      	ldr	r1, [pc, #144]	@ (8000820 <main+0x144>)
 800078e:	4818      	ldr	r0, [pc, #96]	@ (80007f0 <main+0x114>)
 8000790:	f000 fde0 	bl	8001354 <SecureUart_DebugPrint>
    SecureUart_DebugPrint(&huart2, "Шифрование: Speck 64/128\r\n");
 8000794:	4923      	ldr	r1, [pc, #140]	@ (8000824 <main+0x148>)
 8000796:	4816      	ldr	r0, [pc, #88]	@ (80007f0 <main+0x114>)
 8000798:	f000 fddc 	bl	8001354 <SecureUart_DebugPrint>
    SecureUart_DebugPrint(&huart2, "MAC: SipHash 2-4\r\n");
 800079c:	4922      	ldr	r1, [pc, #136]	@ (8000828 <main+0x14c>)
 800079e:	4814      	ldr	r0, [pc, #80]	@ (80007f0 <main+0x114>)
 80007a0:	f000 fdd8 	bl	8001354 <SecureUart_DebugPrint>
    SecureUart_DebugPrint(&huart2, "====================================\r\n\r\n");
 80007a4:	4921      	ldr	r1, [pc, #132]	@ (800082c <main+0x150>)
 80007a6:	4812      	ldr	r0, [pc, #72]	@ (80007f0 <main+0x114>)
 80007a8:	f000 fdd4 	bl	8001354 <SecureUart_DebugPrint>

    TestDecryption();
 80007ac:	f7ff ff28 	bl	8000600 <TestDecryption>
    while (1)
    {
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
    	uint32_t start = DWT->CYCCNT;
 80007b0:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <main+0x110>)
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	607b      	str	r3, [r7, #4]

        // Отправка тестового сообщения
        SecureUart_Send(&TxContext, testData, strlen((char*)testData));
 80007b6:	481e      	ldr	r0, [pc, #120]	@ (8000830 <main+0x154>)
 80007b8:	f7ff fd12 	bl	80001e0 <strlen>
 80007bc:	4603      	mov	r3, r0
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	461a      	mov	r2, r3
 80007c2:	491b      	ldr	r1, [pc, #108]	@ (8000830 <main+0x154>)
 80007c4:	480c      	ldr	r0, [pc, #48]	@ (80007f8 <main+0x11c>)
 80007c6:	f000 fa5d 	bl	8000c84 <SecureUart_Send>

        uint32_t cycles = DWT->CYCCNT - start;
 80007ca:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <main+0x110>)
 80007cc:	685a      	ldr	r2, [r3, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	603b      	str	r3, [r7, #0]

    	SecureUart_DebugPrint(&huart2, "Операция заняла %lu тактов\r\n", cycles);
 80007d4:	683a      	ldr	r2, [r7, #0]
 80007d6:	4917      	ldr	r1, [pc, #92]	@ (8000834 <main+0x158>)
 80007d8:	4805      	ldr	r0, [pc, #20]	@ (80007f0 <main+0x114>)
 80007da:	f000 fdbb 	bl	8001354 <SecureUart_DebugPrint>

        // Задержка 20 секунд между отправками
        HAL_Delay(200000);
 80007de:	4816      	ldr	r0, [pc, #88]	@ (8000838 <main+0x15c>)
 80007e0:	f002 fc3e 	bl	8003060 <HAL_Delay>
    {
 80007e4:	bf00      	nop
 80007e6:	e7e3      	b.n	80007b0 <main+0xd4>
 80007e8:	e000edf0 	.word	0xe000edf0
 80007ec:	e0001000 	.word	0xe0001000
 80007f0:	20000100 	.word	0x20000100
 80007f4:	200000b8 	.word	0x200000b8
 80007f8:	20000310 	.word	0x20000310
 80007fc:	20000148 	.word	0x20000148
 8000800:	20000434 	.word	0x20000434
 8000804:	20000000 	.word	0x20000000
 8000808:	20000010 	.word	0x20000010
 800080c:	200003b4 	.word	0x200003b4
 8000810:	200004d8 	.word	0x200004d8
 8000814:	08006820 	.word	0x08006820
 8000818:	08006848 	.word	0x08006848
 800081c:	08006878 	.word	0x08006878
 8000820:	080068ac 	.word	0x080068ac
 8000824:	080068d8 	.word	0x080068d8
 8000828:	08006900 	.word	0x08006900
 800082c:	08006914 	.word	0x08006914
 8000830:	20000020 	.word	0x20000020
 8000834:	08006940 	.word	0x08006940
 8000838:	00030d40 	.word	0x00030d40

0800083c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
    // Конфигурация системных часов
    // (код сгенерирован CubeMX)
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
	...

0800084c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
    huart1.Instance = USART1;
 8000850:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <MX_USART1_UART_Init+0x4c>)
 8000852:	4a12      	ldr	r2, [pc, #72]	@ (800089c <MX_USART1_UART_Init+0x50>)
 8000854:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8000856:	4b10      	ldr	r3, [pc, #64]	@ (8000898 <MX_USART1_UART_Init+0x4c>)
 8000858:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800085c:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <MX_USART1_UART_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b0c      	ldr	r3, [pc, #48]	@ (8000898 <MX_USART1_UART_Init+0x4c>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 800086a:	4b0b      	ldr	r3, [pc, #44]	@ (8000898 <MX_USART1_UART_Init+0x4c>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <MX_USART1_UART_Init+0x4c>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b08      	ldr	r3, [pc, #32]	@ (8000898 <MX_USART1_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <MX_USART1_UART_Init+0x4c>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	@ (8000898 <MX_USART1_UART_Init+0x4c>)
 8000884:	f003 faf6 	bl	8003e74 <HAL_UART_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_USART1_UART_Init+0x46>
    {
        Error_Handler();
 800088e:	f000 f90f 	bl	8000ab0 <Error_Handler>
    }
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200000b8 	.word	0x200000b8
 800089c:	40011000 	.word	0x40011000

080008a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 80008a4:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <MX_USART2_UART_Init+0x4c>)
 80008a6:	4a12      	ldr	r2, [pc, #72]	@ (80008f0 <MX_USART2_UART_Init+0x50>)
 80008a8:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 80008aa:	4b10      	ldr	r3, [pc, #64]	@ (80008ec <MX_USART2_UART_Init+0x4c>)
 80008ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008b0:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <MX_USART2_UART_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <MX_USART2_UART_Init+0x4c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 80008be:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <MX_USART2_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 80008c4:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <MX_USART2_UART_Init+0x4c>)
 80008c6:	220c      	movs	r2, #12
 80008c8:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ca:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <MX_USART2_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d0:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <MX_USART2_UART_Init+0x4c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d6:	4805      	ldr	r0, [pc, #20]	@ (80008ec <MX_USART2_UART_Init+0x4c>)
 80008d8:	f003 facc 	bl	8003e74 <HAL_UART_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_USART2_UART_Init+0x46>
    {
        Error_Handler();
 80008e2:	f000 f8e5 	bl	8000ab0 <Error_Handler>
    }
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000100 	.word	0x20000100
 80008f0:	40004400 	.word	0x40004400

080008f4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
    huart6.Instance = USART6;
 80008f8:	4b11      	ldr	r3, [pc, #68]	@ (8000940 <MX_USART6_UART_Init+0x4c>)
 80008fa:	4a12      	ldr	r2, [pc, #72]	@ (8000944 <MX_USART6_UART_Init+0x50>)
 80008fc:	601a      	str	r2, [r3, #0]
    huart6.Init.BaudRate = 115200;
 80008fe:	4b10      	ldr	r3, [pc, #64]	@ (8000940 <MX_USART6_UART_Init+0x4c>)
 8000900:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000904:	605a      	str	r2, [r3, #4]
    huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	4b0e      	ldr	r3, [pc, #56]	@ (8000940 <MX_USART6_UART_Init+0x4c>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
    huart6.Init.StopBits = UART_STOPBITS_1;
 800090c:	4b0c      	ldr	r3, [pc, #48]	@ (8000940 <MX_USART6_UART_Init+0x4c>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
    huart6.Init.Parity = UART_PARITY_NONE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	@ (8000940 <MX_USART6_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
    huart6.Init.Mode = UART_MODE_TX_RX;
 8000918:	4b09      	ldr	r3, [pc, #36]	@ (8000940 <MX_USART6_UART_Init+0x4c>)
 800091a:	220c      	movs	r2, #12
 800091c:	615a      	str	r2, [r3, #20]
    huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	4b08      	ldr	r3, [pc, #32]	@ (8000940 <MX_USART6_UART_Init+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
    huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000924:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <MX_USART6_UART_Init+0x4c>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart6) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	@ (8000940 <MX_USART6_UART_Init+0x4c>)
 800092c:	f003 faa2 	bl	8003e74 <HAL_UART_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USART6_UART_Init+0x46>
    {
        Error_Handler();
 8000936:	f000 f8bb 	bl	8000ab0 <Error_Handler>
    }
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000148 	.word	0x20000148
 8000944:	40011400 	.word	0x40011400

08000948 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
    /* DMA controller clock enable */
    __HAL_RCC_DMA2_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b1f      	ldr	r3, [pc, #124]	@ (80009d0 <MX_DMA_Init+0x88>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	4a1e      	ldr	r2, [pc, #120]	@ (80009d0 <MX_DMA_Init+0x88>)
 8000958:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800095c:	6313      	str	r3, [r2, #48]	@ 0x30
 800095e:	4b1c      	ldr	r3, [pc, #112]	@ (80009d0 <MX_DMA_Init+0x88>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_DMA1_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	4b18      	ldr	r3, [pc, #96]	@ (80009d0 <MX_DMA_Init+0x88>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a17      	ldr	r2, [pc, #92]	@ (80009d0 <MX_DMA_Init+0x88>)
 8000974:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b15      	ldr	r3, [pc, #84]	@ (80009d0 <MX_DMA_Init+0x88>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]

    /* DMA interrupt init */
    /* DMA1_Stream0_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	2100      	movs	r1, #0
 800098a:	200b      	movs	r0, #11
 800098c:	f002 fc67 	bl	800325e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000990:	200b      	movs	r0, #11
 8000992:	f002 fc80 	bl	8003296 <HAL_NVIC_EnableIRQ>
    /* DMA1_Stream1_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2100      	movs	r1, #0
 800099a:	200c      	movs	r0, #12
 800099c:	f002 fc5f 	bl	800325e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80009a0:	200c      	movs	r0, #12
 80009a2:	f002 fc78 	bl	8003296 <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream1_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	2039      	movs	r0, #57	@ 0x39
 80009ac:	f002 fc57 	bl	800325e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80009b0:	2039      	movs	r0, #57	@ 0x39
 80009b2:	f002 fc70 	bl	8003296 <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream6_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2100      	movs	r1, #0
 80009ba:	2045      	movs	r0, #69	@ 0x45
 80009bc:	f002 fc4f 	bl	800325e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80009c0:	2045      	movs	r0, #69	@ 0x45
 80009c2:	f002 fc68 	bl	8003296 <HAL_NVIC_EnableIRQ>
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800

080009d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	@ 0x28
 80009d8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b2d      	ldr	r3, [pc, #180]	@ (8000aa4 <MX_GPIO_Init+0xd0>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	4a2c      	ldr	r2, [pc, #176]	@ (8000aa4 <MX_GPIO_Init+0xd0>)
 80009f4:	f043 0304 	orr.w	r3, r3, #4
 80009f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fa:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa4 <MX_GPIO_Init+0xd0>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	f003 0304 	and.w	r3, r3, #4
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b26      	ldr	r3, [pc, #152]	@ (8000aa4 <MX_GPIO_Init+0xd0>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	4a25      	ldr	r2, [pc, #148]	@ (8000aa4 <MX_GPIO_Init+0xd0>)
 8000a10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a16:	4b23      	ldr	r3, [pc, #140]	@ (8000aa4 <MX_GPIO_Init+0xd0>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa4 <MX_GPIO_Init+0xd0>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a1e      	ldr	r2, [pc, #120]	@ (8000aa4 <MX_GPIO_Init+0xd0>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a32:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa4 <MX_GPIO_Init+0xd0>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b18      	ldr	r3, [pc, #96]	@ (8000aa4 <MX_GPIO_Init+0xd0>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a17      	ldr	r2, [pc, #92]	@ (8000aa4 <MX_GPIO_Init+0xd0>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b15      	ldr	r3, [pc, #84]	@ (8000aa4 <MX_GPIO_Init+0xd0>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]

    /* Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2120      	movs	r1, #32
 8000a5e:	4812      	ldr	r0, [pc, #72]	@ (8000aa8 <MX_GPIO_Init+0xd4>)
 8000a60:	f003 f9ba 	bl	8003dd8 <HAL_GPIO_WritePin>

    /* Configure GPIO pin : B1_Pin */
    GPIO_InitStruct.Pin = B1_Pin;
 8000a64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a6a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4619      	mov	r1, r3
 8000a7a:	480c      	ldr	r0, [pc, #48]	@ (8000aac <MX_GPIO_Init+0xd8>)
 8000a7c:	f003 f828 	bl	8003ad0 <HAL_GPIO_Init>

    /* Configure GPIO pin : LD2_Pin */
    GPIO_InitStruct.Pin = LD2_Pin;
 8000a80:	2320      	movs	r3, #32
 8000a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a84:	2301      	movs	r3, #1
 8000a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4619      	mov	r1, r3
 8000a96:	4804      	ldr	r0, [pc, #16]	@ (8000aa8 <MX_GPIO_Init+0xd4>)
 8000a98:	f003 f81a 	bl	8003ad0 <HAL_GPIO_Init>
}
 8000a9c:	bf00      	nop
 8000a9e:	3728      	adds	r7, #40	@ 0x28
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020000 	.word	0x40020000
 8000aac:	40020800 	.word	0x40020800

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab4:	b672      	cpsid	i
}
 8000ab6:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <Error_Handler+0x8>

08000abc <SecureUart_Init>:
 * @brief Инициализация контекста защищенного UART
 * @param ctx Указатель на структуру контекста
 * @param huart Дескриптор основного UART
 * @param debug_uart Дескриптор UART для отладки
 */
void SecureUart_Init(SecureUartContext *ctx, UART_HandleTypeDef *huart, UART_HandleTypeDef *debug_uart) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
    memset(ctx, 0, sizeof(SecureUartContext));
 8000ac8:	f44f 7292 	mov.w	r2, #292	@ 0x124
 8000acc:	2100      	movs	r1, #0
 8000ace:	68f8      	ldr	r0, [r7, #12]
 8000ad0:	f004 fdda 	bl	8005688 <memset>
    ctx->huart = huart;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	68ba      	ldr	r2, [r7, #8]
 8000ad8:	601a      	str	r2, [r3, #0]
    ctx->debug_uart = debug_uart;
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	605a      	str	r2, [r3, #4]
    ctx->rx_pos = 0;
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    ctx->last_sequence_id = 0;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	2200      	movs	r2, #0
 8000aec:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    ctx->encryption_enabled = false;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	2200      	movs	r2, #0
 8000af4:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
    ctx->mac_enabled = false;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2200      	movs	r2, #0
 8000afc:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121

    // Инициализация генератора случайных чисел для IV
    srand(HAL_GetTick());
 8000b00:	f002 faa2 	bl	8003048 <HAL_GetTick>
 8000b04:	4603      	mov	r3, r0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f004 fc1c 	bl	8005344 <srand>

    SecureUart_DebugPrint(ctx->debug_uart, "Инициализация защищенного UART протокола\r\n");
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	4903      	ldr	r1, [pc, #12]	@ (8000b20 <SecureUart_Init+0x64>)
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 fc1e 	bl	8001354 <SecureUart_DebugPrint>
}
 8000b18:	bf00      	nop
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	08006974 	.word	0x08006974

08000b24 <SecureUart_EnableEncryption>:
/**
 * @brief Включение шифрования
 * @param ctx Указатель на структуру контекста
 * @param key Ключ шифрования (16 байт)
 */
void SecureUart_EnableEncryption(SecureUartContext *ctx, const uint8_t *key) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
    // Инициализация контекста Speck с ключом
    Speck_Init(&ctx->speck_ctx, key);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	33a4      	adds	r3, #164	@ 0xa4
 8000b32:	6839      	ldr	r1, [r7, #0]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f001 fcc3 	bl	80024c0 <Speck_Init>
    ctx->encryption_enabled = true;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110

    SecureUart_DebugPrint(ctx->debug_uart, "Шифрование включено\r\n");
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	4904      	ldr	r1, [pc, #16]	@ (8000b58 <SecureUart_EnableEncryption+0x34>)
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 fc03 	bl	8001354 <SecureUart_DebugPrint>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	080069c0 	.word	0x080069c0

08000b5c <SecureUart_EnableMAC>:
/**
 * @brief Включение MAC
 * @param ctx Указатель на структуру контекста
 * @param key Ключ для MAC (16 байт)
 */
void SecureUart_EnableMAC(SecureUartContext *ctx, const uint8_t *key) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
    // Копирование ключа MAC
    memcpy(ctx->mac_key, key, SIPHASH_KEY_SIZE);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	f203 1311 	addw	r3, r3, #273	@ 0x111
 8000b6c:	2210      	movs	r2, #16
 8000b6e:	6839      	ldr	r1, [r7, #0]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f004 fe04 	bl	800577e <memcpy>
    ctx->mac_enabled = true;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2201      	movs	r2, #1
 8000b7a:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121

    SecureUart_DebugPrint(ctx->debug_uart, "MAC включен\r\n");
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	4904      	ldr	r1, [pc, #16]	@ (8000b94 <SecureUart_EnableMAC+0x38>)
 8000b84:	4618      	mov	r0, r3
 8000b86:	f000 fbe5 	bl	8001354 <SecureUart_DebugPrint>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	080069e8 	.word	0x080069e8

08000b98 <SecureUart_StartReceive>:

/**
 * @brief Запуск приема данных по UART в режиме DMA с IDLE прерыванием
 * @param ctx Указатель на структуру контекста
 */
void SecureUart_StartReceive(SecureUartContext *ctx) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
    // Включаем прерывание по IDLE
    __HAL_UART_ENABLE_IT(ctx->huart, UART_IT_IDLE);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	68da      	ldr	r2, [r3, #12]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f042 0210 	orr.w	r2, r2, #16
 8000bb2:	60da      	str	r2, [r3, #12]

    // Запускаем прием данных по DMA
    HAL_UART_Receive_DMA(ctx->huart, ctx->rx_buffer, MAX_FRAME_SIZE);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6818      	ldr	r0, [r3, #0]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3308      	adds	r3, #8
 8000bbc:	2293      	movs	r2, #147	@ 0x93
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	f003 fa33 	bl	800402a <HAL_UART_Receive_DMA>

    SecureUart_DebugPrint(ctx->debug_uart, "Начат прием данных в режиме DMA с IDLE прерыванием\r\n");
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	4903      	ldr	r1, [pc, #12]	@ (8000bd8 <SecureUart_StartReceive+0x40>)
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 fbc2 	bl	8001354 <SecureUart_DebugPrint>
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	08006a00 	.word	0x08006a00

08000bdc <SecureUart_CalculateMAC>:
 * @param ctx Указатель на структуру контекста
 * @param data Указатель на данные
 * @param length Длина данных
 * @param mac Буфер для MAC (8 байт)
 */
void SecureUart_CalculateMAC(SecureUartContext *ctx, const uint8_t *data, uint16_t length, uint8_t *mac) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	4613      	mov	r3, r2
 8000bea:	80fb      	strh	r3, [r7, #6]
    SipHash_2_4_MAC(ctx->mac_key, data, length, mac);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f203 1011 	addw	r0, r3, #273	@ 0x111
 8000bf2:	88fa      	ldrh	r2, [r7, #6]
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	68b9      	ldr	r1, [r7, #8]
 8000bf8:	f001 fbb6 	bl	8002368 <SipHash_2_4_MAC>
}
 8000bfc:	bf00      	nop
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <SecureUart_CalculateCRC>:
 * @brief Простой расчет CRC16 (для обратной совместимости)
 * @param data Указатель на данные
 * @param length Длина данных
 * @return Значение CRC16
 */
uint16_t SecureUart_CalculateCRC(const uint8_t *data, uint16_t length) {
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < length; i++) {
 8000c14:	2300      	movs	r3, #0
 8000c16:	81bb      	strh	r3, [r7, #12]
 8000c18:	e029      	b.n	8000c6e <SecureUart_CalculateCRC+0x6a>
        crc ^= (uint16_t)data[i] << 8;
 8000c1a:	89bb      	ldrh	r3, [r7, #12]
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	4413      	add	r3, r2
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	b21b      	sxth	r3, r3
 8000c24:	021b      	lsls	r3, r3, #8
 8000c26:	b21a      	sxth	r2, r3
 8000c28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c2c:	4053      	eors	r3, r2
 8000c2e:	b21b      	sxth	r3, r3
 8000c30:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8000c32:	2300      	movs	r3, #0
 8000c34:	72fb      	strb	r3, [r7, #11]
 8000c36:	e014      	b.n	8000c62 <SecureUart_CalculateCRC+0x5e>
            if (crc & 0x8000) {
 8000c38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	da0a      	bge.n	8000c56 <SecureUart_CalculateCRC+0x52>
                crc = (crc << 1) ^ 0x1021; // Полином 0x1021 (CRC-16-CCITT)
 8000c40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	b21b      	sxth	r3, r3
 8000c48:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8000c4c:	f083 0301 	eor.w	r3, r3, #1
 8000c50:	b21b      	sxth	r3, r3
 8000c52:	81fb      	strh	r3, [r7, #14]
 8000c54:	e002      	b.n	8000c5c <SecureUart_CalculateCRC+0x58>
            } else {
                crc = crc << 1;
 8000c56:	89fb      	ldrh	r3, [r7, #14]
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8000c5c:	7afb      	ldrb	r3, [r7, #11]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	72fb      	strb	r3, [r7, #11]
 8000c62:	7afb      	ldrb	r3, [r7, #11]
 8000c64:	2b07      	cmp	r3, #7
 8000c66:	d9e7      	bls.n	8000c38 <SecureUart_CalculateCRC+0x34>
    for (uint16_t i = 0; i < length; i++) {
 8000c68:	89bb      	ldrh	r3, [r7, #12]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	81bb      	strh	r3, [r7, #12]
 8000c6e:	89ba      	ldrh	r2, [r7, #12]
 8000c70:	887b      	ldrh	r3, [r7, #2]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d3d1      	bcc.n	8000c1a <SecureUart_CalculateCRC+0x16>
            }
        }
    }
    return crc;
 8000c76:	89fb      	ldrh	r3, [r7, #14]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <SecureUart_Send>:
 * @param ctx Указатель на структуру контекста
 * @param data Данные для отправки
 * @param length Длина данных
 * @return Статус операции
 */
SecureUartStatus SecureUart_Send(SecureUartContext *ctx, const uint8_t *data, uint8_t length) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b0d4      	sub	sp, #336	@ 0x150
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000c8e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000c92:	6018      	str	r0, [r3, #0]
 8000c94:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000c98:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8000c9c:	6019      	str	r1, [r3, #0]
 8000c9e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000ca2:	f2a3 1349 	subw	r3, r3, #329	@ 0x149
 8000ca6:	701a      	strb	r2, [r3, #0]
    if (length > MAX_DATA_SIZE) {
 8000ca8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000cac:	f2a3 1349 	subw	r3, r3, #329	@ 0x149
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b80      	cmp	r3, #128	@ 0x80
 8000cb4:	d90b      	bls.n	8000cce <SecureUart_Send+0x4a>
        SecureUart_DebugPrint(ctx->debug_uart, "Ошибка: превышен максимальный размер данных\r\n");
 8000cb6:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000cba:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	49ac      	ldr	r1, [pc, #688]	@ (8000f74 <SecureUart_Send+0x2f0>)
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 fb45 	bl	8001354 <SecureUart_DebugPrint>
        return SECURE_UART_BUFFER_OVERFLOW;
 8000cca:	2305      	movs	r3, #5
 8000ccc:	e14d      	b.n	8000f6a <SecureUart_Send+0x2e6>
    }

    // Увеличиваем счетчик последовательности
    uint32_t seq_id = g_sequence_counter++;
 8000cce:	4baa      	ldr	r3, [pc, #680]	@ (8000f78 <SecureUart_Send+0x2f4>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	1c5a      	adds	r2, r3, #1
 8000cd4:	49a8      	ldr	r1, [pc, #672]	@ (8000f78 <SecureUart_Send+0x2f4>)
 8000cd6:	600a      	str	r2, [r1, #0]
 8000cd8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138

    // Буфер для фрейма
    uint8_t frame[MAX_FRAME_SIZE];
    uint16_t frame_pos = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f8a7 314e 	strh.w	r3, [r7, #334]	@ 0x14e

    // Заголовок пакета
    uint32_t header = FRAME_HEADER;
 8000ce2:	4ba6      	ldr	r3, [pc, #664]	@ (8000f7c <SecureUart_Send+0x2f8>)
 8000ce4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    memcpy(frame + frame_pos, &header, FRAME_HEADER_SIZE);
 8000ce8:	f8b7 314e 	ldrh.w	r3, [r7, #334]	@ 0x14e
 8000cec:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8000cf0:	4413      	add	r3, r2
 8000cf2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8000cf6:	601a      	str	r2, [r3, #0]
    frame_pos += FRAME_HEADER_SIZE;
 8000cf8:	f8b7 314e 	ldrh.w	r3, [r7, #334]	@ 0x14e
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	f8a7 314e 	strh.w	r3, [r7, #334]	@ 0x14e

    // Идентификатор последовательности
    memcpy(frame + frame_pos, &seq_id, SEQUENCE_ID_SIZE);
 8000d02:	f8b7 314e 	ldrh.w	r3, [r7, #334]	@ 0x14e
 8000d06:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8000d0a:	4413      	add	r3, r2
 8000d0c:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8000d10:	601a      	str	r2, [r3, #0]
    frame_pos += SEQUENCE_ID_SIZE;
 8000d12:	f8b7 314e 	ldrh.w	r3, [r7, #334]	@ 0x14e
 8000d16:	3304      	adds	r3, #4
 8000d18:	f8a7 314e 	strh.w	r3, [r7, #334]	@ 0x14e

    // Тип пакета (по умолчанию - пакет с данными)
    frame[frame_pos++] = PACKET_TYPE_DATA;
 8000d1c:	f8b7 314e 	ldrh.w	r3, [r7, #334]	@ 0x14e
 8000d20:	1c5a      	adds	r2, r3, #1
 8000d22:	f8a7 214e 	strh.w	r2, [r7, #334]	@ 0x14e
 8000d26:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000d2a:	443b      	add	r3, r7
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f803 2cac 	strb.w	r2, [r3, #-172]

    // Буфер для зашифрованных данных
    uint8_t encrypted_data[MAX_DATA_SIZE];
    uint8_t actual_data_length = length;
 8000d32:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000d36:	f2a3 1349 	subw	r3, r3, #329	@ 0x149
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	f887 314d 	strb.w	r3, [r7, #333]	@ 0x14d

    // Если шифрование включено, шифруем данные
    if (ctx->encryption_enabled && length > 0) {
 8000d40:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000d44:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d05d      	beq.n	8000e0e <SecureUart_Send+0x18a>
 8000d52:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000d56:	f2a3 1349 	subw	r3, r3, #329	@ 0x149
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d056      	beq.n	8000e0e <SecureUart_Send+0x18a>
        // Отладочный вывод исходных данных
        SecureUart_DebugPrint(ctx->debug_uart, "Исходные данные перед шифрованием:\r\n");
 8000d60:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000d64:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	4984      	ldr	r1, [pc, #528]	@ (8000f80 <SecureUart_Send+0x2fc>)
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 faf0 	bl	8001354 <SecureUart_DebugPrint>
        SecureUart_PrintHexBuffer(ctx->debug_uart, "Оригинал: ", data, length);
 8000d74:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000d78:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	6858      	ldr	r0, [r3, #4]
 8000d80:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000d84:	f2a3 1349 	subw	r3, r3, #329	@ 0x149
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8000d90:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8000d94:	6812      	ldr	r2, [r2, #0]
 8000d96:	497b      	ldr	r1, [pc, #492]	@ (8000f84 <SecureUart_Send+0x300>)
 8000d98:	f000 fb1a 	bl	80013d0 <SecureUart_PrintHexBuffer>
        uint32_t start = DWT->CYCCNT;
 8000d9c:	4b7a      	ldr	r3, [pc, #488]	@ (8000f88 <SecureUart_Send+0x304>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
        // Шифрование данных (используем Simple версию)
        size_t enc_length = Speck_Encrypt_Simple(&ctx->speck_ctx, data, length, encrypted_data);
 8000da4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000da8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f103 00a4 	add.w	r0, r3, #164	@ 0xa4
 8000db2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000db6:	f2a3 1349 	subw	r3, r3, #329	@ 0x149
 8000dba:	781a      	ldrb	r2, [r3, #0]
 8000dbc:	f107 0320 	add.w	r3, r7, #32
 8000dc0:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8000dc4:	f5a1 71a4 	sub.w	r1, r1, #328	@ 0x148
 8000dc8:	6809      	ldr	r1, [r1, #0]
 8000dca:	f001 fd00 	bl	80027ce <Speck_Encrypt_Simple>
 8000dce:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144
        uint32_t cycles = DWT->CYCCNT - start;
 8000dd2:	4b6d      	ldr	r3, [pc, #436]	@ (8000f88 <SecureUart_Send+0x304>)
 8000dd4:	685a      	ldr	r2, [r3, #4]
 8000dd6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8000dda:	1ad3      	subs	r3, r2, r3
 8000ddc:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
        SecureUart_DebugPrint(ctx->debug_uart, "Операция заняла %lu тактов\r\n", cycles);
 8000de0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000de4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8000df0:	4966      	ldr	r1, [pc, #408]	@ (8000f8c <SecureUart_Send+0x308>)
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 faae 	bl	8001354 <SecureUart_DebugPrint>

        // Обновляем указатель на данные и длину
        data = encrypted_data;
 8000df8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000dfc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8000e00:	f107 0220 	add.w	r2, r7, #32
 8000e04:	601a      	str	r2, [r3, #0]
        actual_data_length = enc_length;
 8000e06:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8000e0a:	f887 314d 	strb.w	r3, [r7, #333]	@ 0x14d
    }

    // Длина данных
    frame[frame_pos++] = actual_data_length;
 8000e0e:	f8b7 314e 	ldrh.w	r3, [r7, #334]	@ 0x14e
 8000e12:	1c5a      	adds	r2, r3, #1
 8000e14:	f8a7 214e 	strh.w	r2, [r7, #334]	@ 0x14e
 8000e18:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000e1c:	443b      	add	r3, r7
 8000e1e:	f897 214d 	ldrb.w	r2, [r7, #333]	@ 0x14d
 8000e22:	f803 2cac 	strb.w	r2, [r3, #-172]

    // Данные
    if (actual_data_length > 0) {
 8000e26:	f897 314d 	ldrb.w	r3, [r7, #333]	@ 0x14d
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d015      	beq.n	8000e5a <SecureUart_Send+0x1d6>
        memcpy(frame + frame_pos, data, actual_data_length);
 8000e2e:	f8b7 314e 	ldrh.w	r3, [r7, #334]	@ 0x14e
 8000e32:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8000e36:	18d0      	adds	r0, r2, r3
 8000e38:	f897 214d 	ldrb.w	r2, [r7, #333]	@ 0x14d
 8000e3c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000e40:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8000e44:	6819      	ldr	r1, [r3, #0]
 8000e46:	f004 fc9a 	bl	800577e <memcpy>
        frame_pos += actual_data_length;
 8000e4a:	f897 314d 	ldrb.w	r3, [r7, #333]	@ 0x14d
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	f8b7 314e 	ldrh.w	r3, [r7, #334]	@ 0x14e
 8000e54:	4413      	add	r3, r2
 8000e56:	f8a7 314e 	strh.w	r3, [r7, #334]	@ 0x14e
    }

    // Если MAC включен, вычисляем и добавляем MAC
    if (ctx->mac_enabled) {
 8000e5a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000e5e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f893 3121 	ldrb.w	r3, [r3, #289]	@ 0x121
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d01e      	beq.n	8000eaa <SecureUart_Send+0x226>
        // MAC вычисляется для всего фрейма, включая заголовок, seq_id, тип и данные
        uint8_t mac[MAC_SIZE];
        SecureUart_CalculateMAC(ctx, frame, frame_pos, mac);
 8000e6c:	f107 0318 	add.w	r3, r7, #24
 8000e70:	f8b7 214e 	ldrh.w	r2, [r7, #334]	@ 0x14e
 8000e74:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8000e78:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 8000e7c:	f5a0 70a2 	sub.w	r0, r0, #324	@ 0x144
 8000e80:	6800      	ldr	r0, [r0, #0]
 8000e82:	f7ff feab 	bl	8000bdc <SecureUart_CalculateMAC>
        memcpy(frame + frame_pos, mac, MAC_SIZE);
 8000e86:	f8b7 314e 	ldrh.w	r3, [r7, #334]	@ 0x14e
 8000e8a:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8000e8e:	441a      	add	r2, r3
 8000e90:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000e94:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000e98:	cb03      	ldmia	r3!, {r0, r1}
 8000e9a:	6010      	str	r0, [r2, #0]
 8000e9c:	6051      	str	r1, [r2, #4]
        frame_pos += MAC_SIZE;
 8000e9e:	f8b7 314e 	ldrh.w	r3, [r7, #334]	@ 0x14e
 8000ea2:	3308      	adds	r3, #8
 8000ea4:	f8a7 314e 	strh.w	r3, [r7, #334]	@ 0x14e
 8000ea8:	e01e      	b.n	8000ee8 <SecureUart_Send+0x264>
    }
    else {
        // Для обратной совместимости - используем CRC, если MAC не включен
        uint16_t crc = SecureUart_CalculateCRC(frame, frame_pos);
 8000eaa:	f8b7 214e 	ldrh.w	r2, [r7, #334]	@ 0x14e
 8000eae:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fea5 	bl	8000c04 <SecureUart_CalculateCRC>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000ec2:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8000ec6:	801a      	strh	r2, [r3, #0]
        memcpy(frame + frame_pos, &crc, 2); // 2 байта для CRC
 8000ec8:	f8b7 314e 	ldrh.w	r3, [r7, #334]	@ 0x14e
 8000ecc:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8000ed0:	4413      	add	r3, r2
 8000ed2:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8000ed6:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8000eda:	8812      	ldrh	r2, [r2, #0]
 8000edc:	801a      	strh	r2, [r3, #0]
        frame_pos += 2;
 8000ede:	f8b7 314e 	ldrh.w	r3, [r7, #334]	@ 0x14e
 8000ee2:	3302      	adds	r3, #2
 8000ee4:	f8a7 314e 	strh.w	r3, [r7, #334]	@ 0x14e
    }

    // Отладочный вывод
    SecureUart_DebugPrint(ctx->debug_uart, "Отправка фрейма (seq_id=%lu, длина=%u):\r\n", seq_id, length);
 8000ee8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000eec:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	6858      	ldr	r0, [r3, #4]
 8000ef4:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8000ef8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000efc:	f2a3 1349 	subw	r3, r3, #329	@ 0x149
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	4923      	ldr	r1, [pc, #140]	@ (8000f90 <SecureUart_Send+0x30c>)
 8000f04:	f000 fa26 	bl	8001354 <SecureUart_DebugPrint>
    SecureUart_PrintHexBuffer(ctx->debug_uart, "TX: ", frame, frame_pos);
 8000f08:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000f0c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	6858      	ldr	r0, [r3, #4]
 8000f14:	f8b7 314e 	ldrh.w	r3, [r7, #334]	@ 0x14e
 8000f18:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8000f1c:	491d      	ldr	r1, [pc, #116]	@ (8000f94 <SecureUart_Send+0x310>)
 8000f1e:	f000 fa57 	bl	80013d0 <SecureUart_PrintHexBuffer>

    // Отправка фрейма
    HAL_StatusTypeDef hal_status = HAL_UART_Transmit(ctx->huart, frame, frame_pos, 1000);
 8000f22:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000f26:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	6818      	ldr	r0, [r3, #0]
 8000f2e:	f8b7 214e 	ldrh.w	r2, [r7, #334]	@ 0x14e
 8000f32:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8000f36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f3a:	f002 ffeb 	bl	8003f14 <HAL_UART_Transmit>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
    if (hal_status != HAL_OK) {
 8000f44:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d00d      	beq.n	8000f68 <SecureUart_Send+0x2e4>
        SecureUart_DebugPrint(ctx->debug_uart, "Ошибка отправки: %d\r\n", hal_status);
 8000f4c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000f50:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8000f5c:	490e      	ldr	r1, [pc, #56]	@ (8000f98 <SecureUart_Send+0x314>)
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f9f8 	bl	8001354 <SecureUart_DebugPrint>
        return SECURE_UART_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	e000      	b.n	8000f6a <SecureUart_Send+0x2e6>
    }

    return SECURE_UART_OK;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	08006a58 	.word	0x08006a58
 8000f78:	20000030 	.word	0x20000030
 8000f7c:	a55a5aa5 	.word	0xa55a5aa5
 8000f80:	08006aac 	.word	0x08006aac
 8000f84:	08006af0 	.word	0x08006af0
 8000f88:	e0001000 	.word	0xe0001000
 8000f8c:	08006b04 	.word	0x08006b04
 8000f90:	08006b38 	.word	0x08006b38
 8000f94:	08006b78 	.word	0x08006b78
 8000f98:	08006b80 	.word	0x08006b80

08000f9c <SecureUart_ProcessReceivedData>:
 * @brief Обработка принятых данных
 * @param ctx Указатель на структуру контекста
 * @param packet Указатель на структуру для сохранения распакованных данных
 * @return Статус операции
 */
SecureUartStatus SecureUart_ProcessReceivedData(SecureUartContext *ctx, SecureUartPacket *packet) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b090      	sub	sp, #64	@ 0x40
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
    uint16_t frame_size = ctx->rx_pos;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8000fac:	86fb      	strh	r3, [r7, #54]	@ 0x36

    // Проверка минимального размера фрейма
    uint16_t min_size = ctx->mac_enabled ?
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f893 3121 	ldrb.w	r3, [r3, #289]	@ 0x121
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <SecureUart_ProcessReceivedData+0x20>
 8000fb8:	2312      	movs	r3, #18
 8000fba:	e000      	b.n	8000fbe <SecureUart_ProcessReceivedData+0x22>
 8000fbc:	230c      	movs	r3, #12
 8000fbe:	86bb      	strh	r3, [r7, #52]	@ 0x34
        (FRAME_HEADER_SIZE + SEQUENCE_ID_SIZE + PACKET_TYPE_SIZE + 1 + MAC_SIZE) :
        (FRAME_HEADER_SIZE + SEQUENCE_ID_SIZE + PACKET_TYPE_SIZE + 1 + 2); // +2 для CRC

    if (frame_size < min_size) {
 8000fc0:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8000fc2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d208      	bcs.n	8000fda <SecureUart_ProcessReceivedData+0x3e>
        SecureUart_DebugPrint(ctx->debug_uart, "Ошибка: недостаточный размер фрейма (%u)\r\n", frame_size);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8000fce:	49a8      	ldr	r1, [pc, #672]	@ (8001270 <SecureUart_ProcessReceivedData+0x2d4>)
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 f9bf 	bl	8001354 <SecureUart_DebugPrint>
        return SECURE_UART_INVALID_FRAME;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	e146      	b.n	8001268 <SecureUart_ProcessReceivedData+0x2cc>
    }

    // Проверка заголовка
    uint32_t received_header;
    memcpy(&received_header, ctx->rx_buffer, FRAME_HEADER_SIZE);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3308      	adds	r3, #8
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	627b      	str	r3, [r7, #36]	@ 0x24
    if (received_header != FRAME_HEADER) {
 8000fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe4:	4aa3      	ldr	r2, [pc, #652]	@ (8001274 <SecureUart_ProcessReceivedData+0x2d8>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d008      	beq.n	8000ffc <SecureUart_ProcessReceivedData+0x60>
        SecureUart_DebugPrint(ctx->debug_uart, "Ошибка: неверный заголовок фрейма (0x%08lX)\r\n", received_header);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ff0:	49a1      	ldr	r1, [pc, #644]	@ (8001278 <SecureUart_ProcessReceivedData+0x2dc>)
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f9ae 	bl	8001354 <SecureUart_DebugPrint>
        return SECURE_UART_INVALID_FRAME;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	e135      	b.n	8001268 <SecureUart_ProcessReceivedData+0x2cc>
    }

    // Извлечение sequence_id
    uint32_t sequence_id;
    memcpy(&sequence_id, ctx->rx_buffer + FRAME_HEADER_SIZE, SEQUENCE_ID_SIZE);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3308      	adds	r3, #8
 8001000:	3304      	adds	r3, #4
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	623b      	str	r3, [r7, #32]

    // Проверка на replay-атаку
    if (sequence_id <= ctx->last_sequence_id) {
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800100c:	6a3b      	ldr	r3, [r7, #32]
 800100e:	429a      	cmp	r2, r3
 8001010:	d30a      	bcc.n	8001028 <SecureUart_ProcessReceivedData+0x8c>
        SecureUart_DebugPrint(ctx->debug_uart, "Обнаружена возможная replay-атака (seq_id=%lu, last=%lu)\r\n",
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6858      	ldr	r0, [r3, #4]
 8001016:	6a3a      	ldr	r2, [r7, #32]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800101e:	4997      	ldr	r1, [pc, #604]	@ (800127c <SecureUart_ProcessReceivedData+0x2e0>)
 8001020:	f000 f998 	bl	8001354 <SecureUart_DebugPrint>
                              sequence_id, ctx->last_sequence_id);
        return SECURE_UART_REPLAY_ATTACK;
 8001024:	2303      	movs	r3, #3
 8001026:	e11f      	b.n	8001268 <SecureUart_ProcessReceivedData+0x2cc>
    }

    // Извлечение типа пакета
    uint8_t packet_type = ctx->rx_buffer[FRAME_HEADER_SIZE + SEQUENCE_ID_SIZE];
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	7c1b      	ldrb	r3, [r3, #16]
 800102c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    // Извлечение длины данных
    uint8_t data_length = ctx->rx_buffer[FRAME_HEADER_SIZE + SEQUENCE_ID_SIZE + PACKET_TYPE_SIZE];
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	7c5b      	ldrb	r3, [r3, #17]
 8001034:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

    // Проверка корректности длины данных
    if (data_length > MAX_FRAME_SIZE - min_size) {
 8001038:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800103c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800103e:	f1c3 0393 	rsb	r3, r3, #147	@ 0x93
 8001042:	429a      	cmp	r2, r3
 8001044:	dd09      	ble.n	800105a <SecureUart_ProcessReceivedData+0xbe>
        SecureUart_DebugPrint(ctx->debug_uart, "Ошибка: некорректная длина данных (%u)\r\n", data_length);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800104e:	498c      	ldr	r1, [pc, #560]	@ (8001280 <SecureUart_ProcessReceivedData+0x2e4>)
 8001050:	4618      	mov	r0, r3
 8001052:	f000 f97f 	bl	8001354 <SecureUart_DebugPrint>
        return SECURE_UART_INVALID_FRAME;
 8001056:	2302      	movs	r3, #2
 8001058:	e106      	b.n	8001268 <SecureUart_ProcessReceivedData+0x2cc>
    }

    // Проверка полного размера фрейма
    uint16_t expected_frame_size = min_size + data_length;
 800105a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800105e:	b29a      	uxth	r2, r3
 8001060:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001062:	4413      	add	r3, r2
 8001064:	863b      	strh	r3, [r7, #48]	@ 0x30
    if (frame_size < expected_frame_size) {
 8001066:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8001068:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800106a:	429a      	cmp	r2, r3
 800106c:	d208      	bcs.n	8001080 <SecureUart_ProcessReceivedData+0xe4>
        SecureUart_DebugPrint(ctx->debug_uart, "Ошибка: неполный фрейм (ожидалось %u, получено %u)\r\n",
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6858      	ldr	r0, [r3, #4]
 8001072:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001074:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001076:	4983      	ldr	r1, [pc, #524]	@ (8001284 <SecureUart_ProcessReceivedData+0x2e8>)
 8001078:	f000 f96c 	bl	8001354 <SecureUart_DebugPrint>
                              expected_frame_size, frame_size);
        return SECURE_UART_INVALID_FRAME;
 800107c:	2302      	movs	r3, #2
 800107e:	e0f3      	b.n	8001268 <SecureUart_ProcessReceivedData+0x2cc>
    }

    // Проверка MAC или CRC
    if (ctx->mac_enabled) {
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f893 3121 	ldrb.w	r3, [r3, #289]	@ 0x121
 8001086:	2b00      	cmp	r3, #0
 8001088:	d02a      	beq.n	80010e0 <SecureUart_ProcessReceivedData+0x144>
        // Вычисление и проверка MAC
        uint8_t calculated_mac[MAC_SIZE];
        uint16_t mac_data_length = FRAME_HEADER_SIZE + SEQUENCE_ID_SIZE + PACKET_TYPE_SIZE + 1 + data_length;
 800108a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800108e:	b29b      	uxth	r3, r3
 8001090:	330a      	adds	r3, #10
 8001092:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        SecureUart_CalculateMAC(ctx, ctx->rx_buffer, mac_data_length, calculated_mac);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f103 0108 	add.w	r1, r3, #8
 800109a:	f107 0318 	add.w	r3, r7, #24
 800109e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff fd9b 	bl	8000bdc <SecureUart_CalculateMAC>

        uint8_t received_mac[MAC_SIZE];
        memcpy(received_mac, ctx->rx_buffer + mac_data_length, MAC_SIZE);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f103 0208 	add.w	r2, r3, #8
 80010ac:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80010ae:	441a      	add	r2, r3
 80010b0:	f107 0310 	add.w	r3, r7, #16
 80010b4:	6810      	ldr	r0, [r2, #0]
 80010b6:	6851      	ldr	r1, [r2, #4]
 80010b8:	c303      	stmia	r3!, {r0, r1}

        if (memcmp(calculated_mac, received_mac, MAC_SIZE) != 0) {
 80010ba:	f107 0110 	add.w	r1, r7, #16
 80010be:	f107 0318 	add.w	r3, r7, #24
 80010c2:	2208      	movs	r2, #8
 80010c4:	4618      	mov	r0, r3
 80010c6:	f004 facf 	bl	8005668 <memcmp>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d02d      	beq.n	800112c <SecureUart_ProcessReceivedData+0x190>
            SecureUart_DebugPrint(ctx->debug_uart, "Ошибка MAC\r\n");
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	496c      	ldr	r1, [pc, #432]	@ (8001288 <SecureUart_ProcessReceivedData+0x2ec>)
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 f93c 	bl	8001354 <SecureUart_DebugPrint>
            return SECURE_UART_MAC_ERROR;
 80010dc:	2304      	movs	r3, #4
 80010de:	e0c3      	b.n	8001268 <SecureUart_ProcessReceivedData+0x2cc>
        }
    } else {
        // CRC проверка для обратной совместимости
        uint16_t received_crc;
        memcpy(&received_crc, ctx->rx_buffer + FRAME_HEADER_SIZE + SEQUENCE_ID_SIZE + PACKET_TYPE_SIZE + 1 + data_length, 2);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f103 0208 	add.w	r2, r3, #8
 80010e6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80010ea:	330a      	adds	r3, #10
 80010ec:	4413      	add	r3, r2
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	81fb      	strh	r3, [r7, #14]

        uint16_t calculated_crc = SecureUart_CalculateCRC(ctx->rx_buffer, FRAME_HEADER_SIZE + SEQUENCE_ID_SIZE + PACKET_TYPE_SIZE + 1 + data_length);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f103 0208 	add.w	r2, r3, #8
 80010fa:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80010fe:	b29b      	uxth	r3, r3
 8001100:	330a      	adds	r3, #10
 8001102:	b29b      	uxth	r3, r3
 8001104:	4619      	mov	r1, r3
 8001106:	4610      	mov	r0, r2
 8001108:	f7ff fd7c 	bl	8000c04 <SecureUart_CalculateCRC>
 800110c:	4603      	mov	r3, r0
 800110e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        if (received_crc != calculated_crc) {
 8001110:	89fb      	ldrh	r3, [r7, #14]
 8001112:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8001114:	429a      	cmp	r2, r3
 8001116:	d009      	beq.n	800112c <SecureUart_ProcessReceivedData+0x190>
            SecureUart_DebugPrint(ctx->debug_uart, "Ошибка CRC (получено 0x%04X, рассчитано 0x%04X)\r\n",
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6858      	ldr	r0, [r3, #4]
 800111c:	89fb      	ldrh	r3, [r7, #14]
 800111e:	461a      	mov	r2, r3
 8001120:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001122:	495a      	ldr	r1, [pc, #360]	@ (800128c <SecureUart_ProcessReceivedData+0x2f0>)
 8001124:	f000 f916 	bl	8001354 <SecureUart_DebugPrint>
                                 received_crc, calculated_crc);
            return SECURE_UART_MAC_ERROR;
 8001128:	2304      	movs	r3, #4
 800112a:	e09d      	b.n	8001268 <SecureUart_ProcessReceivedData+0x2cc>
        }
    }

    // Обновляем последний известный sequence_id
    ctx->last_sequence_id = sequence_id;
 800112c:	6a3a      	ldr	r2, [r7, #32]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

    // Заполнение структуры пакета
    packet->sequence_id = sequence_id;
 8001134:	6a3a      	ldr	r2, [r7, #32]
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	601a      	str	r2, [r3, #0]
    packet->packet_type = packet_type;
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001140:	711a      	strb	r2, [r3, #4]

    // Получение указателя на данные
    uint8_t *received_data = ctx->rx_buffer + FRAME_HEADER_SIZE + SEQUENCE_ID_SIZE + PACKET_TYPE_SIZE + 1;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3308      	adds	r3, #8
 8001146:	330a      	adds	r3, #10
 8001148:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Если шифрование включено, расшифровываем данные
    if (ctx->encryption_enabled && data_length > 0) {
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8001150:	2b00      	cmp	r3, #0
 8001152:	d05a      	beq.n	800120a <SecureUart_ProcessReceivedData+0x26e>
 8001154:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001158:	2b00      	cmp	r3, #0
 800115a:	d056      	beq.n	800120a <SecureUart_ProcessReceivedData+0x26e>
        // Отладочный вывод зашифрованных данных
        SecureUart_DebugPrint(ctx->debug_uart, "Зашифрованные данные (длина=%u):\r\n", data_length);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8001164:	494a      	ldr	r1, [pc, #296]	@ (8001290 <SecureUart_ProcessReceivedData+0x2f4>)
 8001166:	4618      	mov	r0, r3
 8001168:	f000 f8f4 	bl	8001354 <SecureUart_DebugPrint>
        SecureUart_PrintHexBuffer(ctx->debug_uart, "Шифротекст: ", received_data, data_length);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6858      	ldr	r0, [r3, #4]
 8001170:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001174:	b29b      	uxth	r3, r3
 8001176:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001178:	4946      	ldr	r1, [pc, #280]	@ (8001294 <SecureUart_ProcessReceivedData+0x2f8>)
 800117a:	f000 f929 	bl	80013d0 <SecureUart_PrintHexBuffer>

        // Decrypt block by block directly
        for (size_t i = 0; i < data_length / SPECK_BLOCK_SIZE; i++) {
 800117e:	2300      	movs	r3, #0
 8001180:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001182:	e00f      	b.n	80011a4 <SecureUart_ProcessReceivedData+0x208>
            Speck_Decrypt(ctx,
                         received_data + i * SPECK_BLOCK_SIZE,
 8001184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001186:	00db      	lsls	r3, r3, #3
            Speck_Decrypt(ctx,
 8001188:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800118a:	18d1      	adds	r1, r2, r3
                         packet->data + i * SPECK_BLOCK_SIZE);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	1d9a      	adds	r2, r3, #6
 8001190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001192:	00db      	lsls	r3, r3, #3
            Speck_Decrypt(ctx,
 8001194:	4413      	add	r3, r2
 8001196:	461a      	mov	r2, r3
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f001 fa6f 	bl	800267c <Speck_Decrypt>
        for (size_t i = 0; i < data_length / SPECK_BLOCK_SIZE; i++) {
 800119e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011a0:	3301      	adds	r3, #1
 80011a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80011a4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80011a8:	08db      	lsrs	r3, r3, #3
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	461a      	mov	r2, r3
 80011ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d3e7      	bcc.n	8001184 <SecureUart_ProcessReceivedData+0x1e8>
        }

        // Remove padding if present
        size_t decrypted_length = data_length;
 80011b4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80011b8:	63bb      	str	r3, [r7, #56]	@ 0x38
        if (data_length >= SPECK_BLOCK_SIZE) {
 80011ba:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80011be:	2b07      	cmp	r3, #7
 80011c0:	d908      	bls.n	80011d4 <SecureUart_ProcessReceivedData+0x238>
            decrypted_length = remove_pkcs7_padding(packet->data, data_length);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	3306      	adds	r3, #6
 80011c6:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80011ca:	4611      	mov	r1, r2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f001 fab8 	bl	8002742 <remove_pkcs7_padding>
 80011d2:	63b8      	str	r0, [r7, #56]	@ 0x38
        }

        // Add null terminator for string display
        packet->data[decrypted_length] = 0;
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011d8:	4413      	add	r3, r2
 80011da:	3306      	adds	r3, #6
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]

        // Отладочный вывод расшифрованных данных
        SecureUart_DebugPrint(ctx->debug_uart, "Расшифрованные данные (длина=%u):\r\n", decrypted_length);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80011e6:	492c      	ldr	r1, [pc, #176]	@ (8001298 <SecureUart_ProcessReceivedData+0x2fc>)
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 f8b3 	bl	8001354 <SecureUart_DebugPrint>
        SecureUart_PrintHexBuffer(ctx->debug_uart, "Расшифровано: ", packet->data, decrypted_length);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6858      	ldr	r0, [r3, #4]
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	1d9a      	adds	r2, r3, #6
 80011f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	4928      	ldr	r1, [pc, #160]	@ (800129c <SecureUart_ProcessReceivedData+0x300>)
 80011fc:	f000 f8e8 	bl	80013d0 <SecureUart_PrintHexBuffer>

        packet->data_length = decrypted_length;
 8001200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001202:	b2da      	uxtb	r2, r3
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	715a      	strb	r2, [r3, #5]
    if (ctx->encryption_enabled && data_length > 0) {
 8001208:	e00f      	b.n	800122a <SecureUart_ProcessReceivedData+0x28e>
    } else {
        // Копирование данных без расшифровки
        if (data_length > 0) {
 800120a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800120e:	2b00      	cmp	r3, #0
 8001210:	d007      	beq.n	8001222 <SecureUart_ProcessReceivedData+0x286>
            memcpy(packet->data, received_data, data_length);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	3306      	adds	r3, #6
 8001216:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800121a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800121c:	4618      	mov	r0, r3
 800121e:	f004 faae 	bl	800577e <memcpy>
        }
        packet->data_length = data_length;
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8001228:	715a      	strb	r2, [r3, #5]
    }

    // Отладочный вывод
    SecureUart_DebugPrint(ctx->debug_uart, "Принят фрейм (seq_id=%lu, длина=%u):\r\n", sequence_id, packet->data_length);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6858      	ldr	r0, [r3, #4]
 800122e:	6a3a      	ldr	r2, [r7, #32]
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	795b      	ldrb	r3, [r3, #5]
 8001234:	491a      	ldr	r1, [pc, #104]	@ (80012a0 <SecureUart_ProcessReceivedData+0x304>)
 8001236:	f000 f88d 	bl	8001354 <SecureUart_DebugPrint>
    SecureUart_PrintHexBuffer(ctx->debug_uart, "RX: ", ctx->rx_buffer, frame_size);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6858      	ldr	r0, [r3, #4]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f103 0208 	add.w	r2, r3, #8
 8001244:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001246:	4917      	ldr	r1, [pc, #92]	@ (80012a4 <SecureUart_ProcessReceivedData+0x308>)
 8001248:	f000 f8c2 	bl	80013d0 <SecureUart_PrintHexBuffer>

    // Если данные есть, выводим их
    if (packet->data_length > 0) {
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	795b      	ldrb	r3, [r3, #5]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d008      	beq.n	8001266 <SecureUart_ProcessReceivedData+0x2ca>
        SecureUart_PrintHexBuffer(ctx->debug_uart, "Данные: ", packet->data, packet->data_length);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6858      	ldr	r0, [r3, #4]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	1d9a      	adds	r2, r3, #6
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	795b      	ldrb	r3, [r3, #5]
 8001260:	4911      	ldr	r1, [pc, #68]	@ (80012a8 <SecureUart_ProcessReceivedData+0x30c>)
 8001262:	f000 f8b5 	bl	80013d0 <SecureUart_PrintHexBuffer>
    }

    return SECURE_UART_OK;
 8001266:	2300      	movs	r3, #0
}
 8001268:	4618      	mov	r0, r3
 800126a:	3740      	adds	r7, #64	@ 0x40
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	08006ba4 	.word	0x08006ba4
 8001274:	a55a5aa5 	.word	0xa55a5aa5
 8001278:	08006bf0 	.word	0x08006bf0
 800127c:	08006c3c 	.word	0x08006c3c
 8001280:	08006c90 	.word	0x08006c90
 8001284:	08006cd8 	.word	0x08006cd8
 8001288:	08006d34 	.word	0x08006d34
 800128c:	08006d48 	.word	0x08006d48
 8001290:	08006d94 	.word	0x08006d94
 8001294:	08006dd0 	.word	0x08006dd0
 8001298:	08006de8 	.word	0x08006de8
 800129c:	08006e28 	.word	0x08006e28
 80012a0:	08006e44 	.word	0x08006e44
 80012a4:	08006e7c 	.word	0x08006e7c
 80012a8:	08006e84 	.word	0x08006e84

080012ac <SecureUart_HandleUartRxEvent>:

/**
 * @brief Обработчик события приема данных по UART
 * @param ctx Указатель на структуру контекста
 */
void SecureUart_HandleUartRxEvent(SecureUartContext *ctx) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b0a6      	sub	sp, #152	@ 0x98
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
    // Проверка на IDLE прерывание
    if (__HAL_UART_GET_FLAG(ctx->huart, UART_FLAG_IDLE)) {
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0310 	and.w	r3, r3, #16
 80012c0:	2b10      	cmp	r3, #16
 80012c2:	d140      	bne.n	8001346 <SecureUart_HandleUartRxEvent+0x9a>
        // Сброс флага IDLE
        __HAL_UART_CLEAR_IDLEFLAG(ctx->huart);
 80012c4:	2300      	movs	r3, #0
 80012c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80012e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90

        // Остановка DMA
        HAL_UART_DMAStop(ctx->huart);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f002 fec2 	bl	8004074 <HAL_UART_DMAStop>

        // Расчет количества полученных байт
        ctx->rx_pos = MAX_FRAME_SIZE - __HAL_DMA_GET_COUNTER(ctx->huart->hdmarx);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	f1c3 0393 	rsb	r3, r3, #147	@ 0x93
 8001300:	b29a      	uxth	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

        // Обработка принятых данных
        SecureUartPacket packet;
        SecureUartStatus status = SecureUart_ProcessReceivedData(ctx, &packet);
 8001308:	f107 0308 	add.w	r3, r7, #8
 800130c:	4619      	mov	r1, r3
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff fe44 	bl	8000f9c <SecureUart_ProcessReceivedData>
 8001314:	4603      	mov	r3, r0
 8001316:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

        if (status == SECURE_UART_OK) {
 800131a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800131e:	2b00      	cmp	r3, #0
 8001320:	d105      	bne.n	800132e <SecureUart_HandleUartRxEvent+0x82>
            SecureUart_DebugPrint(ctx->debug_uart, "Пакет успешно обработан\r\n");
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	490a      	ldr	r1, [pc, #40]	@ (8001350 <SecureUart_HandleUartRxEvent+0xa4>)
 8001328:	4618      	mov	r0, r3
 800132a:	f000 f813 	bl	8001354 <SecureUart_DebugPrint>
        }

        // Сброс указателя приема
        ctx->rx_pos = 0;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

        // Перезапуск приема
        HAL_UART_Receive_DMA(ctx->huart, ctx->rx_buffer, MAX_FRAME_SIZE);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6818      	ldr	r0, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	3308      	adds	r3, #8
 800133e:	2293      	movs	r2, #147	@ 0x93
 8001340:	4619      	mov	r1, r3
 8001342:	f002 fe72 	bl	800402a <HAL_UART_Receive_DMA>
    }
}
 8001346:	bf00      	nop
 8001348:	3798      	adds	r7, #152	@ 0x98
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	08006e94 	.word	0x08006e94

08001354 <SecureUart_DebugPrint>:
 * @brief Отладочный вывод форматированной строки в UART
 * @param huart Дескриптор UART для отладки
 * @param format Формат строки
 * @param ... Аргументы
 */
void SecureUart_DebugPrint(UART_HandleTypeDef *huart, const char *format, ...) {
 8001354:	b40e      	push	{r1, r2, r3}
 8001356:	b580      	push	{r7, lr}
 8001358:	b0c5      	sub	sp, #276	@ 0x114
 800135a:	af00      	add	r7, sp, #0
 800135c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001360:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001364:	6018      	str	r0, [r3, #0]
    if (huart == NULL) return;
 8001366:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800136a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d025      	beq.n	80013c0 <SecureUart_DebugPrint+0x6c>

    char buffer[256];
    va_list args;
    va_start(args, format);
 8001374:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001378:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800137c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001380:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8001382:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001386:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800138a:	f107 0010 	add.w	r0, r7, #16
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001394:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001398:	f004 f958 	bl	800564c <vsniprintf>
    va_end(args);

    HAL_UART_Transmit(huart, (uint8_t*)buffer, strlen(buffer), 100);
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7fe ff1d 	bl	80001e0 <strlen>
 80013a6:	4603      	mov	r3, r0
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	f107 0110 	add.w	r1, r7, #16
 80013ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013b2:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 80013b6:	2364      	movs	r3, #100	@ 0x64
 80013b8:	6800      	ldr	r0, [r0, #0]
 80013ba:	f002 fdab 	bl	8003f14 <HAL_UART_Transmit>
 80013be:	e000      	b.n	80013c2 <SecureUart_DebugPrint+0x6e>
    if (huart == NULL) return;
 80013c0:	bf00      	nop
}
 80013c2:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80013c6:	46bd      	mov	sp, r7
 80013c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013cc:	b003      	add	sp, #12
 80013ce:	4770      	bx	lr

080013d0 <SecureUart_PrintHexBuffer>:
 * @param huart Дескриптор UART для отладки
 * @param prefix Префикс для вывода
 * @param buffer Указатель на буфер данных
 * @param length Длина данных
 */
void SecureUart_PrintHexBuffer(UART_HandleTypeDef *huart, const char *prefix, const uint8_t *buffer, uint16_t length) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	@ 0x28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
 80013dc:	807b      	strh	r3, [r7, #2]
    if (huart == NULL) return;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d050      	beq.n	8001486 <SecureUart_PrintHexBuffer+0xb6>

    char outstr[16];

    // Вывод префикса
    HAL_UART_Transmit(huart, (uint8_t*)prefix, strlen(prefix), 100);
 80013e4:	68b8      	ldr	r0, [r7, #8]
 80013e6:	f7fe fefb 	bl	80001e0 <strlen>
 80013ea:	4603      	mov	r3, r0
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	2364      	movs	r3, #100	@ 0x64
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	f002 fd8e 	bl	8003f14 <HAL_UART_Transmit>

    // Вывод буфера в HEX формате
    for (uint16_t i = 0; i < length; i++) {
 80013f8:	2300      	movs	r3, #0
 80013fa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80013fc:	e038      	b.n	8001470 <SecureUart_PrintHexBuffer+0xa0>
        sprintf(outstr, "%02X ", buffer[i]);
 80013fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	4413      	add	r3, r2
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	4920      	ldr	r1, [pc, #128]	@ (8001490 <SecureUart_PrintHexBuffer+0xc0>)
 800140e:	4618      	mov	r0, r3
 8001410:	f004 f888 	bl	8005524 <siprintf>
        HAL_UART_Transmit(huart, (uint8_t*)outstr, strlen(outstr), 100);
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	4618      	mov	r0, r3
 800141a:	f7fe fee1 	bl	80001e0 <strlen>
 800141e:	4603      	mov	r3, r0
 8001420:	b29a      	uxth	r2, r3
 8001422:	f107 0114 	add.w	r1, r7, #20
 8001426:	2364      	movs	r3, #100	@ 0x64
 8001428:	68f8      	ldr	r0, [r7, #12]
 800142a:	f002 fd73 	bl	8003f14 <HAL_UART_Transmit>

        // Перенос строки каждые 16 байт
        if ((i + 1) % 16 == 0 && i < length - 1) {
 800142e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001430:	3301      	adds	r3, #1
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	2b00      	cmp	r3, #0
 8001438:	d117      	bne.n	800146a <SecureUart_PrintHexBuffer+0x9a>
 800143a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800143c:	887b      	ldrh	r3, [r7, #2]
 800143e:	3b01      	subs	r3, #1
 8001440:	429a      	cmp	r2, r3
 8001442:	da12      	bge.n	800146a <SecureUart_PrintHexBuffer+0x9a>
            sprintf(outstr, "\r\n       ");
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4912      	ldr	r1, [pc, #72]	@ (8001494 <SecureUart_PrintHexBuffer+0xc4>)
 800144a:	4618      	mov	r0, r3
 800144c:	f004 f86a 	bl	8005524 <siprintf>
            HAL_UART_Transmit(huart, (uint8_t*)outstr, strlen(outstr), 100);
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4618      	mov	r0, r3
 8001456:	f7fe fec3 	bl	80001e0 <strlen>
 800145a:	4603      	mov	r3, r0
 800145c:	b29a      	uxth	r2, r3
 800145e:	f107 0114 	add.w	r1, r7, #20
 8001462:	2364      	movs	r3, #100	@ 0x64
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	f002 fd55 	bl	8003f14 <HAL_UART_Transmit>
    for (uint16_t i = 0; i < length; i++) {
 800146a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800146c:	3301      	adds	r3, #1
 800146e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001470:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001472:	887b      	ldrh	r3, [r7, #2]
 8001474:	429a      	cmp	r2, r3
 8001476:	d3c2      	bcc.n	80013fe <SecureUart_PrintHexBuffer+0x2e>
        }
    }

    // Завершающий перенос строки
    HAL_UART_Transmit(huart, (uint8_t*)"\r\n", 2, 100);
 8001478:	2364      	movs	r3, #100	@ 0x64
 800147a:	2202      	movs	r2, #2
 800147c:	4906      	ldr	r1, [pc, #24]	@ (8001498 <SecureUart_PrintHexBuffer+0xc8>)
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f002 fd48 	bl	8003f14 <HAL_UART_Transmit>
 8001484:	e000      	b.n	8001488 <SecureUart_PrintHexBuffer+0xb8>
    if (huart == NULL) return;
 8001486:	bf00      	nop
}
 8001488:	3728      	adds	r7, #40	@ 0x28
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	08006ec4 	.word	0x08006ec4
 8001494:	08006ecc 	.word	0x08006ecc
 8001498:	08006ed8 	.word	0x08006ed8
 800149c:	00000000 	.word	0x00000000

080014a0 <SipHash_2_4>:
        v2 += v3; v3 = ROTL64(v3, 16); v3 ^= v2; \
        v0 += v3; v3 = ROTL64(v3, 21); v3 ^= v0; \
        v2 += v1; v1 = ROTL64(v1, 17); v1 ^= v2; v2 = ROTL64(v2, 32); \
    } while (0)

uint64_t SipHash_2_4(const uint8_t* key, const uint8_t* data, size_t len) {
 80014a0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80014a4:	f2ad 4d04 	subw	sp, sp, #1028	@ 0x404
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	f8c7 03a4 	str.w	r0, [r7, #932]	@ 0x3a4
 80014ae:	f8c7 13a0 	str.w	r1, [r7, #928]	@ 0x3a0
 80014b2:	f8c7 239c 	str.w	r2, [r7, #924]	@ 0x39c
    /* "константа" инициализации */
    const uint64_t k0 = U8TO64_LE(key);
 80014b6:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2200      	movs	r2, #0
 80014c0:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
 80014c4:	f8c7 2394 	str.w	r2, [r7, #916]	@ 0x394
 80014c8:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 80014cc:	3301      	adds	r3, #1
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2200      	movs	r2, #0
 80014d4:	461c      	mov	r4, r3
 80014d6:	4615      	mov	r5, r2
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	f04f 0300 	mov.w	r3, #0
 80014e0:	022b      	lsls	r3, r5, #8
 80014e2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80014e6:	0222      	lsls	r2, r4, #8
 80014e8:	e9d7 45e4 	ldrd	r4, r5, [r7, #912]	@ 0x390
 80014ec:	4621      	mov	r1, r4
 80014ee:	4311      	orrs	r1, r2
 80014f0:	f8c7 1388 	str.w	r1, [r7, #904]	@ 0x388
 80014f4:	4629      	mov	r1, r5
 80014f6:	4319      	orrs	r1, r3
 80014f8:	f8c7 138c 	str.w	r1, [r7, #908]	@ 0x38c
 80014fc:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8001500:	3302      	adds	r3, #2
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2200      	movs	r2, #0
 8001508:	4698      	mov	r8, r3
 800150a:	4691      	mov	r9, r2
 800150c:	f04f 0200 	mov.w	r2, #0
 8001510:	f04f 0300 	mov.w	r3, #0
 8001514:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8001518:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800151c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8001520:	e9d7 45e2 	ldrd	r4, r5, [r7, #904]	@ 0x388
 8001524:	4621      	mov	r1, r4
 8001526:	4311      	orrs	r1, r2
 8001528:	f8c7 1380 	str.w	r1, [r7, #896]	@ 0x380
 800152c:	4629      	mov	r1, r5
 800152e:	4319      	orrs	r1, r3
 8001530:	f8c7 1384 	str.w	r1, [r7, #900]	@ 0x384
 8001534:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8001538:	3303      	adds	r3, #3
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2200      	movs	r2, #0
 8001540:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
 8001544:	f8c7 237c 	str.w	r2, [r7, #892]	@ 0x37c
 8001548:	e9d7 12de 	ldrd	r1, r2, [r7, #888]	@ 0x378
 800154c:	460b      	mov	r3, r1
 800154e:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8001552:	460b      	mov	r3, r1
 8001554:	ea4f 6a03 	mov.w	sl, r3, lsl #24
 8001558:	e9d7 12e0 	ldrd	r1, r2, [r7, #896]	@ 0x380
 800155c:	460b      	mov	r3, r1
 800155e:	ea43 030a 	orr.w	r3, r3, sl
 8001562:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370
 8001566:	4613      	mov	r3, r2
 8001568:	ea43 030b 	orr.w	r3, r3, fp
 800156c:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 8001570:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8001574:	3304      	adds	r3, #4
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2200      	movs	r2, #0
 800157c:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
 8001580:	f8c7 236c 	str.w	r2, [r7, #876]	@ 0x36c
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	f04f 0300 	mov.w	r3, #0
 800158c:	f8d7 1368 	ldr.w	r1, [r7, #872]	@ 0x368
 8001590:	000b      	movs	r3, r1
 8001592:	2200      	movs	r2, #0
 8001594:	e9d7 45dc 	ldrd	r4, r5, [r7, #880]	@ 0x370
 8001598:	4621      	mov	r1, r4
 800159a:	4311      	orrs	r1, r2
 800159c:	f8c7 1360 	str.w	r1, [r7, #864]	@ 0x360
 80015a0:	4629      	mov	r1, r5
 80015a2:	4319      	orrs	r1, r3
 80015a4:	f8c7 1364 	str.w	r1, [r7, #868]	@ 0x364
 80015a8:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 80015ac:	3305      	adds	r3, #5
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2200      	movs	r2, #0
 80015b4:	f8c7 3358 	str.w	r3, [r7, #856]	@ 0x358
 80015b8:	f8c7 235c 	str.w	r2, [r7, #860]	@ 0x35c
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	f04f 0300 	mov.w	r3, #0
 80015c4:	f8d7 1358 	ldr.w	r1, [r7, #856]	@ 0x358
 80015c8:	020b      	lsls	r3, r1, #8
 80015ca:	2200      	movs	r2, #0
 80015cc:	e9d7 45d8 	ldrd	r4, r5, [r7, #864]	@ 0x360
 80015d0:	4621      	mov	r1, r4
 80015d2:	4311      	orrs	r1, r2
 80015d4:	f8c7 1350 	str.w	r1, [r7, #848]	@ 0x350
 80015d8:	4629      	mov	r1, r5
 80015da:	4319      	orrs	r1, r3
 80015dc:	f8c7 1354 	str.w	r1, [r7, #852]	@ 0x354
 80015e0:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 80015e4:	3306      	adds	r3, #6
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2200      	movs	r2, #0
 80015ec:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
 80015f0:	f8c7 234c 	str.w	r2, [r7, #844]	@ 0x34c
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	f04f 0300 	mov.w	r3, #0
 80015fc:	f8d7 1348 	ldr.w	r1, [r7, #840]	@ 0x348
 8001600:	040b      	lsls	r3, r1, #16
 8001602:	2200      	movs	r2, #0
 8001604:	e9d7 45d4 	ldrd	r4, r5, [r7, #848]	@ 0x350
 8001608:	4621      	mov	r1, r4
 800160a:	4311      	orrs	r1, r2
 800160c:	f8c7 1340 	str.w	r1, [r7, #832]	@ 0x340
 8001610:	4629      	mov	r1, r5
 8001612:	4319      	orrs	r1, r3
 8001614:	f8c7 1344 	str.w	r1, [r7, #836]	@ 0x344
 8001618:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 800161c:	3307      	adds	r3, #7
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2200      	movs	r2, #0
 8001624:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8001628:	f8c7 233c 	str.w	r2, [r7, #828]	@ 0x33c
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	f04f 0300 	mov.w	r3, #0
 8001634:	f8d7 1338 	ldr.w	r1, [r7, #824]	@ 0x338
 8001638:	060b      	lsls	r3, r1, #24
 800163a:	2200      	movs	r2, #0
 800163c:	e9d7 45d0 	ldrd	r4, r5, [r7, #832]	@ 0x340
 8001640:	4621      	mov	r1, r4
 8001642:	4311      	orrs	r1, r2
 8001644:	f8c7 11e0 	str.w	r1, [r7, #480]	@ 0x1e0
 8001648:	4629      	mov	r1, r5
 800164a:	4319      	orrs	r1, r3
 800164c:	f8c7 11e4 	str.w	r1, [r7, #484]	@ 0x1e4
 8001650:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	@ 0x1e0
 8001654:	e9c7 34f0 	strd	r3, r4, [r7, #960]	@ 0x3c0
    const uint64_t k1 = U8TO64_LE(key + 8);
 8001658:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 800165c:	3308      	adds	r3, #8
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2200      	movs	r2, #0
 8001664:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 8001668:	f8c7 2334 	str.w	r2, [r7, #820]	@ 0x334
 800166c:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8001670:	3309      	adds	r3, #9
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2200      	movs	r2, #0
 8001678:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 800167c:	f8c7 232c 	str.w	r2, [r7, #812]	@ 0x32c
 8001680:	f04f 0200 	mov.w	r2, #0
 8001684:	f04f 0300 	mov.w	r3, #0
 8001688:	e9d7 45ca 	ldrd	r4, r5, [r7, #808]	@ 0x328
 800168c:	4629      	mov	r1, r5
 800168e:	020b      	lsls	r3, r1, #8
 8001690:	4621      	mov	r1, r4
 8001692:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8001696:	4621      	mov	r1, r4
 8001698:	020a      	lsls	r2, r1, #8
 800169a:	e9d7 45cc 	ldrd	r4, r5, [r7, #816]	@ 0x330
 800169e:	4621      	mov	r1, r4
 80016a0:	4311      	orrs	r1, r2
 80016a2:	f8c7 1320 	str.w	r1, [r7, #800]	@ 0x320
 80016a6:	4629      	mov	r1, r5
 80016a8:	4319      	orrs	r1, r3
 80016aa:	f8c7 1324 	str.w	r1, [r7, #804]	@ 0x324
 80016ae:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 80016b2:	330a      	adds	r3, #10
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2200      	movs	r2, #0
 80016ba:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
 80016be:	f8c7 231c 	str.w	r2, [r7, #796]	@ 0x31c
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	f04f 0300 	mov.w	r3, #0
 80016ca:	e9d7 45c6 	ldrd	r4, r5, [r7, #792]	@ 0x318
 80016ce:	4629      	mov	r1, r5
 80016d0:	040b      	lsls	r3, r1, #16
 80016d2:	4621      	mov	r1, r4
 80016d4:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80016d8:	4621      	mov	r1, r4
 80016da:	040a      	lsls	r2, r1, #16
 80016dc:	e9d7 45c8 	ldrd	r4, r5, [r7, #800]	@ 0x320
 80016e0:	4621      	mov	r1, r4
 80016e2:	4311      	orrs	r1, r2
 80016e4:	f8c7 1310 	str.w	r1, [r7, #784]	@ 0x310
 80016e8:	4629      	mov	r1, r5
 80016ea:	4319      	orrs	r1, r3
 80016ec:	f8c7 1314 	str.w	r1, [r7, #788]	@ 0x314
 80016f0:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 80016f4:	330b      	adds	r3, #11
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2200      	movs	r2, #0
 80016fc:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
 8001700:	f8c7 230c 	str.w	r2, [r7, #780]	@ 0x30c
 8001704:	e9d7 12c2 	ldrd	r1, r2, [r7, #776]	@ 0x308
 8001708:	460b      	mov	r3, r1
 800170a:	0a1b      	lsrs	r3, r3, #8
 800170c:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
 8001710:	460b      	mov	r3, r1
 8001712:	061b      	lsls	r3, r3, #24
 8001714:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
 8001718:	e9d7 45c4 	ldrd	r4, r5, [r7, #784]	@ 0x310
 800171c:	4623      	mov	r3, r4
 800171e:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	@ 0x300
 8001722:	4602      	mov	r2, r0
 8001724:	4313      	orrs	r3, r2
 8001726:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
 800172a:	462b      	mov	r3, r5
 800172c:	460a      	mov	r2, r1
 800172e:	4313      	orrs	r3, r2
 8001730:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 8001734:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8001738:	330c      	adds	r3, #12
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2200      	movs	r2, #0
 8001740:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 8001744:	f8c7 22f4 	str.w	r2, [r7, #756]	@ 0x2f4
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	f8d7 12f0 	ldr.w	r1, [r7, #752]	@ 0x2f0
 8001754:	000b      	movs	r3, r1
 8001756:	2200      	movs	r2, #0
 8001758:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	@ 0x2f8
 800175c:	4621      	mov	r1, r4
 800175e:	4311      	orrs	r1, r2
 8001760:	f8c7 12e8 	str.w	r1, [r7, #744]	@ 0x2e8
 8001764:	4629      	mov	r1, r5
 8001766:	4319      	orrs	r1, r3
 8001768:	f8c7 12ec 	str.w	r1, [r7, #748]	@ 0x2ec
 800176c:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8001770:	330d      	adds	r3, #13
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2200      	movs	r2, #0
 8001778:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 800177c:	f8c7 22e4 	str.w	r2, [r7, #740]	@ 0x2e4
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	f04f 0300 	mov.w	r3, #0
 8001788:	f8d7 12e0 	ldr.w	r1, [r7, #736]	@ 0x2e0
 800178c:	020b      	lsls	r3, r1, #8
 800178e:	2200      	movs	r2, #0
 8001790:	e9d7 45ba 	ldrd	r4, r5, [r7, #744]	@ 0x2e8
 8001794:	4621      	mov	r1, r4
 8001796:	4311      	orrs	r1, r2
 8001798:	f8c7 12d8 	str.w	r1, [r7, #728]	@ 0x2d8
 800179c:	4629      	mov	r1, r5
 800179e:	4319      	orrs	r1, r3
 80017a0:	f8c7 12dc 	str.w	r1, [r7, #732]	@ 0x2dc
 80017a4:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 80017a8:	330e      	adds	r3, #14
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2200      	movs	r2, #0
 80017b0:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 80017b4:	f8c7 22d4 	str.w	r2, [r7, #724]	@ 0x2d4
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	f04f 0300 	mov.w	r3, #0
 80017c0:	f8d7 12d0 	ldr.w	r1, [r7, #720]	@ 0x2d0
 80017c4:	040b      	lsls	r3, r1, #16
 80017c6:	2200      	movs	r2, #0
 80017c8:	e9d7 45b6 	ldrd	r4, r5, [r7, #728]	@ 0x2d8
 80017cc:	4621      	mov	r1, r4
 80017ce:	4311      	orrs	r1, r2
 80017d0:	f8c7 12c8 	str.w	r1, [r7, #712]	@ 0x2c8
 80017d4:	4629      	mov	r1, r5
 80017d6:	4319      	orrs	r1, r3
 80017d8:	f8c7 12cc 	str.w	r1, [r7, #716]	@ 0x2cc
 80017dc:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 80017e0:	330f      	adds	r3, #15
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2200      	movs	r2, #0
 80017e8:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
 80017ec:	f8c7 22c4 	str.w	r2, [r7, #708]	@ 0x2c4
 80017f0:	f04f 0200 	mov.w	r2, #0
 80017f4:	f04f 0300 	mov.w	r3, #0
 80017f8:	f8d7 12c0 	ldr.w	r1, [r7, #704]	@ 0x2c0
 80017fc:	060b      	lsls	r3, r1, #24
 80017fe:	2200      	movs	r2, #0
 8001800:	e9d7 45b2 	ldrd	r4, r5, [r7, #712]	@ 0x2c8
 8001804:	4621      	mov	r1, r4
 8001806:	4311      	orrs	r1, r2
 8001808:	f8c7 11d8 	str.w	r1, [r7, #472]	@ 0x1d8
 800180c:	4629      	mov	r1, r5
 800180e:	4319      	orrs	r1, r3
 8001810:	f8c7 11dc 	str.w	r1, [r7, #476]	@ 0x1dc
 8001814:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	@ 0x1d8
 8001818:	e9c7 34ee 	strd	r3, r4, [r7, #952]	@ 0x3b8

    /* Инициализация состояния */
    uint64_t v0 = 0x736f6d6570736575ULL;
 800181c:	f60f 3328 	addw	r3, pc, #2856	@ 0xb28
 8001820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001824:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	@ 0x3f8
    uint64_t v1 = 0x646f72616e646f6dULL;
 8001828:	f60f 3324 	addw	r3, pc, #2852	@ 0xb24
 800182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001830:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	@ 0x3f0
    uint64_t v2 = 0x6c7967656e657261ULL;
 8001834:	f60f 3320 	addw	r3, pc, #2848	@ 0xb20
 8001838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183c:	e9c7 23fa 	strd	r2, r3, [r7, #1000]	@ 0x3e8
    uint64_t v3 = 0x7465646279746573ULL;
 8001840:	f60f 331c 	addw	r3, pc, #2844	@ 0xb1c
 8001844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001848:	e9c7 23f8 	strd	r2, r3, [r7, #992]	@ 0x3e0

    /* Смешивание ключа с начальным состоянием */
    v0 ^= k0;
 800184c:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	@ 0x3f8
 8001850:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	@ 0x3c0
 8001854:	ea80 0402 	eor.w	r4, r0, r2
 8001858:	f8c7 41d0 	str.w	r4, [r7, #464]	@ 0x1d0
 800185c:	404b      	eors	r3, r1
 800185e:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8001862:	e9d7 3474 	ldrd	r3, r4, [r7, #464]	@ 0x1d0
 8001866:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	@ 0x3f8
    v1 ^= k1;
 800186a:	e9d7 01fc 	ldrd	r0, r1, [r7, #1008]	@ 0x3f0
 800186e:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	@ 0x3b8
 8001872:	ea80 0402 	eor.w	r4, r0, r2
 8001876:	f8c7 41c8 	str.w	r4, [r7, #456]	@ 0x1c8
 800187a:	404b      	eors	r3, r1
 800187c:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8001880:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	@ 0x1c8
 8001884:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
    v2 ^= k0;
 8001888:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	@ 0x3e8
 800188c:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	@ 0x3c0
 8001890:	ea80 0402 	eor.w	r4, r0, r2
 8001894:	f8c7 41c0 	str.w	r4, [r7, #448]	@ 0x1c0
 8001898:	404b      	eors	r3, r1
 800189a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800189e:	e9d7 3470 	ldrd	r3, r4, [r7, #448]	@ 0x1c0
 80018a2:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	@ 0x3e8
    v3 ^= k1;
 80018a6:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	@ 0x3e0
 80018aa:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	@ 0x3b8
 80018ae:	ea80 0402 	eor.w	r4, r0, r2
 80018b2:	f8c7 41b8 	str.w	r4, [r7, #440]	@ 0x1b8
 80018b6:	404b      	eors	r3, r1
 80018b8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80018bc:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	@ 0x1b8
 80018c0:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0

    /* Обработка сообщения по блокам */
    const uint8_t* end = data + len - (len % 8);
 80018c4:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 80018c8:	f023 0207 	bic.w	r2, r3, #7
 80018cc:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 80018d0:	4413      	add	r3, r2
 80018d2:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
    const int left = len & 7;
 80018d6:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
    uint64_t b = ((uint64_t)len) << 56;
 80018e2:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 80018e6:	2200      	movs	r2, #0
 80018e8:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 80018ec:	f8c7 22bc 	str.w	r2, [r7, #700]	@ 0x2bc
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	f8d7 12b8 	ldr.w	r1, [r7, #696]	@ 0x2b8
 80018fc:	060b      	lsls	r3, r1, #24
 80018fe:	2200      	movs	r2, #0
 8001900:	e9c7 23f6 	strd	r2, r3, [r7, #984]	@ 0x3d8

    for (; data < end; data += 8) {
 8001904:	e1f9      	b.n	8001cfa <SipHash_2_4+0x85a>
        uint64_t m = U8TO64_LE(data);
 8001906:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2200      	movs	r2, #0
 8001910:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 8001914:	f8c7 22b4 	str.w	r2, [r7, #692]	@ 0x2b4
 8001918:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 800191c:	3301      	adds	r3, #1
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2200      	movs	r2, #0
 8001924:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 8001928:	f8c7 22ac 	str.w	r2, [r7, #684]	@ 0x2ac
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	f04f 0300 	mov.w	r3, #0
 8001934:	e9d7 45aa 	ldrd	r4, r5, [r7, #680]	@ 0x2a8
 8001938:	4629      	mov	r1, r5
 800193a:	020b      	lsls	r3, r1, #8
 800193c:	4621      	mov	r1, r4
 800193e:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8001942:	4621      	mov	r1, r4
 8001944:	020a      	lsls	r2, r1, #8
 8001946:	e9d7 45ac 	ldrd	r4, r5, [r7, #688]	@ 0x2b0
 800194a:	4621      	mov	r1, r4
 800194c:	4311      	orrs	r1, r2
 800194e:	f8c7 12a0 	str.w	r1, [r7, #672]	@ 0x2a0
 8001952:	4629      	mov	r1, r5
 8001954:	430b      	orrs	r3, r1
 8001956:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 800195a:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 800195e:	3302      	adds	r3, #2
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2200      	movs	r2, #0
 8001966:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 800196a:	f8c7 229c 	str.w	r2, [r7, #668]	@ 0x29c
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	f04f 0300 	mov.w	r3, #0
 8001976:	e9d7 45a6 	ldrd	r4, r5, [r7, #664]	@ 0x298
 800197a:	4629      	mov	r1, r5
 800197c:	040b      	lsls	r3, r1, #16
 800197e:	4621      	mov	r1, r4
 8001980:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8001984:	4621      	mov	r1, r4
 8001986:	040a      	lsls	r2, r1, #16
 8001988:	e9d7 45a8 	ldrd	r4, r5, [r7, #672]	@ 0x2a0
 800198c:	4621      	mov	r1, r4
 800198e:	4311      	orrs	r1, r2
 8001990:	f8c7 1290 	str.w	r1, [r7, #656]	@ 0x290
 8001994:	4629      	mov	r1, r5
 8001996:	430b      	orrs	r3, r1
 8001998:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 800199c:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 80019a0:	3303      	adds	r3, #3
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2200      	movs	r2, #0
 80019a8:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 80019ac:	f8c7 228c 	str.w	r2, [r7, #652]	@ 0x28c
 80019b0:	e9d7 12a2 	ldrd	r1, r2, [r7, #648]	@ 0x288
 80019b4:	460b      	mov	r3, r1
 80019b6:	0a1b      	lsrs	r3, r3, #8
 80019b8:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 80019bc:	460b      	mov	r3, r1
 80019be:	061b      	lsls	r3, r3, #24
 80019c0:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
 80019c4:	e9d7 45a4 	ldrd	r4, r5, [r7, #656]	@ 0x290
 80019c8:	4623      	mov	r3, r4
 80019ca:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 80019ce:	4602      	mov	r2, r0
 80019d0:	4313      	orrs	r3, r2
 80019d2:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
 80019d6:	462b      	mov	r3, r5
 80019d8:	460a      	mov	r2, r1
 80019da:	4313      	orrs	r3, r2
 80019dc:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 80019e0:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 80019e4:	3304      	adds	r3, #4
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2200      	movs	r2, #0
 80019ec:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 80019f0:	f8c7 2274 	str.w	r2, [r7, #628]	@ 0x274
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	f8d7 1270 	ldr.w	r1, [r7, #624]	@ 0x270
 8001a00:	000b      	movs	r3, r1
 8001a02:	2200      	movs	r2, #0
 8001a04:	e9d7 459e 	ldrd	r4, r5, [r7, #632]	@ 0x278
 8001a08:	4621      	mov	r1, r4
 8001a0a:	4311      	orrs	r1, r2
 8001a0c:	f8c7 1268 	str.w	r1, [r7, #616]	@ 0x268
 8001a10:	4629      	mov	r1, r5
 8001a12:	430b      	orrs	r3, r1
 8001a14:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 8001a18:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001a1c:	3305      	adds	r3, #5
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2200      	movs	r2, #0
 8001a24:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
 8001a28:	f8c7 2264 	str.w	r2, [r7, #612]	@ 0x264
 8001a2c:	f04f 0200 	mov.w	r2, #0
 8001a30:	f04f 0300 	mov.w	r3, #0
 8001a34:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 8001a38:	020b      	lsls	r3, r1, #8
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	e9d7 459a 	ldrd	r4, r5, [r7, #616]	@ 0x268
 8001a40:	4621      	mov	r1, r4
 8001a42:	4311      	orrs	r1, r2
 8001a44:	f8c7 1258 	str.w	r1, [r7, #600]	@ 0x258
 8001a48:	4629      	mov	r1, r5
 8001a4a:	430b      	orrs	r3, r1
 8001a4c:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 8001a50:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001a54:	3306      	adds	r3, #6
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 8001a60:	f8c7 2254 	str.w	r2, [r7, #596]	@ 0x254
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 8001a70:	040b      	lsls	r3, r1, #16
 8001a72:	2200      	movs	r2, #0
 8001a74:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	@ 0x258
 8001a78:	4621      	mov	r1, r4
 8001a7a:	4311      	orrs	r1, r2
 8001a7c:	f8c7 1248 	str.w	r1, [r7, #584]	@ 0x248
 8001a80:	4629      	mov	r1, r5
 8001a82:	430b      	orrs	r3, r1
 8001a84:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 8001a88:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001a8c:	3307      	adds	r3, #7
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2200      	movs	r2, #0
 8001a94:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 8001a98:	f8c7 2244 	str.w	r2, [r7, #580]	@ 0x244
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	f8d7 1240 	ldr.w	r1, [r7, #576]	@ 0x240
 8001aa8:	060b      	lsls	r3, r1, #24
 8001aaa:	2200      	movs	r2, #0
 8001aac:	e9d7 4592 	ldrd	r4, r5, [r7, #584]	@ 0x248
 8001ab0:	4621      	mov	r1, r4
 8001ab2:	4311      	orrs	r1, r2
 8001ab4:	f8c7 11b0 	str.w	r1, [r7, #432]	@ 0x1b0
 8001ab8:	4629      	mov	r1, r5
 8001aba:	430b      	orrs	r3, r1
 8001abc:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8001ac0:	e9d7 346c 	ldrd	r3, r4, [r7, #432]	@ 0x1b0
 8001ac4:	e9c7 34ea 	strd	r3, r4, [r7, #936]	@ 0x3a8
        v3 ^= m;
 8001ac8:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	@ 0x3e0
 8001acc:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	@ 0x3a8
 8001ad0:	ea80 0402 	eor.w	r4, r0, r2
 8001ad4:	f8c7 41a8 	str.w	r4, [r7, #424]	@ 0x1a8
 8001ad8:	404b      	eors	r3, r1
 8001ada:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8001ade:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	@ 0x1a8
 8001ae2:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0

        /* Сжимающие раунды */
        for (int i = 0; i < SIPHASH_CROUND; i++) {
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
 8001aec:	e0ec      	b.n	8001cc8 <SipHash_2_4+0x828>
            SIPROUND;
 8001aee:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	@ 0x3f8
 8001af2:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	@ 0x3f0
 8001af6:	1884      	adds	r4, r0, r2
 8001af8:	f8c7 41a0 	str.w	r4, [r7, #416]	@ 0x1a0
 8001afc:	eb41 0303 	adc.w	r3, r1, r3
 8001b00:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001b04:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	@ 0x1a0
 8001b08:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	@ 0x3f8
 8001b0c:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8001b10:	0cda      	lsrs	r2, r3, #19
 8001b12:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8001b16:	035b      	lsls	r3, r3, #13
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001b1e:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8001b22:	0cda      	lsrs	r2, r3, #19
 8001b24:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8001b28:	035b      	lsls	r3, r3, #13
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8001b30:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	@ 0x198
 8001b34:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
 8001b38:	e9d7 01fc 	ldrd	r0, r1, [r7, #1008]	@ 0x3f0
 8001b3c:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	@ 0x3f8
 8001b40:	ea80 0402 	eor.w	r4, r0, r2
 8001b44:	f8c7 4190 	str.w	r4, [r7, #400]	@ 0x190
 8001b48:	404b      	eors	r3, r1
 8001b4a:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8001b4e:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	@ 0x190
 8001b52:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
 8001b56:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	@ 0x3fc
 8001b5a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001b5e:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8001b62:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8001b66:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	@ 0x188
 8001b6a:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	@ 0x3f8
 8001b6e:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	@ 0x3e8
 8001b72:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	@ 0x3e0
 8001b76:	1884      	adds	r4, r0, r2
 8001b78:	f8c7 4180 	str.w	r4, [r7, #384]	@ 0x180
 8001b7c:	eb41 0303 	adc.w	r3, r1, r3
 8001b80:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001b84:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	@ 0x180
 8001b88:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	@ 0x3e8
 8001b8c:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8001b90:	0c1a      	lsrs	r2, r3, #16
 8001b92:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001b96:	041b      	lsls	r3, r3, #16
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001b9e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001ba2:	0c1a      	lsrs	r2, r3, #16
 8001ba4:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8001ba8:	041b      	lsls	r3, r3, #16
 8001baa:	4313      	orrs	r3, r2
 8001bac:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8001bb0:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 8001bb4:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0
 8001bb8:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	@ 0x3e0
 8001bbc:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	@ 0x3e8
 8001bc0:	ea80 0402 	eor.w	r4, r0, r2
 8001bc4:	f8c7 4170 	str.w	r4, [r7, #368]	@ 0x170
 8001bc8:	404b      	eors	r3, r1
 8001bca:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8001bce:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	@ 0x170
 8001bd2:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0
 8001bd6:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	@ 0x3f8
 8001bda:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	@ 0x3e0
 8001bde:	1884      	adds	r4, r0, r2
 8001be0:	f8c7 4168 	str.w	r4, [r7, #360]	@ 0x168
 8001be4:	eb41 0303 	adc.w	r3, r1, r3
 8001be8:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001bec:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	@ 0x168
 8001bf0:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	@ 0x3f8
 8001bf4:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8001bf8:	0ada      	lsrs	r2, r3, #11
 8001bfa:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001bfe:	055b      	lsls	r3, r3, #21
 8001c00:	4313      	orrs	r3, r2
 8001c02:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001c06:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001c0a:	0ada      	lsrs	r2, r3, #11
 8001c0c:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8001c10:	055b      	lsls	r3, r3, #21
 8001c12:	4313      	orrs	r3, r2
 8001c14:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8001c18:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	@ 0x160
 8001c1c:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0
 8001c20:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	@ 0x3e0
 8001c24:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	@ 0x3f8
 8001c28:	ea80 0402 	eor.w	r4, r0, r2
 8001c2c:	f8c7 4158 	str.w	r4, [r7, #344]	@ 0x158
 8001c30:	404b      	eors	r3, r1
 8001c32:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8001c36:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	@ 0x158
 8001c3a:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0
 8001c3e:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	@ 0x3e8
 8001c42:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	@ 0x3f0
 8001c46:	1884      	adds	r4, r0, r2
 8001c48:	f8c7 4150 	str.w	r4, [r7, #336]	@ 0x150
 8001c4c:	eb41 0303 	adc.w	r3, r1, r3
 8001c50:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001c54:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 8001c58:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	@ 0x3e8
 8001c5c:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8001c60:	0bda      	lsrs	r2, r3, #15
 8001c62:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8001c66:	045b      	lsls	r3, r3, #17
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001c6e:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8001c72:	0bda      	lsrs	r2, r3, #15
 8001c74:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8001c78:	045b      	lsls	r3, r3, #17
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8001c80:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	@ 0x148
 8001c84:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
 8001c88:	e9d7 01fc 	ldrd	r0, r1, [r7, #1008]	@ 0x3f0
 8001c8c:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	@ 0x3e8
 8001c90:	ea80 0402 	eor.w	r4, r0, r2
 8001c94:	f8c7 4140 	str.w	r4, [r7, #320]	@ 0x140
 8001c98:	404b      	eors	r3, r1
 8001c9a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8001c9e:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 8001ca2:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
 8001ca6:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8001caa:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001cae:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	@ 0x3e8
 8001cb2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001cb6:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	@ 0x138
 8001cba:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	@ 0x3e8
        for (int i = 0; i < SIPHASH_CROUND; i++) {
 8001cbe:	f8d7 33d4 	ldr.w	r3, [r7, #980]	@ 0x3d4
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
 8001cc8:	f8d7 33d4 	ldr.w	r3, [r7, #980]	@ 0x3d4
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	f77f af0e 	ble.w	8001aee <SipHash_2_4+0x64e>
        }

        v0 ^= m;
 8001cd2:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	@ 0x3f8
 8001cd6:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	@ 0x3a8
 8001cda:	ea80 0402 	eor.w	r4, r0, r2
 8001cde:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 8001ce2:	404b      	eors	r3, r1
 8001ce4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8001ce8:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 8001cec:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	@ 0x3f8
    for (; data < end; data += 8) {
 8001cf0:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001cf4:	3308      	adds	r3, #8
 8001cf6:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
 8001cfa:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 8001cfe:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8001d02:	429a      	cmp	r2, r3
 8001d04:	f4ff adff 	bcc.w	8001906 <SipHash_2_4+0x466>
    }

    /* Последний блок с дополнением */
    switch (left) {
 8001d08:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8001d0c:	2b07      	cmp	r3, #7
 8001d0e:	f200 80f6 	bhi.w	8001efe <SipHash_2_4+0xa5e>
 8001d12:	a201      	add	r2, pc, #4	@ (adr r2, 8001d18 <SipHash_2_4+0x878>)
 8001d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d18:	08001eff 	.word	0x08001eff
 8001d1c:	08001ecb 	.word	0x08001ecb
 8001d20:	08001e83 	.word	0x08001e83
 8001d24:	08001e3b 	.word	0x08001e3b
 8001d28:	08001df3 	.word	0x08001df3
 8001d2c:	08001db5 	.word	0x08001db5
 8001d30:	08001d77 	.word	0x08001d77
 8001d34:	08001d39 	.word	0x08001d39
        case 7: b |= ((uint64_t)data[6]) << 48; /* fallthrough */
 8001d38:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001d3c:	3306      	adds	r3, #6
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2200      	movs	r2, #0
 8001d44:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 8001d48:	f8c7 223c 	str.w	r2, [r7, #572]	@ 0x23c
 8001d4c:	f04f 0000 	mov.w	r0, #0
 8001d50:	f04f 0100 	mov.w	r1, #0
 8001d54:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8001d58:	0419      	lsls	r1, r3, #16
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	@ 0x3d8
 8001d60:	ea42 0400 	orr.w	r4, r2, r0
 8001d64:	f8c7 4128 	str.w	r4, [r7, #296]	@ 0x128
 8001d68:	430b      	orrs	r3, r1
 8001d6a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001d6e:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	@ 0x128
 8001d72:	e9c7 34f6 	strd	r3, r4, [r7, #984]	@ 0x3d8
        case 6: b |= ((uint64_t)data[5]) << 40; /* fallthrough */
 8001d76:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001d7a:	3305      	adds	r3, #5
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2200      	movs	r2, #0
 8001d82:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
 8001d86:	f8c7 2234 	str.w	r2, [r7, #564]	@ 0x234
 8001d8a:	f04f 0000 	mov.w	r0, #0
 8001d8e:	f04f 0100 	mov.w	r1, #0
 8001d92:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8001d96:	0219      	lsls	r1, r3, #8
 8001d98:	2000      	movs	r0, #0
 8001d9a:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	@ 0x3d8
 8001d9e:	ea42 0400 	orr.w	r4, r2, r0
 8001da2:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 8001da6:	430b      	orrs	r3, r1
 8001da8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001dac:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 8001db0:	e9c7 34f6 	strd	r3, r4, [r7, #984]	@ 0x3d8
        case 5: b |= ((uint64_t)data[4]) << 32; /* fallthrough */
 8001db4:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001db8:	3304      	adds	r3, #4
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 8001dc4:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 8001dc8:	f04f 0000 	mov.w	r0, #0
 8001dcc:	f04f 0100 	mov.w	r1, #0
 8001dd0:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8001dd4:	0019      	movs	r1, r3
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	@ 0x3d8
 8001ddc:	ea42 0400 	orr.w	r4, r2, r0
 8001de0:	f8c7 4118 	str.w	r4, [r7, #280]	@ 0x118
 8001de4:	430b      	orrs	r3, r1
 8001de6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001dea:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	@ 0x118
 8001dee:	e9c7 34f6 	strd	r3, r4, [r7, #984]	@ 0x3d8
        case 4: b |= ((uint64_t)data[3]) << 24; /* fallthrough */
 8001df2:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001df6:	3303      	adds	r3, #3
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
 8001e02:	f8c7 2224 	str.w	r2, [r7, #548]	@ 0x224
 8001e06:	e9d7 1288 	ldrd	r1, r2, [r7, #544]	@ 0x220
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	0a1b      	lsrs	r3, r3, #8
 8001e0e:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8001e12:	460b      	mov	r3, r1
 8001e14:	061b      	lsls	r3, r3, #24
 8001e16:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 8001e1a:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	@ 0x3d8
 8001e1e:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	@ 0x218
 8001e22:	4621      	mov	r1, r4
 8001e24:	4311      	orrs	r1, r2
 8001e26:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 8001e2a:	4629      	mov	r1, r5
 8001e2c:	4319      	orrs	r1, r3
 8001e2e:	f8c7 1114 	str.w	r1, [r7, #276]	@ 0x114
 8001e32:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 8001e36:	e9c7 34f6 	strd	r3, r4, [r7, #984]	@ 0x3d8
        case 3: b |= ((uint64_t)data[2]) << 16; /* fallthrough */
 8001e3a:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001e3e:	3302      	adds	r3, #2
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2200      	movs	r2, #0
 8001e46:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8001e4a:	f8c7 2214 	str.w	r2, [r7, #532]	@ 0x214
 8001e4e:	f04f 0000 	mov.w	r0, #0
 8001e52:	f04f 0100 	mov.w	r1, #0
 8001e56:	e9d7 4584 	ldrd	r4, r5, [r7, #528]	@ 0x210
 8001e5a:	462b      	mov	r3, r5
 8001e5c:	0419      	lsls	r1, r3, #16
 8001e5e:	4623      	mov	r3, r4
 8001e60:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 8001e64:	4623      	mov	r3, r4
 8001e66:	0418      	lsls	r0, r3, #16
 8001e68:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	@ 0x3d8
 8001e6c:	ea42 0400 	orr.w	r4, r2, r0
 8001e70:	f8c7 4108 	str.w	r4, [r7, #264]	@ 0x108
 8001e74:	430b      	orrs	r3, r1
 8001e76:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8001e7a:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 8001e7e:	e9c7 34f6 	strd	r3, r4, [r7, #984]	@ 0x3d8
        case 2: b |= ((uint64_t)data[1]) << 8;  /* fallthrough */
 8001e82:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001e86:	3301      	adds	r3, #1
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 8001e92:	f8c7 220c 	str.w	r2, [r7, #524]	@ 0x20c
 8001e96:	f04f 0000 	mov.w	r0, #0
 8001e9a:	f04f 0100 	mov.w	r1, #0
 8001e9e:	e9d7 4582 	ldrd	r4, r5, [r7, #520]	@ 0x208
 8001ea2:	462b      	mov	r3, r5
 8001ea4:	0219      	lsls	r1, r3, #8
 8001ea6:	4623      	mov	r3, r4
 8001ea8:	ea41 6113 	orr.w	r1, r1, r3, lsr #24
 8001eac:	4623      	mov	r3, r4
 8001eae:	0218      	lsls	r0, r3, #8
 8001eb0:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	@ 0x3d8
 8001eb4:	ea42 0400 	orr.w	r4, r2, r0
 8001eb8:	f8c7 4100 	str.w	r4, [r7, #256]	@ 0x100
 8001ebc:	430b      	orrs	r3, r1
 8001ebe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001ec2:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8001ec6:	e9c7 34f6 	strd	r3, r4, [r7, #984]	@ 0x3d8
        case 1: b |= ((uint64_t)data[0]);       /* fallthrough */
 8001eca:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 8001ed8:	f8c7 2204 	str.w	r2, [r7, #516]	@ 0x204
 8001edc:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	@ 0x3d8
 8001ee0:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	@ 0x200
 8001ee4:	4621      	mov	r1, r4
 8001ee6:	4311      	orrs	r1, r2
 8001ee8:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8001eec:	4629      	mov	r1, r5
 8001eee:	4319      	orrs	r1, r3
 8001ef0:	f8c7 10fc 	str.w	r1, [r7, #252]	@ 0xfc
 8001ef4:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 8001ef8:	e9c7 34f6 	strd	r3, r4, [r7, #984]	@ 0x3d8
        case 0: break;
 8001efc:	bf00      	nop
    }

    v3 ^= b;
 8001efe:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	@ 0x3e0
 8001f02:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	@ 0x3d8
 8001f06:	ea80 0402 	eor.w	r4, r0, r2
 8001f0a:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 8001f0e:	404b      	eors	r3, r1
 8001f10:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001f14:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 8001f18:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0

    /* Сжимающие раунды для последнего блока */
    for (int i = 0; i < SIPHASH_CROUND; i++) {
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
 8001f22:	e0ec      	b.n	80020fe <SipHash_2_4+0xc5e>
        SIPROUND;
 8001f24:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	@ 0x3f8
 8001f28:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	@ 0x3f0
 8001f2c:	1884      	adds	r4, r0, r2
 8001f2e:	f8c7 40e8 	str.w	r4, [r7, #232]	@ 0xe8
 8001f32:	eb41 0303 	adc.w	r3, r1, r3
 8001f36:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001f3a:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	@ 0xe8
 8001f3e:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	@ 0x3f8
 8001f42:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8001f46:	0cda      	lsrs	r2, r3, #19
 8001f48:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8001f4c:	035b      	lsls	r3, r3, #13
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001f54:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8001f58:	0cda      	lsrs	r2, r3, #19
 8001f5a:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8001f5e:	035b      	lsls	r3, r3, #13
 8001f60:	4313      	orrs	r3, r2
 8001f62:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001f66:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 8001f6a:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
 8001f6e:	e9d7 01fc 	ldrd	r0, r1, [r7, #1008]	@ 0x3f0
 8001f72:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	@ 0x3f8
 8001f76:	ea80 0402 	eor.w	r4, r0, r2
 8001f7a:	f8c7 40d8 	str.w	r4, [r7, #216]	@ 0xd8
 8001f7e:	404b      	eors	r3, r1
 8001f80:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001f84:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	@ 0xd8
 8001f88:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
 8001f8c:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	@ 0x3fc
 8001f90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001f94:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8001f98:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001f9c:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8001fa0:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	@ 0x3f8
 8001fa4:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	@ 0x3e8
 8001fa8:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	@ 0x3e0
 8001fac:	1884      	adds	r4, r0, r2
 8001fae:	f8c7 40c8 	str.w	r4, [r7, #200]	@ 0xc8
 8001fb2:	eb41 0303 	adc.w	r3, r1, r3
 8001fb6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001fba:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8001fbe:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	@ 0x3e8
 8001fc2:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8001fc6:	0c1a      	lsrs	r2, r3, #16
 8001fc8:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001fcc:	041b      	lsls	r3, r3, #16
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001fd4:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001fd8:	0c1a      	lsrs	r2, r3, #16
 8001fda:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8001fde:	041b      	lsls	r3, r3, #16
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001fe6:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8001fea:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0
 8001fee:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	@ 0x3e0
 8001ff2:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	@ 0x3e8
 8001ff6:	ea80 0402 	eor.w	r4, r0, r2
 8001ffa:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 8001ffe:	404b      	eors	r3, r1
 8002000:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002004:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 8002008:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0
 800200c:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	@ 0x3f8
 8002010:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	@ 0x3e0
 8002014:	1884      	adds	r4, r0, r2
 8002016:	f8c7 40b0 	str.w	r4, [r7, #176]	@ 0xb0
 800201a:	eb41 0303 	adc.w	r3, r1, r3
 800201e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002022:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	@ 0xb0
 8002026:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	@ 0x3f8
 800202a:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 800202e:	0ada      	lsrs	r2, r3, #11
 8002030:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8002034:	055b      	lsls	r3, r3, #21
 8002036:	4313      	orrs	r3, r2
 8002038:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800203c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8002040:	0ada      	lsrs	r2, r3, #11
 8002042:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8002046:	055b      	lsls	r3, r3, #21
 8002048:	4313      	orrs	r3, r2
 800204a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800204e:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8002052:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0
 8002056:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	@ 0x3e0
 800205a:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	@ 0x3f8
 800205e:	ea80 0402 	eor.w	r4, r0, r2
 8002062:	f8c7 40a0 	str.w	r4, [r7, #160]	@ 0xa0
 8002066:	404b      	eors	r3, r1
 8002068:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800206c:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	@ 0xa0
 8002070:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0
 8002074:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	@ 0x3e8
 8002078:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	@ 0x3f0
 800207c:	1884      	adds	r4, r0, r2
 800207e:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 8002082:	eb41 0303 	adc.w	r3, r1, r3
 8002086:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800208a:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 800208e:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	@ 0x3e8
 8002092:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8002096:	0bda      	lsrs	r2, r3, #15
 8002098:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 800209c:	045b      	lsls	r3, r3, #17
 800209e:	4313      	orrs	r3, r2
 80020a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80020a4:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 80020a8:	0bda      	lsrs	r2, r3, #15
 80020aa:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 80020ae:	045b      	lsls	r3, r3, #17
 80020b0:	4313      	orrs	r3, r2
 80020b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80020b6:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 80020ba:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
 80020be:	e9d7 01fc 	ldrd	r0, r1, [r7, #1008]	@ 0x3f0
 80020c2:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	@ 0x3e8
 80020c6:	ea80 0402 	eor.w	r4, r0, r2
 80020ca:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 80020ce:	404b      	eors	r3, r1
 80020d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80020d4:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 80020d8:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
 80020dc:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 80020e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80020e4:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	@ 0x3e8
 80020e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80020ec:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 80020f0:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	@ 0x3e8
    for (int i = 0; i < SIPHASH_CROUND; i++) {
 80020f4:	f8d7 33d0 	ldr.w	r3, [r7, #976]	@ 0x3d0
 80020f8:	3301      	adds	r3, #1
 80020fa:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
 80020fe:	f8d7 33d0 	ldr.w	r3, [r7, #976]	@ 0x3d0
 8002102:	2b01      	cmp	r3, #1
 8002104:	f77f af0e 	ble.w	8001f24 <SipHash_2_4+0xa84>
    }

    v0 ^= b;
 8002108:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	@ 0x3f8
 800210c:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	@ 0x3d8
 8002110:	ea80 0402 	eor.w	r4, r0, r2
 8002114:	67bc      	str	r4, [r7, #120]	@ 0x78
 8002116:	404b      	eors	r3, r1
 8002118:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800211a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 800211e:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	@ 0x3f8

    /* Финализирующие раунды */
    v2 ^= 0xff;
 8002122:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	@ 0x3e8
 8002126:	f082 01ff 	eor.w	r1, r2, #255	@ 0xff
 800212a:	6739      	str	r1, [r7, #112]	@ 0x70
 800212c:	677b      	str	r3, [r7, #116]	@ 0x74
 800212e:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	@ 0x70
 8002132:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	@ 0x3e8
    for (int i = 0; i < SIPHASH_FROUND; i++) {
 8002136:	2300      	movs	r3, #0
 8002138:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 800213c:	e0d0      	b.n	80022e0 <SipHash_2_4+0xe40>
        SIPROUND;
 800213e:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	@ 0x3f8
 8002142:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	@ 0x3f0
 8002146:	1884      	adds	r4, r0, r2
 8002148:	66bc      	str	r4, [r7, #104]	@ 0x68
 800214a:	eb41 0303 	adc.w	r3, r1, r3
 800214e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002150:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8002154:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	@ 0x3f8
 8002158:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 800215c:	0cda      	lsrs	r2, r3, #19
 800215e:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8002162:	035b      	lsls	r3, r3, #13
 8002164:	4313      	orrs	r3, r2
 8002166:	667b      	str	r3, [r7, #100]	@ 0x64
 8002168:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 800216c:	0cda      	lsrs	r2, r3, #19
 800216e:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8002172:	035b      	lsls	r3, r3, #13
 8002174:	4313      	orrs	r3, r2
 8002176:	663b      	str	r3, [r7, #96]	@ 0x60
 8002178:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	@ 0x60
 800217c:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
 8002180:	e9d7 01fc 	ldrd	r0, r1, [r7, #1008]	@ 0x3f0
 8002184:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	@ 0x3f8
 8002188:	ea80 0402 	eor.w	r4, r0, r2
 800218c:	65bc      	str	r4, [r7, #88]	@ 0x58
 800218e:	404b      	eors	r3, r1
 8002190:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002192:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 8002196:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
 800219a:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	@ 0x3fc
 800219e:	653b      	str	r3, [r7, #80]	@ 0x50
 80021a0:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 80021a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80021a6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 80021aa:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	@ 0x3f8
 80021ae:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	@ 0x3e8
 80021b2:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	@ 0x3e0
 80021b6:	1884      	adds	r4, r0, r2
 80021b8:	64bc      	str	r4, [r7, #72]	@ 0x48
 80021ba:	eb41 0303 	adc.w	r3, r1, r3
 80021be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80021c0:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 80021c4:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	@ 0x3e8
 80021c8:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 80021cc:	0c1a      	lsrs	r2, r3, #16
 80021ce:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80021d2:	041b      	lsls	r3, r3, #16
 80021d4:	4313      	orrs	r3, r2
 80021d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80021d8:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80021dc:	0c1a      	lsrs	r2, r3, #16
 80021de:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 80021e2:	041b      	lsls	r3, r3, #16
 80021e4:	4313      	orrs	r3, r2
 80021e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80021e8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80021ec:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0
 80021f0:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	@ 0x3e0
 80021f4:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	@ 0x3e8
 80021f8:	ea80 0402 	eor.w	r4, r0, r2
 80021fc:	63bc      	str	r4, [r7, #56]	@ 0x38
 80021fe:	404b      	eors	r3, r1
 8002200:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002202:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8002206:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0
 800220a:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	@ 0x3f8
 800220e:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	@ 0x3e0
 8002212:	1884      	adds	r4, r0, r2
 8002214:	633c      	str	r4, [r7, #48]	@ 0x30
 8002216:	eb41 0303 	adc.w	r3, r1, r3
 800221a:	637b      	str	r3, [r7, #52]	@ 0x34
 800221c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8002220:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	@ 0x3f8
 8002224:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8002228:	0ada      	lsrs	r2, r3, #11
 800222a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800222e:	055b      	lsls	r3, r3, #21
 8002230:	4313      	orrs	r3, r2
 8002232:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002234:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8002238:	0ada      	lsrs	r2, r3, #11
 800223a:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 800223e:	055b      	lsls	r3, r3, #21
 8002240:	4313      	orrs	r3, r2
 8002242:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002244:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8002248:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0
 800224c:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	@ 0x3e0
 8002250:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	@ 0x3f8
 8002254:	ea80 0402 	eor.w	r4, r0, r2
 8002258:	623c      	str	r4, [r7, #32]
 800225a:	404b      	eors	r3, r1
 800225c:	627b      	str	r3, [r7, #36]	@ 0x24
 800225e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002262:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0
 8002266:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	@ 0x3e8
 800226a:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	@ 0x3f0
 800226e:	1884      	adds	r4, r0, r2
 8002270:	61bc      	str	r4, [r7, #24]
 8002272:	eb41 0303 	adc.w	r3, r1, r3
 8002276:	61fb      	str	r3, [r7, #28]
 8002278:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800227c:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	@ 0x3e8
 8002280:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8002284:	0bda      	lsrs	r2, r3, #15
 8002286:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 800228a:	045b      	lsls	r3, r3, #17
 800228c:	4313      	orrs	r3, r2
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8002294:	0bda      	lsrs	r2, r3, #15
 8002296:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 800229a:	045b      	lsls	r3, r3, #17
 800229c:	4313      	orrs	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80022a4:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
 80022a8:	e9d7 01fc 	ldrd	r0, r1, [r7, #1008]	@ 0x3f0
 80022ac:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	@ 0x3e8
 80022b0:	ea80 0402 	eor.w	r4, r0, r2
 80022b4:	60bc      	str	r4, [r7, #8]
 80022b6:	404b      	eors	r3, r1
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80022be:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
 80022c2:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 80022c6:	603b      	str	r3, [r7, #0]
 80022c8:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	@ 0x3e8
 80022cc:	607b      	str	r3, [r7, #4]
 80022ce:	e9d7 3400 	ldrd	r3, r4, [r7]
 80022d2:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	@ 0x3e8
    for (int i = 0; i < SIPHASH_FROUND; i++) {
 80022d6:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 80022da:	3301      	adds	r3, #1
 80022dc:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 80022e0:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	f77f af2a 	ble.w	800213e <SipHash_2_4+0xc9e>
    }

    /* Финальное XOR смешивание */
    return v0 ^ v1 ^ v2 ^ v3;
 80022ea:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	@ 0x3f8
 80022ee:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	@ 0x3f0
 80022f2:	ea80 0402 	eor.w	r4, r0, r2
 80022f6:	f8c7 41f8 	str.w	r4, [r7, #504]	@ 0x1f8
 80022fa:	404b      	eors	r3, r1
 80022fc:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
 8002300:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	@ 0x3e8
 8002304:	e9d7 457e 	ldrd	r4, r5, [r7, #504]	@ 0x1f8
 8002308:	4621      	mov	r1, r4
 800230a:	4051      	eors	r1, r2
 800230c:	f8c7 11f0 	str.w	r1, [r7, #496]	@ 0x1f0
 8002310:	4629      	mov	r1, r5
 8002312:	4059      	eors	r1, r3
 8002314:	f8c7 11f4 	str.w	r1, [r7, #500]	@ 0x1f4
 8002318:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	@ 0x3e0
 800231c:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 8002320:	4621      	mov	r1, r4
 8002322:	4051      	eors	r1, r2
 8002324:	f8c7 11e8 	str.w	r1, [r7, #488]	@ 0x1e8
 8002328:	4629      	mov	r1, r5
 800232a:	4059      	eors	r1, r3
 800232c:	f8c7 11ec 	str.w	r1, [r7, #492]	@ 0x1ec
 8002330:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
}
 8002334:	4610      	mov	r0, r2
 8002336:	4619      	mov	r1, r3
 8002338:	f207 4704 	addw	r7, r7, #1028	@ 0x404
 800233c:	46bd      	mov	sp, r7
 800233e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002342:	4770      	bx	lr
 8002344:	f3af 8000 	nop.w
 8002348:	70736575 	.word	0x70736575
 800234c:	736f6d65 	.word	0x736f6d65
 8002350:	6e646f6d 	.word	0x6e646f6d
 8002354:	646f7261 	.word	0x646f7261
 8002358:	6e657261 	.word	0x6e657261
 800235c:	6c796765 	.word	0x6c796765
 8002360:	79746573 	.word	0x79746573
 8002364:	74656462 	.word	0x74656462

08002368 <SipHash_2_4_MAC>:

void SipHash_2_4_MAC(const uint8_t* key, const uint8_t* data, size_t len, uint8_t* out) {
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
 8002374:	603b      	str	r3, [r7, #0]
    uint64_t h = SipHash_2_4(key, data, len);
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	68b9      	ldr	r1, [r7, #8]
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f7ff f890 	bl	80014a0 <SipHash_2_4>
 8002380:	e9c7 0104 	strd	r0, r1, [r7, #16]
    U64TO8_LE(out, h);
 8002384:	7c3a      	ldrb	r2, [r7, #16]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	701a      	strb	r2, [r3, #0]
 800238a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	f04f 0300 	mov.w	r3, #0
 8002396:	0a02      	lsrs	r2, r0, #8
 8002398:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800239c:	0a0b      	lsrs	r3, r1, #8
 800239e:	6839      	ldr	r1, [r7, #0]
 80023a0:	3101      	adds	r1, #1
 80023a2:	b2d3      	uxtb	r3, r2
 80023a4:	700b      	strb	r3, [r1, #0]
 80023a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	f04f 0300 	mov.w	r3, #0
 80023b2:	0c02      	lsrs	r2, r0, #16
 80023b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80023b8:	0c0b      	lsrs	r3, r1, #16
 80023ba:	6839      	ldr	r1, [r7, #0]
 80023bc:	3102      	adds	r1, #2
 80023be:	b2d3      	uxtb	r3, r2
 80023c0:	700b      	strb	r3, [r1, #0]
 80023c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	f04f 0300 	mov.w	r3, #0
 80023ce:	0e02      	lsrs	r2, r0, #24
 80023d0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80023d4:	0e0b      	lsrs	r3, r1, #24
 80023d6:	6839      	ldr	r1, [r7, #0]
 80023d8:	3103      	adds	r1, #3
 80023da:	b2d3      	uxtb	r3, r2
 80023dc:	700b      	strb	r3, [r1, #0]
 80023de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023e2:	f04f 0200 	mov.w	r2, #0
 80023e6:	f04f 0300 	mov.w	r3, #0
 80023ea:	000a      	movs	r2, r1
 80023ec:	2300      	movs	r3, #0
 80023ee:	6839      	ldr	r1, [r7, #0]
 80023f0:	3104      	adds	r1, #4
 80023f2:	b2d3      	uxtb	r3, r2
 80023f4:	700b      	strb	r3, [r1, #0]
 80023f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023fa:	f04f 0200 	mov.w	r2, #0
 80023fe:	f04f 0300 	mov.w	r3, #0
 8002402:	0a0a      	lsrs	r2, r1, #8
 8002404:	2300      	movs	r3, #0
 8002406:	6839      	ldr	r1, [r7, #0]
 8002408:	3105      	adds	r1, #5
 800240a:	b2d3      	uxtb	r3, r2
 800240c:	700b      	strb	r3, [r1, #0]
 800240e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002412:	f04f 0200 	mov.w	r2, #0
 8002416:	f04f 0300 	mov.w	r3, #0
 800241a:	0c0a      	lsrs	r2, r1, #16
 800241c:	2300      	movs	r3, #0
 800241e:	6839      	ldr	r1, [r7, #0]
 8002420:	3106      	adds	r1, #6
 8002422:	b2d3      	uxtb	r3, r2
 8002424:	700b      	strb	r3, [r1, #0]
 8002426:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	f04f 0300 	mov.w	r3, #0
 8002432:	0e0a      	lsrs	r2, r1, #24
 8002434:	2300      	movs	r3, #0
 8002436:	6839      	ldr	r1, [r7, #0]
 8002438:	3107      	adds	r1, #7
 800243a:	b2d3      	uxtb	r3, r2
 800243c:	700b      	strb	r3, [r1, #0]
}
 800243e:	bf00      	nop
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <bytes_to_word>:
#define SPECK_BETA  3  // Параметр ротации

/**
 * @brief Преобразовать массив байтов в 32-битное слово (little-endian)
 */
static uint32_t bytes_to_word(const uint8_t* bytes) {
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
    return ((uint32_t)bytes[0]) |
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	461a      	mov	r2, r3
           ((uint32_t)bytes[1] << 8) |
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3301      	adds	r3, #1
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	021b      	lsls	r3, r3, #8
    return ((uint32_t)bytes[0]) |
 800245c:	431a      	orrs	r2, r3
           ((uint32_t)bytes[2] << 16) |
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3302      	adds	r3, #2
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	041b      	lsls	r3, r3, #16
           ((uint32_t)bytes[1] << 8) |
 8002466:	431a      	orrs	r2, r3
           ((uint32_t)bytes[3] << 24);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3303      	adds	r3, #3
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	061b      	lsls	r3, r3, #24
           ((uint32_t)bytes[2] << 16) |
 8002470:	4313      	orrs	r3, r2
}
 8002472:	4618      	mov	r0, r3
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <word_to_bytes>:

/**
 * @brief Преобразовать 32-битное слово в массив байтов (little-endian)
 */
static void word_to_bytes(uint32_t word, uint8_t* bytes) {
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
 8002486:	6039      	str	r1, [r7, #0]
    bytes[0] = (uint8_t)(word);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	b2da      	uxtb	r2, r3
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	701a      	strb	r2, [r3, #0]
    bytes[1] = (uint8_t)(word >> 8);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	0a1a      	lsrs	r2, r3, #8
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	3301      	adds	r3, #1
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	701a      	strb	r2, [r3, #0]
    bytes[2] = (uint8_t)(word >> 16);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	0c1a      	lsrs	r2, r3, #16
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	3302      	adds	r3, #2
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	701a      	strb	r2, [r3, #0]
    bytes[3] = (uint8_t)(word >> 24);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	0e1a      	lsrs	r2, r3, #24
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	3303      	adds	r3, #3
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	701a      	strb	r2, [r3, #0]
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <Speck_Init>:

void Speck_Init(SpeckContext* ctx, const uint8_t* key) {
 80024c0:	b590      	push	{r4, r7, lr}
 80024c2:	b08b      	sub	sp, #44	@ 0x2c
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
    uint32_t k[4]; // Ключевые слова
    uint32_t l[3]; // Вспомогательные ключевые слова

    // Преобразуем ключ (16 байт) в слова
    k[0] = bytes_to_word(key);
 80024ca:	6838      	ldr	r0, [r7, #0]
 80024cc:	f7ff ffbb 	bl	8002446 <bytes_to_word>
 80024d0:	4603      	mov	r3, r0
 80024d2:	617b      	str	r3, [r7, #20]
    l[0] = bytes_to_word(key + 4);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	3304      	adds	r3, #4
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff ffb4 	bl	8002446 <bytes_to_word>
 80024de:	4603      	mov	r3, r0
 80024e0:	60bb      	str	r3, [r7, #8]
    l[1] = bytes_to_word(key + 8);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	3308      	adds	r3, #8
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff ffad 	bl	8002446 <bytes_to_word>
 80024ec:	4603      	mov	r3, r0
 80024ee:	60fb      	str	r3, [r7, #12]
    l[2] = bytes_to_word(key + 12);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	330c      	adds	r3, #12
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff ffa6 	bl	8002446 <bytes_to_word>
 80024fa:	4603      	mov	r3, r0
 80024fc:	613b      	str	r3, [r7, #16]

    // Генерация ключей раундов
    ctx->round_keys[0] = k[0];
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < SPECK_ROUNDS - 1; i++) {
 8002504:	2300      	movs	r3, #0
 8002506:	627b      	str	r3, [r7, #36]	@ 0x24
 8002508:	e075      	b.n	80025f6 <Speck_Init+0x136>
        l[i % 3] = (ROTR32(l[i % 3], SPECK_ALPHA) + k[(i + 1) % 4]) ^ i;
 800250a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800250c:	4b3e      	ldr	r3, [pc, #248]	@ (8002608 <Speck_Init+0x148>)
 800250e:	fb83 3201 	smull	r3, r2, r3, r1
 8002512:	17cb      	asrs	r3, r1, #31
 8002514:	1ad2      	subs	r2, r2, r3
 8002516:	4613      	mov	r3, r2
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	4413      	add	r3, r2
 800251c:	1aca      	subs	r2, r1, r3
 800251e:	0093      	lsls	r3, r2, #2
 8002520:	3328      	adds	r3, #40	@ 0x28
 8002522:	443b      	add	r3, r7
 8002524:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002528:	ea4f 2233 	mov.w	r2, r3, ror #8
 800252c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252e:	3301      	adds	r3, #1
 8002530:	4259      	negs	r1, r3
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	f001 0103 	and.w	r1, r1, #3
 800253a:	bf58      	it	pl
 800253c:	424b      	negpl	r3, r1
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	3328      	adds	r3, #40	@ 0x28
 8002542:	443b      	add	r3, r7
 8002544:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8002548:	18d4      	adds	r4, r2, r3
 800254a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800254c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800254e:	4b2e      	ldr	r3, [pc, #184]	@ (8002608 <Speck_Init+0x148>)
 8002550:	fb83 3201 	smull	r3, r2, r3, r1
 8002554:	17cb      	asrs	r3, r1, #31
 8002556:	1ad2      	subs	r2, r2, r3
 8002558:	4613      	mov	r3, r2
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	4413      	add	r3, r2
 800255e:	1aca      	subs	r2, r1, r3
 8002560:	ea84 0100 	eor.w	r1, r4, r0
 8002564:	0093      	lsls	r3, r2, #2
 8002566:	3328      	adds	r3, #40	@ 0x28
 8002568:	443b      	add	r3, r7
 800256a:	f843 1c20 	str.w	r1, [r3, #-32]
        k[(i + 1) % 4] = ROTL32(k[(i + 1) % 4], SPECK_BETA) ^ l[i % 3];
 800256e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002570:	3301      	adds	r3, #1
 8002572:	425a      	negs	r2, r3
 8002574:	f003 0303 	and.w	r3, r3, #3
 8002578:	f002 0203 	and.w	r2, r2, #3
 800257c:	bf58      	it	pl
 800257e:	4253      	negpl	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	3328      	adds	r3, #40	@ 0x28
 8002584:	443b      	add	r3, r7
 8002586:	f853 3c14 	ldr.w	r3, [r3, #-20]
 800258a:	ea4f 7073 	mov.w	r0, r3, ror #29
 800258e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002590:	4b1d      	ldr	r3, [pc, #116]	@ (8002608 <Speck_Init+0x148>)
 8002592:	fb83 3201 	smull	r3, r2, r3, r1
 8002596:	17cb      	asrs	r3, r1, #31
 8002598:	1ad2      	subs	r2, r2, r3
 800259a:	4613      	mov	r3, r2
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	4413      	add	r3, r2
 80025a0:	1aca      	subs	r2, r1, r3
 80025a2:	0093      	lsls	r3, r2, #2
 80025a4:	3328      	adds	r3, #40	@ 0x28
 80025a6:	443b      	add	r3, r7
 80025a8:	f853 2c20 	ldr.w	r2, [r3, #-32]
 80025ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ae:	3301      	adds	r3, #1
 80025b0:	4259      	negs	r1, r3
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	f001 0103 	and.w	r1, r1, #3
 80025ba:	bf58      	it	pl
 80025bc:	424b      	negpl	r3, r1
 80025be:	4042      	eors	r2, r0
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	3328      	adds	r3, #40	@ 0x28
 80025c4:	443b      	add	r3, r7
 80025c6:	f843 2c14 	str.w	r2, [r3, #-20]
        ctx->round_keys[i + 1] = k[(i + 1) % 4];
 80025ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025cc:	3301      	adds	r3, #1
 80025ce:	425a      	negs	r2, r3
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	f002 0203 	and.w	r2, r2, #3
 80025d8:	bf58      	it	pl
 80025da:	4253      	negpl	r3, r2
 80025dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025de:	3201      	adds	r2, #1
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	3328      	adds	r3, #40	@ 0x28
 80025e4:	443b      	add	r3, r7
 80025e6:	f853 1c14 	ldr.w	r1, [r3, #-20]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < SPECK_ROUNDS - 1; i++) {
 80025f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f2:	3301      	adds	r3, #1
 80025f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80025f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f8:	2b19      	cmp	r3, #25
 80025fa:	dd86      	ble.n	800250a <Speck_Init+0x4a>
    }
}
 80025fc:	bf00      	nop
 80025fe:	bf00      	nop
 8002600:	372c      	adds	r7, #44	@ 0x2c
 8002602:	46bd      	mov	sp, r7
 8002604:	bd90      	pop	{r4, r7, pc}
 8002606:	bf00      	nop
 8002608:	55555556 	.word	0x55555556

0800260c <Speck_Encrypt>:

void Speck_Encrypt(const SpeckContext* ctx, const uint8_t* plaintext, uint8_t* ciphertext) {
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
    uint32_t x, y;

    // Преобразуем блок в два 32-битных слова
    x = bytes_to_word(plaintext);
 8002618:	68b8      	ldr	r0, [r7, #8]
 800261a:	f7ff ff14 	bl	8002446 <bytes_to_word>
 800261e:	61f8      	str	r0, [r7, #28]
    y = bytes_to_word(plaintext + 4);
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	3304      	adds	r3, #4
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff ff0e 	bl	8002446 <bytes_to_word>
 800262a:	61b8      	str	r0, [r7, #24]

    // Раунды шифрования
    for (int i = 0; i < SPECK_ROUNDS; i++) {
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	e013      	b.n	800265a <Speck_Encrypt+0x4e>
        x = (ROTR32(x, SPECK_ALPHA) + y) ^ ctx->round_keys[i];
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	ea4f 2233 	mov.w	r2, r3, ror #8
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	441a      	add	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6979      	ldr	r1, [r7, #20]
 8002640:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002644:	4053      	eors	r3, r2
 8002646:	61fb      	str	r3, [r7, #28]
        y = ROTL32(y, SPECK_BETA) ^ x;
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	ea4f 7373 	mov.w	r3, r3, ror #29
 800264e:	69fa      	ldr	r2, [r7, #28]
 8002650:	4053      	eors	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < SPECK_ROUNDS; i++) {
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	3301      	adds	r3, #1
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	2b1a      	cmp	r3, #26
 800265e:	dde8      	ble.n	8002632 <Speck_Encrypt+0x26>
    }

    // Преобразуем обратно в байты
    word_to_bytes(x, ciphertext);
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	69f8      	ldr	r0, [r7, #28]
 8002664:	f7ff ff0b 	bl	800247e <word_to_bytes>
    word_to_bytes(y, ciphertext + 4);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3304      	adds	r3, #4
 800266c:	4619      	mov	r1, r3
 800266e:	69b8      	ldr	r0, [r7, #24]
 8002670:	f7ff ff05 	bl	800247e <word_to_bytes>
}
 8002674:	bf00      	nop
 8002676:	3720      	adds	r7, #32
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <Speck_Decrypt>:

void Speck_Decrypt(const SpeckContext* ctx, const uint8_t* ciphertext, uint8_t* plaintext) {
 800267c:	b580      	push	{r7, lr}
 800267e:	b088      	sub	sp, #32
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
    uint32_t x, y;

    // Преобразуем блок в два 32-битных слова
    x = bytes_to_word(ciphertext);
 8002688:	68b8      	ldr	r0, [r7, #8]
 800268a:	f7ff fedc 	bl	8002446 <bytes_to_word>
 800268e:	61f8      	str	r0, [r7, #28]
    y = bytes_to_word(ciphertext + 4);
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	3304      	adds	r3, #4
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff fed6 	bl	8002446 <bytes_to_word>
 800269a:	61b8      	str	r0, [r7, #24]

    // Раунды расшифрования (в обратном порядке)
    for (int i = SPECK_ROUNDS - 1; i >= 0; i--) {
 800269c:	231a      	movs	r3, #26
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	e013      	b.n	80026ca <Speck_Decrypt+0x4e>
        y = ROTR32(y ^ x, SPECK_BETA);
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	4053      	eors	r3, r2
 80026a8:	ea4f 03f3 	mov.w	r3, r3, ror #3
 80026ac:	61bb      	str	r3, [r7, #24]
        x = ROTL32((x ^ ctx->round_keys[i]) - y, SPECK_ALPHA);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	405a      	eors	r2, r3
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	ea4f 6333 	mov.w	r3, r3, ror #24
 80026c2:	61fb      	str	r3, [r7, #28]
    for (int i = SPECK_ROUNDS - 1; i >= 0; i--) {
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	617b      	str	r3, [r7, #20]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	dae8      	bge.n	80026a2 <Speck_Decrypt+0x26>
    }

    // Преобразуем обратно в байты
    word_to_bytes(x, plaintext);
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	69f8      	ldr	r0, [r7, #28]
 80026d4:	f7ff fed3 	bl	800247e <word_to_bytes>
    word_to_bytes(y, plaintext + 4);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3304      	adds	r3, #4
 80026dc:	4619      	mov	r1, r3
 80026de:	69b8      	ldr	r0, [r7, #24]
 80026e0:	f7ff fecd 	bl	800247e <word_to_bytes>
}
 80026e4:	bf00      	nop
 80026e6:	3720      	adds	r7, #32
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <add_pkcs7_padding>:

/**
 * @brief Добавление дополнения PKCS#7 для блочного шифрования
 */
void add_pkcs7_padding(uint8_t* data, size_t data_len, size_t block_size) {
 80026ec:	b480      	push	{r7}
 80026ee:	b087      	sub	sp, #28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
    uint8_t padding_value = block_size - (data_len % block_size);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	fbb3 f1f1 	udiv	r1, r3, r1
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	fb00 f101 	mul.w	r1, r0, r1
 800270a:	1a5b      	subs	r3, r3, r1
 800270c:	b2db      	uxtb	r3, r3
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	74fb      	strb	r3, [r7, #19]
    for (size_t i = 0; i < padding_value; i++) {
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	e009      	b.n	800272c <add_pkcs7_padding+0x40>
        data[data_len + i] = padding_value;
 8002718:	68ba      	ldr	r2, [r7, #8]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	4413      	add	r3, r2
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	4413      	add	r3, r2
 8002722:	7cfa      	ldrb	r2, [r7, #19]
 8002724:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < padding_value; i++) {
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	3301      	adds	r3, #1
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	7cfb      	ldrb	r3, [r7, #19]
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	429a      	cmp	r2, r3
 8002732:	d3f1      	bcc.n	8002718 <add_pkcs7_padding+0x2c>
    }
}
 8002734:	bf00      	nop
 8002736:	bf00      	nop
 8002738:	371c      	adds	r7, #28
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <remove_pkcs7_padding>:

/**
 * @brief Удаление дополнения PKCS#7 после расшифрования
 */
size_t remove_pkcs7_padding(uint8_t* data, size_t data_len) {
 8002742:	b480      	push	{r7}
 8002744:	b085      	sub	sp, #20
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	6039      	str	r1, [r7, #0]
    if (data_len == 0) return 0;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <remove_pkcs7_padding+0x14>
 8002752:	2300      	movs	r3, #0
 8002754:	e025      	b.n	80027a2 <remove_pkcs7_padding+0x60>

    uint8_t padding_value = data[data_len - 1];
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	3b01      	subs	r3, #1
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	4413      	add	r3, r2
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	72fb      	strb	r3, [r7, #11]

    // Проверка корректности значения паддинга
    if (padding_value > SPECK_BLOCK_SIZE || padding_value == 0) {
 8002762:	7afb      	ldrb	r3, [r7, #11]
 8002764:	2b08      	cmp	r3, #8
 8002766:	d802      	bhi.n	800276e <remove_pkcs7_padding+0x2c>
 8002768:	7afb      	ldrb	r3, [r7, #11]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <remove_pkcs7_padding+0x30>
        return data_len; // Некорректное дополнение, возвращаем исходную длину
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	e017      	b.n	80027a2 <remove_pkcs7_padding+0x60>
    }

    // Проверяем все байты паддинга
    for (size_t i = data_len - padding_value; i < data_len; i++) {
 8002772:	7afb      	ldrb	r3, [r7, #11]
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	e00b      	b.n	8002794 <remove_pkcs7_padding+0x52>
        if (data[i] != padding_value) {
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	4413      	add	r3, r2
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	7afa      	ldrb	r2, [r7, #11]
 8002786:	429a      	cmp	r2, r3
 8002788:	d001      	beq.n	800278e <remove_pkcs7_padding+0x4c>
            return data_len; // Некорректное дополнение, возвращаем исходную длину
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	e009      	b.n	80027a2 <remove_pkcs7_padding+0x60>
    for (size_t i = data_len - padding_value; i < data_len; i++) {
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	3301      	adds	r3, #1
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	429a      	cmp	r2, r3
 800279a:	d3ef      	bcc.n	800277c <remove_pkcs7_padding+0x3a>
        }
    }

    return data_len - padding_value;
 800279c:	7afb      	ldrb	r3, [r7, #11]
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	1ad3      	subs	r3, r2, r3
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <Speck_GetPaddedLength>:

size_t Speck_GetPaddedLength(size_t length) {
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
    return length + (SPECK_BLOCK_SIZE - (length % SPECK_BLOCK_SIZE)) % SPECK_BLOCK_SIZE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	425b      	negs	r3, r3
 80027ba:	f003 0207 	and.w	r2, r3, #7
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4413      	add	r3, r2
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <Speck_Encrypt_Simple>:

/**
 * @brief Упрощенное шифрование данных произвольной длины
 */
size_t Speck_Encrypt_Simple(const SpeckContext* ctx, const uint8_t* plaintext, size_t length, uint8_t* ciphertext) {
 80027ce:	b590      	push	{r4, r7, lr}
 80027d0:	b0c7      	sub	sp, #284	@ 0x11c
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 80027d8:	f5a4 7486 	sub.w	r4, r4, #268	@ 0x10c
 80027dc:	6020      	str	r0, [r4, #0]
 80027de:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 80027e2:	f5a0 7088 	sub.w	r0, r0, #272	@ 0x110
 80027e6:	6001      	str	r1, [r0, #0]
 80027e8:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 80027ec:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 80027f0:	600a      	str	r2, [r1, #0]
 80027f2:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80027f6:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 80027fa:	6013      	str	r3, [r2, #0]
    // Простое шифрование по блокам без усложнений
    size_t padded_length = Speck_GetPaddedLength(length);
 80027fc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002800:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002804:	6818      	ldr	r0, [r3, #0]
 8002806:	f7ff ffd2 	bl	80027ae <Speck_GetPaddedLength>
 800280a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    uint8_t padded_data[256]; // Буфер для данных с паддингом

    // Копируем данные
    memcpy(padded_data, plaintext, length);
 800280e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002812:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8002816:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800281a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800281e:	f107 0010 	add.w	r0, r7, #16
 8002822:	6812      	ldr	r2, [r2, #0]
 8002824:	6819      	ldr	r1, [r3, #0]
 8002826:	f002 ffaa 	bl	800577e <memcpy>

    // Добавляем паддинг
    add_pkcs7_padding(padded_data, length, SPECK_BLOCK_SIZE);
 800282a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800282e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002832:	f107 0010 	add.w	r0, r7, #16
 8002836:	2208      	movs	r2, #8
 8002838:	6819      	ldr	r1, [r3, #0]
 800283a:	f7ff ff57 	bl	80026ec <add_pkcs7_padding>

    // Шифруем блоки
    for (size_t i = 0; i < padded_length / SPECK_BLOCK_SIZE; i++) {
 800283e:	2300      	movs	r3, #0
 8002840:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002844:	e01a      	b.n	800287c <Speck_Encrypt_Simple+0xae>
        Speck_Encrypt(ctx, padded_data + i * SPECK_BLOCK_SIZE,
 8002846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	f107 0210 	add.w	r2, r7, #16
 8002850:	18d1      	adds	r1, r2, r3
                     ciphertext + i * SPECK_BLOCK_SIZE);
 8002852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002856:	00db      	lsls	r3, r3, #3
        Speck_Encrypt(ctx, padded_data + i * SPECK_BLOCK_SIZE,
 8002858:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800285c:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8002860:	6812      	ldr	r2, [r2, #0]
 8002862:	441a      	add	r2, r3
 8002864:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002868:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800286c:	6818      	ldr	r0, [r3, #0]
 800286e:	f7ff fecd 	bl	800260c <Speck_Encrypt>
    for (size_t i = 0; i < padded_length / SPECK_BLOCK_SIZE; i++) {
 8002872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002876:	3301      	adds	r3, #1
 8002878:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800287c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002880:	08db      	lsrs	r3, r3, #3
 8002882:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002886:	429a      	cmp	r2, r3
 8002888:	d3dd      	bcc.n	8002846 <Speck_Encrypt_Simple+0x78>
    }

    return padded_length;
 800288a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 800288e:	4618      	mov	r0, r3
 8002890:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8002894:	46bd      	mov	sp, r7
 8002896:	bd90      	pop	{r4, r7, pc}

08002898 <Speck_Decrypt_Simple>:

size_t Speck_Decrypt_Simple(const SpeckContext* ctx, const uint8_t* ciphertext, size_t length, uint8_t* plaintext) {
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	603b      	str	r3, [r7, #0]
    // Проверка кратности размеру блока
    if (length % SPECK_BLOCK_SIZE != 0) {
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <Speck_Decrypt_Simple+0x1c>
        return 0;
 80028b0:	2300      	movs	r3, #0
 80028b2:	e01b      	b.n	80028ec <Speck_Decrypt_Simple+0x54>
    }

    // Расшифровываем блоки
    for (size_t i = 0; i < length / SPECK_BLOCK_SIZE; i++) {
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	e00e      	b.n	80028d8 <Speck_Decrypt_Simple+0x40>
        Speck_Decrypt(ctx, ciphertext + i * SPECK_BLOCK_SIZE,
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	18d1      	adds	r1, r2, r3
                     plaintext + i * SPECK_BLOCK_SIZE);
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	00db      	lsls	r3, r3, #3
        Speck_Decrypt(ctx, ciphertext + i * SPECK_BLOCK_SIZE,
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	4413      	add	r3, r2
 80028ca:	461a      	mov	r2, r3
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f7ff fed5 	bl	800267c <Speck_Decrypt>
    for (size_t i = 0; i < length / SPECK_BLOCK_SIZE; i++) {
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	3301      	adds	r3, #1
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	08db      	lsrs	r3, r3, #3
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d3eb      	bcc.n	80028ba <Speck_Decrypt_Simple+0x22>
    }

    // Удаляем паддинг
    return remove_pkcs7_padding(plaintext, length);
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	6838      	ldr	r0, [r7, #0]
 80028e6:	f7ff ff2c 	bl	8002742 <remove_pkcs7_padding>
 80028ea:	4603      	mov	r3, r0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	607b      	str	r3, [r7, #4]
 80028fe:	4b10      	ldr	r3, [pc, #64]	@ (8002940 <HAL_MspInit+0x4c>)
 8002900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002902:	4a0f      	ldr	r2, [pc, #60]	@ (8002940 <HAL_MspInit+0x4c>)
 8002904:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002908:	6453      	str	r3, [r2, #68]	@ 0x44
 800290a:	4b0d      	ldr	r3, [pc, #52]	@ (8002940 <HAL_MspInit+0x4c>)
 800290c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002912:	607b      	str	r3, [r7, #4]
 8002914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	603b      	str	r3, [r7, #0]
 800291a:	4b09      	ldr	r3, [pc, #36]	@ (8002940 <HAL_MspInit+0x4c>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291e:	4a08      	ldr	r2, [pc, #32]	@ (8002940 <HAL_MspInit+0x4c>)
 8002920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002924:	6413      	str	r3, [r2, #64]	@ 0x40
 8002926:	4b06      	ldr	r3, [pc, #24]	@ (8002940 <HAL_MspInit+0x4c>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800292e:	603b      	str	r3, [r7, #0]
 8002930:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002932:	2007      	movs	r0, #7
 8002934:	f000 fc88 	bl	8003248 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002938:	bf00      	nop
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40023800 	.word	0x40023800

08002944 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08e      	sub	sp, #56	@ 0x38
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a65      	ldr	r2, [pc, #404]	@ (8002af8 <HAL_UART_MspInit+0x1b4>)
 8002962:	4293      	cmp	r3, r2
 8002964:	f040 8095 	bne.w	8002a92 <HAL_UART_MspInit+0x14e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002968:	2300      	movs	r3, #0
 800296a:	623b      	str	r3, [r7, #32]
 800296c:	4b63      	ldr	r3, [pc, #396]	@ (8002afc <HAL_UART_MspInit+0x1b8>)
 800296e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002970:	4a62      	ldr	r2, [pc, #392]	@ (8002afc <HAL_UART_MspInit+0x1b8>)
 8002972:	f043 0310 	orr.w	r3, r3, #16
 8002976:	6453      	str	r3, [r2, #68]	@ 0x44
 8002978:	4b60      	ldr	r3, [pc, #384]	@ (8002afc <HAL_UART_MspInit+0x1b8>)
 800297a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297c:	f003 0310 	and.w	r3, r3, #16
 8002980:	623b      	str	r3, [r7, #32]
 8002982:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002984:	2300      	movs	r3, #0
 8002986:	61fb      	str	r3, [r7, #28]
 8002988:	4b5c      	ldr	r3, [pc, #368]	@ (8002afc <HAL_UART_MspInit+0x1b8>)
 800298a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298c:	4a5b      	ldr	r2, [pc, #364]	@ (8002afc <HAL_UART_MspInit+0x1b8>)
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	6313      	str	r3, [r2, #48]	@ 0x30
 8002994:	4b59      	ldr	r3, [pc, #356]	@ (8002afc <HAL_UART_MspInit+0x1b8>)
 8002996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	61fb      	str	r3, [r7, #28]
 800299e:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80029a0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80029a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a6:	2302      	movs	r3, #2
 80029a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ae:	2303      	movs	r3, #3
 80029b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029b2:	2307      	movs	r3, #7
 80029b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029ba:	4619      	mov	r1, r3
 80029bc:	4850      	ldr	r0, [pc, #320]	@ (8002b00 <HAL_UART_MspInit+0x1bc>)
 80029be:	f001 f887 	bl	8003ad0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80029c2:	4b50      	ldr	r3, [pc, #320]	@ (8002b04 <HAL_UART_MspInit+0x1c0>)
 80029c4:	4a50      	ldr	r2, [pc, #320]	@ (8002b08 <HAL_UART_MspInit+0x1c4>)
 80029c6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80029c8:	4b4e      	ldr	r3, [pc, #312]	@ (8002b04 <HAL_UART_MspInit+0x1c0>)
 80029ca:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80029ce:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029d0:	4b4c      	ldr	r3, [pc, #304]	@ (8002b04 <HAL_UART_MspInit+0x1c0>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029d6:	4b4b      	ldr	r3, [pc, #300]	@ (8002b04 <HAL_UART_MspInit+0x1c0>)
 80029d8:	2200      	movs	r2, #0
 80029da:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029dc:	4b49      	ldr	r3, [pc, #292]	@ (8002b04 <HAL_UART_MspInit+0x1c0>)
 80029de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029e2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029e4:	4b47      	ldr	r3, [pc, #284]	@ (8002b04 <HAL_UART_MspInit+0x1c0>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029ea:	4b46      	ldr	r3, [pc, #280]	@ (8002b04 <HAL_UART_MspInit+0x1c0>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80029f0:	4b44      	ldr	r3, [pc, #272]	@ (8002b04 <HAL_UART_MspInit+0x1c0>)
 80029f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029f6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80029f8:	4b42      	ldr	r3, [pc, #264]	@ (8002b04 <HAL_UART_MspInit+0x1c0>)
 80029fa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80029fe:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a00:	4b40      	ldr	r3, [pc, #256]	@ (8002b04 <HAL_UART_MspInit+0x1c0>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002a06:	483f      	ldr	r0, [pc, #252]	@ (8002b04 <HAL_UART_MspInit+0x1c0>)
 8002a08:	f000 fc60 	bl	80032cc <HAL_DMA_Init>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8002a12:	f7fe f84d 	bl	8000ab0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a3a      	ldr	r2, [pc, #232]	@ (8002b04 <HAL_UART_MspInit+0x1c0>)
 8002a1a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a1c:	4a39      	ldr	r2, [pc, #228]	@ (8002b04 <HAL_UART_MspInit+0x1c0>)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002a22:	4b3a      	ldr	r3, [pc, #232]	@ (8002b0c <HAL_UART_MspInit+0x1c8>)
 8002a24:	4a3a      	ldr	r2, [pc, #232]	@ (8002b10 <HAL_UART_MspInit+0x1cc>)
 8002a26:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002a28:	4b38      	ldr	r3, [pc, #224]	@ (8002b0c <HAL_UART_MspInit+0x1c8>)
 8002a2a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002a2e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a30:	4b36      	ldr	r3, [pc, #216]	@ (8002b0c <HAL_UART_MspInit+0x1c8>)
 8002a32:	2240      	movs	r2, #64	@ 0x40
 8002a34:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a36:	4b35      	ldr	r3, [pc, #212]	@ (8002b0c <HAL_UART_MspInit+0x1c8>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a3c:	4b33      	ldr	r3, [pc, #204]	@ (8002b0c <HAL_UART_MspInit+0x1c8>)
 8002a3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a42:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a44:	4b31      	ldr	r3, [pc, #196]	@ (8002b0c <HAL_UART_MspInit+0x1c8>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a4a:	4b30      	ldr	r3, [pc, #192]	@ (8002b0c <HAL_UART_MspInit+0x1c8>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002a50:	4b2e      	ldr	r3, [pc, #184]	@ (8002b0c <HAL_UART_MspInit+0x1c8>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002a56:	4b2d      	ldr	r3, [pc, #180]	@ (8002b0c <HAL_UART_MspInit+0x1c8>)
 8002a58:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a5c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a5e:	4b2b      	ldr	r3, [pc, #172]	@ (8002b0c <HAL_UART_MspInit+0x1c8>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002a64:	4829      	ldr	r0, [pc, #164]	@ (8002b0c <HAL_UART_MspInit+0x1c8>)
 8002a66:	f000 fc31 	bl	80032cc <HAL_DMA_Init>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 8002a70:	f7fe f81e 	bl	8000ab0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a25      	ldr	r2, [pc, #148]	@ (8002b0c <HAL_UART_MspInit+0x1c8>)
 8002a78:	639a      	str	r2, [r3, #56]	@ 0x38
 8002a7a:	4a24      	ldr	r2, [pc, #144]	@ (8002b0c <HAL_UART_MspInit+0x1c8>)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a80:	2200      	movs	r2, #0
 8002a82:	2100      	movs	r1, #0
 8002a84:	2025      	movs	r0, #37	@ 0x25
 8002a86:	f000 fbea 	bl	800325e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a8a:	2025      	movs	r0, #37	@ 0x25
 8002a8c:	f000 fc03 	bl	8003296 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8002a90:	e0db      	b.n	8002c4a <HAL_UART_MspInit+0x306>
  else if(huart->Instance==USART2)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a1f      	ldr	r2, [pc, #124]	@ (8002b14 <HAL_UART_MspInit+0x1d0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d13d      	bne.n	8002b18 <HAL_UART_MspInit+0x1d4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	61bb      	str	r3, [r7, #24]
 8002aa0:	4b16      	ldr	r3, [pc, #88]	@ (8002afc <HAL_UART_MspInit+0x1b8>)
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa4:	4a15      	ldr	r2, [pc, #84]	@ (8002afc <HAL_UART_MspInit+0x1b8>)
 8002aa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aaa:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aac:	4b13      	ldr	r3, [pc, #76]	@ (8002afc <HAL_UART_MspInit+0x1b8>)
 8002aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab4:	61bb      	str	r3, [r7, #24]
 8002ab6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab8:	2300      	movs	r3, #0
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	4b0f      	ldr	r3, [pc, #60]	@ (8002afc <HAL_UART_MspInit+0x1b8>)
 8002abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac0:	4a0e      	ldr	r2, [pc, #56]	@ (8002afc <HAL_UART_MspInit+0x1b8>)
 8002ac2:	f043 0301 	orr.w	r3, r3, #1
 8002ac6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8002afc <HAL_UART_MspInit+0x1b8>)
 8002aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002ad4:	230c      	movs	r3, #12
 8002ad6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad8:	2302      	movs	r3, #2
 8002ada:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002adc:	2300      	movs	r3, #0
 8002ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ae4:	2307      	movs	r3, #7
 8002ae6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002aec:	4619      	mov	r1, r3
 8002aee:	4804      	ldr	r0, [pc, #16]	@ (8002b00 <HAL_UART_MspInit+0x1bc>)
 8002af0:	f000 ffee 	bl	8003ad0 <HAL_GPIO_Init>
}
 8002af4:	e0a9      	b.n	8002c4a <HAL_UART_MspInit+0x306>
 8002af6:	bf00      	nop
 8002af8:	40011000 	.word	0x40011000
 8002afc:	40023800 	.word	0x40023800
 8002b00:	40020000 	.word	0x40020000
 8002b04:	20000190 	.word	0x20000190
 8002b08:	40026440 	.word	0x40026440
 8002b0c:	200001f0 	.word	0x200001f0
 8002b10:	400264b8 	.word	0x400264b8
 8002b14:	40004400 	.word	0x40004400
  else if(huart->Instance==USART6)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a4d      	ldr	r2, [pc, #308]	@ (8002c54 <HAL_UART_MspInit+0x310>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	f040 8093 	bne.w	8002c4a <HAL_UART_MspInit+0x306>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002b24:	2300      	movs	r3, #0
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	4b4b      	ldr	r3, [pc, #300]	@ (8002c58 <HAL_UART_MspInit+0x314>)
 8002b2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2c:	4a4a      	ldr	r2, [pc, #296]	@ (8002c58 <HAL_UART_MspInit+0x314>)
 8002b2e:	f043 0320 	orr.w	r3, r3, #32
 8002b32:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b34:	4b48      	ldr	r3, [pc, #288]	@ (8002c58 <HAL_UART_MspInit+0x314>)
 8002b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b38:	f003 0320 	and.w	r3, r3, #32
 8002b3c:	613b      	str	r3, [r7, #16]
 8002b3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b40:	2300      	movs	r3, #0
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	4b44      	ldr	r3, [pc, #272]	@ (8002c58 <HAL_UART_MspInit+0x314>)
 8002b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b48:	4a43      	ldr	r2, [pc, #268]	@ (8002c58 <HAL_UART_MspInit+0x314>)
 8002b4a:	f043 0304 	orr.w	r3, r3, #4
 8002b4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b50:	4b41      	ldr	r3, [pc, #260]	@ (8002c58 <HAL_UART_MspInit+0x314>)
 8002b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b5c:	23c0      	movs	r3, #192	@ 0xc0
 8002b5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b60:	2302      	movs	r3, #2
 8002b62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002b6c:	2308      	movs	r3, #8
 8002b6e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b74:	4619      	mov	r1, r3
 8002b76:	4839      	ldr	r0, [pc, #228]	@ (8002c5c <HAL_UART_MspInit+0x318>)
 8002b78:	f000 ffaa 	bl	8003ad0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002b7c:	4b38      	ldr	r3, [pc, #224]	@ (8002c60 <HAL_UART_MspInit+0x31c>)
 8002b7e:	4a39      	ldr	r2, [pc, #228]	@ (8002c64 <HAL_UART_MspInit+0x320>)
 8002b80:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002b82:	4b37      	ldr	r3, [pc, #220]	@ (8002c60 <HAL_UART_MspInit+0x31c>)
 8002b84:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002b88:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b8a:	4b35      	ldr	r3, [pc, #212]	@ (8002c60 <HAL_UART_MspInit+0x31c>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b90:	4b33      	ldr	r3, [pc, #204]	@ (8002c60 <HAL_UART_MspInit+0x31c>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b96:	4b32      	ldr	r3, [pc, #200]	@ (8002c60 <HAL_UART_MspInit+0x31c>)
 8002b98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b9c:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b9e:	4b30      	ldr	r3, [pc, #192]	@ (8002c60 <HAL_UART_MspInit+0x31c>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ba4:	4b2e      	ldr	r3, [pc, #184]	@ (8002c60 <HAL_UART_MspInit+0x31c>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002baa:	4b2d      	ldr	r3, [pc, #180]	@ (8002c60 <HAL_UART_MspInit+0x31c>)
 8002bac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002bb0:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002bb2:	4b2b      	ldr	r3, [pc, #172]	@ (8002c60 <HAL_UART_MspInit+0x31c>)
 8002bb4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002bb8:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bba:	4b29      	ldr	r3, [pc, #164]	@ (8002c60 <HAL_UART_MspInit+0x31c>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002bc0:	4827      	ldr	r0, [pc, #156]	@ (8002c60 <HAL_UART_MspInit+0x31c>)
 8002bc2:	f000 fb83 	bl	80032cc <HAL_DMA_Init>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <HAL_UART_MspInit+0x28c>
      Error_Handler();
 8002bcc:	f7fd ff70 	bl	8000ab0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a23      	ldr	r2, [pc, #140]	@ (8002c60 <HAL_UART_MspInit+0x31c>)
 8002bd4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002bd6:	4a22      	ldr	r2, [pc, #136]	@ (8002c60 <HAL_UART_MspInit+0x31c>)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002bdc:	4b22      	ldr	r3, [pc, #136]	@ (8002c68 <HAL_UART_MspInit+0x324>)
 8002bde:	4a23      	ldr	r2, [pc, #140]	@ (8002c6c <HAL_UART_MspInit+0x328>)
 8002be0:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8002be2:	4b21      	ldr	r3, [pc, #132]	@ (8002c68 <HAL_UART_MspInit+0x324>)
 8002be4:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002be8:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bea:	4b1f      	ldr	r3, [pc, #124]	@ (8002c68 <HAL_UART_MspInit+0x324>)
 8002bec:	2240      	movs	r2, #64	@ 0x40
 8002bee:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8002c68 <HAL_UART_MspInit+0x324>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8002c68 <HAL_UART_MspInit+0x324>)
 8002bf8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002bfc:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8002c68 <HAL_UART_MspInit+0x324>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c04:	4b18      	ldr	r3, [pc, #96]	@ (8002c68 <HAL_UART_MspInit+0x324>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002c0a:	4b17      	ldr	r3, [pc, #92]	@ (8002c68 <HAL_UART_MspInit+0x324>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002c10:	4b15      	ldr	r3, [pc, #84]	@ (8002c68 <HAL_UART_MspInit+0x324>)
 8002c12:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c16:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c18:	4b13      	ldr	r3, [pc, #76]	@ (8002c68 <HAL_UART_MspInit+0x324>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002c1e:	4812      	ldr	r0, [pc, #72]	@ (8002c68 <HAL_UART_MspInit+0x324>)
 8002c20:	f000 fb54 	bl	80032cc <HAL_DMA_Init>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_UART_MspInit+0x2ea>
      Error_Handler();
 8002c2a:	f7fd ff41 	bl	8000ab0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a0d      	ldr	r2, [pc, #52]	@ (8002c68 <HAL_UART_MspInit+0x324>)
 8002c32:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c34:	4a0c      	ldr	r2, [pc, #48]	@ (8002c68 <HAL_UART_MspInit+0x324>)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	2047      	movs	r0, #71	@ 0x47
 8002c40:	f000 fb0d 	bl	800325e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002c44:	2047      	movs	r0, #71	@ 0x47
 8002c46:	f000 fb26 	bl	8003296 <HAL_NVIC_EnableIRQ>
}
 8002c4a:	bf00      	nop
 8002c4c:	3738      	adds	r7, #56	@ 0x38
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40011400 	.word	0x40011400
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	40020800 	.word	0x40020800
 8002c60:	20000250 	.word	0x20000250
 8002c64:	40026428 	.word	0x40026428
 8002c68:	200002b0 	.word	0x200002b0
 8002c6c:	400264a0 	.word	0x400264a0

08002c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c74:	bf00      	nop
 8002c76:	e7fd      	b.n	8002c74 <NMI_Handler+0x4>

08002c78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c7c:	bf00      	nop
 8002c7e:	e7fd      	b.n	8002c7c <HardFault_Handler+0x4>

08002c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c84:	bf00      	nop
 8002c86:	e7fd      	b.n	8002c84 <MemManage_Handler+0x4>

08002c88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c8c:	bf00      	nop
 8002c8e:	e7fd      	b.n	8002c8c <BusFault_Handler+0x4>

08002c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c94:	bf00      	nop
 8002c96:	e7fd      	b.n	8002c94 <UsageFault_Handler+0x4>

08002c98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c9c:	bf00      	nop
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cc6:	f000 f9ab 	bl	8003020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	bd80      	pop	{r7, pc}
	...

08002cd0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {
 8002cd4:	4b07      	ldr	r3, [pc, #28]	@ (8002cf4 <USART1_IRQHandler+0x24>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0310 	and.w	r3, r3, #16
 8002cde:	2b10      	cmp	r3, #16
 8002ce0:	d102      	bne.n	8002ce8 <USART1_IRQHandler+0x18>
    SecureUart_HandleUartRxEvent(&TxContext);
 8002ce2:	4805      	ldr	r0, [pc, #20]	@ (8002cf8 <USART1_IRQHandler+0x28>)
 8002ce4:	f7fe fae2 	bl	80012ac <SecureUart_HandleUartRxEvent>
  }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ce8:	4802      	ldr	r0, [pc, #8]	@ (8002cf4 <USART1_IRQHandler+0x24>)
 8002cea:	f001 fa43 	bl	8004174 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	200000b8 	.word	0x200000b8
 8002cf8:	20000310 	.word	0x20000310

08002cfc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002d00:	4802      	ldr	r0, [pc, #8]	@ (8002d0c <DMA2_Stream1_IRQHandler+0x10>)
 8002d02:	f000 fc7b 	bl	80035fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	20000250 	.word	0x20000250

08002d10 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002d14:	4802      	ldr	r0, [pc, #8]	@ (8002d20 <DMA2_Stream2_IRQHandler+0x10>)
 8002d16:	f000 fc71 	bl	80035fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000190 	.word	0x20000190

08002d24 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002d28:	4802      	ldr	r0, [pc, #8]	@ (8002d34 <DMA2_Stream6_IRQHandler+0x10>)
 8002d2a:	f000 fc67 	bl	80035fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002d2e:	bf00      	nop
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	200002b0 	.word	0x200002b0

08002d38 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002d3c:	4802      	ldr	r0, [pc, #8]	@ (8002d48 <DMA2_Stream7_IRQHandler+0x10>)
 8002d3e:	f000 fc5d 	bl	80035fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002d42:	bf00      	nop
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	200001f0 	.word	0x200001f0

08002d4c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  if(__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE)) {
 8002d50:	4b07      	ldr	r3, [pc, #28]	@ (8002d70 <USART6_IRQHandler+0x24>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0310 	and.w	r3, r3, #16
 8002d5a:	2b10      	cmp	r3, #16
 8002d5c:	d102      	bne.n	8002d64 <USART6_IRQHandler+0x18>
    SecureUart_HandleUartRxEvent(&RxContext);
 8002d5e:	4805      	ldr	r0, [pc, #20]	@ (8002d74 <USART6_IRQHandler+0x28>)
 8002d60:	f7fe faa4 	bl	80012ac <SecureUart_HandleUartRxEvent>
  }
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002d64:	4802      	ldr	r0, [pc, #8]	@ (8002d70 <USART6_IRQHandler+0x24>)
 8002d66:	f001 fa05 	bl	8004174 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002d6a:	bf00      	nop
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	20000148 	.word	0x20000148
 8002d74:	20000434 	.word	0x20000434

08002d78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  return 1;
 8002d7c:	2301      	movs	r3, #1
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <_kill>:

int _kill(int pid, int sig)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d92:	f002 fcc7 	bl	8005724 <__errno>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2216      	movs	r2, #22
 8002d9a:	601a      	str	r2, [r3, #0]
  return -1;
 8002d9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <_exit>:

void _exit (int status)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002db0:	f04f 31ff 	mov.w	r1, #4294967295
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f7ff ffe7 	bl	8002d88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002dba:	bf00      	nop
 8002dbc:	e7fd      	b.n	8002dba <_exit+0x12>

08002dbe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b086      	sub	sp, #24
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	60f8      	str	r0, [r7, #12]
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	e00a      	b.n	8002de6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002dd0:	f3af 8000 	nop.w
 8002dd4:	4601      	mov	r1, r0
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	1c5a      	adds	r2, r3, #1
 8002dda:	60ba      	str	r2, [r7, #8]
 8002ddc:	b2ca      	uxtb	r2, r1
 8002dde:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	3301      	adds	r3, #1
 8002de4:	617b      	str	r3, [r7, #20]
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	dbf0      	blt.n	8002dd0 <_read+0x12>
  }

  return len;
 8002dee:	687b      	ldr	r3, [r7, #4]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	e009      	b.n	8002e1e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	1c5a      	adds	r2, r3, #1
 8002e0e:	60ba      	str	r2, [r7, #8]
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	617b      	str	r3, [r7, #20]
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	dbf1      	blt.n	8002e0a <_write+0x12>
  }
  return len;
 8002e26:	687b      	ldr	r3, [r7, #4]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <_close>:

int _close(int file)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e58:	605a      	str	r2, [r3, #4]
  return 0;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <_isatty>:

int _isatty(int file)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e70:	2301      	movs	r3, #1
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b085      	sub	sp, #20
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ea0:	4a14      	ldr	r2, [pc, #80]	@ (8002ef4 <_sbrk+0x5c>)
 8002ea2:	4b15      	ldr	r3, [pc, #84]	@ (8002ef8 <_sbrk+0x60>)
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002eac:	4b13      	ldr	r3, [pc, #76]	@ (8002efc <_sbrk+0x64>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d102      	bne.n	8002eba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002eb4:	4b11      	ldr	r3, [pc, #68]	@ (8002efc <_sbrk+0x64>)
 8002eb6:	4a12      	ldr	r2, [pc, #72]	@ (8002f00 <_sbrk+0x68>)
 8002eb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002eba:	4b10      	ldr	r3, [pc, #64]	@ (8002efc <_sbrk+0x64>)
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d207      	bcs.n	8002ed8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ec8:	f002 fc2c 	bl	8005724 <__errno>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	220c      	movs	r2, #12
 8002ed0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed6:	e009      	b.n	8002eec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ed8:	4b08      	ldr	r3, [pc, #32]	@ (8002efc <_sbrk+0x64>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ede:	4b07      	ldr	r3, [pc, #28]	@ (8002efc <_sbrk+0x64>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	4a05      	ldr	r2, [pc, #20]	@ (8002efc <_sbrk+0x64>)
 8002ee8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002eea:	68fb      	ldr	r3, [r7, #12]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3718      	adds	r7, #24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	20020000 	.word	0x20020000
 8002ef8:	00000400 	.word	0x00000400
 8002efc:	20000558 	.word	0x20000558
 8002f00:	200006b0 	.word	0x200006b0

08002f04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f08:	4b06      	ldr	r3, [pc, #24]	@ (8002f24 <SystemInit+0x20>)
 8002f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f0e:	4a05      	ldr	r2, [pc, #20]	@ (8002f24 <SystemInit+0x20>)
 8002f10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f18:	bf00      	nop
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	e000ed00 	.word	0xe000ed00

08002f28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f2c:	f7ff ffea 	bl	8002f04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f30:	480c      	ldr	r0, [pc, #48]	@ (8002f64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f32:	490d      	ldr	r1, [pc, #52]	@ (8002f68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f34:	4a0d      	ldr	r2, [pc, #52]	@ (8002f6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f38:	e002      	b.n	8002f40 <LoopCopyDataInit>

08002f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f3e:	3304      	adds	r3, #4

08002f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f44:	d3f9      	bcc.n	8002f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f46:	4a0a      	ldr	r2, [pc, #40]	@ (8002f70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f48:	4c0a      	ldr	r4, [pc, #40]	@ (8002f74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f4c:	e001      	b.n	8002f52 <LoopFillZerobss>

08002f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f50:	3204      	adds	r2, #4

08002f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f54:	d3fb      	bcc.n	8002f4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f56:	f002 fbeb 	bl	8005730 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f5a:	f7fd fbbf 	bl	80006dc <main>
  bx  lr    
 8002f5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f68:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8002f6c:	08006fdc 	.word	0x08006fdc
  ldr r2, =_sbss
 8002f70:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8002f74:	200006ac 	.word	0x200006ac

08002f78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f78:	e7fe      	b.n	8002f78 <ADC_IRQHandler>
	...

08002f7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f80:	4b0e      	ldr	r3, [pc, #56]	@ (8002fbc <HAL_Init+0x40>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a0d      	ldr	r2, [pc, #52]	@ (8002fbc <HAL_Init+0x40>)
 8002f86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002fbc <HAL_Init+0x40>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a0a      	ldr	r2, [pc, #40]	@ (8002fbc <HAL_Init+0x40>)
 8002f92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f98:	4b08      	ldr	r3, [pc, #32]	@ (8002fbc <HAL_Init+0x40>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a07      	ldr	r2, [pc, #28]	@ (8002fbc <HAL_Init+0x40>)
 8002f9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fa4:	2003      	movs	r0, #3
 8002fa6:	f000 f94f 	bl	8003248 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002faa:	2000      	movs	r0, #0
 8002fac:	f000 f808 	bl	8002fc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fb0:	f7ff fca0 	bl	80028f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40023c00 	.word	0x40023c00

08002fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fc8:	4b12      	ldr	r3, [pc, #72]	@ (8003014 <HAL_InitTick+0x54>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	4b12      	ldr	r3, [pc, #72]	@ (8003018 <HAL_InitTick+0x58>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 f967 	bl	80032b2 <HAL_SYSTICK_Config>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e00e      	b.n	800300c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b0f      	cmp	r3, #15
 8002ff2:	d80a      	bhi.n	800300a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ffc:	f000 f92f 	bl	800325e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003000:	4a06      	ldr	r2, [pc, #24]	@ (800301c <HAL_InitTick+0x5c>)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003006:	2300      	movs	r3, #0
 8003008:	e000      	b.n	800300c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
}
 800300c:	4618      	mov	r0, r3
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	20000034 	.word	0x20000034
 8003018:	2000003c 	.word	0x2000003c
 800301c:	20000038 	.word	0x20000038

08003020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003024:	4b06      	ldr	r3, [pc, #24]	@ (8003040 <HAL_IncTick+0x20>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	461a      	mov	r2, r3
 800302a:	4b06      	ldr	r3, [pc, #24]	@ (8003044 <HAL_IncTick+0x24>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4413      	add	r3, r2
 8003030:	4a04      	ldr	r2, [pc, #16]	@ (8003044 <HAL_IncTick+0x24>)
 8003032:	6013      	str	r3, [r2, #0]
}
 8003034:	bf00      	nop
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	2000003c 	.word	0x2000003c
 8003044:	2000055c 	.word	0x2000055c

08003048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  return uwTick;
 800304c:	4b03      	ldr	r3, [pc, #12]	@ (800305c <HAL_GetTick+0x14>)
 800304e:	681b      	ldr	r3, [r3, #0]
}
 8003050:	4618      	mov	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	2000055c 	.word	0x2000055c

08003060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003068:	f7ff ffee 	bl	8003048 <HAL_GetTick>
 800306c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003078:	d005      	beq.n	8003086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800307a:	4b0a      	ldr	r3, [pc, #40]	@ (80030a4 <HAL_Delay+0x44>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	461a      	mov	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4413      	add	r3, r2
 8003084:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003086:	bf00      	nop
 8003088:	f7ff ffde 	bl	8003048 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	429a      	cmp	r2, r3
 8003096:	d8f7      	bhi.n	8003088 <HAL_Delay+0x28>
  {
  }
}
 8003098:	bf00      	nop
 800309a:	bf00      	nop
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	2000003c 	.word	0x2000003c

080030a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030b8:	4b0c      	ldr	r3, [pc, #48]	@ (80030ec <__NVIC_SetPriorityGrouping+0x44>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030c4:	4013      	ands	r3, r2
 80030c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030da:	4a04      	ldr	r2, [pc, #16]	@ (80030ec <__NVIC_SetPriorityGrouping+0x44>)
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	60d3      	str	r3, [r2, #12]
}
 80030e0:	bf00      	nop
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	e000ed00 	.word	0xe000ed00

080030f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030f4:	4b04      	ldr	r3, [pc, #16]	@ (8003108 <__NVIC_GetPriorityGrouping+0x18>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	0a1b      	lsrs	r3, r3, #8
 80030fa:	f003 0307 	and.w	r3, r3, #7
}
 80030fe:	4618      	mov	r0, r3
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	e000ed00 	.word	0xe000ed00

0800310c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311a:	2b00      	cmp	r3, #0
 800311c:	db0b      	blt.n	8003136 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800311e:	79fb      	ldrb	r3, [r7, #7]
 8003120:	f003 021f 	and.w	r2, r3, #31
 8003124:	4907      	ldr	r1, [pc, #28]	@ (8003144 <__NVIC_EnableIRQ+0x38>)
 8003126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312a:	095b      	lsrs	r3, r3, #5
 800312c:	2001      	movs	r0, #1
 800312e:	fa00 f202 	lsl.w	r2, r0, r2
 8003132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	e000e100 	.word	0xe000e100

08003148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	6039      	str	r1, [r7, #0]
 8003152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003158:	2b00      	cmp	r3, #0
 800315a:	db0a      	blt.n	8003172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	b2da      	uxtb	r2, r3
 8003160:	490c      	ldr	r1, [pc, #48]	@ (8003194 <__NVIC_SetPriority+0x4c>)
 8003162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003166:	0112      	lsls	r2, r2, #4
 8003168:	b2d2      	uxtb	r2, r2
 800316a:	440b      	add	r3, r1
 800316c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003170:	e00a      	b.n	8003188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	b2da      	uxtb	r2, r3
 8003176:	4908      	ldr	r1, [pc, #32]	@ (8003198 <__NVIC_SetPriority+0x50>)
 8003178:	79fb      	ldrb	r3, [r7, #7]
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	3b04      	subs	r3, #4
 8003180:	0112      	lsls	r2, r2, #4
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	440b      	add	r3, r1
 8003186:	761a      	strb	r2, [r3, #24]
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	e000e100 	.word	0xe000e100
 8003198:	e000ed00 	.word	0xe000ed00

0800319c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800319c:	b480      	push	{r7}
 800319e:	b089      	sub	sp, #36	@ 0x24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f1c3 0307 	rsb	r3, r3, #7
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	bf28      	it	cs
 80031ba:	2304      	movcs	r3, #4
 80031bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	3304      	adds	r3, #4
 80031c2:	2b06      	cmp	r3, #6
 80031c4:	d902      	bls.n	80031cc <NVIC_EncodePriority+0x30>
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	3b03      	subs	r3, #3
 80031ca:	e000      	b.n	80031ce <NVIC_EncodePriority+0x32>
 80031cc:	2300      	movs	r3, #0
 80031ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d0:	f04f 32ff 	mov.w	r2, #4294967295
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	43da      	mvns	r2, r3
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	401a      	ands	r2, r3
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031e4:	f04f 31ff 	mov.w	r1, #4294967295
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	fa01 f303 	lsl.w	r3, r1, r3
 80031ee:	43d9      	mvns	r1, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f4:	4313      	orrs	r3, r2
         );
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3724      	adds	r7, #36	@ 0x24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
	...

08003204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3b01      	subs	r3, #1
 8003210:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003214:	d301      	bcc.n	800321a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003216:	2301      	movs	r3, #1
 8003218:	e00f      	b.n	800323a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800321a:	4a0a      	ldr	r2, [pc, #40]	@ (8003244 <SysTick_Config+0x40>)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3b01      	subs	r3, #1
 8003220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003222:	210f      	movs	r1, #15
 8003224:	f04f 30ff 	mov.w	r0, #4294967295
 8003228:	f7ff ff8e 	bl	8003148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800322c:	4b05      	ldr	r3, [pc, #20]	@ (8003244 <SysTick_Config+0x40>)
 800322e:	2200      	movs	r2, #0
 8003230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003232:	4b04      	ldr	r3, [pc, #16]	@ (8003244 <SysTick_Config+0x40>)
 8003234:	2207      	movs	r2, #7
 8003236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	e000e010 	.word	0xe000e010

08003248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7ff ff29 	bl	80030a8 <__NVIC_SetPriorityGrouping>
}
 8003256:	bf00      	nop
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800325e:	b580      	push	{r7, lr}
 8003260:	b086      	sub	sp, #24
 8003262:	af00      	add	r7, sp, #0
 8003264:	4603      	mov	r3, r0
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	607a      	str	r2, [r7, #4]
 800326a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800326c:	2300      	movs	r3, #0
 800326e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003270:	f7ff ff3e 	bl	80030f0 <__NVIC_GetPriorityGrouping>
 8003274:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	68b9      	ldr	r1, [r7, #8]
 800327a:	6978      	ldr	r0, [r7, #20]
 800327c:	f7ff ff8e 	bl	800319c <NVIC_EncodePriority>
 8003280:	4602      	mov	r2, r0
 8003282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003286:	4611      	mov	r1, r2
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff ff5d 	bl	8003148 <__NVIC_SetPriority>
}
 800328e:	bf00      	nop
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	4603      	mov	r3, r0
 800329e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff ff31 	bl	800310c <__NVIC_EnableIRQ>
}
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b082      	sub	sp, #8
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7ff ffa2 	bl	8003204 <SysTick_Config>
 80032c0:	4603      	mov	r3, r0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032d8:	f7ff feb6 	bl	8003048 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e099      	b.n	800341c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0201 	bic.w	r2, r2, #1
 8003306:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003308:	e00f      	b.n	800332a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800330a:	f7ff fe9d 	bl	8003048 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b05      	cmp	r3, #5
 8003316:	d908      	bls.n	800332a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2220      	movs	r2, #32
 800331c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2203      	movs	r2, #3
 8003322:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e078      	b.n	800341c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1e8      	bne.n	800330a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	4b38      	ldr	r3, [pc, #224]	@ (8003424 <HAL_DMA_Init+0x158>)
 8003344:	4013      	ands	r3, r2
 8003346:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003356:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003362:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800336e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4313      	orrs	r3, r2
 800337a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003380:	2b04      	cmp	r3, #4
 8003382:	d107      	bne.n	8003394 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338c:	4313      	orrs	r3, r2
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	4313      	orrs	r3, r2
 8003392:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f023 0307 	bic.w	r3, r3, #7
 80033aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	d117      	bne.n	80033ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00e      	beq.n	80033ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 fb01 	bl	80039d8 <DMA_CheckFifoParam>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2240      	movs	r2, #64	@ 0x40
 80033e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80033ea:	2301      	movs	r3, #1
 80033ec:	e016      	b.n	800341c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 fab8 	bl	800396c <DMA_CalcBaseAndBitshift>
 80033fc:	4603      	mov	r3, r0
 80033fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003404:	223f      	movs	r2, #63	@ 0x3f
 8003406:	409a      	lsls	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	f010803f 	.word	0xf010803f

08003428 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003436:	2300      	movs	r3, #0
 8003438:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800343e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003446:	2b01      	cmp	r3, #1
 8003448:	d101      	bne.n	800344e <HAL_DMA_Start_IT+0x26>
 800344a:	2302      	movs	r3, #2
 800344c:	e040      	b.n	80034d0 <HAL_DMA_Start_IT+0xa8>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b01      	cmp	r3, #1
 8003460:	d12f      	bne.n	80034c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2202      	movs	r2, #2
 8003466:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	68b9      	ldr	r1, [r7, #8]
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 fa4a 	bl	8003910 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003480:	223f      	movs	r2, #63	@ 0x3f
 8003482:	409a      	lsls	r2, r3
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0216 	orr.w	r2, r2, #22
 8003496:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349c:	2b00      	cmp	r3, #0
 800349e:	d007      	beq.n	80034b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 0208 	orr.w	r2, r2, #8
 80034ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0201 	orr.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	e005      	b.n	80034ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034ca:	2302      	movs	r3, #2
 80034cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3718      	adds	r7, #24
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034e6:	f7ff fdaf 	bl	8003048 <HAL_GetTick>
 80034ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d008      	beq.n	800350a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2280      	movs	r2, #128	@ 0x80
 80034fc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e052      	b.n	80035b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0216 	bic.w	r2, r2, #22
 8003518:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695a      	ldr	r2, [r3, #20]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003528:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352e:	2b00      	cmp	r3, #0
 8003530:	d103      	bne.n	800353a <HAL_DMA_Abort+0x62>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003536:	2b00      	cmp	r3, #0
 8003538:	d007      	beq.n	800354a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0208 	bic.w	r2, r2, #8
 8003548:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0201 	bic.w	r2, r2, #1
 8003558:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800355a:	e013      	b.n	8003584 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800355c:	f7ff fd74 	bl	8003048 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b05      	cmp	r3, #5
 8003568:	d90c      	bls.n	8003584 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2220      	movs	r2, #32
 800356e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2203      	movs	r2, #3
 8003574:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e015      	b.n	80035b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1e4      	bne.n	800355c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003596:	223f      	movs	r2, #63	@ 0x3f
 8003598:	409a      	lsls	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d004      	beq.n	80035d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2280      	movs	r2, #128	@ 0x80
 80035d0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e00c      	b.n	80035f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2205      	movs	r2, #5
 80035da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0201 	bic.w	r2, r2, #1
 80035ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003608:	4b8e      	ldr	r3, [pc, #568]	@ (8003844 <HAL_DMA_IRQHandler+0x248>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a8e      	ldr	r2, [pc, #568]	@ (8003848 <HAL_DMA_IRQHandler+0x24c>)
 800360e:	fba2 2303 	umull	r2, r3, r2, r3
 8003612:	0a9b      	lsrs	r3, r3, #10
 8003614:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003626:	2208      	movs	r2, #8
 8003628:	409a      	lsls	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	4013      	ands	r3, r2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d01a      	beq.n	8003668 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b00      	cmp	r3, #0
 800363e:	d013      	beq.n	8003668 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 0204 	bic.w	r2, r2, #4
 800364e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003654:	2208      	movs	r2, #8
 8003656:	409a      	lsls	r2, r3
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003660:	f043 0201 	orr.w	r2, r3, #1
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800366c:	2201      	movs	r2, #1
 800366e:	409a      	lsls	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	4013      	ands	r3, r2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d012      	beq.n	800369e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00b      	beq.n	800369e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800368a:	2201      	movs	r2, #1
 800368c:	409a      	lsls	r2, r3
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003696:	f043 0202 	orr.w	r2, r3, #2
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a2:	2204      	movs	r2, #4
 80036a4:	409a      	lsls	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	4013      	ands	r3, r2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d012      	beq.n	80036d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00b      	beq.n	80036d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c0:	2204      	movs	r2, #4
 80036c2:	409a      	lsls	r2, r3
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036cc:	f043 0204 	orr.w	r2, r3, #4
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d8:	2210      	movs	r2, #16
 80036da:	409a      	lsls	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	4013      	ands	r3, r2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d043      	beq.n	800376c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d03c      	beq.n	800376c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f6:	2210      	movs	r2, #16
 80036f8:	409a      	lsls	r2, r3
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d018      	beq.n	800373e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d108      	bne.n	800372c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371e:	2b00      	cmp	r3, #0
 8003720:	d024      	beq.n	800376c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	4798      	blx	r3
 800372a:	e01f      	b.n	800376c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003730:	2b00      	cmp	r3, #0
 8003732:	d01b      	beq.n	800376c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	4798      	blx	r3
 800373c:	e016      	b.n	800376c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003748:	2b00      	cmp	r3, #0
 800374a:	d107      	bne.n	800375c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0208 	bic.w	r2, r2, #8
 800375a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003760:	2b00      	cmp	r3, #0
 8003762:	d003      	beq.n	800376c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003770:	2220      	movs	r2, #32
 8003772:	409a      	lsls	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4013      	ands	r3, r2
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 808f 	beq.w	800389c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0310 	and.w	r3, r3, #16
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 8087 	beq.w	800389c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003792:	2220      	movs	r2, #32
 8003794:	409a      	lsls	r2, r3
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b05      	cmp	r3, #5
 80037a4:	d136      	bne.n	8003814 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0216 	bic.w	r2, r2, #22
 80037b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	695a      	ldr	r2, [r3, #20]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d103      	bne.n	80037d6 <HAL_DMA_IRQHandler+0x1da>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d007      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0208 	bic.w	r2, r2, #8
 80037e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ea:	223f      	movs	r2, #63	@ 0x3f
 80037ec:	409a      	lsls	r2, r3
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003806:	2b00      	cmp	r3, #0
 8003808:	d07e      	beq.n	8003908 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	4798      	blx	r3
        }
        return;
 8003812:	e079      	b.n	8003908 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d01d      	beq.n	800385e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10d      	bne.n	800384c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003834:	2b00      	cmp	r3, #0
 8003836:	d031      	beq.n	800389c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	4798      	blx	r3
 8003840:	e02c      	b.n	800389c <HAL_DMA_IRQHandler+0x2a0>
 8003842:	bf00      	nop
 8003844:	20000034 	.word	0x20000034
 8003848:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003850:	2b00      	cmp	r3, #0
 8003852:	d023      	beq.n	800389c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	4798      	blx	r3
 800385c:	e01e      	b.n	800389c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10f      	bne.n	800388c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0210 	bic.w	r2, r2, #16
 800387a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d032      	beq.n	800390a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d022      	beq.n	80038f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2205      	movs	r2, #5
 80038b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0201 	bic.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	3301      	adds	r3, #1
 80038cc:	60bb      	str	r3, [r7, #8]
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d307      	bcc.n	80038e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1f2      	bne.n	80038c8 <HAL_DMA_IRQHandler+0x2cc>
 80038e2:	e000      	b.n	80038e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80038e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d005      	beq.n	800390a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	4798      	blx	r3
 8003906:	e000      	b.n	800390a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003908:	bf00      	nop
    }
  }
}
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
 800391c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800392c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2b40      	cmp	r3, #64	@ 0x40
 800393c:	d108      	bne.n	8003950 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800394e:	e007      	b.n	8003960 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	60da      	str	r2, [r3, #12]
}
 8003960:	bf00      	nop
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	b2db      	uxtb	r3, r3
 800397a:	3b10      	subs	r3, #16
 800397c:	4a14      	ldr	r2, [pc, #80]	@ (80039d0 <DMA_CalcBaseAndBitshift+0x64>)
 800397e:	fba2 2303 	umull	r2, r3, r2, r3
 8003982:	091b      	lsrs	r3, r3, #4
 8003984:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003986:	4a13      	ldr	r2, [pc, #76]	@ (80039d4 <DMA_CalcBaseAndBitshift+0x68>)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4413      	add	r3, r2
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	461a      	mov	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b03      	cmp	r3, #3
 8003998:	d909      	bls.n	80039ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039a2:	f023 0303 	bic.w	r3, r3, #3
 80039a6:	1d1a      	adds	r2, r3, #4
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	659a      	str	r2, [r3, #88]	@ 0x58
 80039ac:	e007      	b.n	80039be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039b6:	f023 0303 	bic.w	r3, r3, #3
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	aaaaaaab 	.word	0xaaaaaaab
 80039d4:	08006ee4 	.word	0x08006ee4

080039d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039e0:	2300      	movs	r3, #0
 80039e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d11f      	bne.n	8003a32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	d856      	bhi.n	8003aa6 <DMA_CheckFifoParam+0xce>
 80039f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003a00 <DMA_CheckFifoParam+0x28>)
 80039fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fe:	bf00      	nop
 8003a00:	08003a11 	.word	0x08003a11
 8003a04:	08003a23 	.word	0x08003a23
 8003a08:	08003a11 	.word	0x08003a11
 8003a0c:	08003aa7 	.word	0x08003aa7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d046      	beq.n	8003aaa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a20:	e043      	b.n	8003aaa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a26:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a2a:	d140      	bne.n	8003aae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a30:	e03d      	b.n	8003aae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a3a:	d121      	bne.n	8003a80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2b03      	cmp	r3, #3
 8003a40:	d837      	bhi.n	8003ab2 <DMA_CheckFifoParam+0xda>
 8003a42:	a201      	add	r2, pc, #4	@ (adr r2, 8003a48 <DMA_CheckFifoParam+0x70>)
 8003a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a48:	08003a59 	.word	0x08003a59
 8003a4c:	08003a5f 	.word	0x08003a5f
 8003a50:	08003a59 	.word	0x08003a59
 8003a54:	08003a71 	.word	0x08003a71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a5c:	e030      	b.n	8003ac0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d025      	beq.n	8003ab6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a6e:	e022      	b.n	8003ab6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a74:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a78:	d11f      	bne.n	8003aba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a7e:	e01c      	b.n	8003aba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d903      	bls.n	8003a8e <DMA_CheckFifoParam+0xb6>
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2b03      	cmp	r3, #3
 8003a8a:	d003      	beq.n	8003a94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a8c:	e018      	b.n	8003ac0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	73fb      	strb	r3, [r7, #15]
      break;
 8003a92:	e015      	b.n	8003ac0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00e      	beq.n	8003abe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8003aa4:	e00b      	b.n	8003abe <DMA_CheckFifoParam+0xe6>
      break;
 8003aa6:	bf00      	nop
 8003aa8:	e00a      	b.n	8003ac0 <DMA_CheckFifoParam+0xe8>
      break;
 8003aaa:	bf00      	nop
 8003aac:	e008      	b.n	8003ac0 <DMA_CheckFifoParam+0xe8>
      break;
 8003aae:	bf00      	nop
 8003ab0:	e006      	b.n	8003ac0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ab2:	bf00      	nop
 8003ab4:	e004      	b.n	8003ac0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ab6:	bf00      	nop
 8003ab8:	e002      	b.n	8003ac0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003aba:	bf00      	nop
 8003abc:	e000      	b.n	8003ac0 <DMA_CheckFifoParam+0xe8>
      break;
 8003abe:	bf00      	nop
    }
  } 
  
  return status; 
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop

08003ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b089      	sub	sp, #36	@ 0x24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61fb      	str	r3, [r7, #28]
 8003aea:	e159      	b.n	8003da0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003aec:	2201      	movs	r2, #1
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	4013      	ands	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	f040 8148 	bne.w	8003d9a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d005      	beq.n	8003b22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d130      	bne.n	8003b84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	2203      	movs	r2, #3
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	43db      	mvns	r3, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4013      	ands	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b58:	2201      	movs	r2, #1
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	43db      	mvns	r3, r3
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	4013      	ands	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	091b      	lsrs	r3, r3, #4
 8003b6e:	f003 0201 	and.w	r2, r3, #1
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f003 0303 	and.w	r3, r3, #3
 8003b8c:	2b03      	cmp	r3, #3
 8003b8e:	d017      	beq.n	8003bc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	2203      	movs	r2, #3
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f003 0303 	and.w	r3, r3, #3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d123      	bne.n	8003c14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	08da      	lsrs	r2, r3, #3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	3208      	adds	r2, #8
 8003bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	220f      	movs	r2, #15
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	43db      	mvns	r3, r3
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	4013      	ands	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	691a      	ldr	r2, [r3, #16]
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	08da      	lsrs	r2, r3, #3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	3208      	adds	r2, #8
 8003c0e:	69b9      	ldr	r1, [r7, #24]
 8003c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	2203      	movs	r2, #3
 8003c20:	fa02 f303 	lsl.w	r3, r2, r3
 8003c24:	43db      	mvns	r3, r3
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f003 0203 	and.w	r2, r3, #3
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 80a2 	beq.w	8003d9a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c56:	2300      	movs	r3, #0
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	4b57      	ldr	r3, [pc, #348]	@ (8003db8 <HAL_GPIO_Init+0x2e8>)
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c5e:	4a56      	ldr	r2, [pc, #344]	@ (8003db8 <HAL_GPIO_Init+0x2e8>)
 8003c60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c64:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c66:	4b54      	ldr	r3, [pc, #336]	@ (8003db8 <HAL_GPIO_Init+0x2e8>)
 8003c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c72:	4a52      	ldr	r2, [pc, #328]	@ (8003dbc <HAL_GPIO_Init+0x2ec>)
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	089b      	lsrs	r3, r3, #2
 8003c78:	3302      	adds	r3, #2
 8003c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f003 0303 	and.w	r3, r3, #3
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	220f      	movs	r2, #15
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	43db      	mvns	r3, r3
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	4013      	ands	r3, r2
 8003c94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a49      	ldr	r2, [pc, #292]	@ (8003dc0 <HAL_GPIO_Init+0x2f0>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d019      	beq.n	8003cd2 <HAL_GPIO_Init+0x202>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a48      	ldr	r2, [pc, #288]	@ (8003dc4 <HAL_GPIO_Init+0x2f4>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d013      	beq.n	8003cce <HAL_GPIO_Init+0x1fe>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a47      	ldr	r2, [pc, #284]	@ (8003dc8 <HAL_GPIO_Init+0x2f8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d00d      	beq.n	8003cca <HAL_GPIO_Init+0x1fa>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a46      	ldr	r2, [pc, #280]	@ (8003dcc <HAL_GPIO_Init+0x2fc>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d007      	beq.n	8003cc6 <HAL_GPIO_Init+0x1f6>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a45      	ldr	r2, [pc, #276]	@ (8003dd0 <HAL_GPIO_Init+0x300>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d101      	bne.n	8003cc2 <HAL_GPIO_Init+0x1f2>
 8003cbe:	2304      	movs	r3, #4
 8003cc0:	e008      	b.n	8003cd4 <HAL_GPIO_Init+0x204>
 8003cc2:	2307      	movs	r3, #7
 8003cc4:	e006      	b.n	8003cd4 <HAL_GPIO_Init+0x204>
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e004      	b.n	8003cd4 <HAL_GPIO_Init+0x204>
 8003cca:	2302      	movs	r3, #2
 8003ccc:	e002      	b.n	8003cd4 <HAL_GPIO_Init+0x204>
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e000      	b.n	8003cd4 <HAL_GPIO_Init+0x204>
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	69fa      	ldr	r2, [r7, #28]
 8003cd6:	f002 0203 	and.w	r2, r2, #3
 8003cda:	0092      	lsls	r2, r2, #2
 8003cdc:	4093      	lsls	r3, r2
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ce4:	4935      	ldr	r1, [pc, #212]	@ (8003dbc <HAL_GPIO_Init+0x2ec>)
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	089b      	lsrs	r3, r3, #2
 8003cea:	3302      	adds	r3, #2
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cf2:	4b38      	ldr	r3, [pc, #224]	@ (8003dd4 <HAL_GPIO_Init+0x304>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d16:	4a2f      	ldr	r2, [pc, #188]	@ (8003dd4 <HAL_GPIO_Init+0x304>)
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d1c:	4b2d      	ldr	r3, [pc, #180]	@ (8003dd4 <HAL_GPIO_Init+0x304>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	43db      	mvns	r3, r3
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d40:	4a24      	ldr	r2, [pc, #144]	@ (8003dd4 <HAL_GPIO_Init+0x304>)
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d46:	4b23      	ldr	r3, [pc, #140]	@ (8003dd4 <HAL_GPIO_Init+0x304>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	4013      	ands	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d6a:	4a1a      	ldr	r2, [pc, #104]	@ (8003dd4 <HAL_GPIO_Init+0x304>)
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d70:	4b18      	ldr	r3, [pc, #96]	@ (8003dd4 <HAL_GPIO_Init+0x304>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d94:	4a0f      	ldr	r2, [pc, #60]	@ (8003dd4 <HAL_GPIO_Init+0x304>)
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	61fb      	str	r3, [r7, #28]
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	2b0f      	cmp	r3, #15
 8003da4:	f67f aea2 	bls.w	8003aec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003da8:	bf00      	nop
 8003daa:	bf00      	nop
 8003dac:	3724      	adds	r7, #36	@ 0x24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	40013800 	.word	0x40013800
 8003dc0:	40020000 	.word	0x40020000
 8003dc4:	40020400 	.word	0x40020400
 8003dc8:	40020800 	.word	0x40020800
 8003dcc:	40020c00 	.word	0x40020c00
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	40013c00 	.word	0x40013c00

08003dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	460b      	mov	r3, r1
 8003de2:	807b      	strh	r3, [r7, #2]
 8003de4:	4613      	mov	r3, r2
 8003de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003de8:	787b      	ldrb	r3, [r7, #1]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dee:	887a      	ldrh	r2, [r7, #2]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003df4:	e003      	b.n	8003dfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003df6:	887b      	ldrh	r3, [r7, #2]
 8003df8:	041a      	lsls	r2, r3, #16
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	619a      	str	r2, [r3, #24]
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
	...

08003e0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e10:	4b03      	ldr	r3, [pc, #12]	@ (8003e20 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e12:	681b      	ldr	r3, [r3, #0]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	20000034 	.word	0x20000034

08003e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e28:	f7ff fff0 	bl	8003e0c <HAL_RCC_GetHCLKFreq>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	4b05      	ldr	r3, [pc, #20]	@ (8003e44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	0a9b      	lsrs	r3, r3, #10
 8003e34:	f003 0307 	and.w	r3, r3, #7
 8003e38:	4903      	ldr	r1, [pc, #12]	@ (8003e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e3a:	5ccb      	ldrb	r3, [r1, r3]
 8003e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	40023800 	.word	0x40023800
 8003e48:	08006edc 	.word	0x08006edc

08003e4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e50:	f7ff ffdc 	bl	8003e0c <HAL_RCC_GetHCLKFreq>
 8003e54:	4602      	mov	r2, r0
 8003e56:	4b05      	ldr	r3, [pc, #20]	@ (8003e6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	0b5b      	lsrs	r3, r3, #13
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	4903      	ldr	r1, [pc, #12]	@ (8003e70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e62:	5ccb      	ldrb	r3, [r1, r3]
 8003e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	08006edc 	.word	0x08006edc

08003e74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e042      	b.n	8003f0c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d106      	bne.n	8003ea0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7fe fd52 	bl	8002944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2224      	movs	r2, #36	@ 0x24
 8003ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68da      	ldr	r2, [r3, #12]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003eb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 ffcf 	bl	8004e5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	691a      	ldr	r2, [r3, #16]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ecc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	695a      	ldr	r2, [r3, #20]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003edc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003eec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08a      	sub	sp, #40	@ 0x28
 8003f18:	af02      	add	r7, sp, #8
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	603b      	str	r3, [r7, #0]
 8003f20:	4613      	mov	r3, r2
 8003f22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f24:	2300      	movs	r3, #0
 8003f26:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b20      	cmp	r3, #32
 8003f32:	d175      	bne.n	8004020 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <HAL_UART_Transmit+0x2c>
 8003f3a:	88fb      	ldrh	r3, [r7, #6]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e06e      	b.n	8004022 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2221      	movs	r2, #33	@ 0x21
 8003f4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f52:	f7ff f879 	bl	8003048 <HAL_GetTick>
 8003f56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	88fa      	ldrh	r2, [r7, #6]
 8003f5c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	88fa      	ldrh	r2, [r7, #6]
 8003f62:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f6c:	d108      	bne.n	8003f80 <HAL_UART_Transmit+0x6c>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d104      	bne.n	8003f80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f76:	2300      	movs	r3, #0
 8003f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	61bb      	str	r3, [r7, #24]
 8003f7e:	e003      	b.n	8003f88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f84:	2300      	movs	r3, #0
 8003f86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f88:	e02e      	b.n	8003fe8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2200      	movs	r2, #0
 8003f92:	2180      	movs	r1, #128	@ 0x80
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 fca7 	bl	80048e8 <UART_WaitOnFlagUntilTimeout>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d005      	beq.n	8003fac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e03a      	b.n	8004022 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10b      	bne.n	8003fca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	881b      	ldrh	r3, [r3, #0]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	3302      	adds	r3, #2
 8003fc6:	61bb      	str	r3, [r7, #24]
 8003fc8:	e007      	b.n	8003fda <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	781a      	ldrb	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1cb      	bne.n	8003f8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	2140      	movs	r1, #64	@ 0x40
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 fc73 	bl	80048e8 <UART_WaitOnFlagUntilTimeout>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d005      	beq.n	8004014 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2220      	movs	r2, #32
 800400c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e006      	b.n	8004022 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2220      	movs	r2, #32
 8004018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800401c:	2300      	movs	r3, #0
 800401e:	e000      	b.n	8004022 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004020:	2302      	movs	r3, #2
  }
}
 8004022:	4618      	mov	r0, r3
 8004024:	3720      	adds	r7, #32
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b084      	sub	sp, #16
 800402e:	af00      	add	r7, sp, #0
 8004030:	60f8      	str	r0, [r7, #12]
 8004032:	60b9      	str	r1, [r7, #8]
 8004034:	4613      	mov	r3, r2
 8004036:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b20      	cmp	r3, #32
 8004042:	d112      	bne.n	800406a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <HAL_UART_Receive_DMA+0x26>
 800404a:	88fb      	ldrh	r3, [r7, #6]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d101      	bne.n	8004054 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e00b      	b.n	800406c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800405a:	88fb      	ldrh	r3, [r7, #6]
 800405c:	461a      	mov	r2, r3
 800405e:	68b9      	ldr	r1, [r7, #8]
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f000 fc9b 	bl	800499c <UART_Start_Receive_DMA>
 8004066:	4603      	mov	r3, r0
 8004068:	e000      	b.n	800406c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800406a:	2302      	movs	r3, #2
  }
}
 800406c:	4618      	mov	r0, r3
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b090      	sub	sp, #64	@ 0x40
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800407c:	2300      	movs	r3, #0
 800407e:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800408a:	2b80      	cmp	r3, #128	@ 0x80
 800408c:	bf0c      	ite	eq
 800408e:	2301      	moveq	r3, #1
 8004090:	2300      	movne	r3, #0
 8004092:	b2db      	uxtb	r3, r3
 8004094:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b21      	cmp	r3, #33	@ 0x21
 80040a0:	d128      	bne.n	80040f4 <HAL_UART_DMAStop+0x80>
 80040a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d025      	beq.n	80040f4 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	3314      	adds	r3, #20
 80040ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b2:	e853 3f00 	ldrex	r3, [r3]
 80040b6:	623b      	str	r3, [r7, #32]
   return(result);
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	3314      	adds	r3, #20
 80040c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80040c8:	633a      	str	r2, [r7, #48]	@ 0x30
 80040ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040d0:	e841 2300 	strex	r3, r2, [r1]
 80040d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1e5      	bne.n	80040a8 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d004      	beq.n	80040ee <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7ff f9f5 	bl	80034d8 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fcee 	bl	8004ad0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040fe:	2b40      	cmp	r3, #64	@ 0x40
 8004100:	bf0c      	ite	eq
 8004102:	2301      	moveq	r3, #1
 8004104:	2300      	movne	r3, #0
 8004106:	b2db      	uxtb	r3, r3
 8004108:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b22      	cmp	r3, #34	@ 0x22
 8004114:	d128      	bne.n	8004168 <HAL_UART_DMAStop+0xf4>
 8004116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004118:	2b00      	cmp	r3, #0
 800411a:	d025      	beq.n	8004168 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	3314      	adds	r3, #20
 8004122:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	e853 3f00 	ldrex	r3, [r3]
 800412a:	60fb      	str	r3, [r7, #12]
   return(result);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004132:	637b      	str	r3, [r7, #52]	@ 0x34
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	3314      	adds	r3, #20
 800413a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800413c:	61fa      	str	r2, [r7, #28]
 800413e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004140:	69b9      	ldr	r1, [r7, #24]
 8004142:	69fa      	ldr	r2, [r7, #28]
 8004144:	e841 2300 	strex	r3, r2, [r1]
 8004148:	617b      	str	r3, [r7, #20]
   return(result);
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1e5      	bne.n	800411c <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004154:	2b00      	cmp	r3, #0
 8004156:	d004      	beq.n	8004162 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800415c:	4618      	mov	r0, r3
 800415e:	f7ff f9bb 	bl	80034d8 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 fcdc 	bl	8004b20 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3740      	adds	r7, #64	@ 0x40
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
	...

08004174 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b0ba      	sub	sp, #232	@ 0xe8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800419a:	2300      	movs	r3, #0
 800419c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041aa:	f003 030f 	and.w	r3, r3, #15
 80041ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80041b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10f      	bne.n	80041da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041be:	f003 0320 	and.w	r3, r3, #32
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d009      	beq.n	80041da <HAL_UART_IRQHandler+0x66>
 80041c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041ca:	f003 0320 	and.w	r3, r3, #32
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d003      	beq.n	80041da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 fd83 	bl	8004cde <UART_Receive_IT>
      return;
 80041d8:	e25b      	b.n	8004692 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80041da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 80de 	beq.w	80043a0 <HAL_UART_IRQHandler+0x22c>
 80041e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d106      	bne.n	80041fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80041f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041f4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 80d1 	beq.w	80043a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80041fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00b      	beq.n	8004222 <HAL_UART_IRQHandler+0xae>
 800420a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800420e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004212:	2b00      	cmp	r3, #0
 8004214:	d005      	beq.n	8004222 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800421a:	f043 0201 	orr.w	r2, r3, #1
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004226:	f003 0304 	and.w	r3, r3, #4
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00b      	beq.n	8004246 <HAL_UART_IRQHandler+0xd2>
 800422e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b00      	cmp	r3, #0
 8004238:	d005      	beq.n	8004246 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800423e:	f043 0202 	orr.w	r2, r3, #2
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00b      	beq.n	800426a <HAL_UART_IRQHandler+0xf6>
 8004252:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d005      	beq.n	800426a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004262:	f043 0204 	orr.w	r2, r3, #4
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800426a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800426e:	f003 0308 	and.w	r3, r3, #8
 8004272:	2b00      	cmp	r3, #0
 8004274:	d011      	beq.n	800429a <HAL_UART_IRQHandler+0x126>
 8004276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800427a:	f003 0320 	and.w	r3, r3, #32
 800427e:	2b00      	cmp	r3, #0
 8004280:	d105      	bne.n	800428e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004282:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d005      	beq.n	800429a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004292:	f043 0208 	orr.w	r2, r3, #8
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 81f2 	beq.w	8004688 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042a8:	f003 0320 	and.w	r3, r3, #32
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d008      	beq.n	80042c2 <HAL_UART_IRQHandler+0x14e>
 80042b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042b4:	f003 0320 	and.w	r3, r3, #32
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d002      	beq.n	80042c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 fd0e 	bl	8004cde <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042cc:	2b40      	cmp	r3, #64	@ 0x40
 80042ce:	bf0c      	ite	eq
 80042d0:	2301      	moveq	r3, #1
 80042d2:	2300      	movne	r3, #0
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d103      	bne.n	80042ee <HAL_UART_IRQHandler+0x17a>
 80042e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d04f      	beq.n	800438e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 fc16 	bl	8004b20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042fe:	2b40      	cmp	r3, #64	@ 0x40
 8004300:	d141      	bne.n	8004386 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	3314      	adds	r3, #20
 8004308:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004310:	e853 3f00 	ldrex	r3, [r3]
 8004314:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004318:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800431c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004320:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	3314      	adds	r3, #20
 800432a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800432e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004332:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004336:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800433a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800433e:	e841 2300 	strex	r3, r2, [r1]
 8004342:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004346:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1d9      	bne.n	8004302 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004352:	2b00      	cmp	r3, #0
 8004354:	d013      	beq.n	800437e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800435a:	4a7e      	ldr	r2, [pc, #504]	@ (8004554 <HAL_UART_IRQHandler+0x3e0>)
 800435c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004362:	4618      	mov	r0, r3
 8004364:	f7ff f928 	bl	80035b8 <HAL_DMA_Abort_IT>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d016      	beq.n	800439c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004372:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004378:	4610      	mov	r0, r2
 800437a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800437c:	e00e      	b.n	800439c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f99e 	bl	80046c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004384:	e00a      	b.n	800439c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f99a 	bl	80046c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800438c:	e006      	b.n	800439c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f996 	bl	80046c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800439a:	e175      	b.n	8004688 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800439c:	bf00      	nop
    return;
 800439e:	e173      	b.n	8004688 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	f040 814f 	bne.w	8004648 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80043aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043ae:	f003 0310 	and.w	r3, r3, #16
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 8148 	beq.w	8004648 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80043b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043bc:	f003 0310 	and.w	r3, r3, #16
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f000 8141 	beq.w	8004648 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043c6:	2300      	movs	r3, #0
 80043c8:	60bb      	str	r3, [r7, #8]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	60bb      	str	r3, [r7, #8]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	60bb      	str	r3, [r7, #8]
 80043da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e6:	2b40      	cmp	r3, #64	@ 0x40
 80043e8:	f040 80b6 	bne.w	8004558 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80043f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f000 8145 	beq.w	800468c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004406:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800440a:	429a      	cmp	r2, r3
 800440c:	f080 813e 	bcs.w	800468c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004416:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004422:	f000 8088 	beq.w	8004536 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	330c      	adds	r3, #12
 800442c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004430:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004434:	e853 3f00 	ldrex	r3, [r3]
 8004438:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800443c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004440:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004444:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	330c      	adds	r3, #12
 800444e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004452:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004456:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800445e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004462:	e841 2300 	strex	r3, r2, [r1]
 8004466:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800446a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1d9      	bne.n	8004426 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	3314      	adds	r3, #20
 8004478:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800447c:	e853 3f00 	ldrex	r3, [r3]
 8004480:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004482:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004484:	f023 0301 	bic.w	r3, r3, #1
 8004488:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	3314      	adds	r3, #20
 8004492:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004496:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800449a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800449e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80044a2:	e841 2300 	strex	r3, r2, [r1]
 80044a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80044a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1e1      	bne.n	8004472 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	3314      	adds	r3, #20
 80044b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044b8:	e853 3f00 	ldrex	r3, [r3]
 80044bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80044be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3314      	adds	r3, #20
 80044ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80044d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80044d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80044d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80044da:	e841 2300 	strex	r3, r2, [r1]
 80044de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80044e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1e3      	bne.n	80044ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2220      	movs	r2, #32
 80044ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	330c      	adds	r3, #12
 80044fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044fe:	e853 3f00 	ldrex	r3, [r3]
 8004502:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004504:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004506:	f023 0310 	bic.w	r3, r3, #16
 800450a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	330c      	adds	r3, #12
 8004514:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004518:	65ba      	str	r2, [r7, #88]	@ 0x58
 800451a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800451e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004520:	e841 2300 	strex	r3, r2, [r1]
 8004524:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004526:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1e3      	bne.n	80044f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004530:	4618      	mov	r0, r3
 8004532:	f7fe ffd1 	bl	80034d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2202      	movs	r2, #2
 800453a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004544:	b29b      	uxth	r3, r3
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	b29b      	uxth	r3, r3
 800454a:	4619      	mov	r1, r3
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f8c1 	bl	80046d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004552:	e09b      	b.n	800468c <HAL_UART_IRQHandler+0x518>
 8004554:	08004be7 	.word	0x08004be7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004560:	b29b      	uxth	r3, r3
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800456c:	b29b      	uxth	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	f000 808e 	beq.w	8004690 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004574:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 8089 	beq.w	8004690 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	330c      	adds	r3, #12
 8004584:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004588:	e853 3f00 	ldrex	r3, [r3]
 800458c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800458e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004590:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004594:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	330c      	adds	r3, #12
 800459e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80045a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80045a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045aa:	e841 2300 	strex	r3, r2, [r1]
 80045ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1e3      	bne.n	800457e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	3314      	adds	r3, #20
 80045bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c0:	e853 3f00 	ldrex	r3, [r3]
 80045c4:	623b      	str	r3, [r7, #32]
   return(result);
 80045c6:	6a3b      	ldr	r3, [r7, #32]
 80045c8:	f023 0301 	bic.w	r3, r3, #1
 80045cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	3314      	adds	r3, #20
 80045d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80045da:	633a      	str	r2, [r7, #48]	@ 0x30
 80045dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045e2:	e841 2300 	strex	r3, r2, [r1]
 80045e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80045e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1e3      	bne.n	80045b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2220      	movs	r2, #32
 80045f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	330c      	adds	r3, #12
 8004602:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	e853 3f00 	ldrex	r3, [r3]
 800460a:	60fb      	str	r3, [r7, #12]
   return(result);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f023 0310 	bic.w	r3, r3, #16
 8004612:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	330c      	adds	r3, #12
 800461c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004620:	61fa      	str	r2, [r7, #28]
 8004622:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004624:	69b9      	ldr	r1, [r7, #24]
 8004626:	69fa      	ldr	r2, [r7, #28]
 8004628:	e841 2300 	strex	r3, r2, [r1]
 800462c:	617b      	str	r3, [r7, #20]
   return(result);
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1e3      	bne.n	80045fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2202      	movs	r2, #2
 8004638:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800463a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800463e:	4619      	mov	r1, r3
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f847 	bl	80046d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004646:	e023      	b.n	8004690 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800464c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004650:	2b00      	cmp	r3, #0
 8004652:	d009      	beq.n	8004668 <HAL_UART_IRQHandler+0x4f4>
 8004654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004658:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800465c:	2b00      	cmp	r3, #0
 800465e:	d003      	beq.n	8004668 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 fad4 	bl	8004c0e <UART_Transmit_IT>
    return;
 8004666:	e014      	b.n	8004692 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800466c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00e      	beq.n	8004692 <HAL_UART_IRQHandler+0x51e>
 8004674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800467c:	2b00      	cmp	r3, #0
 800467e:	d008      	beq.n	8004692 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 fb14 	bl	8004cae <UART_EndTransmit_IT>
    return;
 8004686:	e004      	b.n	8004692 <HAL_UART_IRQHandler+0x51e>
    return;
 8004688:	bf00      	nop
 800468a:	e002      	b.n	8004692 <HAL_UART_IRQHandler+0x51e>
      return;
 800468c:	bf00      	nop
 800468e:	e000      	b.n	8004692 <HAL_UART_IRQHandler+0x51e>
      return;
 8004690:	bf00      	nop
  }
}
 8004692:	37e8      	adds	r7, #232	@ 0xe8
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	460b      	mov	r3, r1
 80046de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b09c      	sub	sp, #112	@ 0x70
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004704:	2b00      	cmp	r3, #0
 8004706:	d172      	bne.n	80047ee <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004708:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800470a:	2200      	movs	r2, #0
 800470c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800470e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	330c      	adds	r3, #12
 8004714:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004716:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004718:	e853 3f00 	ldrex	r3, [r3]
 800471c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800471e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004720:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004724:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004726:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	330c      	adds	r3, #12
 800472c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800472e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004730:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004732:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004734:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004736:	e841 2300 	strex	r3, r2, [r1]
 800473a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800473c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1e5      	bne.n	800470e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004742:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	3314      	adds	r3, #20
 8004748:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800474c:	e853 3f00 	ldrex	r3, [r3]
 8004750:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004754:	f023 0301 	bic.w	r3, r3, #1
 8004758:	667b      	str	r3, [r7, #100]	@ 0x64
 800475a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	3314      	adds	r3, #20
 8004760:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004762:	647a      	str	r2, [r7, #68]	@ 0x44
 8004764:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004766:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004768:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800476a:	e841 2300 	strex	r3, r2, [r1]
 800476e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004770:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1e5      	bne.n	8004742 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004776:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	3314      	adds	r3, #20
 800477c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004780:	e853 3f00 	ldrex	r3, [r3]
 8004784:	623b      	str	r3, [r7, #32]
   return(result);
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800478c:	663b      	str	r3, [r7, #96]	@ 0x60
 800478e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	3314      	adds	r3, #20
 8004794:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004796:	633a      	str	r2, [r7, #48]	@ 0x30
 8004798:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800479c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800479e:	e841 2300 	strex	r3, r2, [r1]
 80047a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1e5      	bne.n	8004776 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80047aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047ac:	2220      	movs	r2, #32
 80047ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d119      	bne.n	80047ee <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	330c      	adds	r3, #12
 80047c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	e853 3f00 	ldrex	r3, [r3]
 80047c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f023 0310 	bic.w	r3, r3, #16
 80047d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	330c      	adds	r3, #12
 80047d8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80047da:	61fa      	str	r2, [r7, #28]
 80047dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047de:	69b9      	ldr	r1, [r7, #24]
 80047e0:	69fa      	ldr	r2, [r7, #28]
 80047e2:	e841 2300 	strex	r3, r2, [r1]
 80047e6:	617b      	str	r3, [r7, #20]
   return(result);
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1e5      	bne.n	80047ba <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047f0:	2200      	movs	r2, #0
 80047f2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d106      	bne.n	800480a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047fe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004800:	4619      	mov	r1, r3
 8004802:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004804:	f7ff ff66 	bl	80046d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004808:	e002      	b.n	8004810 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800480a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800480c:	f7fb fed6 	bl	80005bc <HAL_UART_RxCpltCallback>
}
 8004810:	bf00      	nop
 8004812:	3770      	adds	r7, #112	@ 0x70
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004824:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2201      	movs	r2, #1
 800482a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004830:	2b01      	cmp	r3, #1
 8004832:	d108      	bne.n	8004846 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004838:	085b      	lsrs	r3, r3, #1
 800483a:	b29b      	uxth	r3, r3
 800483c:	4619      	mov	r1, r3
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f7ff ff48 	bl	80046d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004844:	e002      	b.n	800484c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f7ff ff30 	bl	80046ac <HAL_UART_RxHalfCpltCallback>
}
 800484c:	bf00      	nop
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800485c:	2300      	movs	r3, #0
 800485e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004864:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004870:	2b80      	cmp	r3, #128	@ 0x80
 8004872:	bf0c      	ite	eq
 8004874:	2301      	moveq	r3, #1
 8004876:	2300      	movne	r3, #0
 8004878:	b2db      	uxtb	r3, r3
 800487a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b21      	cmp	r3, #33	@ 0x21
 8004886:	d108      	bne.n	800489a <UART_DMAError+0x46>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d005      	beq.n	800489a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2200      	movs	r2, #0
 8004892:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004894:	68b8      	ldr	r0, [r7, #8]
 8004896:	f000 f91b 	bl	8004ad0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a4:	2b40      	cmp	r3, #64	@ 0x40
 80048a6:	bf0c      	ite	eq
 80048a8:	2301      	moveq	r3, #1
 80048aa:	2300      	movne	r3, #0
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b22      	cmp	r3, #34	@ 0x22
 80048ba:	d108      	bne.n	80048ce <UART_DMAError+0x7a>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d005      	beq.n	80048ce <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	2200      	movs	r2, #0
 80048c6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80048c8:	68b8      	ldr	r0, [r7, #8]
 80048ca:	f000 f929 	bl	8004b20 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d2:	f043 0210 	orr.w	r2, r3, #16
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048da:	68b8      	ldr	r0, [r7, #8]
 80048dc:	f7ff fef0 	bl	80046c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048e0:	bf00      	nop
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	603b      	str	r3, [r7, #0]
 80048f4:	4613      	mov	r3, r2
 80048f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048f8:	e03b      	b.n	8004972 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048fa:	6a3b      	ldr	r3, [r7, #32]
 80048fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004900:	d037      	beq.n	8004972 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004902:	f7fe fba1 	bl	8003048 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	6a3a      	ldr	r2, [r7, #32]
 800490e:	429a      	cmp	r2, r3
 8004910:	d302      	bcc.n	8004918 <UART_WaitOnFlagUntilTimeout+0x30>
 8004912:	6a3b      	ldr	r3, [r7, #32]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e03a      	b.n	8004992 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	f003 0304 	and.w	r3, r3, #4
 8004926:	2b00      	cmp	r3, #0
 8004928:	d023      	beq.n	8004972 <UART_WaitOnFlagUntilTimeout+0x8a>
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b80      	cmp	r3, #128	@ 0x80
 800492e:	d020      	beq.n	8004972 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	2b40      	cmp	r3, #64	@ 0x40
 8004934:	d01d      	beq.n	8004972 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0308 	and.w	r3, r3, #8
 8004940:	2b08      	cmp	r3, #8
 8004942:	d116      	bne.n	8004972 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004944:	2300      	movs	r3, #0
 8004946:	617b      	str	r3, [r7, #20]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	617b      	str	r3, [r7, #20]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	617b      	str	r3, [r7, #20]
 8004958:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 f8e0 	bl	8004b20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2208      	movs	r2, #8
 8004964:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e00f      	b.n	8004992 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	4013      	ands	r3, r2
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	429a      	cmp	r2, r3
 8004980:	bf0c      	ite	eq
 8004982:	2301      	moveq	r3, #1
 8004984:	2300      	movne	r3, #0
 8004986:	b2db      	uxtb	r3, r3
 8004988:	461a      	mov	r2, r3
 800498a:	79fb      	ldrb	r3, [r7, #7]
 800498c:	429a      	cmp	r2, r3
 800498e:	d0b4      	beq.n	80048fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3718      	adds	r7, #24
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
	...

0800499c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b098      	sub	sp, #96	@ 0x60
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	4613      	mov	r3, r2
 80049a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	88fa      	ldrh	r2, [r7, #6]
 80049b4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2222      	movs	r2, #34	@ 0x22
 80049c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049c8:	4a3e      	ldr	r2, [pc, #248]	@ (8004ac4 <UART_Start_Receive_DMA+0x128>)
 80049ca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049d0:	4a3d      	ldr	r2, [pc, #244]	@ (8004ac8 <UART_Start_Receive_DMA+0x12c>)
 80049d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049d8:	4a3c      	ldr	r2, [pc, #240]	@ (8004acc <UART_Start_Receive_DMA+0x130>)
 80049da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e0:	2200      	movs	r2, #0
 80049e2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80049e4:	f107 0308 	add.w	r3, r7, #8
 80049e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3304      	adds	r3, #4
 80049f4:	4619      	mov	r1, r3
 80049f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	88fb      	ldrh	r3, [r7, #6]
 80049fc:	f7fe fd14 	bl	8003428 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004a00:	2300      	movs	r3, #0
 8004a02:	613b      	str	r3, [r7, #16]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	613b      	str	r3, [r7, #16]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	613b      	str	r3, [r7, #16]
 8004a14:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d019      	beq.n	8004a52 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	330c      	adds	r3, #12
 8004a24:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a28:	e853 3f00 	ldrex	r3, [r3]
 8004a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a34:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	330c      	adds	r3, #12
 8004a3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a3e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004a40:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a42:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004a44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a46:	e841 2300 	strex	r3, r2, [r1]
 8004a4a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004a4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1e5      	bne.n	8004a1e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	3314      	adds	r3, #20
 8004a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a5c:	e853 3f00 	ldrex	r3, [r3]
 8004a60:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a64:	f043 0301 	orr.w	r3, r3, #1
 8004a68:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	3314      	adds	r3, #20
 8004a70:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004a72:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004a74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a76:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004a78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a7a:	e841 2300 	strex	r3, r2, [r1]
 8004a7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1e5      	bne.n	8004a52 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	3314      	adds	r3, #20
 8004a8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	e853 3f00 	ldrex	r3, [r3]
 8004a94:	617b      	str	r3, [r7, #20]
   return(result);
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a9c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	3314      	adds	r3, #20
 8004aa4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004aa6:	627a      	str	r2, [r7, #36]	@ 0x24
 8004aa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aaa:	6a39      	ldr	r1, [r7, #32]
 8004aac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aae:	e841 2300 	strex	r3, r2, [r1]
 8004ab2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1e5      	bne.n	8004a86 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3760      	adds	r7, #96	@ 0x60
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	080046ed 	.word	0x080046ed
 8004ac8:	08004819 	.word	0x08004819
 8004acc:	08004855 	.word	0x08004855

08004ad0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b089      	sub	sp, #36	@ 0x24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	330c      	adds	r3, #12
 8004ade:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	e853 3f00 	ldrex	r3, [r3]
 8004ae6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004aee:	61fb      	str	r3, [r7, #28]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	330c      	adds	r3, #12
 8004af6:	69fa      	ldr	r2, [r7, #28]
 8004af8:	61ba      	str	r2, [r7, #24]
 8004afa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afc:	6979      	ldr	r1, [r7, #20]
 8004afe:	69ba      	ldr	r2, [r7, #24]
 8004b00:	e841 2300 	strex	r3, r2, [r1]
 8004b04:	613b      	str	r3, [r7, #16]
   return(result);
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1e5      	bne.n	8004ad8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004b14:	bf00      	nop
 8004b16:	3724      	adds	r7, #36	@ 0x24
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b095      	sub	sp, #84	@ 0x54
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	330c      	adds	r3, #12
 8004b2e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b32:	e853 3f00 	ldrex	r3, [r3]
 8004b36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	330c      	adds	r3, #12
 8004b46:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b48:	643a      	str	r2, [r7, #64]	@ 0x40
 8004b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b50:	e841 2300 	strex	r3, r2, [r1]
 8004b54:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1e5      	bne.n	8004b28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3314      	adds	r3, #20
 8004b62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	e853 3f00 	ldrex	r3, [r3]
 8004b6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	f023 0301 	bic.w	r3, r3, #1
 8004b72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	3314      	adds	r3, #20
 8004b7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b84:	e841 2300 	strex	r3, r2, [r1]
 8004b88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1e5      	bne.n	8004b5c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d119      	bne.n	8004bcc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	330c      	adds	r3, #12
 8004b9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	e853 3f00 	ldrex	r3, [r3]
 8004ba6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f023 0310 	bic.w	r3, r3, #16
 8004bae:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	330c      	adds	r3, #12
 8004bb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bb8:	61ba      	str	r2, [r7, #24]
 8004bba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbc:	6979      	ldr	r1, [r7, #20]
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	e841 2300 	strex	r3, r2, [r1]
 8004bc4:	613b      	str	r3, [r7, #16]
   return(result);
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1e5      	bne.n	8004b98 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004bda:	bf00      	nop
 8004bdc:	3754      	adds	r7, #84	@ 0x54
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b084      	sub	sp, #16
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f7ff fd5d 	bl	80046c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c06:	bf00      	nop
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b085      	sub	sp, #20
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b21      	cmp	r3, #33	@ 0x21
 8004c20:	d13e      	bne.n	8004ca0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c2a:	d114      	bne.n	8004c56 <UART_Transmit_IT+0x48>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d110      	bne.n	8004c56 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	881b      	ldrh	r3, [r3, #0]
 8004c3e:	461a      	mov	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c48:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	1c9a      	adds	r2, r3, #2
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	621a      	str	r2, [r3, #32]
 8004c54:	e008      	b.n	8004c68 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	1c59      	adds	r1, r3, #1
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6211      	str	r1, [r2, #32]
 8004c60:	781a      	ldrb	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	4619      	mov	r1, r3
 8004c76:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10f      	bne.n	8004c9c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c8a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68da      	ldr	r2, [r3, #12]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c9a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	e000      	b.n	8004ca2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ca0:	2302      	movs	r3, #2
  }
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b082      	sub	sp, #8
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68da      	ldr	r2, [r3, #12]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cc4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7ff fce2 	bl	8004698 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b08c      	sub	sp, #48	@ 0x30
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b22      	cmp	r3, #34	@ 0x22
 8004cf0:	f040 80ae 	bne.w	8004e50 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cfc:	d117      	bne.n	8004d2e <UART_Receive_IT+0x50>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d113      	bne.n	8004d2e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d06:	2300      	movs	r3, #0
 8004d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d20:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d26:	1c9a      	adds	r2, r3, #2
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004d2c:	e026      	b.n	8004d7c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004d34:	2300      	movs	r3, #0
 8004d36:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d40:	d007      	beq.n	8004d52 <UART_Receive_IT+0x74>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10a      	bne.n	8004d60 <UART_Receive_IT+0x82>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d106      	bne.n	8004d60 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	b2da      	uxtb	r2, r3
 8004d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d5c:	701a      	strb	r2, [r3, #0]
 8004d5e:	e008      	b.n	8004d72 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d70:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d76:	1c5a      	adds	r2, r3, #1
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	3b01      	subs	r3, #1
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	4619      	mov	r1, r3
 8004d8a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d15d      	bne.n	8004e4c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68da      	ldr	r2, [r3, #12]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 0220 	bic.w	r2, r2, #32
 8004d9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68da      	ldr	r2, [r3, #12]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004dae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	695a      	ldr	r2, [r3, #20]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0201 	bic.w	r2, r2, #1
 8004dbe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d135      	bne.n	8004e42 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	330c      	adds	r3, #12
 8004de2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	e853 3f00 	ldrex	r3, [r3]
 8004dea:	613b      	str	r3, [r7, #16]
   return(result);
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	f023 0310 	bic.w	r3, r3, #16
 8004df2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	330c      	adds	r3, #12
 8004dfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dfc:	623a      	str	r2, [r7, #32]
 8004dfe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e00:	69f9      	ldr	r1, [r7, #28]
 8004e02:	6a3a      	ldr	r2, [r7, #32]
 8004e04:	e841 2300 	strex	r3, r2, [r1]
 8004e08:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1e5      	bne.n	8004ddc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0310 	and.w	r3, r3, #16
 8004e1a:	2b10      	cmp	r3, #16
 8004e1c:	d10a      	bne.n	8004e34 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e1e:	2300      	movs	r3, #0
 8004e20:	60fb      	str	r3, [r7, #12]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	60fb      	str	r3, [r7, #12]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004e38:	4619      	mov	r1, r3
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7ff fc4a 	bl	80046d4 <HAL_UARTEx_RxEventCallback>
 8004e40:	e002      	b.n	8004e48 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7fb fbba 	bl	80005bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	e002      	b.n	8004e52 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	e000      	b.n	8004e52 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004e50:	2302      	movs	r3, #2
  }
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3730      	adds	r7, #48	@ 0x30
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
	...

08004e5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e60:	b0c0      	sub	sp, #256	@ 0x100
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e78:	68d9      	ldr	r1, [r3, #12]
 8004e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	ea40 0301 	orr.w	r3, r0, r1
 8004e84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	431a      	orrs	r2, r3
 8004e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea0:	69db      	ldr	r3, [r3, #28]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004eb4:	f021 010c 	bic.w	r1, r1, #12
 8004eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004ec2:	430b      	orrs	r3, r1
 8004ec4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed6:	6999      	ldr	r1, [r3, #24]
 8004ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	ea40 0301 	orr.w	r3, r0, r1
 8004ee2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	4b8f      	ldr	r3, [pc, #572]	@ (8005128 <UART_SetConfig+0x2cc>)
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d005      	beq.n	8004efc <UART_SetConfig+0xa0>
 8004ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	4b8d      	ldr	r3, [pc, #564]	@ (800512c <UART_SetConfig+0x2d0>)
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d104      	bne.n	8004f06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004efc:	f7fe ffa6 	bl	8003e4c <HAL_RCC_GetPCLK2Freq>
 8004f00:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004f04:	e003      	b.n	8004f0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f06:	f7fe ff8d 	bl	8003e24 <HAL_RCC_GetPCLK1Freq>
 8004f0a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f12:	69db      	ldr	r3, [r3, #28]
 8004f14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f18:	f040 810c 	bne.w	8005134 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f20:	2200      	movs	r2, #0
 8004f22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f26:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004f2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004f2e:	4622      	mov	r2, r4
 8004f30:	462b      	mov	r3, r5
 8004f32:	1891      	adds	r1, r2, r2
 8004f34:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004f36:	415b      	adcs	r3, r3
 8004f38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004f3e:	4621      	mov	r1, r4
 8004f40:	eb12 0801 	adds.w	r8, r2, r1
 8004f44:	4629      	mov	r1, r5
 8004f46:	eb43 0901 	adc.w	r9, r3, r1
 8004f4a:	f04f 0200 	mov.w	r2, #0
 8004f4e:	f04f 0300 	mov.w	r3, #0
 8004f52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f5e:	4690      	mov	r8, r2
 8004f60:	4699      	mov	r9, r3
 8004f62:	4623      	mov	r3, r4
 8004f64:	eb18 0303 	adds.w	r3, r8, r3
 8004f68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004f6c:	462b      	mov	r3, r5
 8004f6e:	eb49 0303 	adc.w	r3, r9, r3
 8004f72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f82:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004f86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	18db      	adds	r3, r3, r3
 8004f8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f90:	4613      	mov	r3, r2
 8004f92:	eb42 0303 	adc.w	r3, r2, r3
 8004f96:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004f9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004fa0:	f7fb f976 	bl	8000290 <__aeabi_uldivmod>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	4b61      	ldr	r3, [pc, #388]	@ (8005130 <UART_SetConfig+0x2d4>)
 8004faa:	fba3 2302 	umull	r2, r3, r3, r2
 8004fae:	095b      	lsrs	r3, r3, #5
 8004fb0:	011c      	lsls	r4, r3, #4
 8004fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004fbc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004fc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004fc4:	4642      	mov	r2, r8
 8004fc6:	464b      	mov	r3, r9
 8004fc8:	1891      	adds	r1, r2, r2
 8004fca:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004fcc:	415b      	adcs	r3, r3
 8004fce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004fd4:	4641      	mov	r1, r8
 8004fd6:	eb12 0a01 	adds.w	sl, r2, r1
 8004fda:	4649      	mov	r1, r9
 8004fdc:	eb43 0b01 	adc.w	fp, r3, r1
 8004fe0:	f04f 0200 	mov.w	r2, #0
 8004fe4:	f04f 0300 	mov.w	r3, #0
 8004fe8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004fec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ff0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ff4:	4692      	mov	sl, r2
 8004ff6:	469b      	mov	fp, r3
 8004ff8:	4643      	mov	r3, r8
 8004ffa:	eb1a 0303 	adds.w	r3, sl, r3
 8004ffe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005002:	464b      	mov	r3, r9
 8005004:	eb4b 0303 	adc.w	r3, fp, r3
 8005008:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800500c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005018:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800501c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005020:	460b      	mov	r3, r1
 8005022:	18db      	adds	r3, r3, r3
 8005024:	643b      	str	r3, [r7, #64]	@ 0x40
 8005026:	4613      	mov	r3, r2
 8005028:	eb42 0303 	adc.w	r3, r2, r3
 800502c:	647b      	str	r3, [r7, #68]	@ 0x44
 800502e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005032:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005036:	f7fb f92b 	bl	8000290 <__aeabi_uldivmod>
 800503a:	4602      	mov	r2, r0
 800503c:	460b      	mov	r3, r1
 800503e:	4611      	mov	r1, r2
 8005040:	4b3b      	ldr	r3, [pc, #236]	@ (8005130 <UART_SetConfig+0x2d4>)
 8005042:	fba3 2301 	umull	r2, r3, r3, r1
 8005046:	095b      	lsrs	r3, r3, #5
 8005048:	2264      	movs	r2, #100	@ 0x64
 800504a:	fb02 f303 	mul.w	r3, r2, r3
 800504e:	1acb      	subs	r3, r1, r3
 8005050:	00db      	lsls	r3, r3, #3
 8005052:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005056:	4b36      	ldr	r3, [pc, #216]	@ (8005130 <UART_SetConfig+0x2d4>)
 8005058:	fba3 2302 	umull	r2, r3, r3, r2
 800505c:	095b      	lsrs	r3, r3, #5
 800505e:	005b      	lsls	r3, r3, #1
 8005060:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005064:	441c      	add	r4, r3
 8005066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800506a:	2200      	movs	r2, #0
 800506c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005070:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005074:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005078:	4642      	mov	r2, r8
 800507a:	464b      	mov	r3, r9
 800507c:	1891      	adds	r1, r2, r2
 800507e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005080:	415b      	adcs	r3, r3
 8005082:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005084:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005088:	4641      	mov	r1, r8
 800508a:	1851      	adds	r1, r2, r1
 800508c:	6339      	str	r1, [r7, #48]	@ 0x30
 800508e:	4649      	mov	r1, r9
 8005090:	414b      	adcs	r3, r1
 8005092:	637b      	str	r3, [r7, #52]	@ 0x34
 8005094:	f04f 0200 	mov.w	r2, #0
 8005098:	f04f 0300 	mov.w	r3, #0
 800509c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80050a0:	4659      	mov	r1, fp
 80050a2:	00cb      	lsls	r3, r1, #3
 80050a4:	4651      	mov	r1, sl
 80050a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050aa:	4651      	mov	r1, sl
 80050ac:	00ca      	lsls	r2, r1, #3
 80050ae:	4610      	mov	r0, r2
 80050b0:	4619      	mov	r1, r3
 80050b2:	4603      	mov	r3, r0
 80050b4:	4642      	mov	r2, r8
 80050b6:	189b      	adds	r3, r3, r2
 80050b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050bc:	464b      	mov	r3, r9
 80050be:	460a      	mov	r2, r1
 80050c0:	eb42 0303 	adc.w	r3, r2, r3
 80050c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80050d4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80050d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80050dc:	460b      	mov	r3, r1
 80050de:	18db      	adds	r3, r3, r3
 80050e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050e2:	4613      	mov	r3, r2
 80050e4:	eb42 0303 	adc.w	r3, r2, r3
 80050e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80050ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80050f2:	f7fb f8cd 	bl	8000290 <__aeabi_uldivmod>
 80050f6:	4602      	mov	r2, r0
 80050f8:	460b      	mov	r3, r1
 80050fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005130 <UART_SetConfig+0x2d4>)
 80050fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005100:	095b      	lsrs	r3, r3, #5
 8005102:	2164      	movs	r1, #100	@ 0x64
 8005104:	fb01 f303 	mul.w	r3, r1, r3
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	3332      	adds	r3, #50	@ 0x32
 800510e:	4a08      	ldr	r2, [pc, #32]	@ (8005130 <UART_SetConfig+0x2d4>)
 8005110:	fba2 2303 	umull	r2, r3, r2, r3
 8005114:	095b      	lsrs	r3, r3, #5
 8005116:	f003 0207 	and.w	r2, r3, #7
 800511a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4422      	add	r2, r4
 8005122:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005124:	e106      	b.n	8005334 <UART_SetConfig+0x4d8>
 8005126:	bf00      	nop
 8005128:	40011000 	.word	0x40011000
 800512c:	40011400 	.word	0x40011400
 8005130:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005134:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005138:	2200      	movs	r2, #0
 800513a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800513e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005142:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005146:	4642      	mov	r2, r8
 8005148:	464b      	mov	r3, r9
 800514a:	1891      	adds	r1, r2, r2
 800514c:	6239      	str	r1, [r7, #32]
 800514e:	415b      	adcs	r3, r3
 8005150:	627b      	str	r3, [r7, #36]	@ 0x24
 8005152:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005156:	4641      	mov	r1, r8
 8005158:	1854      	adds	r4, r2, r1
 800515a:	4649      	mov	r1, r9
 800515c:	eb43 0501 	adc.w	r5, r3, r1
 8005160:	f04f 0200 	mov.w	r2, #0
 8005164:	f04f 0300 	mov.w	r3, #0
 8005168:	00eb      	lsls	r3, r5, #3
 800516a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800516e:	00e2      	lsls	r2, r4, #3
 8005170:	4614      	mov	r4, r2
 8005172:	461d      	mov	r5, r3
 8005174:	4643      	mov	r3, r8
 8005176:	18e3      	adds	r3, r4, r3
 8005178:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800517c:	464b      	mov	r3, r9
 800517e:	eb45 0303 	adc.w	r3, r5, r3
 8005182:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005192:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005196:	f04f 0200 	mov.w	r2, #0
 800519a:	f04f 0300 	mov.w	r3, #0
 800519e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80051a2:	4629      	mov	r1, r5
 80051a4:	008b      	lsls	r3, r1, #2
 80051a6:	4621      	mov	r1, r4
 80051a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051ac:	4621      	mov	r1, r4
 80051ae:	008a      	lsls	r2, r1, #2
 80051b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80051b4:	f7fb f86c 	bl	8000290 <__aeabi_uldivmod>
 80051b8:	4602      	mov	r2, r0
 80051ba:	460b      	mov	r3, r1
 80051bc:	4b60      	ldr	r3, [pc, #384]	@ (8005340 <UART_SetConfig+0x4e4>)
 80051be:	fba3 2302 	umull	r2, r3, r3, r2
 80051c2:	095b      	lsrs	r3, r3, #5
 80051c4:	011c      	lsls	r4, r3, #4
 80051c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051ca:	2200      	movs	r2, #0
 80051cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80051d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80051d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80051d8:	4642      	mov	r2, r8
 80051da:	464b      	mov	r3, r9
 80051dc:	1891      	adds	r1, r2, r2
 80051de:	61b9      	str	r1, [r7, #24]
 80051e0:	415b      	adcs	r3, r3
 80051e2:	61fb      	str	r3, [r7, #28]
 80051e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051e8:	4641      	mov	r1, r8
 80051ea:	1851      	adds	r1, r2, r1
 80051ec:	6139      	str	r1, [r7, #16]
 80051ee:	4649      	mov	r1, r9
 80051f0:	414b      	adcs	r3, r1
 80051f2:	617b      	str	r3, [r7, #20]
 80051f4:	f04f 0200 	mov.w	r2, #0
 80051f8:	f04f 0300 	mov.w	r3, #0
 80051fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005200:	4659      	mov	r1, fp
 8005202:	00cb      	lsls	r3, r1, #3
 8005204:	4651      	mov	r1, sl
 8005206:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800520a:	4651      	mov	r1, sl
 800520c:	00ca      	lsls	r2, r1, #3
 800520e:	4610      	mov	r0, r2
 8005210:	4619      	mov	r1, r3
 8005212:	4603      	mov	r3, r0
 8005214:	4642      	mov	r2, r8
 8005216:	189b      	adds	r3, r3, r2
 8005218:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800521c:	464b      	mov	r3, r9
 800521e:	460a      	mov	r2, r1
 8005220:	eb42 0303 	adc.w	r3, r2, r3
 8005224:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005232:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005234:	f04f 0200 	mov.w	r2, #0
 8005238:	f04f 0300 	mov.w	r3, #0
 800523c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005240:	4649      	mov	r1, r9
 8005242:	008b      	lsls	r3, r1, #2
 8005244:	4641      	mov	r1, r8
 8005246:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800524a:	4641      	mov	r1, r8
 800524c:	008a      	lsls	r2, r1, #2
 800524e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005252:	f7fb f81d 	bl	8000290 <__aeabi_uldivmod>
 8005256:	4602      	mov	r2, r0
 8005258:	460b      	mov	r3, r1
 800525a:	4611      	mov	r1, r2
 800525c:	4b38      	ldr	r3, [pc, #224]	@ (8005340 <UART_SetConfig+0x4e4>)
 800525e:	fba3 2301 	umull	r2, r3, r3, r1
 8005262:	095b      	lsrs	r3, r3, #5
 8005264:	2264      	movs	r2, #100	@ 0x64
 8005266:	fb02 f303 	mul.w	r3, r2, r3
 800526a:	1acb      	subs	r3, r1, r3
 800526c:	011b      	lsls	r3, r3, #4
 800526e:	3332      	adds	r3, #50	@ 0x32
 8005270:	4a33      	ldr	r2, [pc, #204]	@ (8005340 <UART_SetConfig+0x4e4>)
 8005272:	fba2 2303 	umull	r2, r3, r2, r3
 8005276:	095b      	lsrs	r3, r3, #5
 8005278:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800527c:	441c      	add	r4, r3
 800527e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005282:	2200      	movs	r2, #0
 8005284:	673b      	str	r3, [r7, #112]	@ 0x70
 8005286:	677a      	str	r2, [r7, #116]	@ 0x74
 8005288:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800528c:	4642      	mov	r2, r8
 800528e:	464b      	mov	r3, r9
 8005290:	1891      	adds	r1, r2, r2
 8005292:	60b9      	str	r1, [r7, #8]
 8005294:	415b      	adcs	r3, r3
 8005296:	60fb      	str	r3, [r7, #12]
 8005298:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800529c:	4641      	mov	r1, r8
 800529e:	1851      	adds	r1, r2, r1
 80052a0:	6039      	str	r1, [r7, #0]
 80052a2:	4649      	mov	r1, r9
 80052a4:	414b      	adcs	r3, r1
 80052a6:	607b      	str	r3, [r7, #4]
 80052a8:	f04f 0200 	mov.w	r2, #0
 80052ac:	f04f 0300 	mov.w	r3, #0
 80052b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052b4:	4659      	mov	r1, fp
 80052b6:	00cb      	lsls	r3, r1, #3
 80052b8:	4651      	mov	r1, sl
 80052ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052be:	4651      	mov	r1, sl
 80052c0:	00ca      	lsls	r2, r1, #3
 80052c2:	4610      	mov	r0, r2
 80052c4:	4619      	mov	r1, r3
 80052c6:	4603      	mov	r3, r0
 80052c8:	4642      	mov	r2, r8
 80052ca:	189b      	adds	r3, r3, r2
 80052cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052ce:	464b      	mov	r3, r9
 80052d0:	460a      	mov	r2, r1
 80052d2:	eb42 0303 	adc.w	r3, r2, r3
 80052d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80052d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80052e2:	667a      	str	r2, [r7, #100]	@ 0x64
 80052e4:	f04f 0200 	mov.w	r2, #0
 80052e8:	f04f 0300 	mov.w	r3, #0
 80052ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80052f0:	4649      	mov	r1, r9
 80052f2:	008b      	lsls	r3, r1, #2
 80052f4:	4641      	mov	r1, r8
 80052f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052fa:	4641      	mov	r1, r8
 80052fc:	008a      	lsls	r2, r1, #2
 80052fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005302:	f7fa ffc5 	bl	8000290 <__aeabi_uldivmod>
 8005306:	4602      	mov	r2, r0
 8005308:	460b      	mov	r3, r1
 800530a:	4b0d      	ldr	r3, [pc, #52]	@ (8005340 <UART_SetConfig+0x4e4>)
 800530c:	fba3 1302 	umull	r1, r3, r3, r2
 8005310:	095b      	lsrs	r3, r3, #5
 8005312:	2164      	movs	r1, #100	@ 0x64
 8005314:	fb01 f303 	mul.w	r3, r1, r3
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	011b      	lsls	r3, r3, #4
 800531c:	3332      	adds	r3, #50	@ 0x32
 800531e:	4a08      	ldr	r2, [pc, #32]	@ (8005340 <UART_SetConfig+0x4e4>)
 8005320:	fba2 2303 	umull	r2, r3, r2, r3
 8005324:	095b      	lsrs	r3, r3, #5
 8005326:	f003 020f 	and.w	r2, r3, #15
 800532a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4422      	add	r2, r4
 8005332:	609a      	str	r2, [r3, #8]
}
 8005334:	bf00      	nop
 8005336:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800533a:	46bd      	mov	sp, r7
 800533c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005340:	51eb851f 	.word	0x51eb851f

08005344 <srand>:
 8005344:	b538      	push	{r3, r4, r5, lr}
 8005346:	4b10      	ldr	r3, [pc, #64]	@ (8005388 <srand+0x44>)
 8005348:	681d      	ldr	r5, [r3, #0]
 800534a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800534c:	4604      	mov	r4, r0
 800534e:	b9b3      	cbnz	r3, 800537e <srand+0x3a>
 8005350:	2018      	movs	r0, #24
 8005352:	f000 fa8b 	bl	800586c <malloc>
 8005356:	4602      	mov	r2, r0
 8005358:	6328      	str	r0, [r5, #48]	@ 0x30
 800535a:	b920      	cbnz	r0, 8005366 <srand+0x22>
 800535c:	4b0b      	ldr	r3, [pc, #44]	@ (800538c <srand+0x48>)
 800535e:	480c      	ldr	r0, [pc, #48]	@ (8005390 <srand+0x4c>)
 8005360:	2146      	movs	r1, #70	@ 0x46
 8005362:	f000 fa1b 	bl	800579c <__assert_func>
 8005366:	490b      	ldr	r1, [pc, #44]	@ (8005394 <srand+0x50>)
 8005368:	4b0b      	ldr	r3, [pc, #44]	@ (8005398 <srand+0x54>)
 800536a:	e9c0 1300 	strd	r1, r3, [r0]
 800536e:	4b0b      	ldr	r3, [pc, #44]	@ (800539c <srand+0x58>)
 8005370:	6083      	str	r3, [r0, #8]
 8005372:	230b      	movs	r3, #11
 8005374:	8183      	strh	r3, [r0, #12]
 8005376:	2100      	movs	r1, #0
 8005378:	2001      	movs	r0, #1
 800537a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800537e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005380:	2200      	movs	r2, #0
 8005382:	611c      	str	r4, [r3, #16]
 8005384:	615a      	str	r2, [r3, #20]
 8005386:	bd38      	pop	{r3, r4, r5, pc}
 8005388:	2000004c 	.word	0x2000004c
 800538c:	08006eec 	.word	0x08006eec
 8005390:	08006f03 	.word	0x08006f03
 8005394:	abcd330e 	.word	0xabcd330e
 8005398:	e66d1234 	.word	0xe66d1234
 800539c:	0005deec 	.word	0x0005deec

080053a0 <std>:
 80053a0:	2300      	movs	r3, #0
 80053a2:	b510      	push	{r4, lr}
 80053a4:	4604      	mov	r4, r0
 80053a6:	e9c0 3300 	strd	r3, r3, [r0]
 80053aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053ae:	6083      	str	r3, [r0, #8]
 80053b0:	8181      	strh	r1, [r0, #12]
 80053b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80053b4:	81c2      	strh	r2, [r0, #14]
 80053b6:	6183      	str	r3, [r0, #24]
 80053b8:	4619      	mov	r1, r3
 80053ba:	2208      	movs	r2, #8
 80053bc:	305c      	adds	r0, #92	@ 0x5c
 80053be:	f000 f963 	bl	8005688 <memset>
 80053c2:	4b0d      	ldr	r3, [pc, #52]	@ (80053f8 <std+0x58>)
 80053c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80053c6:	4b0d      	ldr	r3, [pc, #52]	@ (80053fc <std+0x5c>)
 80053c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80053ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005400 <std+0x60>)
 80053cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80053ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005404 <std+0x64>)
 80053d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80053d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005408 <std+0x68>)
 80053d4:	6224      	str	r4, [r4, #32]
 80053d6:	429c      	cmp	r4, r3
 80053d8:	d006      	beq.n	80053e8 <std+0x48>
 80053da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80053de:	4294      	cmp	r4, r2
 80053e0:	d002      	beq.n	80053e8 <std+0x48>
 80053e2:	33d0      	adds	r3, #208	@ 0xd0
 80053e4:	429c      	cmp	r4, r3
 80053e6:	d105      	bne.n	80053f4 <std+0x54>
 80053e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80053ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053f0:	f000 b9c2 	b.w	8005778 <__retarget_lock_init_recursive>
 80053f4:	bd10      	pop	{r4, pc}
 80053f6:	bf00      	nop
 80053f8:	08005569 	.word	0x08005569
 80053fc:	0800558b 	.word	0x0800558b
 8005400:	080055c3 	.word	0x080055c3
 8005404:	080055e7 	.word	0x080055e7
 8005408:	20000560 	.word	0x20000560

0800540c <stdio_exit_handler>:
 800540c:	4a02      	ldr	r2, [pc, #8]	@ (8005418 <stdio_exit_handler+0xc>)
 800540e:	4903      	ldr	r1, [pc, #12]	@ (800541c <stdio_exit_handler+0x10>)
 8005410:	4803      	ldr	r0, [pc, #12]	@ (8005420 <stdio_exit_handler+0x14>)
 8005412:	f000 b869 	b.w	80054e8 <_fwalk_sglue>
 8005416:	bf00      	nop
 8005418:	20000040 	.word	0x20000040
 800541c:	080060a9 	.word	0x080060a9
 8005420:	20000050 	.word	0x20000050

08005424 <cleanup_stdio>:
 8005424:	6841      	ldr	r1, [r0, #4]
 8005426:	4b0c      	ldr	r3, [pc, #48]	@ (8005458 <cleanup_stdio+0x34>)
 8005428:	4299      	cmp	r1, r3
 800542a:	b510      	push	{r4, lr}
 800542c:	4604      	mov	r4, r0
 800542e:	d001      	beq.n	8005434 <cleanup_stdio+0x10>
 8005430:	f000 fe3a 	bl	80060a8 <_fflush_r>
 8005434:	68a1      	ldr	r1, [r4, #8]
 8005436:	4b09      	ldr	r3, [pc, #36]	@ (800545c <cleanup_stdio+0x38>)
 8005438:	4299      	cmp	r1, r3
 800543a:	d002      	beq.n	8005442 <cleanup_stdio+0x1e>
 800543c:	4620      	mov	r0, r4
 800543e:	f000 fe33 	bl	80060a8 <_fflush_r>
 8005442:	68e1      	ldr	r1, [r4, #12]
 8005444:	4b06      	ldr	r3, [pc, #24]	@ (8005460 <cleanup_stdio+0x3c>)
 8005446:	4299      	cmp	r1, r3
 8005448:	d004      	beq.n	8005454 <cleanup_stdio+0x30>
 800544a:	4620      	mov	r0, r4
 800544c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005450:	f000 be2a 	b.w	80060a8 <_fflush_r>
 8005454:	bd10      	pop	{r4, pc}
 8005456:	bf00      	nop
 8005458:	20000560 	.word	0x20000560
 800545c:	200005c8 	.word	0x200005c8
 8005460:	20000630 	.word	0x20000630

08005464 <global_stdio_init.part.0>:
 8005464:	b510      	push	{r4, lr}
 8005466:	4b0b      	ldr	r3, [pc, #44]	@ (8005494 <global_stdio_init.part.0+0x30>)
 8005468:	4c0b      	ldr	r4, [pc, #44]	@ (8005498 <global_stdio_init.part.0+0x34>)
 800546a:	4a0c      	ldr	r2, [pc, #48]	@ (800549c <global_stdio_init.part.0+0x38>)
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	4620      	mov	r0, r4
 8005470:	2200      	movs	r2, #0
 8005472:	2104      	movs	r1, #4
 8005474:	f7ff ff94 	bl	80053a0 <std>
 8005478:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800547c:	2201      	movs	r2, #1
 800547e:	2109      	movs	r1, #9
 8005480:	f7ff ff8e 	bl	80053a0 <std>
 8005484:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005488:	2202      	movs	r2, #2
 800548a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800548e:	2112      	movs	r1, #18
 8005490:	f7ff bf86 	b.w	80053a0 <std>
 8005494:	20000698 	.word	0x20000698
 8005498:	20000560 	.word	0x20000560
 800549c:	0800540d 	.word	0x0800540d

080054a0 <__sfp_lock_acquire>:
 80054a0:	4801      	ldr	r0, [pc, #4]	@ (80054a8 <__sfp_lock_acquire+0x8>)
 80054a2:	f000 b96a 	b.w	800577a <__retarget_lock_acquire_recursive>
 80054a6:	bf00      	nop
 80054a8:	200006a1 	.word	0x200006a1

080054ac <__sfp_lock_release>:
 80054ac:	4801      	ldr	r0, [pc, #4]	@ (80054b4 <__sfp_lock_release+0x8>)
 80054ae:	f000 b965 	b.w	800577c <__retarget_lock_release_recursive>
 80054b2:	bf00      	nop
 80054b4:	200006a1 	.word	0x200006a1

080054b8 <__sinit>:
 80054b8:	b510      	push	{r4, lr}
 80054ba:	4604      	mov	r4, r0
 80054bc:	f7ff fff0 	bl	80054a0 <__sfp_lock_acquire>
 80054c0:	6a23      	ldr	r3, [r4, #32]
 80054c2:	b11b      	cbz	r3, 80054cc <__sinit+0x14>
 80054c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054c8:	f7ff bff0 	b.w	80054ac <__sfp_lock_release>
 80054cc:	4b04      	ldr	r3, [pc, #16]	@ (80054e0 <__sinit+0x28>)
 80054ce:	6223      	str	r3, [r4, #32]
 80054d0:	4b04      	ldr	r3, [pc, #16]	@ (80054e4 <__sinit+0x2c>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1f5      	bne.n	80054c4 <__sinit+0xc>
 80054d8:	f7ff ffc4 	bl	8005464 <global_stdio_init.part.0>
 80054dc:	e7f2      	b.n	80054c4 <__sinit+0xc>
 80054de:	bf00      	nop
 80054e0:	08005425 	.word	0x08005425
 80054e4:	20000698 	.word	0x20000698

080054e8 <_fwalk_sglue>:
 80054e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054ec:	4607      	mov	r7, r0
 80054ee:	4688      	mov	r8, r1
 80054f0:	4614      	mov	r4, r2
 80054f2:	2600      	movs	r6, #0
 80054f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80054f8:	f1b9 0901 	subs.w	r9, r9, #1
 80054fc:	d505      	bpl.n	800550a <_fwalk_sglue+0x22>
 80054fe:	6824      	ldr	r4, [r4, #0]
 8005500:	2c00      	cmp	r4, #0
 8005502:	d1f7      	bne.n	80054f4 <_fwalk_sglue+0xc>
 8005504:	4630      	mov	r0, r6
 8005506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800550a:	89ab      	ldrh	r3, [r5, #12]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d907      	bls.n	8005520 <_fwalk_sglue+0x38>
 8005510:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005514:	3301      	adds	r3, #1
 8005516:	d003      	beq.n	8005520 <_fwalk_sglue+0x38>
 8005518:	4629      	mov	r1, r5
 800551a:	4638      	mov	r0, r7
 800551c:	47c0      	blx	r8
 800551e:	4306      	orrs	r6, r0
 8005520:	3568      	adds	r5, #104	@ 0x68
 8005522:	e7e9      	b.n	80054f8 <_fwalk_sglue+0x10>

08005524 <siprintf>:
 8005524:	b40e      	push	{r1, r2, r3}
 8005526:	b510      	push	{r4, lr}
 8005528:	b09d      	sub	sp, #116	@ 0x74
 800552a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800552c:	9002      	str	r0, [sp, #8]
 800552e:	9006      	str	r0, [sp, #24]
 8005530:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005534:	480a      	ldr	r0, [pc, #40]	@ (8005560 <siprintf+0x3c>)
 8005536:	9107      	str	r1, [sp, #28]
 8005538:	9104      	str	r1, [sp, #16]
 800553a:	490a      	ldr	r1, [pc, #40]	@ (8005564 <siprintf+0x40>)
 800553c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005540:	9105      	str	r1, [sp, #20]
 8005542:	2400      	movs	r4, #0
 8005544:	a902      	add	r1, sp, #8
 8005546:	6800      	ldr	r0, [r0, #0]
 8005548:	9301      	str	r3, [sp, #4]
 800554a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800554c:	f000 faa0 	bl	8005a90 <_svfiprintf_r>
 8005550:	9b02      	ldr	r3, [sp, #8]
 8005552:	701c      	strb	r4, [r3, #0]
 8005554:	b01d      	add	sp, #116	@ 0x74
 8005556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800555a:	b003      	add	sp, #12
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	2000004c 	.word	0x2000004c
 8005564:	ffff0208 	.word	0xffff0208

08005568 <__sread>:
 8005568:	b510      	push	{r4, lr}
 800556a:	460c      	mov	r4, r1
 800556c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005570:	f000 f8b4 	bl	80056dc <_read_r>
 8005574:	2800      	cmp	r0, #0
 8005576:	bfab      	itete	ge
 8005578:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800557a:	89a3      	ldrhlt	r3, [r4, #12]
 800557c:	181b      	addge	r3, r3, r0
 800557e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005582:	bfac      	ite	ge
 8005584:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005586:	81a3      	strhlt	r3, [r4, #12]
 8005588:	bd10      	pop	{r4, pc}

0800558a <__swrite>:
 800558a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800558e:	461f      	mov	r7, r3
 8005590:	898b      	ldrh	r3, [r1, #12]
 8005592:	05db      	lsls	r3, r3, #23
 8005594:	4605      	mov	r5, r0
 8005596:	460c      	mov	r4, r1
 8005598:	4616      	mov	r6, r2
 800559a:	d505      	bpl.n	80055a8 <__swrite+0x1e>
 800559c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055a0:	2302      	movs	r3, #2
 80055a2:	2200      	movs	r2, #0
 80055a4:	f000 f888 	bl	80056b8 <_lseek_r>
 80055a8:	89a3      	ldrh	r3, [r4, #12]
 80055aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055b2:	81a3      	strh	r3, [r4, #12]
 80055b4:	4632      	mov	r2, r6
 80055b6:	463b      	mov	r3, r7
 80055b8:	4628      	mov	r0, r5
 80055ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055be:	f000 b89f 	b.w	8005700 <_write_r>

080055c2 <__sseek>:
 80055c2:	b510      	push	{r4, lr}
 80055c4:	460c      	mov	r4, r1
 80055c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ca:	f000 f875 	bl	80056b8 <_lseek_r>
 80055ce:	1c43      	adds	r3, r0, #1
 80055d0:	89a3      	ldrh	r3, [r4, #12]
 80055d2:	bf15      	itete	ne
 80055d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80055d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80055da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80055de:	81a3      	strheq	r3, [r4, #12]
 80055e0:	bf18      	it	ne
 80055e2:	81a3      	strhne	r3, [r4, #12]
 80055e4:	bd10      	pop	{r4, pc}

080055e6 <__sclose>:
 80055e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ea:	f000 b855 	b.w	8005698 <_close_r>

080055ee <_vsniprintf_r>:
 80055ee:	b530      	push	{r4, r5, lr}
 80055f0:	4614      	mov	r4, r2
 80055f2:	2c00      	cmp	r4, #0
 80055f4:	b09b      	sub	sp, #108	@ 0x6c
 80055f6:	4605      	mov	r5, r0
 80055f8:	461a      	mov	r2, r3
 80055fa:	da05      	bge.n	8005608 <_vsniprintf_r+0x1a>
 80055fc:	238b      	movs	r3, #139	@ 0x8b
 80055fe:	6003      	str	r3, [r0, #0]
 8005600:	f04f 30ff 	mov.w	r0, #4294967295
 8005604:	b01b      	add	sp, #108	@ 0x6c
 8005606:	bd30      	pop	{r4, r5, pc}
 8005608:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800560c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005610:	f04f 0300 	mov.w	r3, #0
 8005614:	9319      	str	r3, [sp, #100]	@ 0x64
 8005616:	bf14      	ite	ne
 8005618:	f104 33ff 	addne.w	r3, r4, #4294967295
 800561c:	4623      	moveq	r3, r4
 800561e:	9302      	str	r3, [sp, #8]
 8005620:	9305      	str	r3, [sp, #20]
 8005622:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005626:	9100      	str	r1, [sp, #0]
 8005628:	9104      	str	r1, [sp, #16]
 800562a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800562e:	4669      	mov	r1, sp
 8005630:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8005632:	f000 fa2d 	bl	8005a90 <_svfiprintf_r>
 8005636:	1c43      	adds	r3, r0, #1
 8005638:	bfbc      	itt	lt
 800563a:	238b      	movlt	r3, #139	@ 0x8b
 800563c:	602b      	strlt	r3, [r5, #0]
 800563e:	2c00      	cmp	r4, #0
 8005640:	d0e0      	beq.n	8005604 <_vsniprintf_r+0x16>
 8005642:	9b00      	ldr	r3, [sp, #0]
 8005644:	2200      	movs	r2, #0
 8005646:	701a      	strb	r2, [r3, #0]
 8005648:	e7dc      	b.n	8005604 <_vsniprintf_r+0x16>
	...

0800564c <vsniprintf>:
 800564c:	b507      	push	{r0, r1, r2, lr}
 800564e:	9300      	str	r3, [sp, #0]
 8005650:	4613      	mov	r3, r2
 8005652:	460a      	mov	r2, r1
 8005654:	4601      	mov	r1, r0
 8005656:	4803      	ldr	r0, [pc, #12]	@ (8005664 <vsniprintf+0x18>)
 8005658:	6800      	ldr	r0, [r0, #0]
 800565a:	f7ff ffc8 	bl	80055ee <_vsniprintf_r>
 800565e:	b003      	add	sp, #12
 8005660:	f85d fb04 	ldr.w	pc, [sp], #4
 8005664:	2000004c 	.word	0x2000004c

08005668 <memcmp>:
 8005668:	b510      	push	{r4, lr}
 800566a:	3901      	subs	r1, #1
 800566c:	4402      	add	r2, r0
 800566e:	4290      	cmp	r0, r2
 8005670:	d101      	bne.n	8005676 <memcmp+0xe>
 8005672:	2000      	movs	r0, #0
 8005674:	e005      	b.n	8005682 <memcmp+0x1a>
 8005676:	7803      	ldrb	r3, [r0, #0]
 8005678:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800567c:	42a3      	cmp	r3, r4
 800567e:	d001      	beq.n	8005684 <memcmp+0x1c>
 8005680:	1b18      	subs	r0, r3, r4
 8005682:	bd10      	pop	{r4, pc}
 8005684:	3001      	adds	r0, #1
 8005686:	e7f2      	b.n	800566e <memcmp+0x6>

08005688 <memset>:
 8005688:	4402      	add	r2, r0
 800568a:	4603      	mov	r3, r0
 800568c:	4293      	cmp	r3, r2
 800568e:	d100      	bne.n	8005692 <memset+0xa>
 8005690:	4770      	bx	lr
 8005692:	f803 1b01 	strb.w	r1, [r3], #1
 8005696:	e7f9      	b.n	800568c <memset+0x4>

08005698 <_close_r>:
 8005698:	b538      	push	{r3, r4, r5, lr}
 800569a:	4d06      	ldr	r5, [pc, #24]	@ (80056b4 <_close_r+0x1c>)
 800569c:	2300      	movs	r3, #0
 800569e:	4604      	mov	r4, r0
 80056a0:	4608      	mov	r0, r1
 80056a2:	602b      	str	r3, [r5, #0]
 80056a4:	f7fd fbc4 	bl	8002e30 <_close>
 80056a8:	1c43      	adds	r3, r0, #1
 80056aa:	d102      	bne.n	80056b2 <_close_r+0x1a>
 80056ac:	682b      	ldr	r3, [r5, #0]
 80056ae:	b103      	cbz	r3, 80056b2 <_close_r+0x1a>
 80056b0:	6023      	str	r3, [r4, #0]
 80056b2:	bd38      	pop	{r3, r4, r5, pc}
 80056b4:	2000069c 	.word	0x2000069c

080056b8 <_lseek_r>:
 80056b8:	b538      	push	{r3, r4, r5, lr}
 80056ba:	4d07      	ldr	r5, [pc, #28]	@ (80056d8 <_lseek_r+0x20>)
 80056bc:	4604      	mov	r4, r0
 80056be:	4608      	mov	r0, r1
 80056c0:	4611      	mov	r1, r2
 80056c2:	2200      	movs	r2, #0
 80056c4:	602a      	str	r2, [r5, #0]
 80056c6:	461a      	mov	r2, r3
 80056c8:	f7fd fbd9 	bl	8002e7e <_lseek>
 80056cc:	1c43      	adds	r3, r0, #1
 80056ce:	d102      	bne.n	80056d6 <_lseek_r+0x1e>
 80056d0:	682b      	ldr	r3, [r5, #0]
 80056d2:	b103      	cbz	r3, 80056d6 <_lseek_r+0x1e>
 80056d4:	6023      	str	r3, [r4, #0]
 80056d6:	bd38      	pop	{r3, r4, r5, pc}
 80056d8:	2000069c 	.word	0x2000069c

080056dc <_read_r>:
 80056dc:	b538      	push	{r3, r4, r5, lr}
 80056de:	4d07      	ldr	r5, [pc, #28]	@ (80056fc <_read_r+0x20>)
 80056e0:	4604      	mov	r4, r0
 80056e2:	4608      	mov	r0, r1
 80056e4:	4611      	mov	r1, r2
 80056e6:	2200      	movs	r2, #0
 80056e8:	602a      	str	r2, [r5, #0]
 80056ea:	461a      	mov	r2, r3
 80056ec:	f7fd fb67 	bl	8002dbe <_read>
 80056f0:	1c43      	adds	r3, r0, #1
 80056f2:	d102      	bne.n	80056fa <_read_r+0x1e>
 80056f4:	682b      	ldr	r3, [r5, #0]
 80056f6:	b103      	cbz	r3, 80056fa <_read_r+0x1e>
 80056f8:	6023      	str	r3, [r4, #0]
 80056fa:	bd38      	pop	{r3, r4, r5, pc}
 80056fc:	2000069c 	.word	0x2000069c

08005700 <_write_r>:
 8005700:	b538      	push	{r3, r4, r5, lr}
 8005702:	4d07      	ldr	r5, [pc, #28]	@ (8005720 <_write_r+0x20>)
 8005704:	4604      	mov	r4, r0
 8005706:	4608      	mov	r0, r1
 8005708:	4611      	mov	r1, r2
 800570a:	2200      	movs	r2, #0
 800570c:	602a      	str	r2, [r5, #0]
 800570e:	461a      	mov	r2, r3
 8005710:	f7fd fb72 	bl	8002df8 <_write>
 8005714:	1c43      	adds	r3, r0, #1
 8005716:	d102      	bne.n	800571e <_write_r+0x1e>
 8005718:	682b      	ldr	r3, [r5, #0]
 800571a:	b103      	cbz	r3, 800571e <_write_r+0x1e>
 800571c:	6023      	str	r3, [r4, #0]
 800571e:	bd38      	pop	{r3, r4, r5, pc}
 8005720:	2000069c 	.word	0x2000069c

08005724 <__errno>:
 8005724:	4b01      	ldr	r3, [pc, #4]	@ (800572c <__errno+0x8>)
 8005726:	6818      	ldr	r0, [r3, #0]
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	2000004c 	.word	0x2000004c

08005730 <__libc_init_array>:
 8005730:	b570      	push	{r4, r5, r6, lr}
 8005732:	4d0d      	ldr	r5, [pc, #52]	@ (8005768 <__libc_init_array+0x38>)
 8005734:	4c0d      	ldr	r4, [pc, #52]	@ (800576c <__libc_init_array+0x3c>)
 8005736:	1b64      	subs	r4, r4, r5
 8005738:	10a4      	asrs	r4, r4, #2
 800573a:	2600      	movs	r6, #0
 800573c:	42a6      	cmp	r6, r4
 800573e:	d109      	bne.n	8005754 <__libc_init_array+0x24>
 8005740:	4d0b      	ldr	r5, [pc, #44]	@ (8005770 <__libc_init_array+0x40>)
 8005742:	4c0c      	ldr	r4, [pc, #48]	@ (8005774 <__libc_init_array+0x44>)
 8005744:	f000 ffee 	bl	8006724 <_init>
 8005748:	1b64      	subs	r4, r4, r5
 800574a:	10a4      	asrs	r4, r4, #2
 800574c:	2600      	movs	r6, #0
 800574e:	42a6      	cmp	r6, r4
 8005750:	d105      	bne.n	800575e <__libc_init_array+0x2e>
 8005752:	bd70      	pop	{r4, r5, r6, pc}
 8005754:	f855 3b04 	ldr.w	r3, [r5], #4
 8005758:	4798      	blx	r3
 800575a:	3601      	adds	r6, #1
 800575c:	e7ee      	b.n	800573c <__libc_init_array+0xc>
 800575e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005762:	4798      	blx	r3
 8005764:	3601      	adds	r6, #1
 8005766:	e7f2      	b.n	800574e <__libc_init_array+0x1e>
 8005768:	08006fd4 	.word	0x08006fd4
 800576c:	08006fd4 	.word	0x08006fd4
 8005770:	08006fd4 	.word	0x08006fd4
 8005774:	08006fd8 	.word	0x08006fd8

08005778 <__retarget_lock_init_recursive>:
 8005778:	4770      	bx	lr

0800577a <__retarget_lock_acquire_recursive>:
 800577a:	4770      	bx	lr

0800577c <__retarget_lock_release_recursive>:
 800577c:	4770      	bx	lr

0800577e <memcpy>:
 800577e:	440a      	add	r2, r1
 8005780:	4291      	cmp	r1, r2
 8005782:	f100 33ff 	add.w	r3, r0, #4294967295
 8005786:	d100      	bne.n	800578a <memcpy+0xc>
 8005788:	4770      	bx	lr
 800578a:	b510      	push	{r4, lr}
 800578c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005790:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005794:	4291      	cmp	r1, r2
 8005796:	d1f9      	bne.n	800578c <memcpy+0xe>
 8005798:	bd10      	pop	{r4, pc}
	...

0800579c <__assert_func>:
 800579c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800579e:	4614      	mov	r4, r2
 80057a0:	461a      	mov	r2, r3
 80057a2:	4b09      	ldr	r3, [pc, #36]	@ (80057c8 <__assert_func+0x2c>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4605      	mov	r5, r0
 80057a8:	68d8      	ldr	r0, [r3, #12]
 80057aa:	b14c      	cbz	r4, 80057c0 <__assert_func+0x24>
 80057ac:	4b07      	ldr	r3, [pc, #28]	@ (80057cc <__assert_func+0x30>)
 80057ae:	9100      	str	r1, [sp, #0]
 80057b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80057b4:	4906      	ldr	r1, [pc, #24]	@ (80057d0 <__assert_func+0x34>)
 80057b6:	462b      	mov	r3, r5
 80057b8:	f000 fc9e 	bl	80060f8 <fiprintf>
 80057bc:	f000 fcd8 	bl	8006170 <abort>
 80057c0:	4b04      	ldr	r3, [pc, #16]	@ (80057d4 <__assert_func+0x38>)
 80057c2:	461c      	mov	r4, r3
 80057c4:	e7f3      	b.n	80057ae <__assert_func+0x12>
 80057c6:	bf00      	nop
 80057c8:	2000004c 	.word	0x2000004c
 80057cc:	08006f5b 	.word	0x08006f5b
 80057d0:	08006f68 	.word	0x08006f68
 80057d4:	08006f96 	.word	0x08006f96

080057d8 <_free_r>:
 80057d8:	b538      	push	{r3, r4, r5, lr}
 80057da:	4605      	mov	r5, r0
 80057dc:	2900      	cmp	r1, #0
 80057de:	d041      	beq.n	8005864 <_free_r+0x8c>
 80057e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057e4:	1f0c      	subs	r4, r1, #4
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	bfb8      	it	lt
 80057ea:	18e4      	addlt	r4, r4, r3
 80057ec:	f000 f8e8 	bl	80059c0 <__malloc_lock>
 80057f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005868 <_free_r+0x90>)
 80057f2:	6813      	ldr	r3, [r2, #0]
 80057f4:	b933      	cbnz	r3, 8005804 <_free_r+0x2c>
 80057f6:	6063      	str	r3, [r4, #4]
 80057f8:	6014      	str	r4, [r2, #0]
 80057fa:	4628      	mov	r0, r5
 80057fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005800:	f000 b8e4 	b.w	80059cc <__malloc_unlock>
 8005804:	42a3      	cmp	r3, r4
 8005806:	d908      	bls.n	800581a <_free_r+0x42>
 8005808:	6820      	ldr	r0, [r4, #0]
 800580a:	1821      	adds	r1, r4, r0
 800580c:	428b      	cmp	r3, r1
 800580e:	bf01      	itttt	eq
 8005810:	6819      	ldreq	r1, [r3, #0]
 8005812:	685b      	ldreq	r3, [r3, #4]
 8005814:	1809      	addeq	r1, r1, r0
 8005816:	6021      	streq	r1, [r4, #0]
 8005818:	e7ed      	b.n	80057f6 <_free_r+0x1e>
 800581a:	461a      	mov	r2, r3
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	b10b      	cbz	r3, 8005824 <_free_r+0x4c>
 8005820:	42a3      	cmp	r3, r4
 8005822:	d9fa      	bls.n	800581a <_free_r+0x42>
 8005824:	6811      	ldr	r1, [r2, #0]
 8005826:	1850      	adds	r0, r2, r1
 8005828:	42a0      	cmp	r0, r4
 800582a:	d10b      	bne.n	8005844 <_free_r+0x6c>
 800582c:	6820      	ldr	r0, [r4, #0]
 800582e:	4401      	add	r1, r0
 8005830:	1850      	adds	r0, r2, r1
 8005832:	4283      	cmp	r3, r0
 8005834:	6011      	str	r1, [r2, #0]
 8005836:	d1e0      	bne.n	80057fa <_free_r+0x22>
 8005838:	6818      	ldr	r0, [r3, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	6053      	str	r3, [r2, #4]
 800583e:	4408      	add	r0, r1
 8005840:	6010      	str	r0, [r2, #0]
 8005842:	e7da      	b.n	80057fa <_free_r+0x22>
 8005844:	d902      	bls.n	800584c <_free_r+0x74>
 8005846:	230c      	movs	r3, #12
 8005848:	602b      	str	r3, [r5, #0]
 800584a:	e7d6      	b.n	80057fa <_free_r+0x22>
 800584c:	6820      	ldr	r0, [r4, #0]
 800584e:	1821      	adds	r1, r4, r0
 8005850:	428b      	cmp	r3, r1
 8005852:	bf04      	itt	eq
 8005854:	6819      	ldreq	r1, [r3, #0]
 8005856:	685b      	ldreq	r3, [r3, #4]
 8005858:	6063      	str	r3, [r4, #4]
 800585a:	bf04      	itt	eq
 800585c:	1809      	addeq	r1, r1, r0
 800585e:	6021      	streq	r1, [r4, #0]
 8005860:	6054      	str	r4, [r2, #4]
 8005862:	e7ca      	b.n	80057fa <_free_r+0x22>
 8005864:	bd38      	pop	{r3, r4, r5, pc}
 8005866:	bf00      	nop
 8005868:	200006a8 	.word	0x200006a8

0800586c <malloc>:
 800586c:	4b02      	ldr	r3, [pc, #8]	@ (8005878 <malloc+0xc>)
 800586e:	4601      	mov	r1, r0
 8005870:	6818      	ldr	r0, [r3, #0]
 8005872:	f000 b825 	b.w	80058c0 <_malloc_r>
 8005876:	bf00      	nop
 8005878:	2000004c 	.word	0x2000004c

0800587c <sbrk_aligned>:
 800587c:	b570      	push	{r4, r5, r6, lr}
 800587e:	4e0f      	ldr	r6, [pc, #60]	@ (80058bc <sbrk_aligned+0x40>)
 8005880:	460c      	mov	r4, r1
 8005882:	6831      	ldr	r1, [r6, #0]
 8005884:	4605      	mov	r5, r0
 8005886:	b911      	cbnz	r1, 800588e <sbrk_aligned+0x12>
 8005888:	f000 fc62 	bl	8006150 <_sbrk_r>
 800588c:	6030      	str	r0, [r6, #0]
 800588e:	4621      	mov	r1, r4
 8005890:	4628      	mov	r0, r5
 8005892:	f000 fc5d 	bl	8006150 <_sbrk_r>
 8005896:	1c43      	adds	r3, r0, #1
 8005898:	d103      	bne.n	80058a2 <sbrk_aligned+0x26>
 800589a:	f04f 34ff 	mov.w	r4, #4294967295
 800589e:	4620      	mov	r0, r4
 80058a0:	bd70      	pop	{r4, r5, r6, pc}
 80058a2:	1cc4      	adds	r4, r0, #3
 80058a4:	f024 0403 	bic.w	r4, r4, #3
 80058a8:	42a0      	cmp	r0, r4
 80058aa:	d0f8      	beq.n	800589e <sbrk_aligned+0x22>
 80058ac:	1a21      	subs	r1, r4, r0
 80058ae:	4628      	mov	r0, r5
 80058b0:	f000 fc4e 	bl	8006150 <_sbrk_r>
 80058b4:	3001      	adds	r0, #1
 80058b6:	d1f2      	bne.n	800589e <sbrk_aligned+0x22>
 80058b8:	e7ef      	b.n	800589a <sbrk_aligned+0x1e>
 80058ba:	bf00      	nop
 80058bc:	200006a4 	.word	0x200006a4

080058c0 <_malloc_r>:
 80058c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058c4:	1ccd      	adds	r5, r1, #3
 80058c6:	f025 0503 	bic.w	r5, r5, #3
 80058ca:	3508      	adds	r5, #8
 80058cc:	2d0c      	cmp	r5, #12
 80058ce:	bf38      	it	cc
 80058d0:	250c      	movcc	r5, #12
 80058d2:	2d00      	cmp	r5, #0
 80058d4:	4606      	mov	r6, r0
 80058d6:	db01      	blt.n	80058dc <_malloc_r+0x1c>
 80058d8:	42a9      	cmp	r1, r5
 80058da:	d904      	bls.n	80058e6 <_malloc_r+0x26>
 80058dc:	230c      	movs	r3, #12
 80058de:	6033      	str	r3, [r6, #0]
 80058e0:	2000      	movs	r0, #0
 80058e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80059bc <_malloc_r+0xfc>
 80058ea:	f000 f869 	bl	80059c0 <__malloc_lock>
 80058ee:	f8d8 3000 	ldr.w	r3, [r8]
 80058f2:	461c      	mov	r4, r3
 80058f4:	bb44      	cbnz	r4, 8005948 <_malloc_r+0x88>
 80058f6:	4629      	mov	r1, r5
 80058f8:	4630      	mov	r0, r6
 80058fa:	f7ff ffbf 	bl	800587c <sbrk_aligned>
 80058fe:	1c43      	adds	r3, r0, #1
 8005900:	4604      	mov	r4, r0
 8005902:	d158      	bne.n	80059b6 <_malloc_r+0xf6>
 8005904:	f8d8 4000 	ldr.w	r4, [r8]
 8005908:	4627      	mov	r7, r4
 800590a:	2f00      	cmp	r7, #0
 800590c:	d143      	bne.n	8005996 <_malloc_r+0xd6>
 800590e:	2c00      	cmp	r4, #0
 8005910:	d04b      	beq.n	80059aa <_malloc_r+0xea>
 8005912:	6823      	ldr	r3, [r4, #0]
 8005914:	4639      	mov	r1, r7
 8005916:	4630      	mov	r0, r6
 8005918:	eb04 0903 	add.w	r9, r4, r3
 800591c:	f000 fc18 	bl	8006150 <_sbrk_r>
 8005920:	4581      	cmp	r9, r0
 8005922:	d142      	bne.n	80059aa <_malloc_r+0xea>
 8005924:	6821      	ldr	r1, [r4, #0]
 8005926:	1a6d      	subs	r5, r5, r1
 8005928:	4629      	mov	r1, r5
 800592a:	4630      	mov	r0, r6
 800592c:	f7ff ffa6 	bl	800587c <sbrk_aligned>
 8005930:	3001      	adds	r0, #1
 8005932:	d03a      	beq.n	80059aa <_malloc_r+0xea>
 8005934:	6823      	ldr	r3, [r4, #0]
 8005936:	442b      	add	r3, r5
 8005938:	6023      	str	r3, [r4, #0]
 800593a:	f8d8 3000 	ldr.w	r3, [r8]
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	bb62      	cbnz	r2, 800599c <_malloc_r+0xdc>
 8005942:	f8c8 7000 	str.w	r7, [r8]
 8005946:	e00f      	b.n	8005968 <_malloc_r+0xa8>
 8005948:	6822      	ldr	r2, [r4, #0]
 800594a:	1b52      	subs	r2, r2, r5
 800594c:	d420      	bmi.n	8005990 <_malloc_r+0xd0>
 800594e:	2a0b      	cmp	r2, #11
 8005950:	d917      	bls.n	8005982 <_malloc_r+0xc2>
 8005952:	1961      	adds	r1, r4, r5
 8005954:	42a3      	cmp	r3, r4
 8005956:	6025      	str	r5, [r4, #0]
 8005958:	bf18      	it	ne
 800595a:	6059      	strne	r1, [r3, #4]
 800595c:	6863      	ldr	r3, [r4, #4]
 800595e:	bf08      	it	eq
 8005960:	f8c8 1000 	streq.w	r1, [r8]
 8005964:	5162      	str	r2, [r4, r5]
 8005966:	604b      	str	r3, [r1, #4]
 8005968:	4630      	mov	r0, r6
 800596a:	f000 f82f 	bl	80059cc <__malloc_unlock>
 800596e:	f104 000b 	add.w	r0, r4, #11
 8005972:	1d23      	adds	r3, r4, #4
 8005974:	f020 0007 	bic.w	r0, r0, #7
 8005978:	1ac2      	subs	r2, r0, r3
 800597a:	bf1c      	itt	ne
 800597c:	1a1b      	subne	r3, r3, r0
 800597e:	50a3      	strne	r3, [r4, r2]
 8005980:	e7af      	b.n	80058e2 <_malloc_r+0x22>
 8005982:	6862      	ldr	r2, [r4, #4]
 8005984:	42a3      	cmp	r3, r4
 8005986:	bf0c      	ite	eq
 8005988:	f8c8 2000 	streq.w	r2, [r8]
 800598c:	605a      	strne	r2, [r3, #4]
 800598e:	e7eb      	b.n	8005968 <_malloc_r+0xa8>
 8005990:	4623      	mov	r3, r4
 8005992:	6864      	ldr	r4, [r4, #4]
 8005994:	e7ae      	b.n	80058f4 <_malloc_r+0x34>
 8005996:	463c      	mov	r4, r7
 8005998:	687f      	ldr	r7, [r7, #4]
 800599a:	e7b6      	b.n	800590a <_malloc_r+0x4a>
 800599c:	461a      	mov	r2, r3
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	42a3      	cmp	r3, r4
 80059a2:	d1fb      	bne.n	800599c <_malloc_r+0xdc>
 80059a4:	2300      	movs	r3, #0
 80059a6:	6053      	str	r3, [r2, #4]
 80059a8:	e7de      	b.n	8005968 <_malloc_r+0xa8>
 80059aa:	230c      	movs	r3, #12
 80059ac:	6033      	str	r3, [r6, #0]
 80059ae:	4630      	mov	r0, r6
 80059b0:	f000 f80c 	bl	80059cc <__malloc_unlock>
 80059b4:	e794      	b.n	80058e0 <_malloc_r+0x20>
 80059b6:	6005      	str	r5, [r0, #0]
 80059b8:	e7d6      	b.n	8005968 <_malloc_r+0xa8>
 80059ba:	bf00      	nop
 80059bc:	200006a8 	.word	0x200006a8

080059c0 <__malloc_lock>:
 80059c0:	4801      	ldr	r0, [pc, #4]	@ (80059c8 <__malloc_lock+0x8>)
 80059c2:	f7ff beda 	b.w	800577a <__retarget_lock_acquire_recursive>
 80059c6:	bf00      	nop
 80059c8:	200006a0 	.word	0x200006a0

080059cc <__malloc_unlock>:
 80059cc:	4801      	ldr	r0, [pc, #4]	@ (80059d4 <__malloc_unlock+0x8>)
 80059ce:	f7ff bed5 	b.w	800577c <__retarget_lock_release_recursive>
 80059d2:	bf00      	nop
 80059d4:	200006a0 	.word	0x200006a0

080059d8 <__ssputs_r>:
 80059d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059dc:	688e      	ldr	r6, [r1, #8]
 80059de:	461f      	mov	r7, r3
 80059e0:	42be      	cmp	r6, r7
 80059e2:	680b      	ldr	r3, [r1, #0]
 80059e4:	4682      	mov	sl, r0
 80059e6:	460c      	mov	r4, r1
 80059e8:	4690      	mov	r8, r2
 80059ea:	d82d      	bhi.n	8005a48 <__ssputs_r+0x70>
 80059ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80059f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80059f4:	d026      	beq.n	8005a44 <__ssputs_r+0x6c>
 80059f6:	6965      	ldr	r5, [r4, #20]
 80059f8:	6909      	ldr	r1, [r1, #16]
 80059fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80059fe:	eba3 0901 	sub.w	r9, r3, r1
 8005a02:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a06:	1c7b      	adds	r3, r7, #1
 8005a08:	444b      	add	r3, r9
 8005a0a:	106d      	asrs	r5, r5, #1
 8005a0c:	429d      	cmp	r5, r3
 8005a0e:	bf38      	it	cc
 8005a10:	461d      	movcc	r5, r3
 8005a12:	0553      	lsls	r3, r2, #21
 8005a14:	d527      	bpl.n	8005a66 <__ssputs_r+0x8e>
 8005a16:	4629      	mov	r1, r5
 8005a18:	f7ff ff52 	bl	80058c0 <_malloc_r>
 8005a1c:	4606      	mov	r6, r0
 8005a1e:	b360      	cbz	r0, 8005a7a <__ssputs_r+0xa2>
 8005a20:	6921      	ldr	r1, [r4, #16]
 8005a22:	464a      	mov	r2, r9
 8005a24:	f7ff feab 	bl	800577e <memcpy>
 8005a28:	89a3      	ldrh	r3, [r4, #12]
 8005a2a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005a2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a32:	81a3      	strh	r3, [r4, #12]
 8005a34:	6126      	str	r6, [r4, #16]
 8005a36:	6165      	str	r5, [r4, #20]
 8005a38:	444e      	add	r6, r9
 8005a3a:	eba5 0509 	sub.w	r5, r5, r9
 8005a3e:	6026      	str	r6, [r4, #0]
 8005a40:	60a5      	str	r5, [r4, #8]
 8005a42:	463e      	mov	r6, r7
 8005a44:	42be      	cmp	r6, r7
 8005a46:	d900      	bls.n	8005a4a <__ssputs_r+0x72>
 8005a48:	463e      	mov	r6, r7
 8005a4a:	6820      	ldr	r0, [r4, #0]
 8005a4c:	4632      	mov	r2, r6
 8005a4e:	4641      	mov	r1, r8
 8005a50:	f000 fb64 	bl	800611c <memmove>
 8005a54:	68a3      	ldr	r3, [r4, #8]
 8005a56:	1b9b      	subs	r3, r3, r6
 8005a58:	60a3      	str	r3, [r4, #8]
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	4433      	add	r3, r6
 8005a5e:	6023      	str	r3, [r4, #0]
 8005a60:	2000      	movs	r0, #0
 8005a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a66:	462a      	mov	r2, r5
 8005a68:	f000 fb89 	bl	800617e <_realloc_r>
 8005a6c:	4606      	mov	r6, r0
 8005a6e:	2800      	cmp	r0, #0
 8005a70:	d1e0      	bne.n	8005a34 <__ssputs_r+0x5c>
 8005a72:	6921      	ldr	r1, [r4, #16]
 8005a74:	4650      	mov	r0, sl
 8005a76:	f7ff feaf 	bl	80057d8 <_free_r>
 8005a7a:	230c      	movs	r3, #12
 8005a7c:	f8ca 3000 	str.w	r3, [sl]
 8005a80:	89a3      	ldrh	r3, [r4, #12]
 8005a82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a86:	81a3      	strh	r3, [r4, #12]
 8005a88:	f04f 30ff 	mov.w	r0, #4294967295
 8005a8c:	e7e9      	b.n	8005a62 <__ssputs_r+0x8a>
	...

08005a90 <_svfiprintf_r>:
 8005a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a94:	4698      	mov	r8, r3
 8005a96:	898b      	ldrh	r3, [r1, #12]
 8005a98:	061b      	lsls	r3, r3, #24
 8005a9a:	b09d      	sub	sp, #116	@ 0x74
 8005a9c:	4607      	mov	r7, r0
 8005a9e:	460d      	mov	r5, r1
 8005aa0:	4614      	mov	r4, r2
 8005aa2:	d510      	bpl.n	8005ac6 <_svfiprintf_r+0x36>
 8005aa4:	690b      	ldr	r3, [r1, #16]
 8005aa6:	b973      	cbnz	r3, 8005ac6 <_svfiprintf_r+0x36>
 8005aa8:	2140      	movs	r1, #64	@ 0x40
 8005aaa:	f7ff ff09 	bl	80058c0 <_malloc_r>
 8005aae:	6028      	str	r0, [r5, #0]
 8005ab0:	6128      	str	r0, [r5, #16]
 8005ab2:	b930      	cbnz	r0, 8005ac2 <_svfiprintf_r+0x32>
 8005ab4:	230c      	movs	r3, #12
 8005ab6:	603b      	str	r3, [r7, #0]
 8005ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8005abc:	b01d      	add	sp, #116	@ 0x74
 8005abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ac2:	2340      	movs	r3, #64	@ 0x40
 8005ac4:	616b      	str	r3, [r5, #20]
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005aca:	2320      	movs	r3, #32
 8005acc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ad0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ad4:	2330      	movs	r3, #48	@ 0x30
 8005ad6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005c74 <_svfiprintf_r+0x1e4>
 8005ada:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ade:	f04f 0901 	mov.w	r9, #1
 8005ae2:	4623      	mov	r3, r4
 8005ae4:	469a      	mov	sl, r3
 8005ae6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005aea:	b10a      	cbz	r2, 8005af0 <_svfiprintf_r+0x60>
 8005aec:	2a25      	cmp	r2, #37	@ 0x25
 8005aee:	d1f9      	bne.n	8005ae4 <_svfiprintf_r+0x54>
 8005af0:	ebba 0b04 	subs.w	fp, sl, r4
 8005af4:	d00b      	beq.n	8005b0e <_svfiprintf_r+0x7e>
 8005af6:	465b      	mov	r3, fp
 8005af8:	4622      	mov	r2, r4
 8005afa:	4629      	mov	r1, r5
 8005afc:	4638      	mov	r0, r7
 8005afe:	f7ff ff6b 	bl	80059d8 <__ssputs_r>
 8005b02:	3001      	adds	r0, #1
 8005b04:	f000 80a7 	beq.w	8005c56 <_svfiprintf_r+0x1c6>
 8005b08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b0a:	445a      	add	r2, fp
 8005b0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b0e:	f89a 3000 	ldrb.w	r3, [sl]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f000 809f 	beq.w	8005c56 <_svfiprintf_r+0x1c6>
 8005b18:	2300      	movs	r3, #0
 8005b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b22:	f10a 0a01 	add.w	sl, sl, #1
 8005b26:	9304      	str	r3, [sp, #16]
 8005b28:	9307      	str	r3, [sp, #28]
 8005b2a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b2e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b30:	4654      	mov	r4, sl
 8005b32:	2205      	movs	r2, #5
 8005b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b38:	484e      	ldr	r0, [pc, #312]	@ (8005c74 <_svfiprintf_r+0x1e4>)
 8005b3a:	f7fa fb59 	bl	80001f0 <memchr>
 8005b3e:	9a04      	ldr	r2, [sp, #16]
 8005b40:	b9d8      	cbnz	r0, 8005b7a <_svfiprintf_r+0xea>
 8005b42:	06d0      	lsls	r0, r2, #27
 8005b44:	bf44      	itt	mi
 8005b46:	2320      	movmi	r3, #32
 8005b48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b4c:	0711      	lsls	r1, r2, #28
 8005b4e:	bf44      	itt	mi
 8005b50:	232b      	movmi	r3, #43	@ 0x2b
 8005b52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b56:	f89a 3000 	ldrb.w	r3, [sl]
 8005b5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b5c:	d015      	beq.n	8005b8a <_svfiprintf_r+0xfa>
 8005b5e:	9a07      	ldr	r2, [sp, #28]
 8005b60:	4654      	mov	r4, sl
 8005b62:	2000      	movs	r0, #0
 8005b64:	f04f 0c0a 	mov.w	ip, #10
 8005b68:	4621      	mov	r1, r4
 8005b6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b6e:	3b30      	subs	r3, #48	@ 0x30
 8005b70:	2b09      	cmp	r3, #9
 8005b72:	d94b      	bls.n	8005c0c <_svfiprintf_r+0x17c>
 8005b74:	b1b0      	cbz	r0, 8005ba4 <_svfiprintf_r+0x114>
 8005b76:	9207      	str	r2, [sp, #28]
 8005b78:	e014      	b.n	8005ba4 <_svfiprintf_r+0x114>
 8005b7a:	eba0 0308 	sub.w	r3, r0, r8
 8005b7e:	fa09 f303 	lsl.w	r3, r9, r3
 8005b82:	4313      	orrs	r3, r2
 8005b84:	9304      	str	r3, [sp, #16]
 8005b86:	46a2      	mov	sl, r4
 8005b88:	e7d2      	b.n	8005b30 <_svfiprintf_r+0xa0>
 8005b8a:	9b03      	ldr	r3, [sp, #12]
 8005b8c:	1d19      	adds	r1, r3, #4
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	9103      	str	r1, [sp, #12]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	bfbb      	ittet	lt
 8005b96:	425b      	neglt	r3, r3
 8005b98:	f042 0202 	orrlt.w	r2, r2, #2
 8005b9c:	9307      	strge	r3, [sp, #28]
 8005b9e:	9307      	strlt	r3, [sp, #28]
 8005ba0:	bfb8      	it	lt
 8005ba2:	9204      	strlt	r2, [sp, #16]
 8005ba4:	7823      	ldrb	r3, [r4, #0]
 8005ba6:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ba8:	d10a      	bne.n	8005bc0 <_svfiprintf_r+0x130>
 8005baa:	7863      	ldrb	r3, [r4, #1]
 8005bac:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bae:	d132      	bne.n	8005c16 <_svfiprintf_r+0x186>
 8005bb0:	9b03      	ldr	r3, [sp, #12]
 8005bb2:	1d1a      	adds	r2, r3, #4
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	9203      	str	r2, [sp, #12]
 8005bb8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005bbc:	3402      	adds	r4, #2
 8005bbe:	9305      	str	r3, [sp, #20]
 8005bc0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005c84 <_svfiprintf_r+0x1f4>
 8005bc4:	7821      	ldrb	r1, [r4, #0]
 8005bc6:	2203      	movs	r2, #3
 8005bc8:	4650      	mov	r0, sl
 8005bca:	f7fa fb11 	bl	80001f0 <memchr>
 8005bce:	b138      	cbz	r0, 8005be0 <_svfiprintf_r+0x150>
 8005bd0:	9b04      	ldr	r3, [sp, #16]
 8005bd2:	eba0 000a 	sub.w	r0, r0, sl
 8005bd6:	2240      	movs	r2, #64	@ 0x40
 8005bd8:	4082      	lsls	r2, r0
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	3401      	adds	r4, #1
 8005bde:	9304      	str	r3, [sp, #16]
 8005be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005be4:	4824      	ldr	r0, [pc, #144]	@ (8005c78 <_svfiprintf_r+0x1e8>)
 8005be6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005bea:	2206      	movs	r2, #6
 8005bec:	f7fa fb00 	bl	80001f0 <memchr>
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	d036      	beq.n	8005c62 <_svfiprintf_r+0x1d2>
 8005bf4:	4b21      	ldr	r3, [pc, #132]	@ (8005c7c <_svfiprintf_r+0x1ec>)
 8005bf6:	bb1b      	cbnz	r3, 8005c40 <_svfiprintf_r+0x1b0>
 8005bf8:	9b03      	ldr	r3, [sp, #12]
 8005bfa:	3307      	adds	r3, #7
 8005bfc:	f023 0307 	bic.w	r3, r3, #7
 8005c00:	3308      	adds	r3, #8
 8005c02:	9303      	str	r3, [sp, #12]
 8005c04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c06:	4433      	add	r3, r6
 8005c08:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c0a:	e76a      	b.n	8005ae2 <_svfiprintf_r+0x52>
 8005c0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c10:	460c      	mov	r4, r1
 8005c12:	2001      	movs	r0, #1
 8005c14:	e7a8      	b.n	8005b68 <_svfiprintf_r+0xd8>
 8005c16:	2300      	movs	r3, #0
 8005c18:	3401      	adds	r4, #1
 8005c1a:	9305      	str	r3, [sp, #20]
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	f04f 0c0a 	mov.w	ip, #10
 8005c22:	4620      	mov	r0, r4
 8005c24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c28:	3a30      	subs	r2, #48	@ 0x30
 8005c2a:	2a09      	cmp	r2, #9
 8005c2c:	d903      	bls.n	8005c36 <_svfiprintf_r+0x1a6>
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d0c6      	beq.n	8005bc0 <_svfiprintf_r+0x130>
 8005c32:	9105      	str	r1, [sp, #20]
 8005c34:	e7c4      	b.n	8005bc0 <_svfiprintf_r+0x130>
 8005c36:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c3a:	4604      	mov	r4, r0
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e7f0      	b.n	8005c22 <_svfiprintf_r+0x192>
 8005c40:	ab03      	add	r3, sp, #12
 8005c42:	9300      	str	r3, [sp, #0]
 8005c44:	462a      	mov	r2, r5
 8005c46:	4b0e      	ldr	r3, [pc, #56]	@ (8005c80 <_svfiprintf_r+0x1f0>)
 8005c48:	a904      	add	r1, sp, #16
 8005c4a:	4638      	mov	r0, r7
 8005c4c:	f3af 8000 	nop.w
 8005c50:	1c42      	adds	r2, r0, #1
 8005c52:	4606      	mov	r6, r0
 8005c54:	d1d6      	bne.n	8005c04 <_svfiprintf_r+0x174>
 8005c56:	89ab      	ldrh	r3, [r5, #12]
 8005c58:	065b      	lsls	r3, r3, #25
 8005c5a:	f53f af2d 	bmi.w	8005ab8 <_svfiprintf_r+0x28>
 8005c5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c60:	e72c      	b.n	8005abc <_svfiprintf_r+0x2c>
 8005c62:	ab03      	add	r3, sp, #12
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	462a      	mov	r2, r5
 8005c68:	4b05      	ldr	r3, [pc, #20]	@ (8005c80 <_svfiprintf_r+0x1f0>)
 8005c6a:	a904      	add	r1, sp, #16
 8005c6c:	4638      	mov	r0, r7
 8005c6e:	f000 f879 	bl	8005d64 <_printf_i>
 8005c72:	e7ed      	b.n	8005c50 <_svfiprintf_r+0x1c0>
 8005c74:	08006f97 	.word	0x08006f97
 8005c78:	08006fa1 	.word	0x08006fa1
 8005c7c:	00000000 	.word	0x00000000
 8005c80:	080059d9 	.word	0x080059d9
 8005c84:	08006f9d 	.word	0x08006f9d

08005c88 <_printf_common>:
 8005c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c8c:	4616      	mov	r6, r2
 8005c8e:	4698      	mov	r8, r3
 8005c90:	688a      	ldr	r2, [r1, #8]
 8005c92:	690b      	ldr	r3, [r1, #16]
 8005c94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	bfb8      	it	lt
 8005c9c:	4613      	movlt	r3, r2
 8005c9e:	6033      	str	r3, [r6, #0]
 8005ca0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ca4:	4607      	mov	r7, r0
 8005ca6:	460c      	mov	r4, r1
 8005ca8:	b10a      	cbz	r2, 8005cae <_printf_common+0x26>
 8005caa:	3301      	adds	r3, #1
 8005cac:	6033      	str	r3, [r6, #0]
 8005cae:	6823      	ldr	r3, [r4, #0]
 8005cb0:	0699      	lsls	r1, r3, #26
 8005cb2:	bf42      	ittt	mi
 8005cb4:	6833      	ldrmi	r3, [r6, #0]
 8005cb6:	3302      	addmi	r3, #2
 8005cb8:	6033      	strmi	r3, [r6, #0]
 8005cba:	6825      	ldr	r5, [r4, #0]
 8005cbc:	f015 0506 	ands.w	r5, r5, #6
 8005cc0:	d106      	bne.n	8005cd0 <_printf_common+0x48>
 8005cc2:	f104 0a19 	add.w	sl, r4, #25
 8005cc6:	68e3      	ldr	r3, [r4, #12]
 8005cc8:	6832      	ldr	r2, [r6, #0]
 8005cca:	1a9b      	subs	r3, r3, r2
 8005ccc:	42ab      	cmp	r3, r5
 8005cce:	dc26      	bgt.n	8005d1e <_printf_common+0x96>
 8005cd0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005cd4:	6822      	ldr	r2, [r4, #0]
 8005cd6:	3b00      	subs	r3, #0
 8005cd8:	bf18      	it	ne
 8005cda:	2301      	movne	r3, #1
 8005cdc:	0692      	lsls	r2, r2, #26
 8005cde:	d42b      	bmi.n	8005d38 <_printf_common+0xb0>
 8005ce0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ce4:	4641      	mov	r1, r8
 8005ce6:	4638      	mov	r0, r7
 8005ce8:	47c8      	blx	r9
 8005cea:	3001      	adds	r0, #1
 8005cec:	d01e      	beq.n	8005d2c <_printf_common+0xa4>
 8005cee:	6823      	ldr	r3, [r4, #0]
 8005cf0:	6922      	ldr	r2, [r4, #16]
 8005cf2:	f003 0306 	and.w	r3, r3, #6
 8005cf6:	2b04      	cmp	r3, #4
 8005cf8:	bf02      	ittt	eq
 8005cfa:	68e5      	ldreq	r5, [r4, #12]
 8005cfc:	6833      	ldreq	r3, [r6, #0]
 8005cfe:	1aed      	subeq	r5, r5, r3
 8005d00:	68a3      	ldr	r3, [r4, #8]
 8005d02:	bf0c      	ite	eq
 8005d04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d08:	2500      	movne	r5, #0
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	bfc4      	itt	gt
 8005d0e:	1a9b      	subgt	r3, r3, r2
 8005d10:	18ed      	addgt	r5, r5, r3
 8005d12:	2600      	movs	r6, #0
 8005d14:	341a      	adds	r4, #26
 8005d16:	42b5      	cmp	r5, r6
 8005d18:	d11a      	bne.n	8005d50 <_printf_common+0xc8>
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	e008      	b.n	8005d30 <_printf_common+0xa8>
 8005d1e:	2301      	movs	r3, #1
 8005d20:	4652      	mov	r2, sl
 8005d22:	4641      	mov	r1, r8
 8005d24:	4638      	mov	r0, r7
 8005d26:	47c8      	blx	r9
 8005d28:	3001      	adds	r0, #1
 8005d2a:	d103      	bne.n	8005d34 <_printf_common+0xac>
 8005d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d34:	3501      	adds	r5, #1
 8005d36:	e7c6      	b.n	8005cc6 <_printf_common+0x3e>
 8005d38:	18e1      	adds	r1, r4, r3
 8005d3a:	1c5a      	adds	r2, r3, #1
 8005d3c:	2030      	movs	r0, #48	@ 0x30
 8005d3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d42:	4422      	add	r2, r4
 8005d44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d4c:	3302      	adds	r3, #2
 8005d4e:	e7c7      	b.n	8005ce0 <_printf_common+0x58>
 8005d50:	2301      	movs	r3, #1
 8005d52:	4622      	mov	r2, r4
 8005d54:	4641      	mov	r1, r8
 8005d56:	4638      	mov	r0, r7
 8005d58:	47c8      	blx	r9
 8005d5a:	3001      	adds	r0, #1
 8005d5c:	d0e6      	beq.n	8005d2c <_printf_common+0xa4>
 8005d5e:	3601      	adds	r6, #1
 8005d60:	e7d9      	b.n	8005d16 <_printf_common+0x8e>
	...

08005d64 <_printf_i>:
 8005d64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d68:	7e0f      	ldrb	r7, [r1, #24]
 8005d6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d6c:	2f78      	cmp	r7, #120	@ 0x78
 8005d6e:	4691      	mov	r9, r2
 8005d70:	4680      	mov	r8, r0
 8005d72:	460c      	mov	r4, r1
 8005d74:	469a      	mov	sl, r3
 8005d76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d7a:	d807      	bhi.n	8005d8c <_printf_i+0x28>
 8005d7c:	2f62      	cmp	r7, #98	@ 0x62
 8005d7e:	d80a      	bhi.n	8005d96 <_printf_i+0x32>
 8005d80:	2f00      	cmp	r7, #0
 8005d82:	f000 80d1 	beq.w	8005f28 <_printf_i+0x1c4>
 8005d86:	2f58      	cmp	r7, #88	@ 0x58
 8005d88:	f000 80b8 	beq.w	8005efc <_printf_i+0x198>
 8005d8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d94:	e03a      	b.n	8005e0c <_printf_i+0xa8>
 8005d96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d9a:	2b15      	cmp	r3, #21
 8005d9c:	d8f6      	bhi.n	8005d8c <_printf_i+0x28>
 8005d9e:	a101      	add	r1, pc, #4	@ (adr r1, 8005da4 <_printf_i+0x40>)
 8005da0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005da4:	08005dfd 	.word	0x08005dfd
 8005da8:	08005e11 	.word	0x08005e11
 8005dac:	08005d8d 	.word	0x08005d8d
 8005db0:	08005d8d 	.word	0x08005d8d
 8005db4:	08005d8d 	.word	0x08005d8d
 8005db8:	08005d8d 	.word	0x08005d8d
 8005dbc:	08005e11 	.word	0x08005e11
 8005dc0:	08005d8d 	.word	0x08005d8d
 8005dc4:	08005d8d 	.word	0x08005d8d
 8005dc8:	08005d8d 	.word	0x08005d8d
 8005dcc:	08005d8d 	.word	0x08005d8d
 8005dd0:	08005f0f 	.word	0x08005f0f
 8005dd4:	08005e3b 	.word	0x08005e3b
 8005dd8:	08005ec9 	.word	0x08005ec9
 8005ddc:	08005d8d 	.word	0x08005d8d
 8005de0:	08005d8d 	.word	0x08005d8d
 8005de4:	08005f31 	.word	0x08005f31
 8005de8:	08005d8d 	.word	0x08005d8d
 8005dec:	08005e3b 	.word	0x08005e3b
 8005df0:	08005d8d 	.word	0x08005d8d
 8005df4:	08005d8d 	.word	0x08005d8d
 8005df8:	08005ed1 	.word	0x08005ed1
 8005dfc:	6833      	ldr	r3, [r6, #0]
 8005dfe:	1d1a      	adds	r2, r3, #4
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6032      	str	r2, [r6, #0]
 8005e04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e09c      	b.n	8005f4a <_printf_i+0x1e6>
 8005e10:	6833      	ldr	r3, [r6, #0]
 8005e12:	6820      	ldr	r0, [r4, #0]
 8005e14:	1d19      	adds	r1, r3, #4
 8005e16:	6031      	str	r1, [r6, #0]
 8005e18:	0606      	lsls	r6, r0, #24
 8005e1a:	d501      	bpl.n	8005e20 <_printf_i+0xbc>
 8005e1c:	681d      	ldr	r5, [r3, #0]
 8005e1e:	e003      	b.n	8005e28 <_printf_i+0xc4>
 8005e20:	0645      	lsls	r5, r0, #25
 8005e22:	d5fb      	bpl.n	8005e1c <_printf_i+0xb8>
 8005e24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e28:	2d00      	cmp	r5, #0
 8005e2a:	da03      	bge.n	8005e34 <_printf_i+0xd0>
 8005e2c:	232d      	movs	r3, #45	@ 0x2d
 8005e2e:	426d      	negs	r5, r5
 8005e30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e34:	4858      	ldr	r0, [pc, #352]	@ (8005f98 <_printf_i+0x234>)
 8005e36:	230a      	movs	r3, #10
 8005e38:	e011      	b.n	8005e5e <_printf_i+0xfa>
 8005e3a:	6821      	ldr	r1, [r4, #0]
 8005e3c:	6833      	ldr	r3, [r6, #0]
 8005e3e:	0608      	lsls	r0, r1, #24
 8005e40:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e44:	d402      	bmi.n	8005e4c <_printf_i+0xe8>
 8005e46:	0649      	lsls	r1, r1, #25
 8005e48:	bf48      	it	mi
 8005e4a:	b2ad      	uxthmi	r5, r5
 8005e4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e4e:	4852      	ldr	r0, [pc, #328]	@ (8005f98 <_printf_i+0x234>)
 8005e50:	6033      	str	r3, [r6, #0]
 8005e52:	bf14      	ite	ne
 8005e54:	230a      	movne	r3, #10
 8005e56:	2308      	moveq	r3, #8
 8005e58:	2100      	movs	r1, #0
 8005e5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e5e:	6866      	ldr	r6, [r4, #4]
 8005e60:	60a6      	str	r6, [r4, #8]
 8005e62:	2e00      	cmp	r6, #0
 8005e64:	db05      	blt.n	8005e72 <_printf_i+0x10e>
 8005e66:	6821      	ldr	r1, [r4, #0]
 8005e68:	432e      	orrs	r6, r5
 8005e6a:	f021 0104 	bic.w	r1, r1, #4
 8005e6e:	6021      	str	r1, [r4, #0]
 8005e70:	d04b      	beq.n	8005f0a <_printf_i+0x1a6>
 8005e72:	4616      	mov	r6, r2
 8005e74:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e78:	fb03 5711 	mls	r7, r3, r1, r5
 8005e7c:	5dc7      	ldrb	r7, [r0, r7]
 8005e7e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e82:	462f      	mov	r7, r5
 8005e84:	42bb      	cmp	r3, r7
 8005e86:	460d      	mov	r5, r1
 8005e88:	d9f4      	bls.n	8005e74 <_printf_i+0x110>
 8005e8a:	2b08      	cmp	r3, #8
 8005e8c:	d10b      	bne.n	8005ea6 <_printf_i+0x142>
 8005e8e:	6823      	ldr	r3, [r4, #0]
 8005e90:	07df      	lsls	r7, r3, #31
 8005e92:	d508      	bpl.n	8005ea6 <_printf_i+0x142>
 8005e94:	6923      	ldr	r3, [r4, #16]
 8005e96:	6861      	ldr	r1, [r4, #4]
 8005e98:	4299      	cmp	r1, r3
 8005e9a:	bfde      	ittt	le
 8005e9c:	2330      	movle	r3, #48	@ 0x30
 8005e9e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ea2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ea6:	1b92      	subs	r2, r2, r6
 8005ea8:	6122      	str	r2, [r4, #16]
 8005eaa:	f8cd a000 	str.w	sl, [sp]
 8005eae:	464b      	mov	r3, r9
 8005eb0:	aa03      	add	r2, sp, #12
 8005eb2:	4621      	mov	r1, r4
 8005eb4:	4640      	mov	r0, r8
 8005eb6:	f7ff fee7 	bl	8005c88 <_printf_common>
 8005eba:	3001      	adds	r0, #1
 8005ebc:	d14a      	bne.n	8005f54 <_printf_i+0x1f0>
 8005ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec2:	b004      	add	sp, #16
 8005ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ec8:	6823      	ldr	r3, [r4, #0]
 8005eca:	f043 0320 	orr.w	r3, r3, #32
 8005ece:	6023      	str	r3, [r4, #0]
 8005ed0:	4832      	ldr	r0, [pc, #200]	@ (8005f9c <_printf_i+0x238>)
 8005ed2:	2778      	movs	r7, #120	@ 0x78
 8005ed4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ed8:	6823      	ldr	r3, [r4, #0]
 8005eda:	6831      	ldr	r1, [r6, #0]
 8005edc:	061f      	lsls	r7, r3, #24
 8005ede:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ee2:	d402      	bmi.n	8005eea <_printf_i+0x186>
 8005ee4:	065f      	lsls	r7, r3, #25
 8005ee6:	bf48      	it	mi
 8005ee8:	b2ad      	uxthmi	r5, r5
 8005eea:	6031      	str	r1, [r6, #0]
 8005eec:	07d9      	lsls	r1, r3, #31
 8005eee:	bf44      	itt	mi
 8005ef0:	f043 0320 	orrmi.w	r3, r3, #32
 8005ef4:	6023      	strmi	r3, [r4, #0]
 8005ef6:	b11d      	cbz	r5, 8005f00 <_printf_i+0x19c>
 8005ef8:	2310      	movs	r3, #16
 8005efa:	e7ad      	b.n	8005e58 <_printf_i+0xf4>
 8005efc:	4826      	ldr	r0, [pc, #152]	@ (8005f98 <_printf_i+0x234>)
 8005efe:	e7e9      	b.n	8005ed4 <_printf_i+0x170>
 8005f00:	6823      	ldr	r3, [r4, #0]
 8005f02:	f023 0320 	bic.w	r3, r3, #32
 8005f06:	6023      	str	r3, [r4, #0]
 8005f08:	e7f6      	b.n	8005ef8 <_printf_i+0x194>
 8005f0a:	4616      	mov	r6, r2
 8005f0c:	e7bd      	b.n	8005e8a <_printf_i+0x126>
 8005f0e:	6833      	ldr	r3, [r6, #0]
 8005f10:	6825      	ldr	r5, [r4, #0]
 8005f12:	6961      	ldr	r1, [r4, #20]
 8005f14:	1d18      	adds	r0, r3, #4
 8005f16:	6030      	str	r0, [r6, #0]
 8005f18:	062e      	lsls	r6, r5, #24
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	d501      	bpl.n	8005f22 <_printf_i+0x1be>
 8005f1e:	6019      	str	r1, [r3, #0]
 8005f20:	e002      	b.n	8005f28 <_printf_i+0x1c4>
 8005f22:	0668      	lsls	r0, r5, #25
 8005f24:	d5fb      	bpl.n	8005f1e <_printf_i+0x1ba>
 8005f26:	8019      	strh	r1, [r3, #0]
 8005f28:	2300      	movs	r3, #0
 8005f2a:	6123      	str	r3, [r4, #16]
 8005f2c:	4616      	mov	r6, r2
 8005f2e:	e7bc      	b.n	8005eaa <_printf_i+0x146>
 8005f30:	6833      	ldr	r3, [r6, #0]
 8005f32:	1d1a      	adds	r2, r3, #4
 8005f34:	6032      	str	r2, [r6, #0]
 8005f36:	681e      	ldr	r6, [r3, #0]
 8005f38:	6862      	ldr	r2, [r4, #4]
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	4630      	mov	r0, r6
 8005f3e:	f7fa f957 	bl	80001f0 <memchr>
 8005f42:	b108      	cbz	r0, 8005f48 <_printf_i+0x1e4>
 8005f44:	1b80      	subs	r0, r0, r6
 8005f46:	6060      	str	r0, [r4, #4]
 8005f48:	6863      	ldr	r3, [r4, #4]
 8005f4a:	6123      	str	r3, [r4, #16]
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f52:	e7aa      	b.n	8005eaa <_printf_i+0x146>
 8005f54:	6923      	ldr	r3, [r4, #16]
 8005f56:	4632      	mov	r2, r6
 8005f58:	4649      	mov	r1, r9
 8005f5a:	4640      	mov	r0, r8
 8005f5c:	47d0      	blx	sl
 8005f5e:	3001      	adds	r0, #1
 8005f60:	d0ad      	beq.n	8005ebe <_printf_i+0x15a>
 8005f62:	6823      	ldr	r3, [r4, #0]
 8005f64:	079b      	lsls	r3, r3, #30
 8005f66:	d413      	bmi.n	8005f90 <_printf_i+0x22c>
 8005f68:	68e0      	ldr	r0, [r4, #12]
 8005f6a:	9b03      	ldr	r3, [sp, #12]
 8005f6c:	4298      	cmp	r0, r3
 8005f6e:	bfb8      	it	lt
 8005f70:	4618      	movlt	r0, r3
 8005f72:	e7a6      	b.n	8005ec2 <_printf_i+0x15e>
 8005f74:	2301      	movs	r3, #1
 8005f76:	4632      	mov	r2, r6
 8005f78:	4649      	mov	r1, r9
 8005f7a:	4640      	mov	r0, r8
 8005f7c:	47d0      	blx	sl
 8005f7e:	3001      	adds	r0, #1
 8005f80:	d09d      	beq.n	8005ebe <_printf_i+0x15a>
 8005f82:	3501      	adds	r5, #1
 8005f84:	68e3      	ldr	r3, [r4, #12]
 8005f86:	9903      	ldr	r1, [sp, #12]
 8005f88:	1a5b      	subs	r3, r3, r1
 8005f8a:	42ab      	cmp	r3, r5
 8005f8c:	dcf2      	bgt.n	8005f74 <_printf_i+0x210>
 8005f8e:	e7eb      	b.n	8005f68 <_printf_i+0x204>
 8005f90:	2500      	movs	r5, #0
 8005f92:	f104 0619 	add.w	r6, r4, #25
 8005f96:	e7f5      	b.n	8005f84 <_printf_i+0x220>
 8005f98:	08006fa8 	.word	0x08006fa8
 8005f9c:	08006fb9 	.word	0x08006fb9

08005fa0 <__sflush_r>:
 8005fa0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fa8:	0716      	lsls	r6, r2, #28
 8005faa:	4605      	mov	r5, r0
 8005fac:	460c      	mov	r4, r1
 8005fae:	d454      	bmi.n	800605a <__sflush_r+0xba>
 8005fb0:	684b      	ldr	r3, [r1, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	dc02      	bgt.n	8005fbc <__sflush_r+0x1c>
 8005fb6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	dd48      	ble.n	800604e <__sflush_r+0xae>
 8005fbc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005fbe:	2e00      	cmp	r6, #0
 8005fc0:	d045      	beq.n	800604e <__sflush_r+0xae>
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005fc8:	682f      	ldr	r7, [r5, #0]
 8005fca:	6a21      	ldr	r1, [r4, #32]
 8005fcc:	602b      	str	r3, [r5, #0]
 8005fce:	d030      	beq.n	8006032 <__sflush_r+0x92>
 8005fd0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005fd2:	89a3      	ldrh	r3, [r4, #12]
 8005fd4:	0759      	lsls	r1, r3, #29
 8005fd6:	d505      	bpl.n	8005fe4 <__sflush_r+0x44>
 8005fd8:	6863      	ldr	r3, [r4, #4]
 8005fda:	1ad2      	subs	r2, r2, r3
 8005fdc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005fde:	b10b      	cbz	r3, 8005fe4 <__sflush_r+0x44>
 8005fe0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005fe2:	1ad2      	subs	r2, r2, r3
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005fe8:	6a21      	ldr	r1, [r4, #32]
 8005fea:	4628      	mov	r0, r5
 8005fec:	47b0      	blx	r6
 8005fee:	1c43      	adds	r3, r0, #1
 8005ff0:	89a3      	ldrh	r3, [r4, #12]
 8005ff2:	d106      	bne.n	8006002 <__sflush_r+0x62>
 8005ff4:	6829      	ldr	r1, [r5, #0]
 8005ff6:	291d      	cmp	r1, #29
 8005ff8:	d82b      	bhi.n	8006052 <__sflush_r+0xb2>
 8005ffa:	4a2a      	ldr	r2, [pc, #168]	@ (80060a4 <__sflush_r+0x104>)
 8005ffc:	40ca      	lsrs	r2, r1
 8005ffe:	07d6      	lsls	r6, r2, #31
 8006000:	d527      	bpl.n	8006052 <__sflush_r+0xb2>
 8006002:	2200      	movs	r2, #0
 8006004:	6062      	str	r2, [r4, #4]
 8006006:	04d9      	lsls	r1, r3, #19
 8006008:	6922      	ldr	r2, [r4, #16]
 800600a:	6022      	str	r2, [r4, #0]
 800600c:	d504      	bpl.n	8006018 <__sflush_r+0x78>
 800600e:	1c42      	adds	r2, r0, #1
 8006010:	d101      	bne.n	8006016 <__sflush_r+0x76>
 8006012:	682b      	ldr	r3, [r5, #0]
 8006014:	b903      	cbnz	r3, 8006018 <__sflush_r+0x78>
 8006016:	6560      	str	r0, [r4, #84]	@ 0x54
 8006018:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800601a:	602f      	str	r7, [r5, #0]
 800601c:	b1b9      	cbz	r1, 800604e <__sflush_r+0xae>
 800601e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006022:	4299      	cmp	r1, r3
 8006024:	d002      	beq.n	800602c <__sflush_r+0x8c>
 8006026:	4628      	mov	r0, r5
 8006028:	f7ff fbd6 	bl	80057d8 <_free_r>
 800602c:	2300      	movs	r3, #0
 800602e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006030:	e00d      	b.n	800604e <__sflush_r+0xae>
 8006032:	2301      	movs	r3, #1
 8006034:	4628      	mov	r0, r5
 8006036:	47b0      	blx	r6
 8006038:	4602      	mov	r2, r0
 800603a:	1c50      	adds	r0, r2, #1
 800603c:	d1c9      	bne.n	8005fd2 <__sflush_r+0x32>
 800603e:	682b      	ldr	r3, [r5, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d0c6      	beq.n	8005fd2 <__sflush_r+0x32>
 8006044:	2b1d      	cmp	r3, #29
 8006046:	d001      	beq.n	800604c <__sflush_r+0xac>
 8006048:	2b16      	cmp	r3, #22
 800604a:	d11e      	bne.n	800608a <__sflush_r+0xea>
 800604c:	602f      	str	r7, [r5, #0]
 800604e:	2000      	movs	r0, #0
 8006050:	e022      	b.n	8006098 <__sflush_r+0xf8>
 8006052:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006056:	b21b      	sxth	r3, r3
 8006058:	e01b      	b.n	8006092 <__sflush_r+0xf2>
 800605a:	690f      	ldr	r7, [r1, #16]
 800605c:	2f00      	cmp	r7, #0
 800605e:	d0f6      	beq.n	800604e <__sflush_r+0xae>
 8006060:	0793      	lsls	r3, r2, #30
 8006062:	680e      	ldr	r6, [r1, #0]
 8006064:	bf08      	it	eq
 8006066:	694b      	ldreq	r3, [r1, #20]
 8006068:	600f      	str	r7, [r1, #0]
 800606a:	bf18      	it	ne
 800606c:	2300      	movne	r3, #0
 800606e:	eba6 0807 	sub.w	r8, r6, r7
 8006072:	608b      	str	r3, [r1, #8]
 8006074:	f1b8 0f00 	cmp.w	r8, #0
 8006078:	dde9      	ble.n	800604e <__sflush_r+0xae>
 800607a:	6a21      	ldr	r1, [r4, #32]
 800607c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800607e:	4643      	mov	r3, r8
 8006080:	463a      	mov	r2, r7
 8006082:	4628      	mov	r0, r5
 8006084:	47b0      	blx	r6
 8006086:	2800      	cmp	r0, #0
 8006088:	dc08      	bgt.n	800609c <__sflush_r+0xfc>
 800608a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800608e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006092:	81a3      	strh	r3, [r4, #12]
 8006094:	f04f 30ff 	mov.w	r0, #4294967295
 8006098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800609c:	4407      	add	r7, r0
 800609e:	eba8 0800 	sub.w	r8, r8, r0
 80060a2:	e7e7      	b.n	8006074 <__sflush_r+0xd4>
 80060a4:	20400001 	.word	0x20400001

080060a8 <_fflush_r>:
 80060a8:	b538      	push	{r3, r4, r5, lr}
 80060aa:	690b      	ldr	r3, [r1, #16]
 80060ac:	4605      	mov	r5, r0
 80060ae:	460c      	mov	r4, r1
 80060b0:	b913      	cbnz	r3, 80060b8 <_fflush_r+0x10>
 80060b2:	2500      	movs	r5, #0
 80060b4:	4628      	mov	r0, r5
 80060b6:	bd38      	pop	{r3, r4, r5, pc}
 80060b8:	b118      	cbz	r0, 80060c2 <_fflush_r+0x1a>
 80060ba:	6a03      	ldr	r3, [r0, #32]
 80060bc:	b90b      	cbnz	r3, 80060c2 <_fflush_r+0x1a>
 80060be:	f7ff f9fb 	bl	80054b8 <__sinit>
 80060c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d0f3      	beq.n	80060b2 <_fflush_r+0xa>
 80060ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80060cc:	07d0      	lsls	r0, r2, #31
 80060ce:	d404      	bmi.n	80060da <_fflush_r+0x32>
 80060d0:	0599      	lsls	r1, r3, #22
 80060d2:	d402      	bmi.n	80060da <_fflush_r+0x32>
 80060d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060d6:	f7ff fb50 	bl	800577a <__retarget_lock_acquire_recursive>
 80060da:	4628      	mov	r0, r5
 80060dc:	4621      	mov	r1, r4
 80060de:	f7ff ff5f 	bl	8005fa0 <__sflush_r>
 80060e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060e4:	07da      	lsls	r2, r3, #31
 80060e6:	4605      	mov	r5, r0
 80060e8:	d4e4      	bmi.n	80060b4 <_fflush_r+0xc>
 80060ea:	89a3      	ldrh	r3, [r4, #12]
 80060ec:	059b      	lsls	r3, r3, #22
 80060ee:	d4e1      	bmi.n	80060b4 <_fflush_r+0xc>
 80060f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060f2:	f7ff fb43 	bl	800577c <__retarget_lock_release_recursive>
 80060f6:	e7dd      	b.n	80060b4 <_fflush_r+0xc>

080060f8 <fiprintf>:
 80060f8:	b40e      	push	{r1, r2, r3}
 80060fa:	b503      	push	{r0, r1, lr}
 80060fc:	4601      	mov	r1, r0
 80060fe:	ab03      	add	r3, sp, #12
 8006100:	4805      	ldr	r0, [pc, #20]	@ (8006118 <fiprintf+0x20>)
 8006102:	f853 2b04 	ldr.w	r2, [r3], #4
 8006106:	6800      	ldr	r0, [r0, #0]
 8006108:	9301      	str	r3, [sp, #4]
 800610a:	f000 f88f 	bl	800622c <_vfiprintf_r>
 800610e:	b002      	add	sp, #8
 8006110:	f85d eb04 	ldr.w	lr, [sp], #4
 8006114:	b003      	add	sp, #12
 8006116:	4770      	bx	lr
 8006118:	2000004c 	.word	0x2000004c

0800611c <memmove>:
 800611c:	4288      	cmp	r0, r1
 800611e:	b510      	push	{r4, lr}
 8006120:	eb01 0402 	add.w	r4, r1, r2
 8006124:	d902      	bls.n	800612c <memmove+0x10>
 8006126:	4284      	cmp	r4, r0
 8006128:	4623      	mov	r3, r4
 800612a:	d807      	bhi.n	800613c <memmove+0x20>
 800612c:	1e43      	subs	r3, r0, #1
 800612e:	42a1      	cmp	r1, r4
 8006130:	d008      	beq.n	8006144 <memmove+0x28>
 8006132:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006136:	f803 2f01 	strb.w	r2, [r3, #1]!
 800613a:	e7f8      	b.n	800612e <memmove+0x12>
 800613c:	4402      	add	r2, r0
 800613e:	4601      	mov	r1, r0
 8006140:	428a      	cmp	r2, r1
 8006142:	d100      	bne.n	8006146 <memmove+0x2a>
 8006144:	bd10      	pop	{r4, pc}
 8006146:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800614a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800614e:	e7f7      	b.n	8006140 <memmove+0x24>

08006150 <_sbrk_r>:
 8006150:	b538      	push	{r3, r4, r5, lr}
 8006152:	4d06      	ldr	r5, [pc, #24]	@ (800616c <_sbrk_r+0x1c>)
 8006154:	2300      	movs	r3, #0
 8006156:	4604      	mov	r4, r0
 8006158:	4608      	mov	r0, r1
 800615a:	602b      	str	r3, [r5, #0]
 800615c:	f7fc fe9c 	bl	8002e98 <_sbrk>
 8006160:	1c43      	adds	r3, r0, #1
 8006162:	d102      	bne.n	800616a <_sbrk_r+0x1a>
 8006164:	682b      	ldr	r3, [r5, #0]
 8006166:	b103      	cbz	r3, 800616a <_sbrk_r+0x1a>
 8006168:	6023      	str	r3, [r4, #0]
 800616a:	bd38      	pop	{r3, r4, r5, pc}
 800616c:	2000069c 	.word	0x2000069c

08006170 <abort>:
 8006170:	b508      	push	{r3, lr}
 8006172:	2006      	movs	r0, #6
 8006174:	f000 fa2e 	bl	80065d4 <raise>
 8006178:	2001      	movs	r0, #1
 800617a:	f7fc fe15 	bl	8002da8 <_exit>

0800617e <_realloc_r>:
 800617e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006182:	4607      	mov	r7, r0
 8006184:	4614      	mov	r4, r2
 8006186:	460d      	mov	r5, r1
 8006188:	b921      	cbnz	r1, 8006194 <_realloc_r+0x16>
 800618a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800618e:	4611      	mov	r1, r2
 8006190:	f7ff bb96 	b.w	80058c0 <_malloc_r>
 8006194:	b92a      	cbnz	r2, 80061a2 <_realloc_r+0x24>
 8006196:	f7ff fb1f 	bl	80057d8 <_free_r>
 800619a:	4625      	mov	r5, r4
 800619c:	4628      	mov	r0, r5
 800619e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061a2:	f000 fa33 	bl	800660c <_malloc_usable_size_r>
 80061a6:	4284      	cmp	r4, r0
 80061a8:	4606      	mov	r6, r0
 80061aa:	d802      	bhi.n	80061b2 <_realloc_r+0x34>
 80061ac:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80061b0:	d8f4      	bhi.n	800619c <_realloc_r+0x1e>
 80061b2:	4621      	mov	r1, r4
 80061b4:	4638      	mov	r0, r7
 80061b6:	f7ff fb83 	bl	80058c0 <_malloc_r>
 80061ba:	4680      	mov	r8, r0
 80061bc:	b908      	cbnz	r0, 80061c2 <_realloc_r+0x44>
 80061be:	4645      	mov	r5, r8
 80061c0:	e7ec      	b.n	800619c <_realloc_r+0x1e>
 80061c2:	42b4      	cmp	r4, r6
 80061c4:	4622      	mov	r2, r4
 80061c6:	4629      	mov	r1, r5
 80061c8:	bf28      	it	cs
 80061ca:	4632      	movcs	r2, r6
 80061cc:	f7ff fad7 	bl	800577e <memcpy>
 80061d0:	4629      	mov	r1, r5
 80061d2:	4638      	mov	r0, r7
 80061d4:	f7ff fb00 	bl	80057d8 <_free_r>
 80061d8:	e7f1      	b.n	80061be <_realloc_r+0x40>

080061da <__sfputc_r>:
 80061da:	6893      	ldr	r3, [r2, #8]
 80061dc:	3b01      	subs	r3, #1
 80061de:	2b00      	cmp	r3, #0
 80061e0:	b410      	push	{r4}
 80061e2:	6093      	str	r3, [r2, #8]
 80061e4:	da08      	bge.n	80061f8 <__sfputc_r+0x1e>
 80061e6:	6994      	ldr	r4, [r2, #24]
 80061e8:	42a3      	cmp	r3, r4
 80061ea:	db01      	blt.n	80061f0 <__sfputc_r+0x16>
 80061ec:	290a      	cmp	r1, #10
 80061ee:	d103      	bne.n	80061f8 <__sfputc_r+0x1e>
 80061f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061f4:	f000 b932 	b.w	800645c <__swbuf_r>
 80061f8:	6813      	ldr	r3, [r2, #0]
 80061fa:	1c58      	adds	r0, r3, #1
 80061fc:	6010      	str	r0, [r2, #0]
 80061fe:	7019      	strb	r1, [r3, #0]
 8006200:	4608      	mov	r0, r1
 8006202:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006206:	4770      	bx	lr

08006208 <__sfputs_r>:
 8006208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800620a:	4606      	mov	r6, r0
 800620c:	460f      	mov	r7, r1
 800620e:	4614      	mov	r4, r2
 8006210:	18d5      	adds	r5, r2, r3
 8006212:	42ac      	cmp	r4, r5
 8006214:	d101      	bne.n	800621a <__sfputs_r+0x12>
 8006216:	2000      	movs	r0, #0
 8006218:	e007      	b.n	800622a <__sfputs_r+0x22>
 800621a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800621e:	463a      	mov	r2, r7
 8006220:	4630      	mov	r0, r6
 8006222:	f7ff ffda 	bl	80061da <__sfputc_r>
 8006226:	1c43      	adds	r3, r0, #1
 8006228:	d1f3      	bne.n	8006212 <__sfputs_r+0xa>
 800622a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800622c <_vfiprintf_r>:
 800622c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006230:	460d      	mov	r5, r1
 8006232:	b09d      	sub	sp, #116	@ 0x74
 8006234:	4614      	mov	r4, r2
 8006236:	4698      	mov	r8, r3
 8006238:	4606      	mov	r6, r0
 800623a:	b118      	cbz	r0, 8006244 <_vfiprintf_r+0x18>
 800623c:	6a03      	ldr	r3, [r0, #32]
 800623e:	b90b      	cbnz	r3, 8006244 <_vfiprintf_r+0x18>
 8006240:	f7ff f93a 	bl	80054b8 <__sinit>
 8006244:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006246:	07d9      	lsls	r1, r3, #31
 8006248:	d405      	bmi.n	8006256 <_vfiprintf_r+0x2a>
 800624a:	89ab      	ldrh	r3, [r5, #12]
 800624c:	059a      	lsls	r2, r3, #22
 800624e:	d402      	bmi.n	8006256 <_vfiprintf_r+0x2a>
 8006250:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006252:	f7ff fa92 	bl	800577a <__retarget_lock_acquire_recursive>
 8006256:	89ab      	ldrh	r3, [r5, #12]
 8006258:	071b      	lsls	r3, r3, #28
 800625a:	d501      	bpl.n	8006260 <_vfiprintf_r+0x34>
 800625c:	692b      	ldr	r3, [r5, #16]
 800625e:	b99b      	cbnz	r3, 8006288 <_vfiprintf_r+0x5c>
 8006260:	4629      	mov	r1, r5
 8006262:	4630      	mov	r0, r6
 8006264:	f000 f938 	bl	80064d8 <__swsetup_r>
 8006268:	b170      	cbz	r0, 8006288 <_vfiprintf_r+0x5c>
 800626a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800626c:	07dc      	lsls	r4, r3, #31
 800626e:	d504      	bpl.n	800627a <_vfiprintf_r+0x4e>
 8006270:	f04f 30ff 	mov.w	r0, #4294967295
 8006274:	b01d      	add	sp, #116	@ 0x74
 8006276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800627a:	89ab      	ldrh	r3, [r5, #12]
 800627c:	0598      	lsls	r0, r3, #22
 800627e:	d4f7      	bmi.n	8006270 <_vfiprintf_r+0x44>
 8006280:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006282:	f7ff fa7b 	bl	800577c <__retarget_lock_release_recursive>
 8006286:	e7f3      	b.n	8006270 <_vfiprintf_r+0x44>
 8006288:	2300      	movs	r3, #0
 800628a:	9309      	str	r3, [sp, #36]	@ 0x24
 800628c:	2320      	movs	r3, #32
 800628e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006292:	f8cd 800c 	str.w	r8, [sp, #12]
 8006296:	2330      	movs	r3, #48	@ 0x30
 8006298:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006448 <_vfiprintf_r+0x21c>
 800629c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80062a0:	f04f 0901 	mov.w	r9, #1
 80062a4:	4623      	mov	r3, r4
 80062a6:	469a      	mov	sl, r3
 80062a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062ac:	b10a      	cbz	r2, 80062b2 <_vfiprintf_r+0x86>
 80062ae:	2a25      	cmp	r2, #37	@ 0x25
 80062b0:	d1f9      	bne.n	80062a6 <_vfiprintf_r+0x7a>
 80062b2:	ebba 0b04 	subs.w	fp, sl, r4
 80062b6:	d00b      	beq.n	80062d0 <_vfiprintf_r+0xa4>
 80062b8:	465b      	mov	r3, fp
 80062ba:	4622      	mov	r2, r4
 80062bc:	4629      	mov	r1, r5
 80062be:	4630      	mov	r0, r6
 80062c0:	f7ff ffa2 	bl	8006208 <__sfputs_r>
 80062c4:	3001      	adds	r0, #1
 80062c6:	f000 80a7 	beq.w	8006418 <_vfiprintf_r+0x1ec>
 80062ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062cc:	445a      	add	r2, fp
 80062ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80062d0:	f89a 3000 	ldrb.w	r3, [sl]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 809f 	beq.w	8006418 <_vfiprintf_r+0x1ec>
 80062da:	2300      	movs	r3, #0
 80062dc:	f04f 32ff 	mov.w	r2, #4294967295
 80062e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062e4:	f10a 0a01 	add.w	sl, sl, #1
 80062e8:	9304      	str	r3, [sp, #16]
 80062ea:	9307      	str	r3, [sp, #28]
 80062ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80062f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80062f2:	4654      	mov	r4, sl
 80062f4:	2205      	movs	r2, #5
 80062f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062fa:	4853      	ldr	r0, [pc, #332]	@ (8006448 <_vfiprintf_r+0x21c>)
 80062fc:	f7f9 ff78 	bl	80001f0 <memchr>
 8006300:	9a04      	ldr	r2, [sp, #16]
 8006302:	b9d8      	cbnz	r0, 800633c <_vfiprintf_r+0x110>
 8006304:	06d1      	lsls	r1, r2, #27
 8006306:	bf44      	itt	mi
 8006308:	2320      	movmi	r3, #32
 800630a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800630e:	0713      	lsls	r3, r2, #28
 8006310:	bf44      	itt	mi
 8006312:	232b      	movmi	r3, #43	@ 0x2b
 8006314:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006318:	f89a 3000 	ldrb.w	r3, [sl]
 800631c:	2b2a      	cmp	r3, #42	@ 0x2a
 800631e:	d015      	beq.n	800634c <_vfiprintf_r+0x120>
 8006320:	9a07      	ldr	r2, [sp, #28]
 8006322:	4654      	mov	r4, sl
 8006324:	2000      	movs	r0, #0
 8006326:	f04f 0c0a 	mov.w	ip, #10
 800632a:	4621      	mov	r1, r4
 800632c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006330:	3b30      	subs	r3, #48	@ 0x30
 8006332:	2b09      	cmp	r3, #9
 8006334:	d94b      	bls.n	80063ce <_vfiprintf_r+0x1a2>
 8006336:	b1b0      	cbz	r0, 8006366 <_vfiprintf_r+0x13a>
 8006338:	9207      	str	r2, [sp, #28]
 800633a:	e014      	b.n	8006366 <_vfiprintf_r+0x13a>
 800633c:	eba0 0308 	sub.w	r3, r0, r8
 8006340:	fa09 f303 	lsl.w	r3, r9, r3
 8006344:	4313      	orrs	r3, r2
 8006346:	9304      	str	r3, [sp, #16]
 8006348:	46a2      	mov	sl, r4
 800634a:	e7d2      	b.n	80062f2 <_vfiprintf_r+0xc6>
 800634c:	9b03      	ldr	r3, [sp, #12]
 800634e:	1d19      	adds	r1, r3, #4
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	9103      	str	r1, [sp, #12]
 8006354:	2b00      	cmp	r3, #0
 8006356:	bfbb      	ittet	lt
 8006358:	425b      	neglt	r3, r3
 800635a:	f042 0202 	orrlt.w	r2, r2, #2
 800635e:	9307      	strge	r3, [sp, #28]
 8006360:	9307      	strlt	r3, [sp, #28]
 8006362:	bfb8      	it	lt
 8006364:	9204      	strlt	r2, [sp, #16]
 8006366:	7823      	ldrb	r3, [r4, #0]
 8006368:	2b2e      	cmp	r3, #46	@ 0x2e
 800636a:	d10a      	bne.n	8006382 <_vfiprintf_r+0x156>
 800636c:	7863      	ldrb	r3, [r4, #1]
 800636e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006370:	d132      	bne.n	80063d8 <_vfiprintf_r+0x1ac>
 8006372:	9b03      	ldr	r3, [sp, #12]
 8006374:	1d1a      	adds	r2, r3, #4
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	9203      	str	r2, [sp, #12]
 800637a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800637e:	3402      	adds	r4, #2
 8006380:	9305      	str	r3, [sp, #20]
 8006382:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006458 <_vfiprintf_r+0x22c>
 8006386:	7821      	ldrb	r1, [r4, #0]
 8006388:	2203      	movs	r2, #3
 800638a:	4650      	mov	r0, sl
 800638c:	f7f9 ff30 	bl	80001f0 <memchr>
 8006390:	b138      	cbz	r0, 80063a2 <_vfiprintf_r+0x176>
 8006392:	9b04      	ldr	r3, [sp, #16]
 8006394:	eba0 000a 	sub.w	r0, r0, sl
 8006398:	2240      	movs	r2, #64	@ 0x40
 800639a:	4082      	lsls	r2, r0
 800639c:	4313      	orrs	r3, r2
 800639e:	3401      	adds	r4, #1
 80063a0:	9304      	str	r3, [sp, #16]
 80063a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063a6:	4829      	ldr	r0, [pc, #164]	@ (800644c <_vfiprintf_r+0x220>)
 80063a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80063ac:	2206      	movs	r2, #6
 80063ae:	f7f9 ff1f 	bl	80001f0 <memchr>
 80063b2:	2800      	cmp	r0, #0
 80063b4:	d03f      	beq.n	8006436 <_vfiprintf_r+0x20a>
 80063b6:	4b26      	ldr	r3, [pc, #152]	@ (8006450 <_vfiprintf_r+0x224>)
 80063b8:	bb1b      	cbnz	r3, 8006402 <_vfiprintf_r+0x1d6>
 80063ba:	9b03      	ldr	r3, [sp, #12]
 80063bc:	3307      	adds	r3, #7
 80063be:	f023 0307 	bic.w	r3, r3, #7
 80063c2:	3308      	adds	r3, #8
 80063c4:	9303      	str	r3, [sp, #12]
 80063c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063c8:	443b      	add	r3, r7
 80063ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80063cc:	e76a      	b.n	80062a4 <_vfiprintf_r+0x78>
 80063ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80063d2:	460c      	mov	r4, r1
 80063d4:	2001      	movs	r0, #1
 80063d6:	e7a8      	b.n	800632a <_vfiprintf_r+0xfe>
 80063d8:	2300      	movs	r3, #0
 80063da:	3401      	adds	r4, #1
 80063dc:	9305      	str	r3, [sp, #20]
 80063de:	4619      	mov	r1, r3
 80063e0:	f04f 0c0a 	mov.w	ip, #10
 80063e4:	4620      	mov	r0, r4
 80063e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063ea:	3a30      	subs	r2, #48	@ 0x30
 80063ec:	2a09      	cmp	r2, #9
 80063ee:	d903      	bls.n	80063f8 <_vfiprintf_r+0x1cc>
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d0c6      	beq.n	8006382 <_vfiprintf_r+0x156>
 80063f4:	9105      	str	r1, [sp, #20]
 80063f6:	e7c4      	b.n	8006382 <_vfiprintf_r+0x156>
 80063f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80063fc:	4604      	mov	r4, r0
 80063fe:	2301      	movs	r3, #1
 8006400:	e7f0      	b.n	80063e4 <_vfiprintf_r+0x1b8>
 8006402:	ab03      	add	r3, sp, #12
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	462a      	mov	r2, r5
 8006408:	4b12      	ldr	r3, [pc, #72]	@ (8006454 <_vfiprintf_r+0x228>)
 800640a:	a904      	add	r1, sp, #16
 800640c:	4630      	mov	r0, r6
 800640e:	f3af 8000 	nop.w
 8006412:	4607      	mov	r7, r0
 8006414:	1c78      	adds	r0, r7, #1
 8006416:	d1d6      	bne.n	80063c6 <_vfiprintf_r+0x19a>
 8006418:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800641a:	07d9      	lsls	r1, r3, #31
 800641c:	d405      	bmi.n	800642a <_vfiprintf_r+0x1fe>
 800641e:	89ab      	ldrh	r3, [r5, #12]
 8006420:	059a      	lsls	r2, r3, #22
 8006422:	d402      	bmi.n	800642a <_vfiprintf_r+0x1fe>
 8006424:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006426:	f7ff f9a9 	bl	800577c <__retarget_lock_release_recursive>
 800642a:	89ab      	ldrh	r3, [r5, #12]
 800642c:	065b      	lsls	r3, r3, #25
 800642e:	f53f af1f 	bmi.w	8006270 <_vfiprintf_r+0x44>
 8006432:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006434:	e71e      	b.n	8006274 <_vfiprintf_r+0x48>
 8006436:	ab03      	add	r3, sp, #12
 8006438:	9300      	str	r3, [sp, #0]
 800643a:	462a      	mov	r2, r5
 800643c:	4b05      	ldr	r3, [pc, #20]	@ (8006454 <_vfiprintf_r+0x228>)
 800643e:	a904      	add	r1, sp, #16
 8006440:	4630      	mov	r0, r6
 8006442:	f7ff fc8f 	bl	8005d64 <_printf_i>
 8006446:	e7e4      	b.n	8006412 <_vfiprintf_r+0x1e6>
 8006448:	08006f97 	.word	0x08006f97
 800644c:	08006fa1 	.word	0x08006fa1
 8006450:	00000000 	.word	0x00000000
 8006454:	08006209 	.word	0x08006209
 8006458:	08006f9d 	.word	0x08006f9d

0800645c <__swbuf_r>:
 800645c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645e:	460e      	mov	r6, r1
 8006460:	4614      	mov	r4, r2
 8006462:	4605      	mov	r5, r0
 8006464:	b118      	cbz	r0, 800646e <__swbuf_r+0x12>
 8006466:	6a03      	ldr	r3, [r0, #32]
 8006468:	b90b      	cbnz	r3, 800646e <__swbuf_r+0x12>
 800646a:	f7ff f825 	bl	80054b8 <__sinit>
 800646e:	69a3      	ldr	r3, [r4, #24]
 8006470:	60a3      	str	r3, [r4, #8]
 8006472:	89a3      	ldrh	r3, [r4, #12]
 8006474:	071a      	lsls	r2, r3, #28
 8006476:	d501      	bpl.n	800647c <__swbuf_r+0x20>
 8006478:	6923      	ldr	r3, [r4, #16]
 800647a:	b943      	cbnz	r3, 800648e <__swbuf_r+0x32>
 800647c:	4621      	mov	r1, r4
 800647e:	4628      	mov	r0, r5
 8006480:	f000 f82a 	bl	80064d8 <__swsetup_r>
 8006484:	b118      	cbz	r0, 800648e <__swbuf_r+0x32>
 8006486:	f04f 37ff 	mov.w	r7, #4294967295
 800648a:	4638      	mov	r0, r7
 800648c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800648e:	6823      	ldr	r3, [r4, #0]
 8006490:	6922      	ldr	r2, [r4, #16]
 8006492:	1a98      	subs	r0, r3, r2
 8006494:	6963      	ldr	r3, [r4, #20]
 8006496:	b2f6      	uxtb	r6, r6
 8006498:	4283      	cmp	r3, r0
 800649a:	4637      	mov	r7, r6
 800649c:	dc05      	bgt.n	80064aa <__swbuf_r+0x4e>
 800649e:	4621      	mov	r1, r4
 80064a0:	4628      	mov	r0, r5
 80064a2:	f7ff fe01 	bl	80060a8 <_fflush_r>
 80064a6:	2800      	cmp	r0, #0
 80064a8:	d1ed      	bne.n	8006486 <__swbuf_r+0x2a>
 80064aa:	68a3      	ldr	r3, [r4, #8]
 80064ac:	3b01      	subs	r3, #1
 80064ae:	60a3      	str	r3, [r4, #8]
 80064b0:	6823      	ldr	r3, [r4, #0]
 80064b2:	1c5a      	adds	r2, r3, #1
 80064b4:	6022      	str	r2, [r4, #0]
 80064b6:	701e      	strb	r6, [r3, #0]
 80064b8:	6962      	ldr	r2, [r4, #20]
 80064ba:	1c43      	adds	r3, r0, #1
 80064bc:	429a      	cmp	r2, r3
 80064be:	d004      	beq.n	80064ca <__swbuf_r+0x6e>
 80064c0:	89a3      	ldrh	r3, [r4, #12]
 80064c2:	07db      	lsls	r3, r3, #31
 80064c4:	d5e1      	bpl.n	800648a <__swbuf_r+0x2e>
 80064c6:	2e0a      	cmp	r6, #10
 80064c8:	d1df      	bne.n	800648a <__swbuf_r+0x2e>
 80064ca:	4621      	mov	r1, r4
 80064cc:	4628      	mov	r0, r5
 80064ce:	f7ff fdeb 	bl	80060a8 <_fflush_r>
 80064d2:	2800      	cmp	r0, #0
 80064d4:	d0d9      	beq.n	800648a <__swbuf_r+0x2e>
 80064d6:	e7d6      	b.n	8006486 <__swbuf_r+0x2a>

080064d8 <__swsetup_r>:
 80064d8:	b538      	push	{r3, r4, r5, lr}
 80064da:	4b29      	ldr	r3, [pc, #164]	@ (8006580 <__swsetup_r+0xa8>)
 80064dc:	4605      	mov	r5, r0
 80064de:	6818      	ldr	r0, [r3, #0]
 80064e0:	460c      	mov	r4, r1
 80064e2:	b118      	cbz	r0, 80064ec <__swsetup_r+0x14>
 80064e4:	6a03      	ldr	r3, [r0, #32]
 80064e6:	b90b      	cbnz	r3, 80064ec <__swsetup_r+0x14>
 80064e8:	f7fe ffe6 	bl	80054b8 <__sinit>
 80064ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064f0:	0719      	lsls	r1, r3, #28
 80064f2:	d422      	bmi.n	800653a <__swsetup_r+0x62>
 80064f4:	06da      	lsls	r2, r3, #27
 80064f6:	d407      	bmi.n	8006508 <__swsetup_r+0x30>
 80064f8:	2209      	movs	r2, #9
 80064fa:	602a      	str	r2, [r5, #0]
 80064fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006500:	81a3      	strh	r3, [r4, #12]
 8006502:	f04f 30ff 	mov.w	r0, #4294967295
 8006506:	e033      	b.n	8006570 <__swsetup_r+0x98>
 8006508:	0758      	lsls	r0, r3, #29
 800650a:	d512      	bpl.n	8006532 <__swsetup_r+0x5a>
 800650c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800650e:	b141      	cbz	r1, 8006522 <__swsetup_r+0x4a>
 8006510:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006514:	4299      	cmp	r1, r3
 8006516:	d002      	beq.n	800651e <__swsetup_r+0x46>
 8006518:	4628      	mov	r0, r5
 800651a:	f7ff f95d 	bl	80057d8 <_free_r>
 800651e:	2300      	movs	r3, #0
 8006520:	6363      	str	r3, [r4, #52]	@ 0x34
 8006522:	89a3      	ldrh	r3, [r4, #12]
 8006524:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006528:	81a3      	strh	r3, [r4, #12]
 800652a:	2300      	movs	r3, #0
 800652c:	6063      	str	r3, [r4, #4]
 800652e:	6923      	ldr	r3, [r4, #16]
 8006530:	6023      	str	r3, [r4, #0]
 8006532:	89a3      	ldrh	r3, [r4, #12]
 8006534:	f043 0308 	orr.w	r3, r3, #8
 8006538:	81a3      	strh	r3, [r4, #12]
 800653a:	6923      	ldr	r3, [r4, #16]
 800653c:	b94b      	cbnz	r3, 8006552 <__swsetup_r+0x7a>
 800653e:	89a3      	ldrh	r3, [r4, #12]
 8006540:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006544:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006548:	d003      	beq.n	8006552 <__swsetup_r+0x7a>
 800654a:	4621      	mov	r1, r4
 800654c:	4628      	mov	r0, r5
 800654e:	f000 f88b 	bl	8006668 <__smakebuf_r>
 8006552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006556:	f013 0201 	ands.w	r2, r3, #1
 800655a:	d00a      	beq.n	8006572 <__swsetup_r+0x9a>
 800655c:	2200      	movs	r2, #0
 800655e:	60a2      	str	r2, [r4, #8]
 8006560:	6962      	ldr	r2, [r4, #20]
 8006562:	4252      	negs	r2, r2
 8006564:	61a2      	str	r2, [r4, #24]
 8006566:	6922      	ldr	r2, [r4, #16]
 8006568:	b942      	cbnz	r2, 800657c <__swsetup_r+0xa4>
 800656a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800656e:	d1c5      	bne.n	80064fc <__swsetup_r+0x24>
 8006570:	bd38      	pop	{r3, r4, r5, pc}
 8006572:	0799      	lsls	r1, r3, #30
 8006574:	bf58      	it	pl
 8006576:	6962      	ldrpl	r2, [r4, #20]
 8006578:	60a2      	str	r2, [r4, #8]
 800657a:	e7f4      	b.n	8006566 <__swsetup_r+0x8e>
 800657c:	2000      	movs	r0, #0
 800657e:	e7f7      	b.n	8006570 <__swsetup_r+0x98>
 8006580:	2000004c 	.word	0x2000004c

08006584 <_raise_r>:
 8006584:	291f      	cmp	r1, #31
 8006586:	b538      	push	{r3, r4, r5, lr}
 8006588:	4605      	mov	r5, r0
 800658a:	460c      	mov	r4, r1
 800658c:	d904      	bls.n	8006598 <_raise_r+0x14>
 800658e:	2316      	movs	r3, #22
 8006590:	6003      	str	r3, [r0, #0]
 8006592:	f04f 30ff 	mov.w	r0, #4294967295
 8006596:	bd38      	pop	{r3, r4, r5, pc}
 8006598:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800659a:	b112      	cbz	r2, 80065a2 <_raise_r+0x1e>
 800659c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80065a0:	b94b      	cbnz	r3, 80065b6 <_raise_r+0x32>
 80065a2:	4628      	mov	r0, r5
 80065a4:	f000 f830 	bl	8006608 <_getpid_r>
 80065a8:	4622      	mov	r2, r4
 80065aa:	4601      	mov	r1, r0
 80065ac:	4628      	mov	r0, r5
 80065ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065b2:	f000 b817 	b.w	80065e4 <_kill_r>
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d00a      	beq.n	80065d0 <_raise_r+0x4c>
 80065ba:	1c59      	adds	r1, r3, #1
 80065bc:	d103      	bne.n	80065c6 <_raise_r+0x42>
 80065be:	2316      	movs	r3, #22
 80065c0:	6003      	str	r3, [r0, #0]
 80065c2:	2001      	movs	r0, #1
 80065c4:	e7e7      	b.n	8006596 <_raise_r+0x12>
 80065c6:	2100      	movs	r1, #0
 80065c8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80065cc:	4620      	mov	r0, r4
 80065ce:	4798      	blx	r3
 80065d0:	2000      	movs	r0, #0
 80065d2:	e7e0      	b.n	8006596 <_raise_r+0x12>

080065d4 <raise>:
 80065d4:	4b02      	ldr	r3, [pc, #8]	@ (80065e0 <raise+0xc>)
 80065d6:	4601      	mov	r1, r0
 80065d8:	6818      	ldr	r0, [r3, #0]
 80065da:	f7ff bfd3 	b.w	8006584 <_raise_r>
 80065de:	bf00      	nop
 80065e0:	2000004c 	.word	0x2000004c

080065e4 <_kill_r>:
 80065e4:	b538      	push	{r3, r4, r5, lr}
 80065e6:	4d07      	ldr	r5, [pc, #28]	@ (8006604 <_kill_r+0x20>)
 80065e8:	2300      	movs	r3, #0
 80065ea:	4604      	mov	r4, r0
 80065ec:	4608      	mov	r0, r1
 80065ee:	4611      	mov	r1, r2
 80065f0:	602b      	str	r3, [r5, #0]
 80065f2:	f7fc fbc9 	bl	8002d88 <_kill>
 80065f6:	1c43      	adds	r3, r0, #1
 80065f8:	d102      	bne.n	8006600 <_kill_r+0x1c>
 80065fa:	682b      	ldr	r3, [r5, #0]
 80065fc:	b103      	cbz	r3, 8006600 <_kill_r+0x1c>
 80065fe:	6023      	str	r3, [r4, #0]
 8006600:	bd38      	pop	{r3, r4, r5, pc}
 8006602:	bf00      	nop
 8006604:	2000069c 	.word	0x2000069c

08006608 <_getpid_r>:
 8006608:	f7fc bbb6 	b.w	8002d78 <_getpid>

0800660c <_malloc_usable_size_r>:
 800660c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006610:	1f18      	subs	r0, r3, #4
 8006612:	2b00      	cmp	r3, #0
 8006614:	bfbc      	itt	lt
 8006616:	580b      	ldrlt	r3, [r1, r0]
 8006618:	18c0      	addlt	r0, r0, r3
 800661a:	4770      	bx	lr

0800661c <__swhatbuf_r>:
 800661c:	b570      	push	{r4, r5, r6, lr}
 800661e:	460c      	mov	r4, r1
 8006620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006624:	2900      	cmp	r1, #0
 8006626:	b096      	sub	sp, #88	@ 0x58
 8006628:	4615      	mov	r5, r2
 800662a:	461e      	mov	r6, r3
 800662c:	da0d      	bge.n	800664a <__swhatbuf_r+0x2e>
 800662e:	89a3      	ldrh	r3, [r4, #12]
 8006630:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006634:	f04f 0100 	mov.w	r1, #0
 8006638:	bf14      	ite	ne
 800663a:	2340      	movne	r3, #64	@ 0x40
 800663c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006640:	2000      	movs	r0, #0
 8006642:	6031      	str	r1, [r6, #0]
 8006644:	602b      	str	r3, [r5, #0]
 8006646:	b016      	add	sp, #88	@ 0x58
 8006648:	bd70      	pop	{r4, r5, r6, pc}
 800664a:	466a      	mov	r2, sp
 800664c:	f000 f848 	bl	80066e0 <_fstat_r>
 8006650:	2800      	cmp	r0, #0
 8006652:	dbec      	blt.n	800662e <__swhatbuf_r+0x12>
 8006654:	9901      	ldr	r1, [sp, #4]
 8006656:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800665a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800665e:	4259      	negs	r1, r3
 8006660:	4159      	adcs	r1, r3
 8006662:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006666:	e7eb      	b.n	8006640 <__swhatbuf_r+0x24>

08006668 <__smakebuf_r>:
 8006668:	898b      	ldrh	r3, [r1, #12]
 800666a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800666c:	079d      	lsls	r5, r3, #30
 800666e:	4606      	mov	r6, r0
 8006670:	460c      	mov	r4, r1
 8006672:	d507      	bpl.n	8006684 <__smakebuf_r+0x1c>
 8006674:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006678:	6023      	str	r3, [r4, #0]
 800667a:	6123      	str	r3, [r4, #16]
 800667c:	2301      	movs	r3, #1
 800667e:	6163      	str	r3, [r4, #20]
 8006680:	b003      	add	sp, #12
 8006682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006684:	ab01      	add	r3, sp, #4
 8006686:	466a      	mov	r2, sp
 8006688:	f7ff ffc8 	bl	800661c <__swhatbuf_r>
 800668c:	9f00      	ldr	r7, [sp, #0]
 800668e:	4605      	mov	r5, r0
 8006690:	4639      	mov	r1, r7
 8006692:	4630      	mov	r0, r6
 8006694:	f7ff f914 	bl	80058c0 <_malloc_r>
 8006698:	b948      	cbnz	r0, 80066ae <__smakebuf_r+0x46>
 800669a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800669e:	059a      	lsls	r2, r3, #22
 80066a0:	d4ee      	bmi.n	8006680 <__smakebuf_r+0x18>
 80066a2:	f023 0303 	bic.w	r3, r3, #3
 80066a6:	f043 0302 	orr.w	r3, r3, #2
 80066aa:	81a3      	strh	r3, [r4, #12]
 80066ac:	e7e2      	b.n	8006674 <__smakebuf_r+0xc>
 80066ae:	89a3      	ldrh	r3, [r4, #12]
 80066b0:	6020      	str	r0, [r4, #0]
 80066b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066b6:	81a3      	strh	r3, [r4, #12]
 80066b8:	9b01      	ldr	r3, [sp, #4]
 80066ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80066be:	b15b      	cbz	r3, 80066d8 <__smakebuf_r+0x70>
 80066c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066c4:	4630      	mov	r0, r6
 80066c6:	f000 f81d 	bl	8006704 <_isatty_r>
 80066ca:	b128      	cbz	r0, 80066d8 <__smakebuf_r+0x70>
 80066cc:	89a3      	ldrh	r3, [r4, #12]
 80066ce:	f023 0303 	bic.w	r3, r3, #3
 80066d2:	f043 0301 	orr.w	r3, r3, #1
 80066d6:	81a3      	strh	r3, [r4, #12]
 80066d8:	89a3      	ldrh	r3, [r4, #12]
 80066da:	431d      	orrs	r5, r3
 80066dc:	81a5      	strh	r5, [r4, #12]
 80066de:	e7cf      	b.n	8006680 <__smakebuf_r+0x18>

080066e0 <_fstat_r>:
 80066e0:	b538      	push	{r3, r4, r5, lr}
 80066e2:	4d07      	ldr	r5, [pc, #28]	@ (8006700 <_fstat_r+0x20>)
 80066e4:	2300      	movs	r3, #0
 80066e6:	4604      	mov	r4, r0
 80066e8:	4608      	mov	r0, r1
 80066ea:	4611      	mov	r1, r2
 80066ec:	602b      	str	r3, [r5, #0]
 80066ee:	f7fc fbab 	bl	8002e48 <_fstat>
 80066f2:	1c43      	adds	r3, r0, #1
 80066f4:	d102      	bne.n	80066fc <_fstat_r+0x1c>
 80066f6:	682b      	ldr	r3, [r5, #0]
 80066f8:	b103      	cbz	r3, 80066fc <_fstat_r+0x1c>
 80066fa:	6023      	str	r3, [r4, #0]
 80066fc:	bd38      	pop	{r3, r4, r5, pc}
 80066fe:	bf00      	nop
 8006700:	2000069c 	.word	0x2000069c

08006704 <_isatty_r>:
 8006704:	b538      	push	{r3, r4, r5, lr}
 8006706:	4d06      	ldr	r5, [pc, #24]	@ (8006720 <_isatty_r+0x1c>)
 8006708:	2300      	movs	r3, #0
 800670a:	4604      	mov	r4, r0
 800670c:	4608      	mov	r0, r1
 800670e:	602b      	str	r3, [r5, #0]
 8006710:	f7fc fbaa 	bl	8002e68 <_isatty>
 8006714:	1c43      	adds	r3, r0, #1
 8006716:	d102      	bne.n	800671e <_isatty_r+0x1a>
 8006718:	682b      	ldr	r3, [r5, #0]
 800671a:	b103      	cbz	r3, 800671e <_isatty_r+0x1a>
 800671c:	6023      	str	r3, [r4, #0]
 800671e:	bd38      	pop	{r3, r4, r5, pc}
 8006720:	2000069c 	.word	0x2000069c

08006724 <_init>:
 8006724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006726:	bf00      	nop
 8006728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800672a:	bc08      	pop	{r3}
 800672c:	469e      	mov	lr, r3
 800672e:	4770      	bx	lr

08006730 <_fini>:
 8006730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006732:	bf00      	nop
 8006734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006736:	bc08      	pop	{r3}
 8006738:	469e      	mov	lr, r3
 800673a:	4770      	bx	lr
