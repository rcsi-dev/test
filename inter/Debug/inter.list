
inter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006520  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000794  080066c0  080066c0  000076c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e54  08006e54  000080fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006e54  08006e54  00007e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e5c  08006e5c  000080fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e5c  08006e5c  00007e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e60  08006e60  00007e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08006e64  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000061c  200000fc  08006f60  000080fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000718  08006f60  00008718  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000080fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a5c3  00000000  00000000  0000812c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f6d  00000000  00000000  000126ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  00014660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006ad  00000000  00000000  00014f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016eac  00000000  00000000  000155e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b43e  00000000  00000000  0002c491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008876a  00000000  00000000  000378cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0039  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e10  00000000  00000000  000c007c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003f  00000000  00000000  000c2e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000fc 	.word	0x200000fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080066a8 	.word	0x080066a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000100 	.word	0x20000100
 80001dc:	080066a8 	.word	0x080066a8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <HAL_UART_RxCpltCallback>:

/**
 * @brief Обработчик прерывания USART1
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a09      	ldr	r2, [pc, #36]	@ (80005f0 <HAL_UART_RxCpltCallback+0x34>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d103      	bne.n	80005d6 <HAL_UART_RxCpltCallback+0x1a>
        SecureUart_HandleUartRxEvent(&TxContext);
 80005ce:	4809      	ldr	r0, [pc, #36]	@ (80005f4 <HAL_UART_RxCpltCallback+0x38>)
 80005d0:	f000 fe1e 	bl	8001210 <SecureUart_HandleUartRxEvent>
    }
    else if (huart->Instance == USART6) {
        SecureUart_HandleUartRxEvent(&RxContext);
    }
}
 80005d4:	e007      	b.n	80005e6 <HAL_UART_RxCpltCallback+0x2a>
    else if (huart->Instance == USART6) {
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a07      	ldr	r2, [pc, #28]	@ (80005f8 <HAL_UART_RxCpltCallback+0x3c>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d102      	bne.n	80005e6 <HAL_UART_RxCpltCallback+0x2a>
        SecureUart_HandleUartRxEvent(&RxContext);
 80005e0:	4806      	ldr	r0, [pc, #24]	@ (80005fc <HAL_UART_RxCpltCallback+0x40>)
 80005e2:	f000 fe15 	bl	8001210 <SecureUart_HandleUartRxEvent>
}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40011000 	.word	0x40011000
 80005f4:	20000370 	.word	0x20000370
 80005f8:	40011400 	.word	0x40011400
 80005fc:	20000498 	.word	0x20000498

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b0a4      	sub	sp, #144	@ 0x90
 8000604:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000606:	f002 fc7b 	bl	8002f00 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800060a:	f000 f8ff 	bl	800080c <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800060e:	f000 f9c9 	bl	80009a4 <MX_GPIO_Init>
    MX_DMA_Init();
 8000612:	f000 f981 	bl	8000918 <MX_DMA_Init>
    MX_USART1_UART_Init();
 8000616:	f000 f901 	bl	800081c <MX_USART1_UART_Init>
    MX_USART2_UART_Init();
 800061a:	f000 f929 	bl	8000870 <MX_USART2_UART_Init>
    MX_USART6_UART_Init();
 800061e:	f000 f951 	bl	80008c4 <MX_USART6_UART_Init>
    /* USER CODE BEGIN 2 */

    // Инициализация контекстов защищенного UART
    SecureUart_Init(&TxContext, &huart1, &huart2);
 8000622:	4a63      	ldr	r2, [pc, #396]	@ (80007b0 <main+0x1b0>)
 8000624:	4963      	ldr	r1, [pc, #396]	@ (80007b4 <main+0x1b4>)
 8000626:	4864      	ldr	r0, [pc, #400]	@ (80007b8 <main+0x1b8>)
 8000628:	f000 fa30 	bl	8000a8c <SecureUart_Init>
    SecureUart_Init(&RxContext, &huart6, &huart2);
 800062c:	4a60      	ldr	r2, [pc, #384]	@ (80007b0 <main+0x1b0>)
 800062e:	4963      	ldr	r1, [pc, #396]	@ (80007bc <main+0x1bc>)
 8000630:	4863      	ldr	r0, [pc, #396]	@ (80007c0 <main+0x1c0>)
 8000632:	f000 fa2b 	bl	8000a8c <SecureUart_Init>

    // Включение шифрования и MAC
    SecureUart_EnableEncryption(&TxContext, encryptionKey);
 8000636:	4963      	ldr	r1, [pc, #396]	@ (80007c4 <main+0x1c4>)
 8000638:	485f      	ldr	r0, [pc, #380]	@ (80007b8 <main+0x1b8>)
 800063a:	f000 fa5d 	bl	8000af8 <SecureUart_EnableEncryption>
    SecureUart_EnableEncryption(&RxContext, encryptionKey);
 800063e:	4961      	ldr	r1, [pc, #388]	@ (80007c4 <main+0x1c4>)
 8000640:	485f      	ldr	r0, [pc, #380]	@ (80007c0 <main+0x1c0>)
 8000642:	f000 fa59 	bl	8000af8 <SecureUart_EnableEncryption>

    SecureUart_EnableMAC(&TxContext, macKey);
 8000646:	4960      	ldr	r1, [pc, #384]	@ (80007c8 <main+0x1c8>)
 8000648:	485b      	ldr	r0, [pc, #364]	@ (80007b8 <main+0x1b8>)
 800064a:	f000 fa71 	bl	8000b30 <SecureUart_EnableMAC>
    SecureUart_EnableMAC(&RxContext, macKey);
 800064e:	495e      	ldr	r1, [pc, #376]	@ (80007c8 <main+0x1c8>)
 8000650:	485b      	ldr	r0, [pc, #364]	@ (80007c0 <main+0x1c0>)
 8000652:	f000 fa6d 	bl	8000b30 <SecureUart_EnableMAC>

    // Запуск приема в режиме DMA с IDLE прерыванием
    SecureUart_StartReceive(&TxContext);
 8000656:	4858      	ldr	r0, [pc, #352]	@ (80007b8 <main+0x1b8>)
 8000658:	f000 fa88 	bl	8000b6c <SecureUart_StartReceive>
    SecureUart_StartReceive(&RxContext);
 800065c:	4858      	ldr	r0, [pc, #352]	@ (80007c0 <main+0x1c0>)
 800065e:	f000 fa85 	bl	8000b6c <SecureUart_StartReceive>

    SecureUart_DebugPrint(&huart2, "====================================\r\n");
 8000662:	495a      	ldr	r1, [pc, #360]	@ (80007cc <main+0x1cc>)
 8000664:	4852      	ldr	r0, [pc, #328]	@ (80007b0 <main+0x1b0>)
 8000666:	f000 fe27 	bl	80012b8 <SecureUart_DebugPrint>
    SecureUart_DebugPrint(&huart2, "   Защищенный UART протокол\r\n");
 800066a:	4959      	ldr	r1, [pc, #356]	@ (80007d0 <main+0x1d0>)
 800066c:	4850      	ldr	r0, [pc, #320]	@ (80007b0 <main+0x1b0>)
 800066e:	f000 fe23 	bl	80012b8 <SecureUart_DebugPrint>
    SecureUart_DebugPrint(&huart2, "====================================\r\n");
 8000672:	4956      	ldr	r1, [pc, #344]	@ (80007cc <main+0x1cc>)
 8000674:	484e      	ldr	r0, [pc, #312]	@ (80007b0 <main+0x1b0>)
 8000676:	f000 fe1f 	bl	80012b8 <SecureUart_DebugPrint>
    SecureUart_DebugPrint(&huart2, "USART1 -> USART6: передача данных\r\n");
 800067a:	4956      	ldr	r1, [pc, #344]	@ (80007d4 <main+0x1d4>)
 800067c:	484c      	ldr	r0, [pc, #304]	@ (80007b0 <main+0x1b0>)
 800067e:	f000 fe1b 	bl	80012b8 <SecureUart_DebugPrint>
    SecureUart_DebugPrint(&huart2, "USART2: отладочный вывод\r\n");
 8000682:	4955      	ldr	r1, [pc, #340]	@ (80007d8 <main+0x1d8>)
 8000684:	484a      	ldr	r0, [pc, #296]	@ (80007b0 <main+0x1b0>)
 8000686:	f000 fe17 	bl	80012b8 <SecureUart_DebugPrint>
    SecureUart_DebugPrint(&huart2, "Шифрование: Speck 64/128\r\n");
 800068a:	4954      	ldr	r1, [pc, #336]	@ (80007dc <main+0x1dc>)
 800068c:	4848      	ldr	r0, [pc, #288]	@ (80007b0 <main+0x1b0>)
 800068e:	f000 fe13 	bl	80012b8 <SecureUart_DebugPrint>
    SecureUart_DebugPrint(&huart2, "MAC: SipHash 2-4\r\n");
 8000692:	4953      	ldr	r1, [pc, #332]	@ (80007e0 <main+0x1e0>)
 8000694:	4846      	ldr	r0, [pc, #280]	@ (80007b0 <main+0x1b0>)
 8000696:	f000 fe0f 	bl	80012b8 <SecureUart_DebugPrint>
    SecureUart_DebugPrint(&huart2, "====================================\r\n\r\n");
 800069a:	4952      	ldr	r1, [pc, #328]	@ (80007e4 <main+0x1e4>)
 800069c:	4844      	ldr	r0, [pc, #272]	@ (80007b0 <main+0x1b0>)
 800069e:	f000 fe0b 	bl	80012b8 <SecureUart_DebugPrint>

    uint8_t test_plain[8] = "12345678";
 80006a2:	4a51      	ldr	r2, [pc, #324]	@ (80007e8 <main+0x1e8>)
 80006a4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80006a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ac:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t test_cipher[8];
    uint8_t test_result[8];

    // Инициализация контекста
    SpeckContext test_ctx;
    Speck_Init(&test_ctx, encryptionKey);
 80006b0:	463b      	mov	r3, r7
 80006b2:	4944      	ldr	r1, [pc, #272]	@ (80007c4 <main+0x1c4>)
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 feb3 	bl	8002420 <Speck_Init>

    // Шифрование
    Speck_Encrypt(&test_ctx, test_plain, test_cipher);
 80006ba:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 80006be:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 80006c2:	463b      	mov	r3, r7
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 ff51 	bl	800256c <Speck_Encrypt>

    // Расшифрование
    Speck_Decrypt(&test_ctx, test_cipher, test_result);
 80006ca:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80006ce:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 80006d2:	463b      	mov	r3, r7
 80006d4:	4618      	mov	r0, r3
 80006d6:	f001 ff81 	bl	80025dc <Speck_Decrypt>

    // Проверка
    bool basic_test_ok = (memcmp(test_plain, test_result, 8) == 0);
 80006da:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80006de:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80006e2:	2208      	movs	r2, #8
 80006e4:	4618      	mov	r0, r3
 80006e6:	f004 ff81 	bl	80055ec <memcmp>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	bf0c      	ite	eq
 80006f0:	2301      	moveq	r3, #1
 80006f2:	2300      	movne	r3, #0
 80006f4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    SecureUart_DebugPrint(&huart2, "Тест базового Speck: %s\r\n",
 80006f8:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <main+0x104>
 8000700:	4b3a      	ldr	r3, [pc, #232]	@ (80007ec <main+0x1ec>)
 8000702:	e000      	b.n	8000706 <main+0x106>
 8000704:	4b3a      	ldr	r3, [pc, #232]	@ (80007f0 <main+0x1f0>)
 8000706:	461a      	mov	r2, r3
 8000708:	493a      	ldr	r1, [pc, #232]	@ (80007f4 <main+0x1f4>)
 800070a:	4829      	ldr	r0, [pc, #164]	@ (80007b0 <main+0x1b0>)
 800070c:	f000 fdd4 	bl	80012b8 <SecureUart_DebugPrint>
                          basic_test_ok ? "УСПЕШНО" : "ОШИБКА");

    // Вывод для отладки
    SecureUart_DebugPrint(&huart2, "Исходные данные: ");
 8000710:	4939      	ldr	r1, [pc, #228]	@ (80007f8 <main+0x1f8>)
 8000712:	4827      	ldr	r0, [pc, #156]	@ (80007b0 <main+0x1b0>)
 8000714:	f000 fdd0 	bl	80012b8 <SecureUart_DebugPrint>
    for (int i = 0; i < 8; i++) {
 8000718:	2300      	movs	r3, #0
 800071a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800071e:	e00f      	b.n	8000740 <main+0x140>
        SecureUart_DebugPrint(&huart2, "%02X ", test_plain[i]);
 8000720:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8000724:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000728:	4413      	add	r3, r2
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	461a      	mov	r2, r3
 800072e:	4933      	ldr	r1, [pc, #204]	@ (80007fc <main+0x1fc>)
 8000730:	481f      	ldr	r0, [pc, #124]	@ (80007b0 <main+0x1b0>)
 8000732:	f000 fdc1 	bl	80012b8 <SecureUart_DebugPrint>
    for (int i = 0; i < 8; i++) {
 8000736:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800073a:	3301      	adds	r3, #1
 800073c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000740:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000744:	2b07      	cmp	r3, #7
 8000746:	ddeb      	ble.n	8000720 <main+0x120>
    }
    SecureUart_DebugPrint(&huart2, "\r\n");
 8000748:	492d      	ldr	r1, [pc, #180]	@ (8000800 <main+0x200>)
 800074a:	4819      	ldr	r0, [pc, #100]	@ (80007b0 <main+0x1b0>)
 800074c:	f000 fdb4 	bl	80012b8 <SecureUart_DebugPrint>

    SecureUart_DebugPrint(&huart2, "Результат расшифрования: ");
 8000750:	492c      	ldr	r1, [pc, #176]	@ (8000804 <main+0x204>)
 8000752:	4817      	ldr	r0, [pc, #92]	@ (80007b0 <main+0x1b0>)
 8000754:	f000 fdb0 	bl	80012b8 <SecureUart_DebugPrint>
    for (int i = 0; i < 8; i++) {
 8000758:	2300      	movs	r3, #0
 800075a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800075e:	e00f      	b.n	8000780 <main+0x180>
        SecureUart_DebugPrint(&huart2, "%02X ", test_result[i]);
 8000760:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8000764:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000768:	4413      	add	r3, r2
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	461a      	mov	r2, r3
 800076e:	4923      	ldr	r1, [pc, #140]	@ (80007fc <main+0x1fc>)
 8000770:	480f      	ldr	r0, [pc, #60]	@ (80007b0 <main+0x1b0>)
 8000772:	f000 fda1 	bl	80012b8 <SecureUart_DebugPrint>
    for (int i = 0; i < 8; i++) {
 8000776:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800077a:	3301      	adds	r3, #1
 800077c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000780:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000784:	2b07      	cmp	r3, #7
 8000786:	ddeb      	ble.n	8000760 <main+0x160>
    }
    SecureUart_DebugPrint(&huart2, "\r\n");
 8000788:	491d      	ldr	r1, [pc, #116]	@ (8000800 <main+0x200>)
 800078a:	4809      	ldr	r0, [pc, #36]	@ (80007b0 <main+0x1b0>)
 800078c:	f000 fd94 	bl	80012b8 <SecureUart_DebugPrint>
    {
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
        // Отправка тестового сообщения
        SecureUart_Send(&TxContext, testData, strlen((char*)testData));
 8000790:	481d      	ldr	r0, [pc, #116]	@ (8000808 <main+0x208>)
 8000792:	f7ff fd25 	bl	80001e0 <strlen>
 8000796:	4603      	mov	r3, r0
 8000798:	b2db      	uxtb	r3, r3
 800079a:	461a      	mov	r2, r3
 800079c:	491a      	ldr	r1, [pc, #104]	@ (8000808 <main+0x208>)
 800079e:	4806      	ldr	r0, [pc, #24]	@ (80007b8 <main+0x1b8>)
 80007a0:	f000 fa6e 	bl	8000c80 <SecureUart_Send>

        // Задержка 20 секунд между отправками
        HAL_Delay(20000);
 80007a4:	f644 6020 	movw	r0, #20000	@ 0x4e20
 80007a8:	f002 fc1c 	bl	8002fe4 <HAL_Delay>
        SecureUart_Send(&TxContext, testData, strlen((char*)testData));
 80007ac:	bf00      	nop
 80007ae:	e7ef      	b.n	8000790 <main+0x190>
 80007b0:	20000160 	.word	0x20000160
 80007b4:	20000118 	.word	0x20000118
 80007b8:	20000370 	.word	0x20000370
 80007bc:	200001a8 	.word	0x200001a8
 80007c0:	20000498 	.word	0x20000498
 80007c4:	20000000 	.word	0x20000000
 80007c8:	20000010 	.word	0x20000010
 80007cc:	080066c0 	.word	0x080066c0
 80007d0:	080066e8 	.word	0x080066e8
 80007d4:	08006718 	.word	0x08006718
 80007d8:	0800674c 	.word	0x0800674c
 80007dc:	08006778 	.word	0x08006778
 80007e0:	080067a0 	.word	0x080067a0
 80007e4:	080067b4 	.word	0x080067b4
 80007e8:	08006884 	.word	0x08006884
 80007ec:	080067e0 	.word	0x080067e0
 80007f0:	080067f0 	.word	0x080067f0
 80007f4:	08006800 	.word	0x08006800
 80007f8:	08006828 	.word	0x08006828
 80007fc:	08006848 	.word	0x08006848
 8000800:	08006850 	.word	0x08006850
 8000804:	08006854 	.word	0x08006854
 8000808:	20000020 	.word	0x20000020

0800080c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
    // Конфигурация системных часов
    // (код сгенерирован CubeMX)
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
	...

0800081c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
    huart1.Instance = USART1;
 8000820:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <MX_USART1_UART_Init+0x4c>)
 8000822:	4a12      	ldr	r2, [pc, #72]	@ (800086c <MX_USART1_UART_Init+0x50>)
 8000824:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8000826:	4b10      	ldr	r3, [pc, #64]	@ (8000868 <MX_USART1_UART_Init+0x4c>)
 8000828:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800082c:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800082e:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <MX_USART1_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000834:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <MX_USART1_UART_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	@ (8000868 <MX_USART1_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000840:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <MX_USART1_UART_Init+0x4c>)
 8000842:	220c      	movs	r2, #12
 8000844:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000846:	4b08      	ldr	r3, [pc, #32]	@ (8000868 <MX_USART1_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800084c:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <MX_USART1_UART_Init+0x4c>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	@ (8000868 <MX_USART1_UART_Init+0x4c>)
 8000854:	f003 fad0 	bl	8003df8 <HAL_UART_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_USART1_UART_Init+0x46>
    {
        Error_Handler();
 800085e:	f000 f90f 	bl	8000a80 <Error_Handler>
    }
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000118 	.word	0x20000118
 800086c:	40011000 	.word	0x40011000

08000870 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8000874:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 8000876:	4a12      	ldr	r2, [pc, #72]	@ (80008c0 <MX_USART2_UART_Init+0x50>)
 8000878:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 800087a:	4b10      	ldr	r3, [pc, #64]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 800087c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000880:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000882:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000888:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 800088e:	4b0b      	ldr	r3, [pc, #44]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000894:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 8000896:	220c      	movs	r2, #12
 8000898:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089a:	4b08      	ldr	r3, [pc, #32]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 80008a6:	4805      	ldr	r0, [pc, #20]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 80008a8:	f003 faa6 	bl	8003df8 <HAL_UART_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_USART2_UART_Init+0x46>
    {
        Error_Handler();
 80008b2:	f000 f8e5 	bl	8000a80 <Error_Handler>
    }
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000160 	.word	0x20000160
 80008c0:	40004400 	.word	0x40004400

080008c4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
    huart6.Instance = USART6;
 80008c8:	4b11      	ldr	r3, [pc, #68]	@ (8000910 <MX_USART6_UART_Init+0x4c>)
 80008ca:	4a12      	ldr	r2, [pc, #72]	@ (8000914 <MX_USART6_UART_Init+0x50>)
 80008cc:	601a      	str	r2, [r3, #0]
    huart6.Init.BaudRate = 115200;
 80008ce:	4b10      	ldr	r3, [pc, #64]	@ (8000910 <MX_USART6_UART_Init+0x4c>)
 80008d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008d4:	605a      	str	r2, [r3, #4]
    huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000910 <MX_USART6_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
    huart6.Init.StopBits = UART_STOPBITS_1;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000910 <MX_USART6_UART_Init+0x4c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
    huart6.Init.Parity = UART_PARITY_NONE;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000910 <MX_USART6_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
    huart6.Init.Mode = UART_MODE_TX_RX;
 80008e8:	4b09      	ldr	r3, [pc, #36]	@ (8000910 <MX_USART6_UART_Init+0x4c>)
 80008ea:	220c      	movs	r2, #12
 80008ec:	615a      	str	r2, [r3, #20]
    huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ee:	4b08      	ldr	r3, [pc, #32]	@ (8000910 <MX_USART6_UART_Init+0x4c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
    huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f4:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <MX_USART6_UART_Init+0x4c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart6) != HAL_OK)
 80008fa:	4805      	ldr	r0, [pc, #20]	@ (8000910 <MX_USART6_UART_Init+0x4c>)
 80008fc:	f003 fa7c 	bl	8003df8 <HAL_UART_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_USART6_UART_Init+0x46>
    {
        Error_Handler();
 8000906:	f000 f8bb 	bl	8000a80 <Error_Handler>
    }
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200001a8 	.word	0x200001a8
 8000914:	40011400 	.word	0x40011400

08000918 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
    /* DMA controller clock enable */
    __HAL_RCC_DMA2_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b1f      	ldr	r3, [pc, #124]	@ (80009a0 <MX_DMA_Init+0x88>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	4a1e      	ldr	r2, [pc, #120]	@ (80009a0 <MX_DMA_Init+0x88>)
 8000928:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800092c:	6313      	str	r3, [r2, #48]	@ 0x30
 800092e:	4b1c      	ldr	r3, [pc, #112]	@ (80009a0 <MX_DMA_Init+0x88>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_DMA1_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <MX_DMA_Init+0x88>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a17      	ldr	r2, [pc, #92]	@ (80009a0 <MX_DMA_Init+0x88>)
 8000944:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <MX_DMA_Init+0x88>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]

    /* DMA interrupt init */
    /* DMA1_Stream0_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	2100      	movs	r1, #0
 800095a:	200b      	movs	r0, #11
 800095c:	f002 fc41 	bl	80031e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000960:	200b      	movs	r0, #11
 8000962:	f002 fc5a 	bl	800321a <HAL_NVIC_EnableIRQ>
    /* DMA1_Stream1_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	2100      	movs	r1, #0
 800096a:	200c      	movs	r0, #12
 800096c:	f002 fc39 	bl	80031e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000970:	200c      	movs	r0, #12
 8000972:	f002 fc52 	bl	800321a <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream1_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	2100      	movs	r1, #0
 800097a:	2039      	movs	r0, #57	@ 0x39
 800097c:	f002 fc31 	bl	80031e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000980:	2039      	movs	r0, #57	@ 0x39
 8000982:	f002 fc4a 	bl	800321a <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream6_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	2100      	movs	r1, #0
 800098a:	2045      	movs	r0, #69	@ 0x45
 800098c:	f002 fc29 	bl	80031e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000990:	2045      	movs	r0, #69	@ 0x45
 8000992:	f002 fc42 	bl	800321a <HAL_NVIC_EnableIRQ>
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800

080009a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	@ 0x28
 80009a8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	4b2d      	ldr	r3, [pc, #180]	@ (8000a74 <MX_GPIO_Init+0xd0>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	4a2c      	ldr	r2, [pc, #176]	@ (8000a74 <MX_GPIO_Init+0xd0>)
 80009c4:	f043 0304 	orr.w	r3, r3, #4
 80009c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ca:	4b2a      	ldr	r3, [pc, #168]	@ (8000a74 <MX_GPIO_Init+0xd0>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	f003 0304 	and.w	r3, r3, #4
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	4b26      	ldr	r3, [pc, #152]	@ (8000a74 <MX_GPIO_Init+0xd0>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	4a25      	ldr	r2, [pc, #148]	@ (8000a74 <MX_GPIO_Init+0xd0>)
 80009e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e6:	4b23      	ldr	r3, [pc, #140]	@ (8000a74 <MX_GPIO_Init+0xd0>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a74 <MX_GPIO_Init+0xd0>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	4a1e      	ldr	r2, [pc, #120]	@ (8000a74 <MX_GPIO_Init+0xd0>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a02:	4b1c      	ldr	r3, [pc, #112]	@ (8000a74 <MX_GPIO_Init+0xd0>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	4b18      	ldr	r3, [pc, #96]	@ (8000a74 <MX_GPIO_Init+0xd0>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	4a17      	ldr	r2, [pc, #92]	@ (8000a74 <MX_GPIO_Init+0xd0>)
 8000a18:	f043 0302 	orr.w	r3, r3, #2
 8000a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1e:	4b15      	ldr	r3, [pc, #84]	@ (8000a74 <MX_GPIO_Init+0xd0>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	f003 0302 	and.w	r3, r3, #2
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]

    /* Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2120      	movs	r1, #32
 8000a2e:	4812      	ldr	r0, [pc, #72]	@ (8000a78 <MX_GPIO_Init+0xd4>)
 8000a30:	f003 f994 	bl	8003d5c <HAL_GPIO_WritePin>

    /* Configure GPIO pin : B1_Pin */
    GPIO_InitStruct.Pin = B1_Pin;
 8000a34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a3a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480c      	ldr	r0, [pc, #48]	@ (8000a7c <MX_GPIO_Init+0xd8>)
 8000a4c:	f003 f802 	bl	8003a54 <HAL_GPIO_Init>

    /* Configure GPIO pin : LD2_Pin */
    GPIO_InitStruct.Pin = LD2_Pin;
 8000a50:	2320      	movs	r3, #32
 8000a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	4804      	ldr	r0, [pc, #16]	@ (8000a78 <MX_GPIO_Init+0xd4>)
 8000a68:	f002 fff4 	bl	8003a54 <HAL_GPIO_Init>
}
 8000a6c:	bf00      	nop
 8000a6e:	3728      	adds	r7, #40	@ 0x28
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020000 	.word	0x40020000
 8000a7c:	40020800 	.word	0x40020800

08000a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a84:	b672      	cpsid	i
}
 8000a86:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <Error_Handler+0x8>

08000a8c <SecureUart_Init>:
 * @brief Инициализация контекста защищенного UART
 * @param ctx Указатель на структуру контекста
 * @param huart Дескриптор основного UART
 * @param debug_uart Дескриптор UART для отладки
 */
void SecureUart_Init(SecureUartContext *ctx, UART_HandleTypeDef *huart, UART_HandleTypeDef *debug_uart) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
    memset(ctx, 0, sizeof(SecureUartContext));
 8000a98:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	68f8      	ldr	r0, [r7, #12]
 8000aa0:	f004 fdb4 	bl	800560c <memset>
    ctx->huart = huart;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	601a      	str	r2, [r3, #0]
    ctx->debug_uart = debug_uart;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	605a      	str	r2, [r3, #4]
    ctx->rx_pos = 0;
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
    ctx->last_sequence_id = -1;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f04f 32ff 	mov.w	r2, #4294967295
 8000abe:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    ctx->encryption_enabled = false;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
    ctx->mac_enabled = false;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	2200      	movs	r2, #0
 8000ace:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125

    // Инициализация генератора случайных чисел для IV
    srand(HAL_GetTick());
 8000ad2:	f002 fa7b 	bl	8002fcc <HAL_GetTick>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f004 fbf5 	bl	80052c8 <srand>

    SecureUart_DebugPrint(ctx->debug_uart, "Инициализация защищенного UART протокола\r\n");
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	4904      	ldr	r1, [pc, #16]	@ (8000af4 <SecureUart_Init+0x68>)
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 fbe7 	bl	80012b8 <SecureUart_DebugPrint>
}
 8000aea:	bf00      	nop
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	0800688c 	.word	0x0800688c

08000af8 <SecureUart_EnableEncryption>:
/**
 * @brief Включение шифрования
 * @param ctx Указатель на структуру контекста
 * @param key Ключ шифрования (16 байт)
 */
void SecureUart_EnableEncryption(SecureUartContext *ctx, const uint8_t *key) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
    // Инициализация контекста Speck с ключом
    Speck_Init(&ctx->speck_ctx, key);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	33a8      	adds	r3, #168	@ 0xa8
 8000b06:	6839      	ldr	r1, [r7, #0]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f001 fc89 	bl	8002420 <Speck_Init>
    ctx->encryption_enabled = true;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2201      	movs	r2, #1
 8000b12:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114

    SecureUart_DebugPrint(ctx->debug_uart, "Шифрование включено\r\n");
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	4904      	ldr	r1, [pc, #16]	@ (8000b2c <SecureUart_EnableEncryption+0x34>)
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f000 fbcb 	bl	80012b8 <SecureUart_DebugPrint>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	080068d8 	.word	0x080068d8

08000b30 <SecureUart_EnableMAC>:
/**
 * @brief Включение MAC
 * @param ctx Указатель на структуру контекста
 * @param key Ключ для MAC (16 байт)
 */
void SecureUart_EnableMAC(SecureUartContext *ctx, const uint8_t *key) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
    // Копирование ключа MAC
    memcpy(ctx->mac_key, key, SIPHASH_KEY_SIZE);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	f203 1315 	addw	r3, r3, #277	@ 0x115
 8000b40:	2210      	movs	r2, #16
 8000b42:	6839      	ldr	r1, [r7, #0]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f004 fddc 	bl	8005702 <memcpy>
    ctx->mac_enabled = true;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125

    SecureUart_DebugPrint(ctx->debug_uart, "MAC включен\r\n");
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	4904      	ldr	r1, [pc, #16]	@ (8000b68 <SecureUart_EnableMAC+0x38>)
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f000 fbad 	bl	80012b8 <SecureUart_DebugPrint>
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	08006900 	.word	0x08006900

08000b6c <SecureUart_StartReceive>:

/**
 * @brief Запуск приема данных по UART в режиме DMA с IDLE прерыванием
 * @param ctx Указатель на структуру контекста
 */
void SecureUart_StartReceive(SecureUartContext *ctx) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
    // Включаем прерывание по IDLE
    __HAL_UART_ENABLE_IT(ctx->huart, UART_IT_IDLE);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	68da      	ldr	r2, [r3, #12]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f042 0210 	orr.w	r2, r2, #16
 8000b86:	60da      	str	r2, [r3, #12]

    // Запускаем прием данных по DMA
    HAL_UART_Receive_DMA(ctx->huart, ctx->rx_buffer, MAX_FRAME_SIZE);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6818      	ldr	r0, [r3, #0]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3308      	adds	r3, #8
 8000b90:	229a      	movs	r2, #154	@ 0x9a
 8000b92:	4619      	mov	r1, r3
 8000b94:	f003 fa0b 	bl	8003fae <HAL_UART_Receive_DMA>

    SecureUart_DebugPrint(ctx->debug_uart, "Начат прием данных в режиме DMA с IDLE прерыванием\r\n");
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	4903      	ldr	r1, [pc, #12]	@ (8000bac <SecureUart_StartReceive+0x40>)
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 fb8a 	bl	80012b8 <SecureUart_DebugPrint>
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	08006918 	.word	0x08006918

08000bb0 <SecureUart_GenerateIV>:

/**
 * @brief Генерация случайного вектора инициализации (IV)
 * @param iv Буфер для IV (8 байт)
 */
void SecureUart_GenerateIV(uint8_t *iv) {
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
    static const uint8_t fixed_iv[IV_SIZE] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
    memcpy(iv, fixed_iv, IV_SIZE);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4906      	ldr	r1, [pc, #24]	@ (8000bd4 <SecureUart_GenerateIV+0x24>)
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	cb03      	ldmia	r3!, {r0, r1}
 8000bc2:	6010      	str	r0, [r2, #0]
 8000bc4:	6051      	str	r1, [r2, #4]
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	08006d5c 	.word	0x08006d5c

08000bd8 <SecureUart_CalculateMAC>:
 * @param ctx Указатель на структуру контекста
 * @param data Указатель на данные
 * @param length Длина данных
 * @param mac Буфер для MAC (8 байт)
 */
void SecureUart_CalculateMAC(SecureUartContext *ctx, const uint8_t *data, uint16_t length, uint8_t *mac) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	4613      	mov	r3, r2
 8000be6:	80fb      	strh	r3, [r7, #6]
    SipHash_2_4_MAC(ctx->mac_key, data, length, mac);
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	f203 1015 	addw	r0, r3, #277	@ 0x115
 8000bee:	88fa      	ldrh	r2, [r7, #6]
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	68b9      	ldr	r1, [r7, #8]
 8000bf4:	f001 fb68 	bl	80022c8 <SipHash_2_4_MAC>
}
 8000bf8:	bf00      	nop
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <SecureUart_CalculateCRC>:
 * @brief Простой расчет CRC16 (для обратной совместимости)
 * @param data Указатель на данные
 * @param length Длина данных
 * @return Значение CRC16
 */
uint16_t SecureUart_CalculateCRC(const uint8_t *data, uint16_t length) {
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < length; i++) {
 8000c10:	2300      	movs	r3, #0
 8000c12:	81bb      	strh	r3, [r7, #12]
 8000c14:	e029      	b.n	8000c6a <SecureUart_CalculateCRC+0x6a>
        crc ^= (uint16_t)data[i] << 8;
 8000c16:	89bb      	ldrh	r3, [r7, #12]
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	b21b      	sxth	r3, r3
 8000c20:	021b      	lsls	r3, r3, #8
 8000c22:	b21a      	sxth	r2, r3
 8000c24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c28:	4053      	eors	r3, r2
 8000c2a:	b21b      	sxth	r3, r3
 8000c2c:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8000c2e:	2300      	movs	r3, #0
 8000c30:	72fb      	strb	r3, [r7, #11]
 8000c32:	e014      	b.n	8000c5e <SecureUart_CalculateCRC+0x5e>
            if (crc & 0x8000) {
 8000c34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	da0a      	bge.n	8000c52 <SecureUart_CalculateCRC+0x52>
                crc = (crc << 1) ^ 0x1021; // Полином 0x1021 (CRC-16-CCITT)
 8000c3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	b21b      	sxth	r3, r3
 8000c44:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8000c48:	f083 0301 	eor.w	r3, r3, #1
 8000c4c:	b21b      	sxth	r3, r3
 8000c4e:	81fb      	strh	r3, [r7, #14]
 8000c50:	e002      	b.n	8000c58 <SecureUart_CalculateCRC+0x58>
            } else {
                crc = crc << 1;
 8000c52:	89fb      	ldrh	r3, [r7, #14]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8000c58:	7afb      	ldrb	r3, [r7, #11]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	72fb      	strb	r3, [r7, #11]
 8000c5e:	7afb      	ldrb	r3, [r7, #11]
 8000c60:	2b07      	cmp	r3, #7
 8000c62:	d9e7      	bls.n	8000c34 <SecureUart_CalculateCRC+0x34>
    for (uint16_t i = 0; i < length; i++) {
 8000c64:	89bb      	ldrh	r3, [r7, #12]
 8000c66:	3301      	adds	r3, #1
 8000c68:	81bb      	strh	r3, [r7, #12]
 8000c6a:	89ba      	ldrh	r2, [r7, #12]
 8000c6c:	887b      	ldrh	r3, [r7, #2]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d3d1      	bcc.n	8000c16 <SecureUart_CalculateCRC+0x16>
            }
        }
    }
    return crc;
 8000c72:	89fb      	ldrh	r3, [r7, #14]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <SecureUart_Send>:
 * @param ctx Указатель на структуру контекста
 * @param data Данные для отправки
 * @param length Длина данных
 * @return Статус операции
 */
SecureUartStatus SecureUart_Send(SecureUartContext *ctx, const uint8_t *data, uint8_t length) {
 8000c80:	b590      	push	{r4, r7, lr}
 8000c82:	b0db      	sub	sp, #364	@ 0x16c
 8000c84:	af02      	add	r7, sp, #8
 8000c86:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000c8a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8000c8e:	6018      	str	r0, [r3, #0]
 8000c90:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000c94:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8000c98:	6019      	str	r1, [r3, #0]
 8000c9a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000c9e:	f2a3 1359 	subw	r3, r3, #345	@ 0x159
 8000ca2:	701a      	strb	r2, [r3, #0]
    if (length > MAX_DATA_SIZE) {
 8000ca4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000ca8:	f2a3 1359 	subw	r3, r3, #345	@ 0x159
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b80      	cmp	r3, #128	@ 0x80
 8000cb0:	d90b      	bls.n	8000cca <SecureUart_Send+0x4a>
        SecureUart_DebugPrint(ctx->debug_uart, "Ошибка: превышен максимальный размер данных\r\n");
 8000cb2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000cb6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	49a5      	ldr	r1, [pc, #660]	@ (8000f54 <SecureUart_Send+0x2d4>)
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f000 faf9 	bl	80012b8 <SecureUart_DebugPrint>
        return SECURE_UART_BUFFER_OVERFLOW;
 8000cc6:	2305      	movs	r3, #5
 8000cc8:	e13f      	b.n	8000f4a <SecureUart_Send+0x2ca>
    }

    // Увеличиваем счетчик последовательности
    uint32_t seq_id = g_sequence_counter++;
 8000cca:	4ba3      	ldr	r3, [pc, #652]	@ (8000f58 <SecureUart_Send+0x2d8>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	1c5a      	adds	r2, r3, #1
 8000cd0:	49a1      	ldr	r1, [pc, #644]	@ (8000f58 <SecureUart_Send+0x2d8>)
 8000cd2:	600a      	str	r2, [r1, #0]
 8000cd4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150

    // Буфер для фрейма
    uint8_t frame[MAX_FRAME_SIZE];
    uint16_t frame_pos = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	f8a7 315e 	strh.w	r3, [r7, #350]	@ 0x15e

    // Заголовок пакета
    uint32_t header = FRAME_HEADER;
 8000cde:	4b9f      	ldr	r3, [pc, #636]	@ (8000f5c <SecureUart_Send+0x2dc>)
 8000ce0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    memcpy(frame + frame_pos, &header, FRAME_HEADER_SIZE);
 8000ce4:	f8b7 315e 	ldrh.w	r3, [r7, #350]	@ 0x15e
 8000ce8:	f107 02b4 	add.w	r2, r7, #180	@ 0xb4
 8000cec:	4413      	add	r3, r2
 8000cee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8000cf2:	601a      	str	r2, [r3, #0]
    frame_pos += FRAME_HEADER_SIZE;
 8000cf4:	f8b7 315e 	ldrh.w	r3, [r7, #350]	@ 0x15e
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	f8a7 315e 	strh.w	r3, [r7, #350]	@ 0x15e

    // Идентификатор последовательности
    memcpy(frame + frame_pos, &seq_id, SEQUENCE_ID_SIZE);
 8000cfe:	f8b7 315e 	ldrh.w	r3, [r7, #350]	@ 0x15e
 8000d02:	f107 02b4 	add.w	r2, r7, #180	@ 0xb4
 8000d06:	4413      	add	r3, r2
 8000d08:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8000d0c:	601a      	str	r2, [r3, #0]
    frame_pos += SEQUENCE_ID_SIZE;
 8000d0e:	f8b7 315e 	ldrh.w	r3, [r7, #350]	@ 0x15e
 8000d12:	3304      	adds	r3, #4
 8000d14:	f8a7 315e 	strh.w	r3, [r7, #350]	@ 0x15e

    // Тип пакета (по умолчанию - пакет с данными)
    frame[frame_pos++] = PACKET_TYPE_DATA;
 8000d18:	f8b7 315e 	ldrh.w	r3, [r7, #350]	@ 0x15e
 8000d1c:	1c5a      	adds	r2, r3, #1
 8000d1e:	f8a7 215e 	strh.w	r2, [r7, #350]	@ 0x15e
 8000d22:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8000d26:	443b      	add	r3, r7
 8000d28:	2201      	movs	r2, #1
 8000d2a:	f803 2cac 	strb.w	r2, [r3, #-172]

    // Буфер для зашифрованных данных
    uint8_t encrypted_data[MAX_DATA_SIZE + IV_SIZE];
    uint8_t actual_data_length = length;
 8000d2e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000d32:	f2a3 1359 	subw	r3, r3, #345	@ 0x159
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	f887 315d 	strb.w	r3, [r7, #349]	@ 0x15d

    // Если шифрование включено, шифруем данные
    if (ctx->encryption_enabled && length > 0) {
 8000d3c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000d40:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d04f      	beq.n	8000dee <SecureUart_Send+0x16e>
 8000d4e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000d52:	f2a3 1359 	subw	r3, r3, #345	@ 0x159
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d048      	beq.n	8000dee <SecureUart_Send+0x16e>
        uint8_t iv[IV_SIZE];
        SecureUart_GenerateIV(iv);
 8000d5c:	f107 0320 	add.w	r3, r7, #32
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff25 	bl	8000bb0 <SecureUart_GenerateIV>

        // Отладочный вывод исходных данных
        SecureUart_DebugPrint(ctx->debug_uart, "Исходные данные перед шифрованием:\r\n");
 8000d66:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000d6a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	497b      	ldr	r1, [pc, #492]	@ (8000f60 <SecureUart_Send+0x2e0>)
 8000d74:	4618      	mov	r0, r3
 8000d76:	f000 fa9f 	bl	80012b8 <SecureUart_DebugPrint>
        SecureUart_PrintHexBuffer(ctx->debug_uart, "Оригинал: ", data, length);
 8000d7a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000d7e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	6858      	ldr	r0, [r3, #4]
 8000d86:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000d8a:	f2a3 1359 	subw	r3, r3, #345	@ 0x159
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8000d96:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8000d9a:	6812      	ldr	r2, [r2, #0]
 8000d9c:	4971      	ldr	r1, [pc, #452]	@ (8000f64 <SecureUart_Send+0x2e4>)
 8000d9e:	f000 fac9 	bl	8001334 <SecureUart_PrintHexBuffer>

        // Шифрование данных (используем Simple версию)
        size_t enc_length = Speck_Encrypt_Simple(&ctx->speck_ctx, data, length, iv, encrypted_data);
 8000da2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000da6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f103 00a8 	add.w	r0, r3, #168	@ 0xa8
 8000db0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000db4:	f2a3 1359 	subw	r3, r3, #345	@ 0x159
 8000db8:	781a      	ldrb	r2, [r3, #0]
 8000dba:	f107 0420 	add.w	r4, r7, #32
 8000dbe:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000dc2:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
 8000dc6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	4623      	mov	r3, r4
 8000dce:	6809      	ldr	r1, [r1, #0]
 8000dd0:	f001 fcad 	bl	800272e <Speck_Encrypt_Simple>
 8000dd4:	f8c7 0158 	str.w	r0, [r7, #344]	@ 0x158

        // Обновляем указатель на данные и длину
        data = encrypted_data;
 8000dd8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000ddc:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8000de0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000de4:	601a      	str	r2, [r3, #0]
        actual_data_length = enc_length;
 8000de6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8000dea:	f887 315d 	strb.w	r3, [r7, #349]	@ 0x15d
    }

    // Длина данных
    frame[frame_pos++] = actual_data_length;
 8000dee:	f8b7 315e 	ldrh.w	r3, [r7, #350]	@ 0x15e
 8000df2:	1c5a      	adds	r2, r3, #1
 8000df4:	f8a7 215e 	strh.w	r2, [r7, #350]	@ 0x15e
 8000df8:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8000dfc:	443b      	add	r3, r7
 8000dfe:	f897 215d 	ldrb.w	r2, [r7, #349]	@ 0x15d
 8000e02:	f803 2cac 	strb.w	r2, [r3, #-172]

    // Данные
    if (actual_data_length > 0) {
 8000e06:	f897 315d 	ldrb.w	r3, [r7, #349]	@ 0x15d
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d015      	beq.n	8000e3a <SecureUart_Send+0x1ba>
        memcpy(frame + frame_pos, data, actual_data_length);
 8000e0e:	f8b7 315e 	ldrh.w	r3, [r7, #350]	@ 0x15e
 8000e12:	f107 02b4 	add.w	r2, r7, #180	@ 0xb4
 8000e16:	18d0      	adds	r0, r2, r3
 8000e18:	f897 215d 	ldrb.w	r2, [r7, #349]	@ 0x15d
 8000e1c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000e20:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8000e24:	6819      	ldr	r1, [r3, #0]
 8000e26:	f004 fc6c 	bl	8005702 <memcpy>
        frame_pos += actual_data_length;
 8000e2a:	f897 315d 	ldrb.w	r3, [r7, #349]	@ 0x15d
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	f8b7 315e 	ldrh.w	r3, [r7, #350]	@ 0x15e
 8000e34:	4413      	add	r3, r2
 8000e36:	f8a7 315e 	strh.w	r3, [r7, #350]	@ 0x15e
    }

    // Если MAC включен, вычисляем и добавляем MAC
    if (ctx->mac_enabled) {
 8000e3a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000e3e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d01e      	beq.n	8000e8a <SecureUart_Send+0x20a>
        // MAC вычисляется для всего фрейма, включая заголовок, seq_id, тип и данные
        uint8_t mac[MAC_SIZE];
        SecureUart_CalculateMAC(ctx, frame, frame_pos, mac);
 8000e4c:	f107 0318 	add.w	r3, r7, #24
 8000e50:	f8b7 215e 	ldrh.w	r2, [r7, #350]	@ 0x15e
 8000e54:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 8000e58:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8000e5c:	f5a0 70aa 	sub.w	r0, r0, #340	@ 0x154
 8000e60:	6800      	ldr	r0, [r0, #0]
 8000e62:	f7ff feb9 	bl	8000bd8 <SecureUart_CalculateMAC>
        memcpy(frame + frame_pos, mac, MAC_SIZE);
 8000e66:	f8b7 315e 	ldrh.w	r3, [r7, #350]	@ 0x15e
 8000e6a:	f107 02b4 	add.w	r2, r7, #180	@ 0xb4
 8000e6e:	441a      	add	r2, r3
 8000e70:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000e74:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8000e78:	cb03      	ldmia	r3!, {r0, r1}
 8000e7a:	6010      	str	r0, [r2, #0]
 8000e7c:	6051      	str	r1, [r2, #4]
        frame_pos += MAC_SIZE;
 8000e7e:	f8b7 315e 	ldrh.w	r3, [r7, #350]	@ 0x15e
 8000e82:	3308      	adds	r3, #8
 8000e84:	f8a7 315e 	strh.w	r3, [r7, #350]	@ 0x15e
 8000e88:	e01e      	b.n	8000ec8 <SecureUart_Send+0x248>
    }
    else {
        // Для обратной совместимости - используем CRC, если MAC не включен
        uint16_t crc = SecureUart_CalculateCRC(frame, frame_pos);
 8000e8a:	f8b7 215e 	ldrh.w	r2, [r7, #350]	@ 0x15e
 8000e8e:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000e92:	4611      	mov	r1, r2
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff feb3 	bl	8000c00 <SecureUart_CalculateCRC>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000ea2:	f5a3 73a5 	sub.w	r3, r3, #330	@ 0x14a
 8000ea6:	801a      	strh	r2, [r3, #0]
        memcpy(frame + frame_pos, &crc, 2); // 2 байта для CRC
 8000ea8:	f8b7 315e 	ldrh.w	r3, [r7, #350]	@ 0x15e
 8000eac:	f107 02b4 	add.w	r2, r7, #180	@ 0xb4
 8000eb0:	4413      	add	r3, r2
 8000eb2:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8000eb6:	f5a2 72a5 	sub.w	r2, r2, #330	@ 0x14a
 8000eba:	8812      	ldrh	r2, [r2, #0]
 8000ebc:	801a      	strh	r2, [r3, #0]
        frame_pos += 2;
 8000ebe:	f8b7 315e 	ldrh.w	r3, [r7, #350]	@ 0x15e
 8000ec2:	3302      	adds	r3, #2
 8000ec4:	f8a7 315e 	strh.w	r3, [r7, #350]	@ 0x15e
    }

    // Отладочный вывод
    SecureUart_DebugPrint(ctx->debug_uart, "Отправка фрейма (seq_id=%lu, длина=%u):\r\n", seq_id, length);
 8000ec8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000ecc:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	6858      	ldr	r0, [r3, #4]
 8000ed4:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8000ed8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000edc:	f2a3 1359 	subw	r3, r3, #345	@ 0x159
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	4921      	ldr	r1, [pc, #132]	@ (8000f68 <SecureUart_Send+0x2e8>)
 8000ee4:	f000 f9e8 	bl	80012b8 <SecureUart_DebugPrint>
    SecureUart_PrintHexBuffer(ctx->debug_uart, "TX: ", frame, frame_pos);
 8000ee8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000eec:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	6858      	ldr	r0, [r3, #4]
 8000ef4:	f8b7 315e 	ldrh.w	r3, [r7, #350]	@ 0x15e
 8000ef8:	f107 02b4 	add.w	r2, r7, #180	@ 0xb4
 8000efc:	491b      	ldr	r1, [pc, #108]	@ (8000f6c <SecureUart_Send+0x2ec>)
 8000efe:	f000 fa19 	bl	8001334 <SecureUart_PrintHexBuffer>

    // Отправка фрейма
    HAL_StatusTypeDef hal_status = HAL_UART_Transmit(ctx->huart, frame, frame_pos, 1000);
 8000f02:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000f06:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	6818      	ldr	r0, [r3, #0]
 8000f0e:	f8b7 215e 	ldrh.w	r2, [r7, #350]	@ 0x15e
 8000f12:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 8000f16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f1a:	f002 ffbd 	bl	8003e98 <HAL_UART_Transmit>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
    if (hal_status != HAL_OK) {
 8000f24:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d00d      	beq.n	8000f48 <SecureUart_Send+0x2c8>
        SecureUart_DebugPrint(ctx->debug_uart, "Ошибка отправки: %d\r\n", hal_status);
 8000f2c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000f30:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f897 2157 	ldrb.w	r2, [r7, #343]	@ 0x157
 8000f3c:	490c      	ldr	r1, [pc, #48]	@ (8000f70 <SecureUart_Send+0x2f0>)
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 f9ba 	bl	80012b8 <SecureUart_DebugPrint>
        return SECURE_UART_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e000      	b.n	8000f4a <SecureUart_Send+0x2ca>
    }

    return SECURE_UART_OK;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f507 77b2 	add.w	r7, r7, #356	@ 0x164
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd90      	pop	{r4, r7, pc}
 8000f54:	08006970 	.word	0x08006970
 8000f58:	200005c0 	.word	0x200005c0
 8000f5c:	a55a5aa5 	.word	0xa55a5aa5
 8000f60:	080069c4 	.word	0x080069c4
 8000f64:	08006a08 	.word	0x08006a08
 8000f68:	08006a1c 	.word	0x08006a1c
 8000f6c:	08006a5c 	.word	0x08006a5c
 8000f70:	08006a64 	.word	0x08006a64

08000f74 <SecureUart_ProcessReceivedData>:
 * @brief Обработка принятых данных
 * @param ctx Указатель на структуру контекста
 * @param packet Указатель на структуру для сохранения распакованных данных
 * @return Статус операции
 */
SecureUartStatus SecureUart_ProcessReceivedData(SecureUartContext *ctx, SecureUartPacket *packet) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b090      	sub	sp, #64	@ 0x40
 8000f78:	af02      	add	r7, sp, #8
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
    uint16_t frame_size = ctx->rx_pos;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	@ 0xa2
 8000f84:	86fb      	strh	r3, [r7, #54]	@ 0x36

    // Проверка минимального размера фрейма
    uint16_t min_size = ctx->mac_enabled ?
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <SecureUart_ProcessReceivedData+0x20>
 8000f90:	2312      	movs	r3, #18
 8000f92:	e000      	b.n	8000f96 <SecureUart_ProcessReceivedData+0x22>
 8000f94:	230c      	movs	r3, #12
 8000f96:	86bb      	strh	r3, [r7, #52]	@ 0x34
        (FRAME_HEADER_SIZE + SEQUENCE_ID_SIZE + PACKET_TYPE_SIZE + 1 + MAC_SIZE) :
        (FRAME_HEADER_SIZE + SEQUENCE_ID_SIZE + PACKET_TYPE_SIZE + 1 + 2); // +2 для CRC

    if (frame_size < min_size) {
 8000f98:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8000f9a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d208      	bcs.n	8000fb2 <SecureUart_ProcessReceivedData+0x3e>
        SecureUart_DebugPrint(ctx->debug_uart, "Ошибка: недостаточный размер фрейма (%u)\r\n", frame_size);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8000fa6:	498d      	ldr	r1, [pc, #564]	@ (80011dc <SecureUart_ProcessReceivedData+0x268>)
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 f985 	bl	80012b8 <SecureUart_DebugPrint>
        return SECURE_UART_INVALID_FRAME;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	e110      	b.n	80011d4 <SecureUart_ProcessReceivedData+0x260>
    }

    // Проверка заголовка
    uint32_t received_header;
    memcpy(&received_header, ctx->rx_buffer, FRAME_HEADER_SIZE);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3308      	adds	r3, #8
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	623b      	str	r3, [r7, #32]
    if (received_header != FRAME_HEADER) {
 8000fba:	6a3b      	ldr	r3, [r7, #32]
 8000fbc:	4a88      	ldr	r2, [pc, #544]	@ (80011e0 <SecureUart_ProcessReceivedData+0x26c>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d008      	beq.n	8000fd4 <SecureUart_ProcessReceivedData+0x60>
        SecureUart_DebugPrint(ctx->debug_uart, "Ошибка: неверный заголовок фрейма (0x%08lX)\r\n", received_header);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	6a3a      	ldr	r2, [r7, #32]
 8000fc8:	4986      	ldr	r1, [pc, #536]	@ (80011e4 <SecureUart_ProcessReceivedData+0x270>)
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 f974 	bl	80012b8 <SecureUart_DebugPrint>
        return SECURE_UART_INVALID_FRAME;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	e0ff      	b.n	80011d4 <SecureUart_ProcessReceivedData+0x260>
    }

    // Извлечение sequence_id
    uint32_t sequence_id;
    memcpy(&sequence_id, ctx->rx_buffer + FRAME_HEADER_SIZE, SEQUENCE_ID_SIZE);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3308      	adds	r3, #8
 8000fd8:	3304      	adds	r3, #4
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	61fb      	str	r3, [r7, #28]

    // Проверка на replay-атаку
    if (sequence_id <= ctx->last_sequence_id) {
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d30a      	bcc.n	8001000 <SecureUart_ProcessReceivedData+0x8c>
        SecureUart_DebugPrint(ctx->debug_uart, "Обнаружена возможная replay-атака (seq_id=%lu, last=%lu)\r\n",
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6858      	ldr	r0, [r3, #4]
 8000fee:	69fa      	ldr	r2, [r7, #28]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000ff6:	497c      	ldr	r1, [pc, #496]	@ (80011e8 <SecureUart_ProcessReceivedData+0x274>)
 8000ff8:	f000 f95e 	bl	80012b8 <SecureUart_DebugPrint>
                              sequence_id, ctx->last_sequence_id);
        return SECURE_UART_REPLAY_ATTACK;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e0e9      	b.n	80011d4 <SecureUart_ProcessReceivedData+0x260>
    }

    // Извлечение типа пакета
    uint8_t packet_type = ctx->rx_buffer[FRAME_HEADER_SIZE + SEQUENCE_ID_SIZE];
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	7c1b      	ldrb	r3, [r3, #16]
 8001004:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    // Извлечение длины данных
    uint8_t data_length = ctx->rx_buffer[FRAME_HEADER_SIZE + SEQUENCE_ID_SIZE + PACKET_TYPE_SIZE];
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	7c5b      	ldrb	r3, [r3, #17]
 800100c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

    // Проверка корректности длины данных
    if (data_length > MAX_FRAME_SIZE - min_size) {
 8001010:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8001014:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001016:	f1c3 039a 	rsb	r3, r3, #154	@ 0x9a
 800101a:	429a      	cmp	r2, r3
 800101c:	dd09      	ble.n	8001032 <SecureUart_ProcessReceivedData+0xbe>
        SecureUart_DebugPrint(ctx->debug_uart, "Ошибка: некорректная длина данных (%u)\r\n", data_length);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8001026:	4971      	ldr	r1, [pc, #452]	@ (80011ec <SecureUart_ProcessReceivedData+0x278>)
 8001028:	4618      	mov	r0, r3
 800102a:	f000 f945 	bl	80012b8 <SecureUart_DebugPrint>
        return SECURE_UART_INVALID_FRAME;
 800102e:	2302      	movs	r3, #2
 8001030:	e0d0      	b.n	80011d4 <SecureUart_ProcessReceivedData+0x260>
    }

    // Проверка полного размера фрейма
    uint16_t expected_frame_size = min_size + data_length;
 8001032:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001036:	b29a      	uxth	r2, r3
 8001038:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800103a:	4413      	add	r3, r2
 800103c:	863b      	strh	r3, [r7, #48]	@ 0x30
    if (frame_size < expected_frame_size) {
 800103e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8001040:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001042:	429a      	cmp	r2, r3
 8001044:	d208      	bcs.n	8001058 <SecureUart_ProcessReceivedData+0xe4>
        SecureUart_DebugPrint(ctx->debug_uart, "Ошибка: неполный фрейм (ожидалось %u, получено %u)\r\n",
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6858      	ldr	r0, [r3, #4]
 800104a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800104c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800104e:	4968      	ldr	r1, [pc, #416]	@ (80011f0 <SecureUart_ProcessReceivedData+0x27c>)
 8001050:	f000 f932 	bl	80012b8 <SecureUart_DebugPrint>
                              expected_frame_size, frame_size);
        return SECURE_UART_INVALID_FRAME;
 8001054:	2302      	movs	r3, #2
 8001056:	e0bd      	b.n	80011d4 <SecureUart_ProcessReceivedData+0x260>
    }

    // Проверка MAC или CRC
    if (ctx->mac_enabled) {
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 800105e:	2b00      	cmp	r3, #0
 8001060:	d02a      	beq.n	80010b8 <SecureUart_ProcessReceivedData+0x144>
        // Вычисление и проверка MAC
        uint8_t calculated_mac[MAC_SIZE];
        uint16_t mac_data_length = FRAME_HEADER_SIZE + SEQUENCE_ID_SIZE + PACKET_TYPE_SIZE + 1 + data_length;
 8001062:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001066:	b29b      	uxth	r3, r3
 8001068:	330a      	adds	r3, #10
 800106a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        SecureUart_CalculateMAC(ctx, ctx->rx_buffer, mac_data_length, calculated_mac);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f103 0108 	add.w	r1, r3, #8
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff fdad 	bl	8000bd8 <SecureUart_CalculateMAC>

        uint8_t received_mac[MAC_SIZE];
        memcpy(received_mac, ctx->rx_buffer + mac_data_length, MAC_SIZE);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f103 0208 	add.w	r2, r3, #8
 8001084:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001086:	441a      	add	r2, r3
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	6810      	ldr	r0, [r2, #0]
 800108e:	6851      	ldr	r1, [r2, #4]
 8001090:	c303      	stmia	r3!, {r0, r1}

        if (memcmp(calculated_mac, received_mac, MAC_SIZE) != 0) {
 8001092:	f107 010c 	add.w	r1, r7, #12
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	2208      	movs	r2, #8
 800109c:	4618      	mov	r0, r3
 800109e:	f004 faa5 	bl	80055ec <memcmp>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d02d      	beq.n	8001104 <SecureUart_ProcessReceivedData+0x190>
            SecureUart_DebugPrint(ctx->debug_uart, "Ошибка MAC\r\n");
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	4951      	ldr	r1, [pc, #324]	@ (80011f4 <SecureUart_ProcessReceivedData+0x280>)
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 f902 	bl	80012b8 <SecureUart_DebugPrint>
            return SECURE_UART_MAC_ERROR;
 80010b4:	2304      	movs	r3, #4
 80010b6:	e08d      	b.n	80011d4 <SecureUart_ProcessReceivedData+0x260>
        }
    } else {
        // CRC проверка для обратной совместимости
        uint16_t received_crc;
        memcpy(&received_crc, ctx->rx_buffer + FRAME_HEADER_SIZE + SEQUENCE_ID_SIZE + PACKET_TYPE_SIZE + 1 + data_length, 2);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f103 0208 	add.w	r2, r3, #8
 80010be:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80010c2:	330a      	adds	r3, #10
 80010c4:	4413      	add	r3, r2
 80010c6:	881b      	ldrh	r3, [r3, #0]
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	817b      	strh	r3, [r7, #10]

        uint16_t calculated_crc = SecureUart_CalculateCRC(ctx->rx_buffer, FRAME_HEADER_SIZE + SEQUENCE_ID_SIZE + PACKET_TYPE_SIZE + 1 + data_length);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f103 0208 	add.w	r2, r3, #8
 80010d2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	330a      	adds	r3, #10
 80010da:	b29b      	uxth	r3, r3
 80010dc:	4619      	mov	r1, r3
 80010de:	4610      	mov	r0, r2
 80010e0:	f7ff fd8e 	bl	8000c00 <SecureUart_CalculateCRC>
 80010e4:	4603      	mov	r3, r0
 80010e6:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        if (received_crc != calculated_crc) {
 80010e8:	897b      	ldrh	r3, [r7, #10]
 80010ea:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d009      	beq.n	8001104 <SecureUart_ProcessReceivedData+0x190>
            SecureUart_DebugPrint(ctx->debug_uart, "Ошибка CRC (получено 0x%04X, рассчитано 0x%04X)\r\n",
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6858      	ldr	r0, [r3, #4]
 80010f4:	897b      	ldrh	r3, [r7, #10]
 80010f6:	461a      	mov	r2, r3
 80010f8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80010fa:	493f      	ldr	r1, [pc, #252]	@ (80011f8 <SecureUart_ProcessReceivedData+0x284>)
 80010fc:	f000 f8dc 	bl	80012b8 <SecureUart_DebugPrint>
                                 received_crc, calculated_crc);
            return SECURE_UART_MAC_ERROR;
 8001100:	2304      	movs	r3, #4
 8001102:	e067      	b.n	80011d4 <SecureUart_ProcessReceivedData+0x260>
        }
    }

    // Обновляем последний известный sequence_id
    ctx->last_sequence_id = sequence_id;
 8001104:	69fa      	ldr	r2, [r7, #28]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    // Заполнение структуры пакета
    packet->sequence_id = sequence_id;
 800110c:	69fa      	ldr	r2, [r7, #28]
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	601a      	str	r2, [r3, #0]
    packet->packet_type = packet_type;
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001118:	711a      	strb	r2, [r3, #4]

    // Получение указателя на данные
    uint8_t *received_data = ctx->rx_buffer + FRAME_HEADER_SIZE + SEQUENCE_ID_SIZE + PACKET_TYPE_SIZE + 1;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3308      	adds	r3, #8
 800111e:	330a      	adds	r3, #10
 8001120:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Если шифрование включено, расшифровываем данные
    if (ctx->encryption_enabled && data_length > 0) {
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8001128:	2b00      	cmp	r3, #0
 800112a:	d024      	beq.n	8001176 <SecureUart_ProcessReceivedData+0x202>
 800112c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001130:	2b00      	cmp	r3, #0
 8001132:	d020      	beq.n	8001176 <SecureUart_ProcessReceivedData+0x202>
        // Используем Simple версию расшифрования
        size_t decrypted_length = Speck_Decrypt_Simple(
            &ctx->speck_ctx,
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f103 00a8 	add.w	r0, r3, #168	@ 0xa8
        size_t decrypted_length = Speck_Decrypt_Simple(
 800113a:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
            received_data,
            data_length,
            received_data, // IV содержится в начале received_data
            packet->data
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	3306      	adds	r3, #6
        size_t decrypted_length = Speck_Decrypt_Simple(
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001146:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001148:	f001 fb63 	bl	8002812 <Speck_Decrypt_Simple>
 800114c:	6278      	str	r0, [r7, #36]	@ 0x24
        );

        // Отладочный вывод расшифрованных данных
        SecureUart_DebugPrint(ctx->debug_uart, "Расшифрованные данные:\r\n");
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	492a      	ldr	r1, [pc, #168]	@ (80011fc <SecureUart_ProcessReceivedData+0x288>)
 8001154:	4618      	mov	r0, r3
 8001156:	f000 f8af 	bl	80012b8 <SecureUart_DebugPrint>
        SecureUart_PrintHexBuffer(ctx->debug_uart, "Расшифровано: ", packet->data, decrypted_length);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6858      	ldr	r0, [r3, #4]
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	1d9a      	adds	r2, r3, #6
 8001162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001164:	b29b      	uxth	r3, r3
 8001166:	4926      	ldr	r1, [pc, #152]	@ (8001200 <SecureUart_ProcessReceivedData+0x28c>)
 8001168:	f000 f8e4 	bl	8001334 <SecureUart_PrintHexBuffer>

        packet->data_length = decrypted_length;
 800116c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800116e:	b2da      	uxtb	r2, r3
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	715a      	strb	r2, [r3, #5]
    if (ctx->encryption_enabled && data_length > 0) {
 8001174:	e00f      	b.n	8001196 <SecureUart_ProcessReceivedData+0x222>
    } else {
        // Копирование данных без расшифровки
        if (data_length > 0) {
 8001176:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800117a:	2b00      	cmp	r3, #0
 800117c:	d007      	beq.n	800118e <SecureUart_ProcessReceivedData+0x21a>
            memcpy(packet->data, received_data, data_length);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	3306      	adds	r3, #6
 8001182:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8001186:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001188:	4618      	mov	r0, r3
 800118a:	f004 faba 	bl	8005702 <memcpy>
        }
        packet->data_length = data_length;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8001194:	715a      	strb	r2, [r3, #5]
    }

    // Отладочный вывод
    SecureUart_DebugPrint(ctx->debug_uart, "Принят фрейм (seq_id=%lu, длина=%u):\r\n", sequence_id, packet->data_length);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6858      	ldr	r0, [r3, #4]
 800119a:	69fa      	ldr	r2, [r7, #28]
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	795b      	ldrb	r3, [r3, #5]
 80011a0:	4918      	ldr	r1, [pc, #96]	@ (8001204 <SecureUart_ProcessReceivedData+0x290>)
 80011a2:	f000 f889 	bl	80012b8 <SecureUart_DebugPrint>
    SecureUart_PrintHexBuffer(ctx->debug_uart, "RX: ", ctx->rx_buffer, frame_size);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6858      	ldr	r0, [r3, #4]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f103 0208 	add.w	r2, r3, #8
 80011b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80011b2:	4915      	ldr	r1, [pc, #84]	@ (8001208 <SecureUart_ProcessReceivedData+0x294>)
 80011b4:	f000 f8be 	bl	8001334 <SecureUart_PrintHexBuffer>

    // Если данные есть, выводим их
    if (packet->data_length > 0) {
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	795b      	ldrb	r3, [r3, #5]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d008      	beq.n	80011d2 <SecureUart_ProcessReceivedData+0x25e>
        SecureUart_PrintHexBuffer(ctx->debug_uart, "Данные: ", packet->data, packet->data_length);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6858      	ldr	r0, [r3, #4]
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	1d9a      	adds	r2, r3, #6
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	795b      	ldrb	r3, [r3, #5]
 80011cc:	490f      	ldr	r1, [pc, #60]	@ (800120c <SecureUart_ProcessReceivedData+0x298>)
 80011ce:	f000 f8b1 	bl	8001334 <SecureUart_PrintHexBuffer>
    }

    return SECURE_UART_OK;
 80011d2:	2300      	movs	r3, #0
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3738      	adds	r7, #56	@ 0x38
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	08006a88 	.word	0x08006a88
 80011e0:	a55a5aa5 	.word	0xa55a5aa5
 80011e4:	08006ad4 	.word	0x08006ad4
 80011e8:	08006b20 	.word	0x08006b20
 80011ec:	08006b74 	.word	0x08006b74
 80011f0:	08006bbc 	.word	0x08006bbc
 80011f4:	08006c18 	.word	0x08006c18
 80011f8:	08006c2c 	.word	0x08006c2c
 80011fc:	08006c78 	.word	0x08006c78
 8001200:	08006ca8 	.word	0x08006ca8
 8001204:	08006cc4 	.word	0x08006cc4
 8001208:	08006cfc 	.word	0x08006cfc
 800120c:	08006d04 	.word	0x08006d04

08001210 <SecureUart_HandleUartRxEvent>:

/**
 * @brief Обработчик события приема данных по UART
 * @param ctx Указатель на структуру контекста
 */
void SecureUart_HandleUartRxEvent(SecureUartContext *ctx) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b0a6      	sub	sp, #152	@ 0x98
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
    // Проверка на IDLE прерывание
    if (__HAL_UART_GET_FLAG(ctx->huart, UART_FLAG_IDLE)) {
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0310 	and.w	r3, r3, #16
 8001224:	2b10      	cmp	r3, #16
 8001226:	d140      	bne.n	80012aa <SecureUart_HandleUartRxEvent+0x9a>
        // Сброс флага IDLE
        __HAL_UART_CLEAR_IDLEFLAG(ctx->huart);
 8001228:	2300      	movs	r3, #0
 800122a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001246:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90

        // Остановка DMA
        HAL_UART_DMAStop(ctx->huart);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f002 fed2 	bl	8003ff8 <HAL_UART_DMAStop>

        // Расчет количества полученных байт
        ctx->rx_pos = MAX_FRAME_SIZE - __HAL_DMA_GET_COUNTER(ctx->huart->hdmarx);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	b29b      	uxth	r3, r3
 8001260:	f1c3 039a 	rsb	r3, r3, #154	@ 0x9a
 8001264:	b29a      	uxth	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2

        // Обработка принятых данных
        SecureUartPacket packet;
        SecureUartStatus status = SecureUart_ProcessReceivedData(ctx, &packet);
 800126c:	f107 0308 	add.w	r3, r7, #8
 8001270:	4619      	mov	r1, r3
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff fe7e 	bl	8000f74 <SecureUart_ProcessReceivedData>
 8001278:	4603      	mov	r3, r0
 800127a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

        if (status == SECURE_UART_OK) {
 800127e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8001282:	2b00      	cmp	r3, #0
 8001284:	d105      	bne.n	8001292 <SecureUart_HandleUartRxEvent+0x82>
            SecureUart_DebugPrint(ctx->debug_uart, "Пакет успешно обработан\r\n");
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	490a      	ldr	r1, [pc, #40]	@ (80012b4 <SecureUart_HandleUartRxEvent+0xa4>)
 800128c:	4618      	mov	r0, r3
 800128e:	f000 f813 	bl	80012b8 <SecureUart_DebugPrint>
        }

        // Сброс указателя приема
        ctx->rx_pos = 0;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2

        // Перезапуск приема
        HAL_UART_Receive_DMA(ctx->huart, ctx->rx_buffer, MAX_FRAME_SIZE);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6818      	ldr	r0, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	3308      	adds	r3, #8
 80012a2:	229a      	movs	r2, #154	@ 0x9a
 80012a4:	4619      	mov	r1, r3
 80012a6:	f002 fe82 	bl	8003fae <HAL_UART_Receive_DMA>
    }
}
 80012aa:	bf00      	nop
 80012ac:	3798      	adds	r7, #152	@ 0x98
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	08006d14 	.word	0x08006d14

080012b8 <SecureUart_DebugPrint>:
 * @brief Отладочный вывод форматированной строки в UART
 * @param huart Дескриптор UART для отладки
 * @param format Формат строки
 * @param ... Аргументы
 */
void SecureUart_DebugPrint(UART_HandleTypeDef *huart, const char *format, ...) {
 80012b8:	b40e      	push	{r1, r2, r3}
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b0c5      	sub	sp, #276	@ 0x114
 80012be:	af00      	add	r7, sp, #0
 80012c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012c4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80012c8:	6018      	str	r0, [r3, #0]
    if (huart == NULL) return;
 80012ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012ce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d025      	beq.n	8001324 <SecureUart_DebugPrint+0x6c>

    char buffer[256];
    va_list args;
    va_start(args, format);
 80012d8:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80012dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80012e4:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 80012e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80012ee:	f107 0010 	add.w	r0, r7, #16
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80012f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012fc:	f004 f968 	bl	80055d0 <vsniprintf>
    va_end(args);

    HAL_UART_Transmit(huart, (uint8_t*)buffer, strlen(buffer), 100);
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	4618      	mov	r0, r3
 8001306:	f7fe ff6b 	bl	80001e0 <strlen>
 800130a:	4603      	mov	r3, r0
 800130c:	b29a      	uxth	r2, r3
 800130e:	f107 0110 	add.w	r1, r7, #16
 8001312:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001316:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 800131a:	2364      	movs	r3, #100	@ 0x64
 800131c:	6800      	ldr	r0, [r0, #0]
 800131e:	f002 fdbb 	bl	8003e98 <HAL_UART_Transmit>
 8001322:	e000      	b.n	8001326 <SecureUart_DebugPrint+0x6e>
    if (huart == NULL) return;
 8001324:	bf00      	nop
}
 8001326:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800132a:	46bd      	mov	sp, r7
 800132c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001330:	b003      	add	sp, #12
 8001332:	4770      	bx	lr

08001334 <SecureUart_PrintHexBuffer>:
 * @param huart Дескриптор UART для отладки
 * @param prefix Префикс для вывода
 * @param buffer Указатель на буфер данных
 * @param length Длина данных
 */
void SecureUart_PrintHexBuffer(UART_HandleTypeDef *huart, const char *prefix, const uint8_t *buffer, uint16_t length) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	@ 0x28
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
 8001340:	807b      	strh	r3, [r7, #2]
    if (huart == NULL) return;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d050      	beq.n	80013ea <SecureUart_PrintHexBuffer+0xb6>

    char outstr[16];

    // Вывод префикса
    HAL_UART_Transmit(huart, (uint8_t*)prefix, strlen(prefix), 100);
 8001348:	68b8      	ldr	r0, [r7, #8]
 800134a:	f7fe ff49 	bl	80001e0 <strlen>
 800134e:	4603      	mov	r3, r0
 8001350:	b29a      	uxth	r2, r3
 8001352:	2364      	movs	r3, #100	@ 0x64
 8001354:	68b9      	ldr	r1, [r7, #8]
 8001356:	68f8      	ldr	r0, [r7, #12]
 8001358:	f002 fd9e 	bl	8003e98 <HAL_UART_Transmit>

    // Вывод буфера в HEX формате
    for (uint16_t i = 0; i < length; i++) {
 800135c:	2300      	movs	r3, #0
 800135e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001360:	e038      	b.n	80013d4 <SecureUart_PrintHexBuffer+0xa0>
        sprintf(outstr, "%02X ", buffer[i]);
 8001362:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	4413      	add	r3, r2
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	461a      	mov	r2, r3
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	4920      	ldr	r1, [pc, #128]	@ (80013f4 <SecureUart_PrintHexBuffer+0xc0>)
 8001372:	4618      	mov	r0, r3
 8001374:	f004 f898 	bl	80054a8 <siprintf>
        HAL_UART_Transmit(huart, (uint8_t*)outstr, strlen(outstr), 100);
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	4618      	mov	r0, r3
 800137e:	f7fe ff2f 	bl	80001e0 <strlen>
 8001382:	4603      	mov	r3, r0
 8001384:	b29a      	uxth	r2, r3
 8001386:	f107 0114 	add.w	r1, r7, #20
 800138a:	2364      	movs	r3, #100	@ 0x64
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f002 fd83 	bl	8003e98 <HAL_UART_Transmit>

        // Перенос строки каждые 16 байт
        if ((i + 1) % 16 == 0 && i < length - 1) {
 8001392:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001394:	3301      	adds	r3, #1
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	2b00      	cmp	r3, #0
 800139c:	d117      	bne.n	80013ce <SecureUart_PrintHexBuffer+0x9a>
 800139e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80013a0:	887b      	ldrh	r3, [r7, #2]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	429a      	cmp	r2, r3
 80013a6:	da12      	bge.n	80013ce <SecureUart_PrintHexBuffer+0x9a>
            sprintf(outstr, "\r\n       ");
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	4912      	ldr	r1, [pc, #72]	@ (80013f8 <SecureUart_PrintHexBuffer+0xc4>)
 80013ae:	4618      	mov	r0, r3
 80013b0:	f004 f87a 	bl	80054a8 <siprintf>
            HAL_UART_Transmit(huart, (uint8_t*)outstr, strlen(outstr), 100);
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7fe ff11 	bl	80001e0 <strlen>
 80013be:	4603      	mov	r3, r0
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	f107 0114 	add.w	r1, r7, #20
 80013c6:	2364      	movs	r3, #100	@ 0x64
 80013c8:	68f8      	ldr	r0, [r7, #12]
 80013ca:	f002 fd65 	bl	8003e98 <HAL_UART_Transmit>
    for (uint16_t i = 0; i < length; i++) {
 80013ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80013d0:	3301      	adds	r3, #1
 80013d2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80013d4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80013d6:	887b      	ldrh	r3, [r7, #2]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d3c2      	bcc.n	8001362 <SecureUart_PrintHexBuffer+0x2e>
        }
    }

    // Завершающий перенос строки
    HAL_UART_Transmit(huart, (uint8_t*)"\r\n", 2, 100);
 80013dc:	2364      	movs	r3, #100	@ 0x64
 80013de:	2202      	movs	r2, #2
 80013e0:	4906      	ldr	r1, [pc, #24]	@ (80013fc <SecureUart_PrintHexBuffer+0xc8>)
 80013e2:	68f8      	ldr	r0, [r7, #12]
 80013e4:	f002 fd58 	bl	8003e98 <HAL_UART_Transmit>
 80013e8:	e000      	b.n	80013ec <SecureUart_PrintHexBuffer+0xb8>
    if (huart == NULL) return;
 80013ea:	bf00      	nop
}
 80013ec:	3728      	adds	r7, #40	@ 0x28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	08006d44 	.word	0x08006d44
 80013f8:	08006d4c 	.word	0x08006d4c
 80013fc:	08006d58 	.word	0x08006d58

08001400 <SipHash_2_4>:
        v2 += v3; v3 = ROTL64(v3, 16); v3 ^= v2; \
        v0 += v3; v3 = ROTL64(v3, 21); v3 ^= v0; \
        v2 += v1; v1 = ROTL64(v1, 17); v1 ^= v2; v2 = ROTL64(v2, 32); \
    } while (0)

uint64_t SipHash_2_4(const uint8_t* key, const uint8_t* data, size_t len) {
 8001400:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001404:	f2ad 4d04 	subw	sp, sp, #1028	@ 0x404
 8001408:	af00      	add	r7, sp, #0
 800140a:	f8c7 03a4 	str.w	r0, [r7, #932]	@ 0x3a4
 800140e:	f8c7 13a0 	str.w	r1, [r7, #928]	@ 0x3a0
 8001412:	f8c7 239c 	str.w	r2, [r7, #924]	@ 0x39c
    /* "константа" инициализации */
    const uint64_t k0 = U8TO64_LE(key);
 8001416:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2200      	movs	r2, #0
 8001420:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
 8001424:	f8c7 2394 	str.w	r2, [r7, #916]	@ 0x394
 8001428:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 800142c:	3301      	adds	r3, #1
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2200      	movs	r2, #0
 8001434:	461c      	mov	r4, r3
 8001436:	4615      	mov	r5, r2
 8001438:	f04f 0200 	mov.w	r2, #0
 800143c:	f04f 0300 	mov.w	r3, #0
 8001440:	022b      	lsls	r3, r5, #8
 8001442:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8001446:	0222      	lsls	r2, r4, #8
 8001448:	e9d7 45e4 	ldrd	r4, r5, [r7, #912]	@ 0x390
 800144c:	4621      	mov	r1, r4
 800144e:	4311      	orrs	r1, r2
 8001450:	f8c7 1388 	str.w	r1, [r7, #904]	@ 0x388
 8001454:	4629      	mov	r1, r5
 8001456:	4319      	orrs	r1, r3
 8001458:	f8c7 138c 	str.w	r1, [r7, #908]	@ 0x38c
 800145c:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8001460:	3302      	adds	r3, #2
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2200      	movs	r2, #0
 8001468:	4698      	mov	r8, r3
 800146a:	4691      	mov	r9, r2
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	f04f 0300 	mov.w	r3, #0
 8001474:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8001478:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800147c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8001480:	e9d7 45e2 	ldrd	r4, r5, [r7, #904]	@ 0x388
 8001484:	4621      	mov	r1, r4
 8001486:	4311      	orrs	r1, r2
 8001488:	f8c7 1380 	str.w	r1, [r7, #896]	@ 0x380
 800148c:	4629      	mov	r1, r5
 800148e:	4319      	orrs	r1, r3
 8001490:	f8c7 1384 	str.w	r1, [r7, #900]	@ 0x384
 8001494:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8001498:	3303      	adds	r3, #3
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2200      	movs	r2, #0
 80014a0:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
 80014a4:	f8c7 237c 	str.w	r2, [r7, #892]	@ 0x37c
 80014a8:	e9d7 12de 	ldrd	r1, r2, [r7, #888]	@ 0x378
 80014ac:	460b      	mov	r3, r1
 80014ae:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 80014b2:	460b      	mov	r3, r1
 80014b4:	ea4f 6a03 	mov.w	sl, r3, lsl #24
 80014b8:	e9d7 12e0 	ldrd	r1, r2, [r7, #896]	@ 0x380
 80014bc:	460b      	mov	r3, r1
 80014be:	ea43 030a 	orr.w	r3, r3, sl
 80014c2:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370
 80014c6:	4613      	mov	r3, r2
 80014c8:	ea43 030b 	orr.w	r3, r3, fp
 80014cc:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 80014d0:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 80014d4:	3304      	adds	r3, #4
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2200      	movs	r2, #0
 80014dc:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
 80014e0:	f8c7 236c 	str.w	r2, [r7, #876]	@ 0x36c
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	f04f 0300 	mov.w	r3, #0
 80014ec:	f8d7 1368 	ldr.w	r1, [r7, #872]	@ 0x368
 80014f0:	000b      	movs	r3, r1
 80014f2:	2200      	movs	r2, #0
 80014f4:	e9d7 45dc 	ldrd	r4, r5, [r7, #880]	@ 0x370
 80014f8:	4621      	mov	r1, r4
 80014fa:	4311      	orrs	r1, r2
 80014fc:	f8c7 1360 	str.w	r1, [r7, #864]	@ 0x360
 8001500:	4629      	mov	r1, r5
 8001502:	4319      	orrs	r1, r3
 8001504:	f8c7 1364 	str.w	r1, [r7, #868]	@ 0x364
 8001508:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 800150c:	3305      	adds	r3, #5
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2200      	movs	r2, #0
 8001514:	f8c7 3358 	str.w	r3, [r7, #856]	@ 0x358
 8001518:	f8c7 235c 	str.w	r2, [r7, #860]	@ 0x35c
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	f04f 0300 	mov.w	r3, #0
 8001524:	f8d7 1358 	ldr.w	r1, [r7, #856]	@ 0x358
 8001528:	020b      	lsls	r3, r1, #8
 800152a:	2200      	movs	r2, #0
 800152c:	e9d7 45d8 	ldrd	r4, r5, [r7, #864]	@ 0x360
 8001530:	4621      	mov	r1, r4
 8001532:	4311      	orrs	r1, r2
 8001534:	f8c7 1350 	str.w	r1, [r7, #848]	@ 0x350
 8001538:	4629      	mov	r1, r5
 800153a:	4319      	orrs	r1, r3
 800153c:	f8c7 1354 	str.w	r1, [r7, #852]	@ 0x354
 8001540:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8001544:	3306      	adds	r3, #6
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2200      	movs	r2, #0
 800154c:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
 8001550:	f8c7 234c 	str.w	r2, [r7, #844]	@ 0x34c
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	f04f 0300 	mov.w	r3, #0
 800155c:	f8d7 1348 	ldr.w	r1, [r7, #840]	@ 0x348
 8001560:	040b      	lsls	r3, r1, #16
 8001562:	2200      	movs	r2, #0
 8001564:	e9d7 45d4 	ldrd	r4, r5, [r7, #848]	@ 0x350
 8001568:	4621      	mov	r1, r4
 800156a:	4311      	orrs	r1, r2
 800156c:	f8c7 1340 	str.w	r1, [r7, #832]	@ 0x340
 8001570:	4629      	mov	r1, r5
 8001572:	4319      	orrs	r1, r3
 8001574:	f8c7 1344 	str.w	r1, [r7, #836]	@ 0x344
 8001578:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 800157c:	3307      	adds	r3, #7
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2200      	movs	r2, #0
 8001584:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8001588:	f8c7 233c 	str.w	r2, [r7, #828]	@ 0x33c
 800158c:	f04f 0200 	mov.w	r2, #0
 8001590:	f04f 0300 	mov.w	r3, #0
 8001594:	f8d7 1338 	ldr.w	r1, [r7, #824]	@ 0x338
 8001598:	060b      	lsls	r3, r1, #24
 800159a:	2200      	movs	r2, #0
 800159c:	e9d7 45d0 	ldrd	r4, r5, [r7, #832]	@ 0x340
 80015a0:	4621      	mov	r1, r4
 80015a2:	4311      	orrs	r1, r2
 80015a4:	f8c7 11e0 	str.w	r1, [r7, #480]	@ 0x1e0
 80015a8:	4629      	mov	r1, r5
 80015aa:	4319      	orrs	r1, r3
 80015ac:	f8c7 11e4 	str.w	r1, [r7, #484]	@ 0x1e4
 80015b0:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	@ 0x1e0
 80015b4:	e9c7 34f0 	strd	r3, r4, [r7, #960]	@ 0x3c0
    const uint64_t k1 = U8TO64_LE(key + 8);
 80015b8:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 80015bc:	3308      	adds	r3, #8
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2200      	movs	r2, #0
 80015c4:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 80015c8:	f8c7 2334 	str.w	r2, [r7, #820]	@ 0x334
 80015cc:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 80015d0:	3309      	adds	r3, #9
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2200      	movs	r2, #0
 80015d8:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 80015dc:	f8c7 232c 	str.w	r2, [r7, #812]	@ 0x32c
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	f04f 0300 	mov.w	r3, #0
 80015e8:	e9d7 45ca 	ldrd	r4, r5, [r7, #808]	@ 0x328
 80015ec:	4629      	mov	r1, r5
 80015ee:	020b      	lsls	r3, r1, #8
 80015f0:	4621      	mov	r1, r4
 80015f2:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 80015f6:	4621      	mov	r1, r4
 80015f8:	020a      	lsls	r2, r1, #8
 80015fa:	e9d7 45cc 	ldrd	r4, r5, [r7, #816]	@ 0x330
 80015fe:	4621      	mov	r1, r4
 8001600:	4311      	orrs	r1, r2
 8001602:	f8c7 1320 	str.w	r1, [r7, #800]	@ 0x320
 8001606:	4629      	mov	r1, r5
 8001608:	4319      	orrs	r1, r3
 800160a:	f8c7 1324 	str.w	r1, [r7, #804]	@ 0x324
 800160e:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8001612:	330a      	adds	r3, #10
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2200      	movs	r2, #0
 800161a:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
 800161e:	f8c7 231c 	str.w	r2, [r7, #796]	@ 0x31c
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	f04f 0300 	mov.w	r3, #0
 800162a:	e9d7 45c6 	ldrd	r4, r5, [r7, #792]	@ 0x318
 800162e:	4629      	mov	r1, r5
 8001630:	040b      	lsls	r3, r1, #16
 8001632:	4621      	mov	r1, r4
 8001634:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8001638:	4621      	mov	r1, r4
 800163a:	040a      	lsls	r2, r1, #16
 800163c:	e9d7 45c8 	ldrd	r4, r5, [r7, #800]	@ 0x320
 8001640:	4621      	mov	r1, r4
 8001642:	4311      	orrs	r1, r2
 8001644:	f8c7 1310 	str.w	r1, [r7, #784]	@ 0x310
 8001648:	4629      	mov	r1, r5
 800164a:	4319      	orrs	r1, r3
 800164c:	f8c7 1314 	str.w	r1, [r7, #788]	@ 0x314
 8001650:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8001654:	330b      	adds	r3, #11
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2200      	movs	r2, #0
 800165c:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
 8001660:	f8c7 230c 	str.w	r2, [r7, #780]	@ 0x30c
 8001664:	e9d7 12c2 	ldrd	r1, r2, [r7, #776]	@ 0x308
 8001668:	460b      	mov	r3, r1
 800166a:	0a1b      	lsrs	r3, r3, #8
 800166c:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
 8001670:	460b      	mov	r3, r1
 8001672:	061b      	lsls	r3, r3, #24
 8001674:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
 8001678:	e9d7 45c4 	ldrd	r4, r5, [r7, #784]	@ 0x310
 800167c:	4623      	mov	r3, r4
 800167e:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	@ 0x300
 8001682:	4602      	mov	r2, r0
 8001684:	4313      	orrs	r3, r2
 8001686:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
 800168a:	462b      	mov	r3, r5
 800168c:	460a      	mov	r2, r1
 800168e:	4313      	orrs	r3, r2
 8001690:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 8001694:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8001698:	330c      	adds	r3, #12
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2200      	movs	r2, #0
 80016a0:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 80016a4:	f8c7 22f4 	str.w	r2, [r7, #756]	@ 0x2f4
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	f8d7 12f0 	ldr.w	r1, [r7, #752]	@ 0x2f0
 80016b4:	000b      	movs	r3, r1
 80016b6:	2200      	movs	r2, #0
 80016b8:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	@ 0x2f8
 80016bc:	4621      	mov	r1, r4
 80016be:	4311      	orrs	r1, r2
 80016c0:	f8c7 12e8 	str.w	r1, [r7, #744]	@ 0x2e8
 80016c4:	4629      	mov	r1, r5
 80016c6:	4319      	orrs	r1, r3
 80016c8:	f8c7 12ec 	str.w	r1, [r7, #748]	@ 0x2ec
 80016cc:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 80016d0:	330d      	adds	r3, #13
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2200      	movs	r2, #0
 80016d8:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 80016dc:	f8c7 22e4 	str.w	r2, [r7, #740]	@ 0x2e4
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	f04f 0300 	mov.w	r3, #0
 80016e8:	f8d7 12e0 	ldr.w	r1, [r7, #736]	@ 0x2e0
 80016ec:	020b      	lsls	r3, r1, #8
 80016ee:	2200      	movs	r2, #0
 80016f0:	e9d7 45ba 	ldrd	r4, r5, [r7, #744]	@ 0x2e8
 80016f4:	4621      	mov	r1, r4
 80016f6:	4311      	orrs	r1, r2
 80016f8:	f8c7 12d8 	str.w	r1, [r7, #728]	@ 0x2d8
 80016fc:	4629      	mov	r1, r5
 80016fe:	4319      	orrs	r1, r3
 8001700:	f8c7 12dc 	str.w	r1, [r7, #732]	@ 0x2dc
 8001704:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8001708:	330e      	adds	r3, #14
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2200      	movs	r2, #0
 8001710:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 8001714:	f8c7 22d4 	str.w	r2, [r7, #724]	@ 0x2d4
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	f04f 0300 	mov.w	r3, #0
 8001720:	f8d7 12d0 	ldr.w	r1, [r7, #720]	@ 0x2d0
 8001724:	040b      	lsls	r3, r1, #16
 8001726:	2200      	movs	r2, #0
 8001728:	e9d7 45b6 	ldrd	r4, r5, [r7, #728]	@ 0x2d8
 800172c:	4621      	mov	r1, r4
 800172e:	4311      	orrs	r1, r2
 8001730:	f8c7 12c8 	str.w	r1, [r7, #712]	@ 0x2c8
 8001734:	4629      	mov	r1, r5
 8001736:	4319      	orrs	r1, r3
 8001738:	f8c7 12cc 	str.w	r1, [r7, #716]	@ 0x2cc
 800173c:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8001740:	330f      	adds	r3, #15
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2200      	movs	r2, #0
 8001748:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
 800174c:	f8c7 22c4 	str.w	r2, [r7, #708]	@ 0x2c4
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	f04f 0300 	mov.w	r3, #0
 8001758:	f8d7 12c0 	ldr.w	r1, [r7, #704]	@ 0x2c0
 800175c:	060b      	lsls	r3, r1, #24
 800175e:	2200      	movs	r2, #0
 8001760:	e9d7 45b2 	ldrd	r4, r5, [r7, #712]	@ 0x2c8
 8001764:	4621      	mov	r1, r4
 8001766:	4311      	orrs	r1, r2
 8001768:	f8c7 11d8 	str.w	r1, [r7, #472]	@ 0x1d8
 800176c:	4629      	mov	r1, r5
 800176e:	4319      	orrs	r1, r3
 8001770:	f8c7 11dc 	str.w	r1, [r7, #476]	@ 0x1dc
 8001774:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	@ 0x1d8
 8001778:	e9c7 34ee 	strd	r3, r4, [r7, #952]	@ 0x3b8

    /* Инициализация состояния */
    uint64_t v0 = 0x736f6d6570736575ULL;
 800177c:	f60f 3328 	addw	r3, pc, #2856	@ 0xb28
 8001780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001784:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	@ 0x3f8
    uint64_t v1 = 0x646f72616e646f6dULL;
 8001788:	f60f 3324 	addw	r3, pc, #2852	@ 0xb24
 800178c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001790:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	@ 0x3f0
    uint64_t v2 = 0x6c7967656e657261ULL;
 8001794:	f60f 3320 	addw	r3, pc, #2848	@ 0xb20
 8001798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179c:	e9c7 23fa 	strd	r2, r3, [r7, #1000]	@ 0x3e8
    uint64_t v3 = 0x7465646279746573ULL;
 80017a0:	f60f 331c 	addw	r3, pc, #2844	@ 0xb1c
 80017a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a8:	e9c7 23f8 	strd	r2, r3, [r7, #992]	@ 0x3e0

    /* Смешивание ключа с начальным состоянием */
    v0 ^= k0;
 80017ac:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	@ 0x3f8
 80017b0:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	@ 0x3c0
 80017b4:	ea80 0402 	eor.w	r4, r0, r2
 80017b8:	f8c7 41d0 	str.w	r4, [r7, #464]	@ 0x1d0
 80017bc:	404b      	eors	r3, r1
 80017be:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80017c2:	e9d7 3474 	ldrd	r3, r4, [r7, #464]	@ 0x1d0
 80017c6:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	@ 0x3f8
    v1 ^= k1;
 80017ca:	e9d7 01fc 	ldrd	r0, r1, [r7, #1008]	@ 0x3f0
 80017ce:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	@ 0x3b8
 80017d2:	ea80 0402 	eor.w	r4, r0, r2
 80017d6:	f8c7 41c8 	str.w	r4, [r7, #456]	@ 0x1c8
 80017da:	404b      	eors	r3, r1
 80017dc:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 80017e0:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	@ 0x1c8
 80017e4:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
    v2 ^= k0;
 80017e8:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	@ 0x3e8
 80017ec:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	@ 0x3c0
 80017f0:	ea80 0402 	eor.w	r4, r0, r2
 80017f4:	f8c7 41c0 	str.w	r4, [r7, #448]	@ 0x1c0
 80017f8:	404b      	eors	r3, r1
 80017fa:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80017fe:	e9d7 3470 	ldrd	r3, r4, [r7, #448]	@ 0x1c0
 8001802:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	@ 0x3e8
    v3 ^= k1;
 8001806:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	@ 0x3e0
 800180a:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	@ 0x3b8
 800180e:	ea80 0402 	eor.w	r4, r0, r2
 8001812:	f8c7 41b8 	str.w	r4, [r7, #440]	@ 0x1b8
 8001816:	404b      	eors	r3, r1
 8001818:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800181c:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	@ 0x1b8
 8001820:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0

    /* Обработка сообщения по блокам */
    const uint8_t* end = data + len - (len % 8);
 8001824:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8001828:	f023 0207 	bic.w	r2, r3, #7
 800182c:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001830:	4413      	add	r3, r2
 8001832:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
    const int left = len & 7;
 8001836:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
    uint64_t b = ((uint64_t)len) << 56;
 8001842:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8001846:	2200      	movs	r2, #0
 8001848:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 800184c:	f8c7 22bc 	str.w	r2, [r7, #700]	@ 0x2bc
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	f8d7 12b8 	ldr.w	r1, [r7, #696]	@ 0x2b8
 800185c:	060b      	lsls	r3, r1, #24
 800185e:	2200      	movs	r2, #0
 8001860:	e9c7 23f6 	strd	r2, r3, [r7, #984]	@ 0x3d8

    for (; data < end; data += 8) {
 8001864:	e1f9      	b.n	8001c5a <SipHash_2_4+0x85a>
        uint64_t m = U8TO64_LE(data);
 8001866:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2200      	movs	r2, #0
 8001870:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 8001874:	f8c7 22b4 	str.w	r2, [r7, #692]	@ 0x2b4
 8001878:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 800187c:	3301      	adds	r3, #1
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2200      	movs	r2, #0
 8001884:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 8001888:	f8c7 22ac 	str.w	r2, [r7, #684]	@ 0x2ac
 800188c:	f04f 0200 	mov.w	r2, #0
 8001890:	f04f 0300 	mov.w	r3, #0
 8001894:	e9d7 45aa 	ldrd	r4, r5, [r7, #680]	@ 0x2a8
 8001898:	4629      	mov	r1, r5
 800189a:	020b      	lsls	r3, r1, #8
 800189c:	4621      	mov	r1, r4
 800189e:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 80018a2:	4621      	mov	r1, r4
 80018a4:	020a      	lsls	r2, r1, #8
 80018a6:	e9d7 45ac 	ldrd	r4, r5, [r7, #688]	@ 0x2b0
 80018aa:	4621      	mov	r1, r4
 80018ac:	4311      	orrs	r1, r2
 80018ae:	f8c7 12a0 	str.w	r1, [r7, #672]	@ 0x2a0
 80018b2:	4629      	mov	r1, r5
 80018b4:	430b      	orrs	r3, r1
 80018b6:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 80018ba:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 80018be:	3302      	adds	r3, #2
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2200      	movs	r2, #0
 80018c6:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 80018ca:	f8c7 229c 	str.w	r2, [r7, #668]	@ 0x29c
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	f04f 0300 	mov.w	r3, #0
 80018d6:	e9d7 45a6 	ldrd	r4, r5, [r7, #664]	@ 0x298
 80018da:	4629      	mov	r1, r5
 80018dc:	040b      	lsls	r3, r1, #16
 80018de:	4621      	mov	r1, r4
 80018e0:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80018e4:	4621      	mov	r1, r4
 80018e6:	040a      	lsls	r2, r1, #16
 80018e8:	e9d7 45a8 	ldrd	r4, r5, [r7, #672]	@ 0x2a0
 80018ec:	4621      	mov	r1, r4
 80018ee:	4311      	orrs	r1, r2
 80018f0:	f8c7 1290 	str.w	r1, [r7, #656]	@ 0x290
 80018f4:	4629      	mov	r1, r5
 80018f6:	430b      	orrs	r3, r1
 80018f8:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 80018fc:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001900:	3303      	adds	r3, #3
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2200      	movs	r2, #0
 8001908:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 800190c:	f8c7 228c 	str.w	r2, [r7, #652]	@ 0x28c
 8001910:	e9d7 12a2 	ldrd	r1, r2, [r7, #648]	@ 0x288
 8001914:	460b      	mov	r3, r1
 8001916:	0a1b      	lsrs	r3, r3, #8
 8001918:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 800191c:	460b      	mov	r3, r1
 800191e:	061b      	lsls	r3, r3, #24
 8001920:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
 8001924:	e9d7 45a4 	ldrd	r4, r5, [r7, #656]	@ 0x290
 8001928:	4623      	mov	r3, r4
 800192a:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 800192e:	4602      	mov	r2, r0
 8001930:	4313      	orrs	r3, r2
 8001932:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
 8001936:	462b      	mov	r3, r5
 8001938:	460a      	mov	r2, r1
 800193a:	4313      	orrs	r3, r2
 800193c:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8001940:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001944:	3304      	adds	r3, #4
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2200      	movs	r2, #0
 800194c:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 8001950:	f8c7 2274 	str.w	r2, [r7, #628]	@ 0x274
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	f04f 0300 	mov.w	r3, #0
 800195c:	f8d7 1270 	ldr.w	r1, [r7, #624]	@ 0x270
 8001960:	000b      	movs	r3, r1
 8001962:	2200      	movs	r2, #0
 8001964:	e9d7 459e 	ldrd	r4, r5, [r7, #632]	@ 0x278
 8001968:	4621      	mov	r1, r4
 800196a:	4311      	orrs	r1, r2
 800196c:	f8c7 1268 	str.w	r1, [r7, #616]	@ 0x268
 8001970:	4629      	mov	r1, r5
 8001972:	430b      	orrs	r3, r1
 8001974:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 8001978:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 800197c:	3305      	adds	r3, #5
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2200      	movs	r2, #0
 8001984:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
 8001988:	f8c7 2264 	str.w	r2, [r7, #612]	@ 0x264
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	f04f 0300 	mov.w	r3, #0
 8001994:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 8001998:	020b      	lsls	r3, r1, #8
 800199a:	2200      	movs	r2, #0
 800199c:	e9d7 459a 	ldrd	r4, r5, [r7, #616]	@ 0x268
 80019a0:	4621      	mov	r1, r4
 80019a2:	4311      	orrs	r1, r2
 80019a4:	f8c7 1258 	str.w	r1, [r7, #600]	@ 0x258
 80019a8:	4629      	mov	r1, r5
 80019aa:	430b      	orrs	r3, r1
 80019ac:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 80019b0:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 80019b4:	3306      	adds	r3, #6
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2200      	movs	r2, #0
 80019bc:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 80019c0:	f8c7 2254 	str.w	r2, [r7, #596]	@ 0x254
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	f04f 0300 	mov.w	r3, #0
 80019cc:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 80019d0:	040b      	lsls	r3, r1, #16
 80019d2:	2200      	movs	r2, #0
 80019d4:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	@ 0x258
 80019d8:	4621      	mov	r1, r4
 80019da:	4311      	orrs	r1, r2
 80019dc:	f8c7 1248 	str.w	r1, [r7, #584]	@ 0x248
 80019e0:	4629      	mov	r1, r5
 80019e2:	430b      	orrs	r3, r1
 80019e4:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 80019e8:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 80019ec:	3307      	adds	r3, #7
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2200      	movs	r2, #0
 80019f4:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 80019f8:	f8c7 2244 	str.w	r2, [r7, #580]	@ 0x244
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	f04f 0300 	mov.w	r3, #0
 8001a04:	f8d7 1240 	ldr.w	r1, [r7, #576]	@ 0x240
 8001a08:	060b      	lsls	r3, r1, #24
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	e9d7 4592 	ldrd	r4, r5, [r7, #584]	@ 0x248
 8001a10:	4621      	mov	r1, r4
 8001a12:	4311      	orrs	r1, r2
 8001a14:	f8c7 11b0 	str.w	r1, [r7, #432]	@ 0x1b0
 8001a18:	4629      	mov	r1, r5
 8001a1a:	430b      	orrs	r3, r1
 8001a1c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8001a20:	e9d7 346c 	ldrd	r3, r4, [r7, #432]	@ 0x1b0
 8001a24:	e9c7 34ea 	strd	r3, r4, [r7, #936]	@ 0x3a8
        v3 ^= m;
 8001a28:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	@ 0x3e0
 8001a2c:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	@ 0x3a8
 8001a30:	ea80 0402 	eor.w	r4, r0, r2
 8001a34:	f8c7 41a8 	str.w	r4, [r7, #424]	@ 0x1a8
 8001a38:	404b      	eors	r3, r1
 8001a3a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8001a3e:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	@ 0x1a8
 8001a42:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0

        /* Сжимающие раунды */
        for (int i = 0; i < SIPHASH_CROUND; i++) {
 8001a46:	2300      	movs	r3, #0
 8001a48:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
 8001a4c:	e0ec      	b.n	8001c28 <SipHash_2_4+0x828>
            SIPROUND;
 8001a4e:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	@ 0x3f8
 8001a52:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	@ 0x3f0
 8001a56:	1884      	adds	r4, r0, r2
 8001a58:	f8c7 41a0 	str.w	r4, [r7, #416]	@ 0x1a0
 8001a5c:	eb41 0303 	adc.w	r3, r1, r3
 8001a60:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001a64:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	@ 0x1a0
 8001a68:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	@ 0x3f8
 8001a6c:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8001a70:	0cda      	lsrs	r2, r3, #19
 8001a72:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8001a76:	035b      	lsls	r3, r3, #13
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001a7e:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8001a82:	0cda      	lsrs	r2, r3, #19
 8001a84:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8001a88:	035b      	lsls	r3, r3, #13
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8001a90:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	@ 0x198
 8001a94:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
 8001a98:	e9d7 01fc 	ldrd	r0, r1, [r7, #1008]	@ 0x3f0
 8001a9c:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	@ 0x3f8
 8001aa0:	ea80 0402 	eor.w	r4, r0, r2
 8001aa4:	f8c7 4190 	str.w	r4, [r7, #400]	@ 0x190
 8001aa8:	404b      	eors	r3, r1
 8001aaa:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8001aae:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	@ 0x190
 8001ab2:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
 8001ab6:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	@ 0x3fc
 8001aba:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001abe:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8001ac2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8001ac6:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	@ 0x188
 8001aca:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	@ 0x3f8
 8001ace:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	@ 0x3e8
 8001ad2:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	@ 0x3e0
 8001ad6:	1884      	adds	r4, r0, r2
 8001ad8:	f8c7 4180 	str.w	r4, [r7, #384]	@ 0x180
 8001adc:	eb41 0303 	adc.w	r3, r1, r3
 8001ae0:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001ae4:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	@ 0x180
 8001ae8:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	@ 0x3e8
 8001aec:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8001af0:	0c1a      	lsrs	r2, r3, #16
 8001af2:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001af6:	041b      	lsls	r3, r3, #16
 8001af8:	4313      	orrs	r3, r2
 8001afa:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001afe:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001b02:	0c1a      	lsrs	r2, r3, #16
 8001b04:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8001b08:	041b      	lsls	r3, r3, #16
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8001b10:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 8001b14:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0
 8001b18:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	@ 0x3e0
 8001b1c:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	@ 0x3e8
 8001b20:	ea80 0402 	eor.w	r4, r0, r2
 8001b24:	f8c7 4170 	str.w	r4, [r7, #368]	@ 0x170
 8001b28:	404b      	eors	r3, r1
 8001b2a:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8001b2e:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	@ 0x170
 8001b32:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0
 8001b36:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	@ 0x3f8
 8001b3a:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	@ 0x3e0
 8001b3e:	1884      	adds	r4, r0, r2
 8001b40:	f8c7 4168 	str.w	r4, [r7, #360]	@ 0x168
 8001b44:	eb41 0303 	adc.w	r3, r1, r3
 8001b48:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001b4c:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	@ 0x168
 8001b50:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	@ 0x3f8
 8001b54:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8001b58:	0ada      	lsrs	r2, r3, #11
 8001b5a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001b5e:	055b      	lsls	r3, r3, #21
 8001b60:	4313      	orrs	r3, r2
 8001b62:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001b66:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001b6a:	0ada      	lsrs	r2, r3, #11
 8001b6c:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8001b70:	055b      	lsls	r3, r3, #21
 8001b72:	4313      	orrs	r3, r2
 8001b74:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8001b78:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	@ 0x160
 8001b7c:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0
 8001b80:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	@ 0x3e0
 8001b84:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	@ 0x3f8
 8001b88:	ea80 0402 	eor.w	r4, r0, r2
 8001b8c:	f8c7 4158 	str.w	r4, [r7, #344]	@ 0x158
 8001b90:	404b      	eors	r3, r1
 8001b92:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8001b96:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	@ 0x158
 8001b9a:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0
 8001b9e:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	@ 0x3e8
 8001ba2:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	@ 0x3f0
 8001ba6:	1884      	adds	r4, r0, r2
 8001ba8:	f8c7 4150 	str.w	r4, [r7, #336]	@ 0x150
 8001bac:	eb41 0303 	adc.w	r3, r1, r3
 8001bb0:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001bb4:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 8001bb8:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	@ 0x3e8
 8001bbc:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8001bc0:	0bda      	lsrs	r2, r3, #15
 8001bc2:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8001bc6:	045b      	lsls	r3, r3, #17
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001bce:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8001bd2:	0bda      	lsrs	r2, r3, #15
 8001bd4:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8001bd8:	045b      	lsls	r3, r3, #17
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8001be0:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	@ 0x148
 8001be4:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
 8001be8:	e9d7 01fc 	ldrd	r0, r1, [r7, #1008]	@ 0x3f0
 8001bec:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	@ 0x3e8
 8001bf0:	ea80 0402 	eor.w	r4, r0, r2
 8001bf4:	f8c7 4140 	str.w	r4, [r7, #320]	@ 0x140
 8001bf8:	404b      	eors	r3, r1
 8001bfa:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8001bfe:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 8001c02:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
 8001c06:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8001c0a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001c0e:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	@ 0x3e8
 8001c12:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001c16:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	@ 0x138
 8001c1a:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	@ 0x3e8
        for (int i = 0; i < SIPHASH_CROUND; i++) {
 8001c1e:	f8d7 33d4 	ldr.w	r3, [r7, #980]	@ 0x3d4
 8001c22:	3301      	adds	r3, #1
 8001c24:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
 8001c28:	f8d7 33d4 	ldr.w	r3, [r7, #980]	@ 0x3d4
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	f77f af0e 	ble.w	8001a4e <SipHash_2_4+0x64e>
        }

        v0 ^= m;
 8001c32:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	@ 0x3f8
 8001c36:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	@ 0x3a8
 8001c3a:	ea80 0402 	eor.w	r4, r0, r2
 8001c3e:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 8001c42:	404b      	eors	r3, r1
 8001c44:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8001c48:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 8001c4c:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	@ 0x3f8
    for (; data < end; data += 8) {
 8001c50:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001c54:	3308      	adds	r3, #8
 8001c56:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
 8001c5a:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 8001c5e:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8001c62:	429a      	cmp	r2, r3
 8001c64:	f4ff adff 	bcc.w	8001866 <SipHash_2_4+0x466>
    }

    /* Последний блок с дополнением */
    switch (left) {
 8001c68:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8001c6c:	2b07      	cmp	r3, #7
 8001c6e:	f200 80f6 	bhi.w	8001e5e <SipHash_2_4+0xa5e>
 8001c72:	a201      	add	r2, pc, #4	@ (adr r2, 8001c78 <SipHash_2_4+0x878>)
 8001c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c78:	08001e5f 	.word	0x08001e5f
 8001c7c:	08001e2b 	.word	0x08001e2b
 8001c80:	08001de3 	.word	0x08001de3
 8001c84:	08001d9b 	.word	0x08001d9b
 8001c88:	08001d53 	.word	0x08001d53
 8001c8c:	08001d15 	.word	0x08001d15
 8001c90:	08001cd7 	.word	0x08001cd7
 8001c94:	08001c99 	.word	0x08001c99
        case 7: b |= ((uint64_t)data[6]) << 48; /* fallthrough */
 8001c98:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001c9c:	3306      	adds	r3, #6
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 8001ca8:	f8c7 223c 	str.w	r2, [r7, #572]	@ 0x23c
 8001cac:	f04f 0000 	mov.w	r0, #0
 8001cb0:	f04f 0100 	mov.w	r1, #0
 8001cb4:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8001cb8:	0419      	lsls	r1, r3, #16
 8001cba:	2000      	movs	r0, #0
 8001cbc:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	@ 0x3d8
 8001cc0:	ea42 0400 	orr.w	r4, r2, r0
 8001cc4:	f8c7 4128 	str.w	r4, [r7, #296]	@ 0x128
 8001cc8:	430b      	orrs	r3, r1
 8001cca:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001cce:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	@ 0x128
 8001cd2:	e9c7 34f6 	strd	r3, r4, [r7, #984]	@ 0x3d8
        case 6: b |= ((uint64_t)data[5]) << 40; /* fallthrough */
 8001cd6:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001cda:	3305      	adds	r3, #5
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
 8001ce6:	f8c7 2234 	str.w	r2, [r7, #564]	@ 0x234
 8001cea:	f04f 0000 	mov.w	r0, #0
 8001cee:	f04f 0100 	mov.w	r1, #0
 8001cf2:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8001cf6:	0219      	lsls	r1, r3, #8
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	@ 0x3d8
 8001cfe:	ea42 0400 	orr.w	r4, r2, r0
 8001d02:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 8001d06:	430b      	orrs	r3, r1
 8001d08:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001d0c:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 8001d10:	e9c7 34f6 	strd	r3, r4, [r7, #984]	@ 0x3d8
        case 5: b |= ((uint64_t)data[4]) << 32; /* fallthrough */
 8001d14:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001d18:	3304      	adds	r3, #4
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 8001d24:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 8001d28:	f04f 0000 	mov.w	r0, #0
 8001d2c:	f04f 0100 	mov.w	r1, #0
 8001d30:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8001d34:	0019      	movs	r1, r3
 8001d36:	2000      	movs	r0, #0
 8001d38:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	@ 0x3d8
 8001d3c:	ea42 0400 	orr.w	r4, r2, r0
 8001d40:	f8c7 4118 	str.w	r4, [r7, #280]	@ 0x118
 8001d44:	430b      	orrs	r3, r1
 8001d46:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001d4a:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	@ 0x118
 8001d4e:	e9c7 34f6 	strd	r3, r4, [r7, #984]	@ 0x3d8
        case 4: b |= ((uint64_t)data[3]) << 24; /* fallthrough */
 8001d52:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001d56:	3303      	adds	r3, #3
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
 8001d62:	f8c7 2224 	str.w	r2, [r7, #548]	@ 0x224
 8001d66:	e9d7 1288 	ldrd	r1, r2, [r7, #544]	@ 0x220
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	0a1b      	lsrs	r3, r3, #8
 8001d6e:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8001d72:	460b      	mov	r3, r1
 8001d74:	061b      	lsls	r3, r3, #24
 8001d76:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 8001d7a:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	@ 0x3d8
 8001d7e:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	@ 0x218
 8001d82:	4621      	mov	r1, r4
 8001d84:	4311      	orrs	r1, r2
 8001d86:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 8001d8a:	4629      	mov	r1, r5
 8001d8c:	4319      	orrs	r1, r3
 8001d8e:	f8c7 1114 	str.w	r1, [r7, #276]	@ 0x114
 8001d92:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 8001d96:	e9c7 34f6 	strd	r3, r4, [r7, #984]	@ 0x3d8
        case 3: b |= ((uint64_t)data[2]) << 16; /* fallthrough */
 8001d9a:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001d9e:	3302      	adds	r3, #2
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2200      	movs	r2, #0
 8001da6:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8001daa:	f8c7 2214 	str.w	r2, [r7, #532]	@ 0x214
 8001dae:	f04f 0000 	mov.w	r0, #0
 8001db2:	f04f 0100 	mov.w	r1, #0
 8001db6:	e9d7 4584 	ldrd	r4, r5, [r7, #528]	@ 0x210
 8001dba:	462b      	mov	r3, r5
 8001dbc:	0419      	lsls	r1, r3, #16
 8001dbe:	4623      	mov	r3, r4
 8001dc0:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 8001dc4:	4623      	mov	r3, r4
 8001dc6:	0418      	lsls	r0, r3, #16
 8001dc8:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	@ 0x3d8
 8001dcc:	ea42 0400 	orr.w	r4, r2, r0
 8001dd0:	f8c7 4108 	str.w	r4, [r7, #264]	@ 0x108
 8001dd4:	430b      	orrs	r3, r1
 8001dd6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8001dda:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 8001dde:	e9c7 34f6 	strd	r3, r4, [r7, #984]	@ 0x3d8
        case 2: b |= ((uint64_t)data[1]) << 8;  /* fallthrough */
 8001de2:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001de6:	3301      	adds	r3, #1
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2200      	movs	r2, #0
 8001dee:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 8001df2:	f8c7 220c 	str.w	r2, [r7, #524]	@ 0x20c
 8001df6:	f04f 0000 	mov.w	r0, #0
 8001dfa:	f04f 0100 	mov.w	r1, #0
 8001dfe:	e9d7 4582 	ldrd	r4, r5, [r7, #520]	@ 0x208
 8001e02:	462b      	mov	r3, r5
 8001e04:	0219      	lsls	r1, r3, #8
 8001e06:	4623      	mov	r3, r4
 8001e08:	ea41 6113 	orr.w	r1, r1, r3, lsr #24
 8001e0c:	4623      	mov	r3, r4
 8001e0e:	0218      	lsls	r0, r3, #8
 8001e10:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	@ 0x3d8
 8001e14:	ea42 0400 	orr.w	r4, r2, r0
 8001e18:	f8c7 4100 	str.w	r4, [r7, #256]	@ 0x100
 8001e1c:	430b      	orrs	r3, r1
 8001e1e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001e22:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8001e26:	e9c7 34f6 	strd	r3, r4, [r7, #984]	@ 0x3d8
        case 1: b |= ((uint64_t)data[0]);       /* fallthrough */
 8001e2a:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2200      	movs	r2, #0
 8001e34:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 8001e38:	f8c7 2204 	str.w	r2, [r7, #516]	@ 0x204
 8001e3c:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	@ 0x3d8
 8001e40:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	@ 0x200
 8001e44:	4621      	mov	r1, r4
 8001e46:	4311      	orrs	r1, r2
 8001e48:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8001e4c:	4629      	mov	r1, r5
 8001e4e:	4319      	orrs	r1, r3
 8001e50:	f8c7 10fc 	str.w	r1, [r7, #252]	@ 0xfc
 8001e54:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 8001e58:	e9c7 34f6 	strd	r3, r4, [r7, #984]	@ 0x3d8
        case 0: break;
 8001e5c:	bf00      	nop
    }

    v3 ^= b;
 8001e5e:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	@ 0x3e0
 8001e62:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	@ 0x3d8
 8001e66:	ea80 0402 	eor.w	r4, r0, r2
 8001e6a:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 8001e6e:	404b      	eors	r3, r1
 8001e70:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001e74:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 8001e78:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0

    /* Сжимающие раунды для последнего блока */
    for (int i = 0; i < SIPHASH_CROUND; i++) {
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
 8001e82:	e0ec      	b.n	800205e <SipHash_2_4+0xc5e>
        SIPROUND;
 8001e84:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	@ 0x3f8
 8001e88:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	@ 0x3f0
 8001e8c:	1884      	adds	r4, r0, r2
 8001e8e:	f8c7 40e8 	str.w	r4, [r7, #232]	@ 0xe8
 8001e92:	eb41 0303 	adc.w	r3, r1, r3
 8001e96:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001e9a:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	@ 0xe8
 8001e9e:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	@ 0x3f8
 8001ea2:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8001ea6:	0cda      	lsrs	r2, r3, #19
 8001ea8:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8001eac:	035b      	lsls	r3, r3, #13
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001eb4:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8001eb8:	0cda      	lsrs	r2, r3, #19
 8001eba:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8001ebe:	035b      	lsls	r3, r3, #13
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001ec6:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 8001eca:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
 8001ece:	e9d7 01fc 	ldrd	r0, r1, [r7, #1008]	@ 0x3f0
 8001ed2:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	@ 0x3f8
 8001ed6:	ea80 0402 	eor.w	r4, r0, r2
 8001eda:	f8c7 40d8 	str.w	r4, [r7, #216]	@ 0xd8
 8001ede:	404b      	eors	r3, r1
 8001ee0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001ee4:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	@ 0xd8
 8001ee8:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
 8001eec:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	@ 0x3fc
 8001ef0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001ef4:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8001ef8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001efc:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8001f00:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	@ 0x3f8
 8001f04:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	@ 0x3e8
 8001f08:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	@ 0x3e0
 8001f0c:	1884      	adds	r4, r0, r2
 8001f0e:	f8c7 40c8 	str.w	r4, [r7, #200]	@ 0xc8
 8001f12:	eb41 0303 	adc.w	r3, r1, r3
 8001f16:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001f1a:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8001f1e:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	@ 0x3e8
 8001f22:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8001f26:	0c1a      	lsrs	r2, r3, #16
 8001f28:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001f2c:	041b      	lsls	r3, r3, #16
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001f34:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001f38:	0c1a      	lsrs	r2, r3, #16
 8001f3a:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8001f3e:	041b      	lsls	r3, r3, #16
 8001f40:	4313      	orrs	r3, r2
 8001f42:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001f46:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8001f4a:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0
 8001f4e:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	@ 0x3e0
 8001f52:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	@ 0x3e8
 8001f56:	ea80 0402 	eor.w	r4, r0, r2
 8001f5a:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 8001f5e:	404b      	eors	r3, r1
 8001f60:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001f64:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 8001f68:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0
 8001f6c:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	@ 0x3f8
 8001f70:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	@ 0x3e0
 8001f74:	1884      	adds	r4, r0, r2
 8001f76:	f8c7 40b0 	str.w	r4, [r7, #176]	@ 0xb0
 8001f7a:	eb41 0303 	adc.w	r3, r1, r3
 8001f7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001f82:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	@ 0xb0
 8001f86:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	@ 0x3f8
 8001f8a:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8001f8e:	0ada      	lsrs	r2, r3, #11
 8001f90:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001f94:	055b      	lsls	r3, r3, #21
 8001f96:	4313      	orrs	r3, r2
 8001f98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001f9c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001fa0:	0ada      	lsrs	r2, r3, #11
 8001fa2:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8001fa6:	055b      	lsls	r3, r3, #21
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001fae:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8001fb2:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0
 8001fb6:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	@ 0x3e0
 8001fba:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	@ 0x3f8
 8001fbe:	ea80 0402 	eor.w	r4, r0, r2
 8001fc2:	f8c7 40a0 	str.w	r4, [r7, #160]	@ 0xa0
 8001fc6:	404b      	eors	r3, r1
 8001fc8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001fcc:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	@ 0xa0
 8001fd0:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0
 8001fd4:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	@ 0x3e8
 8001fd8:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	@ 0x3f0
 8001fdc:	1884      	adds	r4, r0, r2
 8001fde:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 8001fe2:	eb41 0303 	adc.w	r3, r1, r3
 8001fe6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001fea:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8001fee:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	@ 0x3e8
 8001ff2:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8001ff6:	0bda      	lsrs	r2, r3, #15
 8001ff8:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8001ffc:	045b      	lsls	r3, r3, #17
 8001ffe:	4313      	orrs	r3, r2
 8002000:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002004:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8002008:	0bda      	lsrs	r2, r3, #15
 800200a:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 800200e:	045b      	lsls	r3, r3, #17
 8002010:	4313      	orrs	r3, r2
 8002012:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002016:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 800201a:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
 800201e:	e9d7 01fc 	ldrd	r0, r1, [r7, #1008]	@ 0x3f0
 8002022:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	@ 0x3e8
 8002026:	ea80 0402 	eor.w	r4, r0, r2
 800202a:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 800202e:	404b      	eors	r3, r1
 8002030:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002034:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 8002038:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
 800203c:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8002040:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002044:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	@ 0x3e8
 8002048:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800204c:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 8002050:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	@ 0x3e8
    for (int i = 0; i < SIPHASH_CROUND; i++) {
 8002054:	f8d7 33d0 	ldr.w	r3, [r7, #976]	@ 0x3d0
 8002058:	3301      	adds	r3, #1
 800205a:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
 800205e:	f8d7 33d0 	ldr.w	r3, [r7, #976]	@ 0x3d0
 8002062:	2b01      	cmp	r3, #1
 8002064:	f77f af0e 	ble.w	8001e84 <SipHash_2_4+0xa84>
    }

    v0 ^= b;
 8002068:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	@ 0x3f8
 800206c:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	@ 0x3d8
 8002070:	ea80 0402 	eor.w	r4, r0, r2
 8002074:	67bc      	str	r4, [r7, #120]	@ 0x78
 8002076:	404b      	eors	r3, r1
 8002078:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800207a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 800207e:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	@ 0x3f8

    /* Финализирующие раунды */
    v2 ^= 0xff;
 8002082:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	@ 0x3e8
 8002086:	f082 01ff 	eor.w	r1, r2, #255	@ 0xff
 800208a:	6739      	str	r1, [r7, #112]	@ 0x70
 800208c:	677b      	str	r3, [r7, #116]	@ 0x74
 800208e:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	@ 0x70
 8002092:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	@ 0x3e8
    for (int i = 0; i < SIPHASH_FROUND; i++) {
 8002096:	2300      	movs	r3, #0
 8002098:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 800209c:	e0d0      	b.n	8002240 <SipHash_2_4+0xe40>
        SIPROUND;
 800209e:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	@ 0x3f8
 80020a2:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	@ 0x3f0
 80020a6:	1884      	adds	r4, r0, r2
 80020a8:	66bc      	str	r4, [r7, #104]	@ 0x68
 80020aa:	eb41 0303 	adc.w	r3, r1, r3
 80020ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80020b0:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 80020b4:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	@ 0x3f8
 80020b8:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 80020bc:	0cda      	lsrs	r2, r3, #19
 80020be:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 80020c2:	035b      	lsls	r3, r3, #13
 80020c4:	4313      	orrs	r3, r2
 80020c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80020c8:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 80020cc:	0cda      	lsrs	r2, r3, #19
 80020ce:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 80020d2:	035b      	lsls	r3, r3, #13
 80020d4:	4313      	orrs	r3, r2
 80020d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80020d8:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	@ 0x60
 80020dc:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
 80020e0:	e9d7 01fc 	ldrd	r0, r1, [r7, #1008]	@ 0x3f0
 80020e4:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	@ 0x3f8
 80020e8:	ea80 0402 	eor.w	r4, r0, r2
 80020ec:	65bc      	str	r4, [r7, #88]	@ 0x58
 80020ee:	404b      	eors	r3, r1
 80020f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80020f2:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 80020f6:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
 80020fa:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	@ 0x3fc
 80020fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8002100:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8002104:	657b      	str	r3, [r7, #84]	@ 0x54
 8002106:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 800210a:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	@ 0x3f8
 800210e:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	@ 0x3e8
 8002112:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	@ 0x3e0
 8002116:	1884      	adds	r4, r0, r2
 8002118:	64bc      	str	r4, [r7, #72]	@ 0x48
 800211a:	eb41 0303 	adc.w	r3, r1, r3
 800211e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002120:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8002124:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	@ 0x3e8
 8002128:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 800212c:	0c1a      	lsrs	r2, r3, #16
 800212e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8002132:	041b      	lsls	r3, r3, #16
 8002134:	4313      	orrs	r3, r2
 8002136:	647b      	str	r3, [r7, #68]	@ 0x44
 8002138:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800213c:	0c1a      	lsrs	r2, r3, #16
 800213e:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8002142:	041b      	lsls	r3, r3, #16
 8002144:	4313      	orrs	r3, r2
 8002146:	643b      	str	r3, [r7, #64]	@ 0x40
 8002148:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800214c:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0
 8002150:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	@ 0x3e0
 8002154:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	@ 0x3e8
 8002158:	ea80 0402 	eor.w	r4, r0, r2
 800215c:	63bc      	str	r4, [r7, #56]	@ 0x38
 800215e:	404b      	eors	r3, r1
 8002160:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002162:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8002166:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0
 800216a:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	@ 0x3f8
 800216e:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	@ 0x3e0
 8002172:	1884      	adds	r4, r0, r2
 8002174:	633c      	str	r4, [r7, #48]	@ 0x30
 8002176:	eb41 0303 	adc.w	r3, r1, r3
 800217a:	637b      	str	r3, [r7, #52]	@ 0x34
 800217c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8002180:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	@ 0x3f8
 8002184:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8002188:	0ada      	lsrs	r2, r3, #11
 800218a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800218e:	055b      	lsls	r3, r3, #21
 8002190:	4313      	orrs	r3, r2
 8002192:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002194:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8002198:	0ada      	lsrs	r2, r3, #11
 800219a:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 800219e:	055b      	lsls	r3, r3, #21
 80021a0:	4313      	orrs	r3, r2
 80021a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021a4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80021a8:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0
 80021ac:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	@ 0x3e0
 80021b0:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	@ 0x3f8
 80021b4:	ea80 0402 	eor.w	r4, r0, r2
 80021b8:	623c      	str	r4, [r7, #32]
 80021ba:	404b      	eors	r3, r1
 80021bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80021be:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80021c2:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0
 80021c6:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	@ 0x3e8
 80021ca:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	@ 0x3f0
 80021ce:	1884      	adds	r4, r0, r2
 80021d0:	61bc      	str	r4, [r7, #24]
 80021d2:	eb41 0303 	adc.w	r3, r1, r3
 80021d6:	61fb      	str	r3, [r7, #28]
 80021d8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80021dc:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	@ 0x3e8
 80021e0:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 80021e4:	0bda      	lsrs	r2, r3, #15
 80021e6:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 80021ea:	045b      	lsls	r3, r3, #17
 80021ec:	4313      	orrs	r3, r2
 80021ee:	617b      	str	r3, [r7, #20]
 80021f0:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 80021f4:	0bda      	lsrs	r2, r3, #15
 80021f6:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 80021fa:	045b      	lsls	r3, r3, #17
 80021fc:	4313      	orrs	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002204:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
 8002208:	e9d7 01fc 	ldrd	r0, r1, [r7, #1008]	@ 0x3f0
 800220c:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	@ 0x3e8
 8002210:	ea80 0402 	eor.w	r4, r0, r2
 8002214:	60bc      	str	r4, [r7, #8]
 8002216:	404b      	eors	r3, r1
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800221e:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
 8002222:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8002226:	603b      	str	r3, [r7, #0]
 8002228:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	@ 0x3e8
 800222c:	607b      	str	r3, [r7, #4]
 800222e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002232:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	@ 0x3e8
    for (int i = 0; i < SIPHASH_FROUND; i++) {
 8002236:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 800223a:	3301      	adds	r3, #1
 800223c:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 8002240:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 8002244:	2b03      	cmp	r3, #3
 8002246:	f77f af2a 	ble.w	800209e <SipHash_2_4+0xc9e>
    }

    /* Финальное XOR смешивание */
    return v0 ^ v1 ^ v2 ^ v3;
 800224a:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	@ 0x3f8
 800224e:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	@ 0x3f0
 8002252:	ea80 0402 	eor.w	r4, r0, r2
 8002256:	f8c7 41f8 	str.w	r4, [r7, #504]	@ 0x1f8
 800225a:	404b      	eors	r3, r1
 800225c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
 8002260:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	@ 0x3e8
 8002264:	e9d7 457e 	ldrd	r4, r5, [r7, #504]	@ 0x1f8
 8002268:	4621      	mov	r1, r4
 800226a:	4051      	eors	r1, r2
 800226c:	f8c7 11f0 	str.w	r1, [r7, #496]	@ 0x1f0
 8002270:	4629      	mov	r1, r5
 8002272:	4059      	eors	r1, r3
 8002274:	f8c7 11f4 	str.w	r1, [r7, #500]	@ 0x1f4
 8002278:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	@ 0x3e0
 800227c:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 8002280:	4621      	mov	r1, r4
 8002282:	4051      	eors	r1, r2
 8002284:	f8c7 11e8 	str.w	r1, [r7, #488]	@ 0x1e8
 8002288:	4629      	mov	r1, r5
 800228a:	4059      	eors	r1, r3
 800228c:	f8c7 11ec 	str.w	r1, [r7, #492]	@ 0x1ec
 8002290:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
}
 8002294:	4610      	mov	r0, r2
 8002296:	4619      	mov	r1, r3
 8002298:	f207 4704 	addw	r7, r7, #1028	@ 0x404
 800229c:	46bd      	mov	sp, r7
 800229e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80022a2:	4770      	bx	lr
 80022a4:	f3af 8000 	nop.w
 80022a8:	70736575 	.word	0x70736575
 80022ac:	736f6d65 	.word	0x736f6d65
 80022b0:	6e646f6d 	.word	0x6e646f6d
 80022b4:	646f7261 	.word	0x646f7261
 80022b8:	6e657261 	.word	0x6e657261
 80022bc:	6c796765 	.word	0x6c796765
 80022c0:	79746573 	.word	0x79746573
 80022c4:	74656462 	.word	0x74656462

080022c8 <SipHash_2_4_MAC>:

void SipHash_2_4_MAC(const uint8_t* key, const uint8_t* data, size_t len, uint8_t* out) {
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
 80022d4:	603b      	str	r3, [r7, #0]
    uint64_t h = SipHash_2_4(key, data, len);
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	68b9      	ldr	r1, [r7, #8]
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f7ff f890 	bl	8001400 <SipHash_2_4>
 80022e0:	e9c7 0104 	strd	r0, r1, [r7, #16]
    U64TO8_LE(out, h);
 80022e4:	7c3a      	ldrb	r2, [r7, #16]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	701a      	strb	r2, [r3, #0]
 80022ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022ee:	f04f 0200 	mov.w	r2, #0
 80022f2:	f04f 0300 	mov.w	r3, #0
 80022f6:	0a02      	lsrs	r2, r0, #8
 80022f8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80022fc:	0a0b      	lsrs	r3, r1, #8
 80022fe:	6839      	ldr	r1, [r7, #0]
 8002300:	3101      	adds	r1, #1
 8002302:	b2d3      	uxtb	r3, r2
 8002304:	700b      	strb	r3, [r1, #0]
 8002306:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800230a:	f04f 0200 	mov.w	r2, #0
 800230e:	f04f 0300 	mov.w	r3, #0
 8002312:	0c02      	lsrs	r2, r0, #16
 8002314:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002318:	0c0b      	lsrs	r3, r1, #16
 800231a:	6839      	ldr	r1, [r7, #0]
 800231c:	3102      	adds	r1, #2
 800231e:	b2d3      	uxtb	r3, r2
 8002320:	700b      	strb	r3, [r1, #0]
 8002322:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	0e02      	lsrs	r2, r0, #24
 8002330:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002334:	0e0b      	lsrs	r3, r1, #24
 8002336:	6839      	ldr	r1, [r7, #0]
 8002338:	3103      	adds	r1, #3
 800233a:	b2d3      	uxtb	r3, r2
 800233c:	700b      	strb	r3, [r1, #0]
 800233e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	f04f 0300 	mov.w	r3, #0
 800234a:	000a      	movs	r2, r1
 800234c:	2300      	movs	r3, #0
 800234e:	6839      	ldr	r1, [r7, #0]
 8002350:	3104      	adds	r1, #4
 8002352:	b2d3      	uxtb	r3, r2
 8002354:	700b      	strb	r3, [r1, #0]
 8002356:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800235a:	f04f 0200 	mov.w	r2, #0
 800235e:	f04f 0300 	mov.w	r3, #0
 8002362:	0a0a      	lsrs	r2, r1, #8
 8002364:	2300      	movs	r3, #0
 8002366:	6839      	ldr	r1, [r7, #0]
 8002368:	3105      	adds	r1, #5
 800236a:	b2d3      	uxtb	r3, r2
 800236c:	700b      	strb	r3, [r1, #0]
 800236e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	f04f 0300 	mov.w	r3, #0
 800237a:	0c0a      	lsrs	r2, r1, #16
 800237c:	2300      	movs	r3, #0
 800237e:	6839      	ldr	r1, [r7, #0]
 8002380:	3106      	adds	r1, #6
 8002382:	b2d3      	uxtb	r3, r2
 8002384:	700b      	strb	r3, [r1, #0]
 8002386:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800238a:	f04f 0200 	mov.w	r2, #0
 800238e:	f04f 0300 	mov.w	r3, #0
 8002392:	0e0a      	lsrs	r2, r1, #24
 8002394:	2300      	movs	r3, #0
 8002396:	6839      	ldr	r1, [r7, #0]
 8002398:	3107      	adds	r1, #7
 800239a:	b2d3      	uxtb	r3, r2
 800239c:	700b      	strb	r3, [r1, #0]
}
 800239e:	bf00      	nop
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <bytes_to_word>:
#define SPECK_BETA  3  // Параметр ротации

/**
 * @brief Преобразовать массив байтов в 32-битное слово (little-endian)
 */
static uint32_t bytes_to_word(const uint8_t* bytes) {
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
    return ((uint32_t)bytes[0]) |
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	461a      	mov	r2, r3
           ((uint32_t)bytes[1] << 8) |
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3301      	adds	r3, #1
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	021b      	lsls	r3, r3, #8
    return ((uint32_t)bytes[0]) |
 80023bc:	431a      	orrs	r2, r3
           ((uint32_t)bytes[2] << 16) |
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3302      	adds	r3, #2
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	041b      	lsls	r3, r3, #16
           ((uint32_t)bytes[1] << 8) |
 80023c6:	431a      	orrs	r2, r3
           ((uint32_t)bytes[3] << 24);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3303      	adds	r3, #3
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	061b      	lsls	r3, r3, #24
           ((uint32_t)bytes[2] << 16) |
 80023d0:	4313      	orrs	r3, r2
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <word_to_bytes>:

/**
 * @brief Преобразовать 32-битное слово в массив байтов (little-endian)
 */
static void word_to_bytes(uint32_t word, uint8_t* bytes) {
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	6039      	str	r1, [r7, #0]
    bytes[0] = (uint8_t)(word);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	701a      	strb	r2, [r3, #0]
    bytes[1] = (uint8_t)(word >> 8);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	0a1a      	lsrs	r2, r3, #8
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	3301      	adds	r3, #1
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	701a      	strb	r2, [r3, #0]
    bytes[2] = (uint8_t)(word >> 16);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	0c1a      	lsrs	r2, r3, #16
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	3302      	adds	r3, #2
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	701a      	strb	r2, [r3, #0]
    bytes[3] = (uint8_t)(word >> 24);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	0e1a      	lsrs	r2, r3, #24
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	3303      	adds	r3, #3
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	701a      	strb	r2, [r3, #0]
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <Speck_Init>:

void Speck_Init(SpeckContext* ctx, const uint8_t* key) {
 8002420:	b590      	push	{r4, r7, lr}
 8002422:	b08b      	sub	sp, #44	@ 0x2c
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
    uint32_t k[4]; // Ключевые слова
    uint32_t l[3]; // Вспомогательные ключевые слова

    // Преобразуем ключ (16 байт) в слова
    k[0] = bytes_to_word(key);
 800242a:	6838      	ldr	r0, [r7, #0]
 800242c:	f7ff ffbb 	bl	80023a6 <bytes_to_word>
 8002430:	4603      	mov	r3, r0
 8002432:	617b      	str	r3, [r7, #20]
    l[0] = bytes_to_word(key + 4);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	3304      	adds	r3, #4
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff ffb4 	bl	80023a6 <bytes_to_word>
 800243e:	4603      	mov	r3, r0
 8002440:	60bb      	str	r3, [r7, #8]
    l[1] = bytes_to_word(key + 8);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	3308      	adds	r3, #8
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff ffad 	bl	80023a6 <bytes_to_word>
 800244c:	4603      	mov	r3, r0
 800244e:	60fb      	str	r3, [r7, #12]
    l[2] = bytes_to_word(key + 12);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	330c      	adds	r3, #12
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff ffa6 	bl	80023a6 <bytes_to_word>
 800245a:	4603      	mov	r3, r0
 800245c:	613b      	str	r3, [r7, #16]

    // Генерация ключей раундов
    ctx->round_keys[0] = k[0];
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < SPECK_ROUNDS - 1; i++) {
 8002464:	2300      	movs	r3, #0
 8002466:	627b      	str	r3, [r7, #36]	@ 0x24
 8002468:	e075      	b.n	8002556 <Speck_Init+0x136>
        l[i % 3] = (ROTR32(l[i % 3], SPECK_ALPHA) + k[(i + 1) % 4]) ^ i;
 800246a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800246c:	4b3e      	ldr	r3, [pc, #248]	@ (8002568 <Speck_Init+0x148>)
 800246e:	fb83 3201 	smull	r3, r2, r3, r1
 8002472:	17cb      	asrs	r3, r1, #31
 8002474:	1ad2      	subs	r2, r2, r3
 8002476:	4613      	mov	r3, r2
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	4413      	add	r3, r2
 800247c:	1aca      	subs	r2, r1, r3
 800247e:	0093      	lsls	r3, r2, #2
 8002480:	3328      	adds	r3, #40	@ 0x28
 8002482:	443b      	add	r3, r7
 8002484:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002488:	ea4f 2233 	mov.w	r2, r3, ror #8
 800248c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248e:	3301      	adds	r3, #1
 8002490:	4259      	negs	r1, r3
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	f001 0103 	and.w	r1, r1, #3
 800249a:	bf58      	it	pl
 800249c:	424b      	negpl	r3, r1
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	3328      	adds	r3, #40	@ 0x28
 80024a2:	443b      	add	r3, r7
 80024a4:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80024a8:	18d4      	adds	r4, r2, r3
 80024aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80024ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80024ae:	4b2e      	ldr	r3, [pc, #184]	@ (8002568 <Speck_Init+0x148>)
 80024b0:	fb83 3201 	smull	r3, r2, r3, r1
 80024b4:	17cb      	asrs	r3, r1, #31
 80024b6:	1ad2      	subs	r2, r2, r3
 80024b8:	4613      	mov	r3, r2
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	4413      	add	r3, r2
 80024be:	1aca      	subs	r2, r1, r3
 80024c0:	ea84 0100 	eor.w	r1, r4, r0
 80024c4:	0093      	lsls	r3, r2, #2
 80024c6:	3328      	adds	r3, #40	@ 0x28
 80024c8:	443b      	add	r3, r7
 80024ca:	f843 1c20 	str.w	r1, [r3, #-32]
        k[(i + 1) % 4] = ROTL32(k[(i + 1) % 4], SPECK_BETA) ^ l[i % 3];
 80024ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d0:	3301      	adds	r3, #1
 80024d2:	425a      	negs	r2, r3
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	f002 0203 	and.w	r2, r2, #3
 80024dc:	bf58      	it	pl
 80024de:	4253      	negpl	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	3328      	adds	r3, #40	@ 0x28
 80024e4:	443b      	add	r3, r7
 80024e6:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80024ea:	ea4f 7073 	mov.w	r0, r3, ror #29
 80024ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80024f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002568 <Speck_Init+0x148>)
 80024f2:	fb83 3201 	smull	r3, r2, r3, r1
 80024f6:	17cb      	asrs	r3, r1, #31
 80024f8:	1ad2      	subs	r2, r2, r3
 80024fa:	4613      	mov	r3, r2
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	4413      	add	r3, r2
 8002500:	1aca      	subs	r2, r1, r3
 8002502:	0093      	lsls	r3, r2, #2
 8002504:	3328      	adds	r3, #40	@ 0x28
 8002506:	443b      	add	r3, r7
 8002508:	f853 2c20 	ldr.w	r2, [r3, #-32]
 800250c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250e:	3301      	adds	r3, #1
 8002510:	4259      	negs	r1, r3
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	f001 0103 	and.w	r1, r1, #3
 800251a:	bf58      	it	pl
 800251c:	424b      	negpl	r3, r1
 800251e:	4042      	eors	r2, r0
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	3328      	adds	r3, #40	@ 0x28
 8002524:	443b      	add	r3, r7
 8002526:	f843 2c14 	str.w	r2, [r3, #-20]
        ctx->round_keys[i + 1] = k[(i + 1) % 4];
 800252a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252c:	3301      	adds	r3, #1
 800252e:	425a      	negs	r2, r3
 8002530:	f003 0303 	and.w	r3, r3, #3
 8002534:	f002 0203 	and.w	r2, r2, #3
 8002538:	bf58      	it	pl
 800253a:	4253      	negpl	r3, r2
 800253c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800253e:	3201      	adds	r2, #1
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	3328      	adds	r3, #40	@ 0x28
 8002544:	443b      	add	r3, r7
 8002546:	f853 1c14 	ldr.w	r1, [r3, #-20]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < SPECK_ROUNDS - 1; i++) {
 8002550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002552:	3301      	adds	r3, #1
 8002554:	627b      	str	r3, [r7, #36]	@ 0x24
 8002556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002558:	2b19      	cmp	r3, #25
 800255a:	dd86      	ble.n	800246a <Speck_Init+0x4a>
    }
}
 800255c:	bf00      	nop
 800255e:	bf00      	nop
 8002560:	372c      	adds	r7, #44	@ 0x2c
 8002562:	46bd      	mov	sp, r7
 8002564:	bd90      	pop	{r4, r7, pc}
 8002566:	bf00      	nop
 8002568:	55555556 	.word	0x55555556

0800256c <Speck_Encrypt>:

void Speck_Encrypt(const SpeckContext* ctx, const uint8_t* plaintext, uint8_t* ciphertext) {
 800256c:	b580      	push	{r7, lr}
 800256e:	b088      	sub	sp, #32
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
    uint32_t x, y;

    // Преобразуем блок в два 32-битных слова
    x = bytes_to_word(plaintext);
 8002578:	68b8      	ldr	r0, [r7, #8]
 800257a:	f7ff ff14 	bl	80023a6 <bytes_to_word>
 800257e:	61f8      	str	r0, [r7, #28]
    y = bytes_to_word(plaintext + 4);
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	3304      	adds	r3, #4
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff ff0e 	bl	80023a6 <bytes_to_word>
 800258a:	61b8      	str	r0, [r7, #24]

    // Раунды шифрования
    for (int i = 0; i < SPECK_ROUNDS; i++) {
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	e013      	b.n	80025ba <Speck_Encrypt+0x4e>
        x = (ROTR32(x, SPECK_ALPHA) + y) ^ ctx->round_keys[i];
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	ea4f 2233 	mov.w	r2, r3, ror #8
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	441a      	add	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6979      	ldr	r1, [r7, #20]
 80025a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80025a4:	4053      	eors	r3, r2
 80025a6:	61fb      	str	r3, [r7, #28]
        y = ROTL32(y, SPECK_BETA) ^ x;
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	ea4f 7373 	mov.w	r3, r3, ror #29
 80025ae:	69fa      	ldr	r2, [r7, #28]
 80025b0:	4053      	eors	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < SPECK_ROUNDS; i++) {
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	3301      	adds	r3, #1
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	2b1a      	cmp	r3, #26
 80025be:	dde8      	ble.n	8002592 <Speck_Encrypt+0x26>
    }

    // Преобразуем обратно в байты
    word_to_bytes(x, ciphertext);
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	69f8      	ldr	r0, [r7, #28]
 80025c4:	f7ff ff0b 	bl	80023de <word_to_bytes>
    word_to_bytes(y, ciphertext + 4);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3304      	adds	r3, #4
 80025cc:	4619      	mov	r1, r3
 80025ce:	69b8      	ldr	r0, [r7, #24]
 80025d0:	f7ff ff05 	bl	80023de <word_to_bytes>
}
 80025d4:	bf00      	nop
 80025d6:	3720      	adds	r7, #32
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <Speck_Decrypt>:

void Speck_Decrypt(const SpeckContext* ctx, const uint8_t* ciphertext, uint8_t* plaintext) {
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
    uint32_t x, y;

    // Преобразуем блок в два 32-битных слова
    x = bytes_to_word(ciphertext);
 80025e8:	68b8      	ldr	r0, [r7, #8]
 80025ea:	f7ff fedc 	bl	80023a6 <bytes_to_word>
 80025ee:	61f8      	str	r0, [r7, #28]
    y = bytes_to_word(ciphertext + 4);
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	3304      	adds	r3, #4
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff fed6 	bl	80023a6 <bytes_to_word>
 80025fa:	61b8      	str	r0, [r7, #24]

    // Раунды расшифрования (в обратном порядке)
    for (int i = SPECK_ROUNDS - 1; i >= 0; i--) {
 80025fc:	231a      	movs	r3, #26
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	e013      	b.n	800262a <Speck_Decrypt+0x4e>
        y = ROTR32(y ^ x, SPECK_BETA);
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	4053      	eors	r3, r2
 8002608:	ea4f 03f3 	mov.w	r3, r3, ror #3
 800260c:	61bb      	str	r3, [r7, #24]
        x = ROTL32((x ^ ctx->round_keys[i]) - y, SPECK_ALPHA);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	405a      	eors	r2, r3
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	ea4f 6333 	mov.w	r3, r3, ror #24
 8002622:	61fb      	str	r3, [r7, #28]
    for (int i = SPECK_ROUNDS - 1; i >= 0; i--) {
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	3b01      	subs	r3, #1
 8002628:	617b      	str	r3, [r7, #20]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	2b00      	cmp	r3, #0
 800262e:	dae8      	bge.n	8002602 <Speck_Decrypt+0x26>
    }

    // Преобразуем обратно в байты
    word_to_bytes(x, plaintext);
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	69f8      	ldr	r0, [r7, #28]
 8002634:	f7ff fed3 	bl	80023de <word_to_bytes>
    word_to_bytes(y, plaintext + 4);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3304      	adds	r3, #4
 800263c:	4619      	mov	r1, r3
 800263e:	69b8      	ldr	r0, [r7, #24]
 8002640:	f7ff fecd 	bl	80023de <word_to_bytes>
}
 8002644:	bf00      	nop
 8002646:	3720      	adds	r7, #32
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <add_pkcs7_padding>:

/**
 * @brief Добавление дополнения PKCS#7 для блочного шифрования
 */
static void add_pkcs7_padding(uint8_t* data, size_t data_len, size_t block_size) {
 800264c:	b480      	push	{r7}
 800264e:	b087      	sub	sp, #28
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
    uint8_t padding_value = block_size - (data_len % block_size);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	b2da      	uxtb	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	fbb3 f1f1 	udiv	r1, r3, r1
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	fb00 f101 	mul.w	r1, r0, r1
 800266a:	1a5b      	subs	r3, r3, r1
 800266c:	b2db      	uxtb	r3, r3
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	74fb      	strb	r3, [r7, #19]
    for (size_t i = 0; i < padding_value; i++) {
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	e009      	b.n	800268c <add_pkcs7_padding+0x40>
        data[data_len + i] = padding_value;
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	4413      	add	r3, r2
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	4413      	add	r3, r2
 8002682:	7cfa      	ldrb	r2, [r7, #19]
 8002684:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < padding_value; i++) {
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	3301      	adds	r3, #1
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	7cfb      	ldrb	r3, [r7, #19]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	429a      	cmp	r2, r3
 8002692:	d3f1      	bcc.n	8002678 <add_pkcs7_padding+0x2c>
    }
}
 8002694:	bf00      	nop
 8002696:	bf00      	nop
 8002698:	371c      	adds	r7, #28
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <remove_pkcs7_padding>:

/**
 * @brief Удаление дополнения PKCS#7 после расшифрования
 */
static size_t remove_pkcs7_padding(uint8_t* data, size_t data_len) {
 80026a2:	b480      	push	{r7}
 80026a4:	b085      	sub	sp, #20
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	6039      	str	r1, [r7, #0]
    if (data_len == 0) return 0;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <remove_pkcs7_padding+0x14>
 80026b2:	2300      	movs	r3, #0
 80026b4:	e025      	b.n	8002702 <remove_pkcs7_padding+0x60>

    uint8_t padding_value = data[data_len - 1];
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	3b01      	subs	r3, #1
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	72fb      	strb	r3, [r7, #11]

    // Проверка корректности значения паддинга
    if (padding_value > SPECK_BLOCK_SIZE || padding_value == 0) {
 80026c2:	7afb      	ldrb	r3, [r7, #11]
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	d802      	bhi.n	80026ce <remove_pkcs7_padding+0x2c>
 80026c8:	7afb      	ldrb	r3, [r7, #11]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <remove_pkcs7_padding+0x30>
        return data_len; // Некорректное дополнение, возвращаем исходную длину
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	e017      	b.n	8002702 <remove_pkcs7_padding+0x60>
    }

    // Проверяем все байты паддинга
    for (size_t i = data_len - padding_value; i < data_len; i++) {
 80026d2:	7afb      	ldrb	r3, [r7, #11]
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	e00b      	b.n	80026f4 <remove_pkcs7_padding+0x52>
        if (data[i] != padding_value) {
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	4413      	add	r3, r2
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	7afa      	ldrb	r2, [r7, #11]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d001      	beq.n	80026ee <remove_pkcs7_padding+0x4c>
            return data_len; // Некорректное дополнение, возвращаем исходную длину
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	e009      	b.n	8002702 <remove_pkcs7_padding+0x60>
    for (size_t i = data_len - padding_value; i < data_len; i++) {
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	3301      	adds	r3, #1
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d3ef      	bcc.n	80026dc <remove_pkcs7_padding+0x3a>
        }
    }

    return data_len - padding_value;
 80026fc:	7afb      	ldrb	r3, [r7, #11]
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	1ad3      	subs	r3, r2, r3
}
 8002702:	4618      	mov	r0, r3
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <Speck_GetPaddedLength>:

size_t Speck_GetPaddedLength(size_t length) {
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
    return length + (SPECK_BLOCK_SIZE - (length % SPECK_BLOCK_SIZE)) % SPECK_BLOCK_SIZE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	425b      	negs	r3, r3
 800271a:	f003 0207 	and.w	r2, r3, #7
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4413      	add	r3, r2
}
 8002722:	4618      	mov	r0, r3
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <Speck_Encrypt_Simple>:

/**
 * @brief Упрощенное шифрование данных произвольной длины
 */
size_t Speck_Encrypt_Simple(const SpeckContext* ctx, const uint8_t* plaintext, size_t length,
                           const uint8_t* iv, uint8_t* ciphertext) {
 800272e:	b590      	push	{r4, r7, lr}
 8002730:	b0c9      	sub	sp, #292	@ 0x124
 8002732:	af00      	add	r7, sp, #0
 8002734:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8002738:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 800273c:	6020      	str	r0, [r4, #0]
 800273e:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8002742:	f5a0 708c 	sub.w	r0, r0, #280	@ 0x118
 8002746:	6001      	str	r1, [r0, #0]
 8002748:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 800274c:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 8002750:	600a      	str	r2, [r1, #0]
 8002752:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8002756:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 800275a:	6013      	str	r3, [r2, #0]
    // Копируем IV в начало шифротекста
    memcpy(ciphertext, iv, SPECK_BLOCK_SIZE);
 800275c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002760:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002764:	2208      	movs	r2, #8
 8002766:	6819      	ldr	r1, [r3, #0]
 8002768:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 800276c:	f002 ffc9 	bl	8005702 <memcpy>

    size_t padded_length = Speck_GetPaddedLength(length);
 8002770:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002774:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	f7ff ffc8 	bl	800270e <Speck_GetPaddedLength>
 800277e:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
    uint8_t padded_data[256]; // Буфер для данных с паддингом

    // Копируем данные
    memcpy(padded_data, plaintext, length);
 8002782:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002786:	f5a3 728e 	sub.w	r2, r3, #284	@ 0x11c
 800278a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800278e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002792:	f107 0014 	add.w	r0, r7, #20
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	6819      	ldr	r1, [r3, #0]
 800279a:	f002 ffb2 	bl	8005702 <memcpy>

    // Добавляем паддинг
    add_pkcs7_padding(padded_data, length, SPECK_BLOCK_SIZE);
 800279e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80027a2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80027a6:	f107 0014 	add.w	r0, r7, #20
 80027aa:	2208      	movs	r2, #8
 80027ac:	6819      	ldr	r1, [r3, #0]
 80027ae:	f7ff ff4d 	bl	800264c <add_pkcs7_padding>

    // Шифруем блоки
    size_t num_blocks = padded_length / SPECK_BLOCK_SIZE;
 80027b2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80027b6:	08db      	lsrs	r3, r3, #3
 80027b8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (size_t i = 0; i < num_blocks; i++) {
 80027bc:	2300      	movs	r3, #0
 80027be:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80027c2:	e018      	b.n	80027f6 <Speck_Encrypt_Simple+0xc8>
        Speck_Encrypt(ctx, padded_data + i * SPECK_BLOCK_SIZE,
 80027c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	f107 0214 	add.w	r2, r7, #20
 80027ce:	18d1      	adds	r1, r2, r3
                      ciphertext + SPECK_BLOCK_SIZE + i * SPECK_BLOCK_SIZE);
 80027d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027d4:	3301      	adds	r3, #1
 80027d6:	00db      	lsls	r3, r3, #3
        Speck_Encrypt(ctx, padded_data + i * SPECK_BLOCK_SIZE,
 80027d8:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80027dc:	441a      	add	r2, r3
 80027de:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80027e2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80027e6:	6818      	ldr	r0, [r3, #0]
 80027e8:	f7ff fec0 	bl	800256c <Speck_Encrypt>
    for (size_t i = 0; i < num_blocks; i++) {
 80027ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027f0:	3301      	adds	r3, #1
 80027f2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80027f6:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80027fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027fe:	429a      	cmp	r2, r3
 8002800:	d3e0      	bcc.n	80027c4 <Speck_Encrypt_Simple+0x96>
    }

    return SPECK_BLOCK_SIZE + padded_length;
 8002802:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002806:	3308      	adds	r3, #8
}
 8002808:	4618      	mov	r0, r3
 800280a:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 800280e:	46bd      	mov	sp, r7
 8002810:	bd90      	pop	{r4, r7, pc}

08002812 <Speck_Decrypt_Simple>:

/**
 * @brief Упрощенное расшифрование данных произвольной длины
 */
size_t Speck_Decrypt_Simple(const SpeckContext* ctx, const uint8_t* ciphertext, size_t length,
                           const uint8_t* iv, uint8_t* plaintext) {
 8002812:	b580      	push	{r7, lr}
 8002814:	b088      	sub	sp, #32
 8002816:	af00      	add	r7, sp, #0
 8002818:	60f8      	str	r0, [r7, #12]
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	607a      	str	r2, [r7, #4]
 800281e:	603b      	str	r3, [r7, #0]
    if (length <= SPECK_BLOCK_SIZE) return 0; // Некорректная длина
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b08      	cmp	r3, #8
 8002824:	d801      	bhi.n	800282a <Speck_Decrypt_Simple+0x18>
 8002826:	2300      	movs	r3, #0
 8002828:	e021      	b.n	800286e <Speck_Decrypt_Simple+0x5c>

    // Расшифровываем блоки
    size_t encrypted_len = length - SPECK_BLOCK_SIZE;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3b08      	subs	r3, #8
 800282e:	61bb      	str	r3, [r7, #24]
    size_t num_blocks = encrypted_len / SPECK_BLOCK_SIZE;
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	08db      	lsrs	r3, r3, #3
 8002834:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < num_blocks; i++) {
 8002836:	2300      	movs	r3, #0
 8002838:	61fb      	str	r3, [r7, #28]
 800283a:	e00f      	b.n	800285c <Speck_Decrypt_Simple+0x4a>
        Speck_Decrypt(ctx, ciphertext + SPECK_BLOCK_SIZE + i * SPECK_BLOCK_SIZE,
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	3301      	adds	r3, #1
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	68ba      	ldr	r2, [r7, #8]
 8002844:	18d1      	adds	r1, r2, r3
                      plaintext + i * SPECK_BLOCK_SIZE);
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	00db      	lsls	r3, r3, #3
        Speck_Decrypt(ctx, ciphertext + SPECK_BLOCK_SIZE + i * SPECK_BLOCK_SIZE,
 800284a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800284c:	4413      	add	r3, r2
 800284e:	461a      	mov	r2, r3
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f7ff fec3 	bl	80025dc <Speck_Decrypt>
    for (size_t i = 0; i < num_blocks; i++) {
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	3301      	adds	r3, #1
 800285a:	61fb      	str	r3, [r7, #28]
 800285c:	69fa      	ldr	r2, [r7, #28]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	429a      	cmp	r2, r3
 8002862:	d3eb      	bcc.n	800283c <Speck_Decrypt_Simple+0x2a>
    }

    // Удаляем паддинг
    return remove_pkcs7_padding(plaintext, encrypted_len);
 8002864:	69b9      	ldr	r1, [r7, #24]
 8002866:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002868:	f7ff ff1b 	bl	80026a2 <remove_pkcs7_padding>
 800286c:	4603      	mov	r3, r0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3720      	adds	r7, #32
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	607b      	str	r3, [r7, #4]
 8002882:	4b10      	ldr	r3, [pc, #64]	@ (80028c4 <HAL_MspInit+0x4c>)
 8002884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002886:	4a0f      	ldr	r2, [pc, #60]	@ (80028c4 <HAL_MspInit+0x4c>)
 8002888:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800288c:	6453      	str	r3, [r2, #68]	@ 0x44
 800288e:	4b0d      	ldr	r3, [pc, #52]	@ (80028c4 <HAL_MspInit+0x4c>)
 8002890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002892:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002896:	607b      	str	r3, [r7, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	603b      	str	r3, [r7, #0]
 800289e:	4b09      	ldr	r3, [pc, #36]	@ (80028c4 <HAL_MspInit+0x4c>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a2:	4a08      	ldr	r2, [pc, #32]	@ (80028c4 <HAL_MspInit+0x4c>)
 80028a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80028aa:	4b06      	ldr	r3, [pc, #24]	@ (80028c4 <HAL_MspInit+0x4c>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028b2:	603b      	str	r3, [r7, #0]
 80028b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80028b6:	2007      	movs	r0, #7
 80028b8:	f000 fc88 	bl	80031cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028bc:	bf00      	nop
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40023800 	.word	0x40023800

080028c8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08e      	sub	sp, #56	@ 0x38
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	60da      	str	r2, [r3, #12]
 80028de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a65      	ldr	r2, [pc, #404]	@ (8002a7c <HAL_UART_MspInit+0x1b4>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	f040 8095 	bne.w	8002a16 <HAL_UART_MspInit+0x14e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028ec:	2300      	movs	r3, #0
 80028ee:	623b      	str	r3, [r7, #32]
 80028f0:	4b63      	ldr	r3, [pc, #396]	@ (8002a80 <HAL_UART_MspInit+0x1b8>)
 80028f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f4:	4a62      	ldr	r2, [pc, #392]	@ (8002a80 <HAL_UART_MspInit+0x1b8>)
 80028f6:	f043 0310 	orr.w	r3, r3, #16
 80028fa:	6453      	str	r3, [r2, #68]	@ 0x44
 80028fc:	4b60      	ldr	r3, [pc, #384]	@ (8002a80 <HAL_UART_MspInit+0x1b8>)
 80028fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002900:	f003 0310 	and.w	r3, r3, #16
 8002904:	623b      	str	r3, [r7, #32]
 8002906:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002908:	2300      	movs	r3, #0
 800290a:	61fb      	str	r3, [r7, #28]
 800290c:	4b5c      	ldr	r3, [pc, #368]	@ (8002a80 <HAL_UART_MspInit+0x1b8>)
 800290e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002910:	4a5b      	ldr	r2, [pc, #364]	@ (8002a80 <HAL_UART_MspInit+0x1b8>)
 8002912:	f043 0301 	orr.w	r3, r3, #1
 8002916:	6313      	str	r3, [r2, #48]	@ 0x30
 8002918:	4b59      	ldr	r3, [pc, #356]	@ (8002a80 <HAL_UART_MspInit+0x1b8>)
 800291a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	61fb      	str	r3, [r7, #28]
 8002922:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002924:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002928:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292a:	2302      	movs	r3, #2
 800292c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292e:	2300      	movs	r3, #0
 8002930:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002932:	2303      	movs	r3, #3
 8002934:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002936:	2307      	movs	r3, #7
 8002938:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800293a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800293e:	4619      	mov	r1, r3
 8002940:	4850      	ldr	r0, [pc, #320]	@ (8002a84 <HAL_UART_MspInit+0x1bc>)
 8002942:	f001 f887 	bl	8003a54 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002946:	4b50      	ldr	r3, [pc, #320]	@ (8002a88 <HAL_UART_MspInit+0x1c0>)
 8002948:	4a50      	ldr	r2, [pc, #320]	@ (8002a8c <HAL_UART_MspInit+0x1c4>)
 800294a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800294c:	4b4e      	ldr	r3, [pc, #312]	@ (8002a88 <HAL_UART_MspInit+0x1c0>)
 800294e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002952:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002954:	4b4c      	ldr	r3, [pc, #304]	@ (8002a88 <HAL_UART_MspInit+0x1c0>)
 8002956:	2200      	movs	r2, #0
 8002958:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800295a:	4b4b      	ldr	r3, [pc, #300]	@ (8002a88 <HAL_UART_MspInit+0x1c0>)
 800295c:	2200      	movs	r2, #0
 800295e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002960:	4b49      	ldr	r3, [pc, #292]	@ (8002a88 <HAL_UART_MspInit+0x1c0>)
 8002962:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002966:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002968:	4b47      	ldr	r3, [pc, #284]	@ (8002a88 <HAL_UART_MspInit+0x1c0>)
 800296a:	2200      	movs	r2, #0
 800296c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800296e:	4b46      	ldr	r3, [pc, #280]	@ (8002a88 <HAL_UART_MspInit+0x1c0>)
 8002970:	2200      	movs	r2, #0
 8002972:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002974:	4b44      	ldr	r3, [pc, #272]	@ (8002a88 <HAL_UART_MspInit+0x1c0>)
 8002976:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800297a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800297c:	4b42      	ldr	r3, [pc, #264]	@ (8002a88 <HAL_UART_MspInit+0x1c0>)
 800297e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002982:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002984:	4b40      	ldr	r3, [pc, #256]	@ (8002a88 <HAL_UART_MspInit+0x1c0>)
 8002986:	2200      	movs	r2, #0
 8002988:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800298a:	483f      	ldr	r0, [pc, #252]	@ (8002a88 <HAL_UART_MspInit+0x1c0>)
 800298c:	f000 fc60 	bl	8003250 <HAL_DMA_Init>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8002996:	f7fe f873 	bl	8000a80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a3a      	ldr	r2, [pc, #232]	@ (8002a88 <HAL_UART_MspInit+0x1c0>)
 800299e:	63da      	str	r2, [r3, #60]	@ 0x3c
 80029a0:	4a39      	ldr	r2, [pc, #228]	@ (8002a88 <HAL_UART_MspInit+0x1c0>)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80029a6:	4b3a      	ldr	r3, [pc, #232]	@ (8002a90 <HAL_UART_MspInit+0x1c8>)
 80029a8:	4a3a      	ldr	r2, [pc, #232]	@ (8002a94 <HAL_UART_MspInit+0x1cc>)
 80029aa:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80029ac:	4b38      	ldr	r3, [pc, #224]	@ (8002a90 <HAL_UART_MspInit+0x1c8>)
 80029ae:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80029b2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029b4:	4b36      	ldr	r3, [pc, #216]	@ (8002a90 <HAL_UART_MspInit+0x1c8>)
 80029b6:	2240      	movs	r2, #64	@ 0x40
 80029b8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029ba:	4b35      	ldr	r3, [pc, #212]	@ (8002a90 <HAL_UART_MspInit+0x1c8>)
 80029bc:	2200      	movs	r2, #0
 80029be:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029c0:	4b33      	ldr	r3, [pc, #204]	@ (8002a90 <HAL_UART_MspInit+0x1c8>)
 80029c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029c6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029c8:	4b31      	ldr	r3, [pc, #196]	@ (8002a90 <HAL_UART_MspInit+0x1c8>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029ce:	4b30      	ldr	r3, [pc, #192]	@ (8002a90 <HAL_UART_MspInit+0x1c8>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80029d4:	4b2e      	ldr	r3, [pc, #184]	@ (8002a90 <HAL_UART_MspInit+0x1c8>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80029da:	4b2d      	ldr	r3, [pc, #180]	@ (8002a90 <HAL_UART_MspInit+0x1c8>)
 80029dc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80029e0:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002a90 <HAL_UART_MspInit+0x1c8>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80029e8:	4829      	ldr	r0, [pc, #164]	@ (8002a90 <HAL_UART_MspInit+0x1c8>)
 80029ea:	f000 fc31 	bl	8003250 <HAL_DMA_Init>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 80029f4:	f7fe f844 	bl	8000a80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a25      	ldr	r2, [pc, #148]	@ (8002a90 <HAL_UART_MspInit+0x1c8>)
 80029fc:	639a      	str	r2, [r3, #56]	@ 0x38
 80029fe:	4a24      	ldr	r2, [pc, #144]	@ (8002a90 <HAL_UART_MspInit+0x1c8>)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a04:	2200      	movs	r2, #0
 8002a06:	2100      	movs	r1, #0
 8002a08:	2025      	movs	r0, #37	@ 0x25
 8002a0a:	f000 fbea 	bl	80031e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a0e:	2025      	movs	r0, #37	@ 0x25
 8002a10:	f000 fc03 	bl	800321a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8002a14:	e0db      	b.n	8002bce <HAL_UART_MspInit+0x306>
  else if(huart->Instance==USART2)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a1f      	ldr	r2, [pc, #124]	@ (8002a98 <HAL_UART_MspInit+0x1d0>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d13d      	bne.n	8002a9c <HAL_UART_MspInit+0x1d4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a20:	2300      	movs	r3, #0
 8002a22:	61bb      	str	r3, [r7, #24]
 8002a24:	4b16      	ldr	r3, [pc, #88]	@ (8002a80 <HAL_UART_MspInit+0x1b8>)
 8002a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a28:	4a15      	ldr	r2, [pc, #84]	@ (8002a80 <HAL_UART_MspInit+0x1b8>)
 8002a2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a30:	4b13      	ldr	r3, [pc, #76]	@ (8002a80 <HAL_UART_MspInit+0x1b8>)
 8002a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a38:	61bb      	str	r3, [r7, #24]
 8002a3a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]
 8002a40:	4b0f      	ldr	r3, [pc, #60]	@ (8002a80 <HAL_UART_MspInit+0x1b8>)
 8002a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a44:	4a0e      	ldr	r2, [pc, #56]	@ (8002a80 <HAL_UART_MspInit+0x1b8>)
 8002a46:	f043 0301 	orr.w	r3, r3, #1
 8002a4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a80 <HAL_UART_MspInit+0x1b8>)
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002a58:	230c      	movs	r3, #12
 8002a5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a64:	2303      	movs	r3, #3
 8002a66:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a68:	2307      	movs	r3, #7
 8002a6a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a70:	4619      	mov	r1, r3
 8002a72:	4804      	ldr	r0, [pc, #16]	@ (8002a84 <HAL_UART_MspInit+0x1bc>)
 8002a74:	f000 ffee 	bl	8003a54 <HAL_GPIO_Init>
}
 8002a78:	e0a9      	b.n	8002bce <HAL_UART_MspInit+0x306>
 8002a7a:	bf00      	nop
 8002a7c:	40011000 	.word	0x40011000
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40020000 	.word	0x40020000
 8002a88:	200001f0 	.word	0x200001f0
 8002a8c:	40026440 	.word	0x40026440
 8002a90:	20000250 	.word	0x20000250
 8002a94:	400264b8 	.word	0x400264b8
 8002a98:	40004400 	.word	0x40004400
  else if(huart->Instance==USART6)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a4d      	ldr	r2, [pc, #308]	@ (8002bd8 <HAL_UART_MspInit+0x310>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	f040 8093 	bne.w	8002bce <HAL_UART_MspInit+0x306>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	613b      	str	r3, [r7, #16]
 8002aac:	4b4b      	ldr	r3, [pc, #300]	@ (8002bdc <HAL_UART_MspInit+0x314>)
 8002aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab0:	4a4a      	ldr	r2, [pc, #296]	@ (8002bdc <HAL_UART_MspInit+0x314>)
 8002ab2:	f043 0320 	orr.w	r3, r3, #32
 8002ab6:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ab8:	4b48      	ldr	r3, [pc, #288]	@ (8002bdc <HAL_UART_MspInit+0x314>)
 8002aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002abc:	f003 0320 	and.w	r3, r3, #32
 8002ac0:	613b      	str	r3, [r7, #16]
 8002ac2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	4b44      	ldr	r3, [pc, #272]	@ (8002bdc <HAL_UART_MspInit+0x314>)
 8002aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002acc:	4a43      	ldr	r2, [pc, #268]	@ (8002bdc <HAL_UART_MspInit+0x314>)
 8002ace:	f043 0304 	orr.w	r3, r3, #4
 8002ad2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ad4:	4b41      	ldr	r3, [pc, #260]	@ (8002bdc <HAL_UART_MspInit+0x314>)
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ae0:	23c0      	movs	r3, #192	@ 0xc0
 8002ae2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aec:	2303      	movs	r3, #3
 8002aee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002af0:	2308      	movs	r3, #8
 8002af2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002af4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002af8:	4619      	mov	r1, r3
 8002afa:	4839      	ldr	r0, [pc, #228]	@ (8002be0 <HAL_UART_MspInit+0x318>)
 8002afc:	f000 ffaa 	bl	8003a54 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002b00:	4b38      	ldr	r3, [pc, #224]	@ (8002be4 <HAL_UART_MspInit+0x31c>)
 8002b02:	4a39      	ldr	r2, [pc, #228]	@ (8002be8 <HAL_UART_MspInit+0x320>)
 8002b04:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002b06:	4b37      	ldr	r3, [pc, #220]	@ (8002be4 <HAL_UART_MspInit+0x31c>)
 8002b08:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002b0c:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b0e:	4b35      	ldr	r3, [pc, #212]	@ (8002be4 <HAL_UART_MspInit+0x31c>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b14:	4b33      	ldr	r3, [pc, #204]	@ (8002be4 <HAL_UART_MspInit+0x31c>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b1a:	4b32      	ldr	r3, [pc, #200]	@ (8002be4 <HAL_UART_MspInit+0x31c>)
 8002b1c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b20:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b22:	4b30      	ldr	r3, [pc, #192]	@ (8002be4 <HAL_UART_MspInit+0x31c>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b28:	4b2e      	ldr	r3, [pc, #184]	@ (8002be4 <HAL_UART_MspInit+0x31c>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002b2e:	4b2d      	ldr	r3, [pc, #180]	@ (8002be4 <HAL_UART_MspInit+0x31c>)
 8002b30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b34:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002b36:	4b2b      	ldr	r3, [pc, #172]	@ (8002be4 <HAL_UART_MspInit+0x31c>)
 8002b38:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b3c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b3e:	4b29      	ldr	r3, [pc, #164]	@ (8002be4 <HAL_UART_MspInit+0x31c>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002b44:	4827      	ldr	r0, [pc, #156]	@ (8002be4 <HAL_UART_MspInit+0x31c>)
 8002b46:	f000 fb83 	bl	8003250 <HAL_DMA_Init>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <HAL_UART_MspInit+0x28c>
      Error_Handler();
 8002b50:	f7fd ff96 	bl	8000a80 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a23      	ldr	r2, [pc, #140]	@ (8002be4 <HAL_UART_MspInit+0x31c>)
 8002b58:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002b5a:	4a22      	ldr	r2, [pc, #136]	@ (8002be4 <HAL_UART_MspInit+0x31c>)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002b60:	4b22      	ldr	r3, [pc, #136]	@ (8002bec <HAL_UART_MspInit+0x324>)
 8002b62:	4a23      	ldr	r2, [pc, #140]	@ (8002bf0 <HAL_UART_MspInit+0x328>)
 8002b64:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8002b66:	4b21      	ldr	r3, [pc, #132]	@ (8002bec <HAL_UART_MspInit+0x324>)
 8002b68:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002b6c:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b6e:	4b1f      	ldr	r3, [pc, #124]	@ (8002bec <HAL_UART_MspInit+0x324>)
 8002b70:	2240      	movs	r2, #64	@ 0x40
 8002b72:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b74:	4b1d      	ldr	r3, [pc, #116]	@ (8002bec <HAL_UART_MspInit+0x324>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8002bec <HAL_UART_MspInit+0x324>)
 8002b7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b80:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b82:	4b1a      	ldr	r3, [pc, #104]	@ (8002bec <HAL_UART_MspInit+0x324>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b88:	4b18      	ldr	r3, [pc, #96]	@ (8002bec <HAL_UART_MspInit+0x324>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002b8e:	4b17      	ldr	r3, [pc, #92]	@ (8002bec <HAL_UART_MspInit+0x324>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002b94:	4b15      	ldr	r3, [pc, #84]	@ (8002bec <HAL_UART_MspInit+0x324>)
 8002b96:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b9a:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b9c:	4b13      	ldr	r3, [pc, #76]	@ (8002bec <HAL_UART_MspInit+0x324>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002ba2:	4812      	ldr	r0, [pc, #72]	@ (8002bec <HAL_UART_MspInit+0x324>)
 8002ba4:	f000 fb54 	bl	8003250 <HAL_DMA_Init>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_UART_MspInit+0x2ea>
      Error_Handler();
 8002bae:	f7fd ff67 	bl	8000a80 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8002bec <HAL_UART_MspInit+0x324>)
 8002bb6:	639a      	str	r2, [r3, #56]	@ 0x38
 8002bb8:	4a0c      	ldr	r2, [pc, #48]	@ (8002bec <HAL_UART_MspInit+0x324>)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	2047      	movs	r0, #71	@ 0x47
 8002bc4:	f000 fb0d 	bl	80031e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002bc8:	2047      	movs	r0, #71	@ 0x47
 8002bca:	f000 fb26 	bl	800321a <HAL_NVIC_EnableIRQ>
}
 8002bce:	bf00      	nop
 8002bd0:	3738      	adds	r7, #56	@ 0x38
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40011400 	.word	0x40011400
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	40020800 	.word	0x40020800
 8002be4:	200002b0 	.word	0x200002b0
 8002be8:	40026428 	.word	0x40026428
 8002bec:	20000310 	.word	0x20000310
 8002bf0:	400264a0 	.word	0x400264a0

08002bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bf8:	bf00      	nop
 8002bfa:	e7fd      	b.n	8002bf8 <NMI_Handler+0x4>

08002bfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c00:	bf00      	nop
 8002c02:	e7fd      	b.n	8002c00 <HardFault_Handler+0x4>

08002c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c08:	bf00      	nop
 8002c0a:	e7fd      	b.n	8002c08 <MemManage_Handler+0x4>

08002c0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c10:	bf00      	nop
 8002c12:	e7fd      	b.n	8002c10 <BusFault_Handler+0x4>

08002c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c18:	bf00      	nop
 8002c1a:	e7fd      	b.n	8002c18 <UsageFault_Handler+0x4>

08002c1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c20:	bf00      	nop
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c3c:	bf00      	nop
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c4a:	f000 f9ab 	bl	8002fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {
 8002c58:	4b07      	ldr	r3, [pc, #28]	@ (8002c78 <USART1_IRQHandler+0x24>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0310 	and.w	r3, r3, #16
 8002c62:	2b10      	cmp	r3, #16
 8002c64:	d102      	bne.n	8002c6c <USART1_IRQHandler+0x18>
    SecureUart_HandleUartRxEvent(&TxContext);
 8002c66:	4805      	ldr	r0, [pc, #20]	@ (8002c7c <USART1_IRQHandler+0x28>)
 8002c68:	f7fe fad2 	bl	8001210 <SecureUart_HandleUartRxEvent>
  }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c6c:	4802      	ldr	r0, [pc, #8]	@ (8002c78 <USART1_IRQHandler+0x24>)
 8002c6e:	f001 fa43 	bl	80040f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20000118 	.word	0x20000118
 8002c7c:	20000370 	.word	0x20000370

08002c80 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002c84:	4802      	ldr	r0, [pc, #8]	@ (8002c90 <DMA2_Stream1_IRQHandler+0x10>)
 8002c86:	f000 fc7b 	bl	8003580 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	200002b0 	.word	0x200002b0

08002c94 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002c98:	4802      	ldr	r0, [pc, #8]	@ (8002ca4 <DMA2_Stream2_IRQHandler+0x10>)
 8002c9a:	f000 fc71 	bl	8003580 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	200001f0 	.word	0x200001f0

08002ca8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002cac:	4802      	ldr	r0, [pc, #8]	@ (8002cb8 <DMA2_Stream6_IRQHandler+0x10>)
 8002cae:	f000 fc67 	bl	8003580 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002cb2:	bf00      	nop
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	20000310 	.word	0x20000310

08002cbc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002cc0:	4802      	ldr	r0, [pc, #8]	@ (8002ccc <DMA2_Stream7_IRQHandler+0x10>)
 8002cc2:	f000 fc5d 	bl	8003580 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	20000250 	.word	0x20000250

08002cd0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  if(__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE)) {
 8002cd4:	4b07      	ldr	r3, [pc, #28]	@ (8002cf4 <USART6_IRQHandler+0x24>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0310 	and.w	r3, r3, #16
 8002cde:	2b10      	cmp	r3, #16
 8002ce0:	d102      	bne.n	8002ce8 <USART6_IRQHandler+0x18>
    SecureUart_HandleUartRxEvent(&RxContext);
 8002ce2:	4805      	ldr	r0, [pc, #20]	@ (8002cf8 <USART6_IRQHandler+0x28>)
 8002ce4:	f7fe fa94 	bl	8001210 <SecureUart_HandleUartRxEvent>
  }
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002ce8:	4802      	ldr	r0, [pc, #8]	@ (8002cf4 <USART6_IRQHandler+0x24>)
 8002cea:	f001 fa05 	bl	80040f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	200001a8 	.word	0x200001a8
 8002cf8:	20000498 	.word	0x20000498

08002cfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  return 1;
 8002d00:	2301      	movs	r3, #1
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <_kill>:

int _kill(int pid, int sig)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d16:	f002 fcc7 	bl	80056a8 <__errno>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2216      	movs	r2, #22
 8002d1e:	601a      	str	r2, [r3, #0]
  return -1;
 8002d20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <_exit>:

void _exit (int status)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d34:	f04f 31ff 	mov.w	r1, #4294967295
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7ff ffe7 	bl	8002d0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d3e:	bf00      	nop
 8002d40:	e7fd      	b.n	8002d3e <_exit+0x12>

08002d42 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b086      	sub	sp, #24
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	60f8      	str	r0, [r7, #12]
 8002d4a:	60b9      	str	r1, [r7, #8]
 8002d4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	e00a      	b.n	8002d6a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d54:	f3af 8000 	nop.w
 8002d58:	4601      	mov	r1, r0
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	1c5a      	adds	r2, r3, #1
 8002d5e:	60ba      	str	r2, [r7, #8]
 8002d60:	b2ca      	uxtb	r2, r1
 8002d62:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	3301      	adds	r3, #1
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	dbf0      	blt.n	8002d54 <_read+0x12>
  }

  return len;
 8002d72:	687b      	ldr	r3, [r7, #4]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]
 8002d8c:	e009      	b.n	8002da2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	1c5a      	adds	r2, r3, #1
 8002d92:	60ba      	str	r2, [r7, #8]
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	617b      	str	r3, [r7, #20]
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	dbf1      	blt.n	8002d8e <_write+0x12>
  }
  return len;
 8002daa:	687b      	ldr	r3, [r7, #4]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <_close>:

int _close(int file)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002dbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ddc:	605a      	str	r2, [r3, #4]
  return 0;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <_isatty>:

int _isatty(int file)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002df4:	2301      	movs	r3, #1
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b085      	sub	sp, #20
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	60f8      	str	r0, [r7, #12]
 8002e0a:	60b9      	str	r1, [r7, #8]
 8002e0c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e24:	4a14      	ldr	r2, [pc, #80]	@ (8002e78 <_sbrk+0x5c>)
 8002e26:	4b15      	ldr	r3, [pc, #84]	@ (8002e7c <_sbrk+0x60>)
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e30:	4b13      	ldr	r3, [pc, #76]	@ (8002e80 <_sbrk+0x64>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d102      	bne.n	8002e3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e38:	4b11      	ldr	r3, [pc, #68]	@ (8002e80 <_sbrk+0x64>)
 8002e3a:	4a12      	ldr	r2, [pc, #72]	@ (8002e84 <_sbrk+0x68>)
 8002e3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e3e:	4b10      	ldr	r3, [pc, #64]	@ (8002e80 <_sbrk+0x64>)
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4413      	add	r3, r2
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d207      	bcs.n	8002e5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e4c:	f002 fc2c 	bl	80056a8 <__errno>
 8002e50:	4603      	mov	r3, r0
 8002e52:	220c      	movs	r2, #12
 8002e54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e56:	f04f 33ff 	mov.w	r3, #4294967295
 8002e5a:	e009      	b.n	8002e70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e5c:	4b08      	ldr	r3, [pc, #32]	@ (8002e80 <_sbrk+0x64>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e62:	4b07      	ldr	r3, [pc, #28]	@ (8002e80 <_sbrk+0x64>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4413      	add	r3, r2
 8002e6a:	4a05      	ldr	r2, [pc, #20]	@ (8002e80 <_sbrk+0x64>)
 8002e6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	20020000 	.word	0x20020000
 8002e7c:	00000400 	.word	0x00000400
 8002e80:	200005c4 	.word	0x200005c4
 8002e84:	20000718 	.word	0x20000718

08002e88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e8c:	4b06      	ldr	r3, [pc, #24]	@ (8002ea8 <SystemInit+0x20>)
 8002e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e92:	4a05      	ldr	r2, [pc, #20]	@ (8002ea8 <SystemInit+0x20>)
 8002e94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e9c:	bf00      	nop
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	e000ed00 	.word	0xe000ed00

08002eac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002eac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ee4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002eb0:	f7ff ffea 	bl	8002e88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002eb4:	480c      	ldr	r0, [pc, #48]	@ (8002ee8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002eb6:	490d      	ldr	r1, [pc, #52]	@ (8002eec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002eb8:	4a0d      	ldr	r2, [pc, #52]	@ (8002ef0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ebc:	e002      	b.n	8002ec4 <LoopCopyDataInit>

08002ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ec2:	3304      	adds	r3, #4

08002ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ec8:	d3f9      	bcc.n	8002ebe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eca:	4a0a      	ldr	r2, [pc, #40]	@ (8002ef4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ecc:	4c0a      	ldr	r4, [pc, #40]	@ (8002ef8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ed0:	e001      	b.n	8002ed6 <LoopFillZerobss>

08002ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ed4:	3204      	adds	r2, #4

08002ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ed8:	d3fb      	bcc.n	8002ed2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002eda:	f002 fbeb 	bl	80056b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ede:	f7fd fb8f 	bl	8000600 <main>
  bx  lr    
 8002ee2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ee4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002eec:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8002ef0:	08006e64 	.word	0x08006e64
  ldr r2, =_sbss
 8002ef4:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8002ef8:	20000718 	.word	0x20000718

08002efc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002efc:	e7fe      	b.n	8002efc <ADC_IRQHandler>
	...

08002f00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f04:	4b0e      	ldr	r3, [pc, #56]	@ (8002f40 <HAL_Init+0x40>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a0d      	ldr	r2, [pc, #52]	@ (8002f40 <HAL_Init+0x40>)
 8002f0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f10:	4b0b      	ldr	r3, [pc, #44]	@ (8002f40 <HAL_Init+0x40>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a0a      	ldr	r2, [pc, #40]	@ (8002f40 <HAL_Init+0x40>)
 8002f16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f1c:	4b08      	ldr	r3, [pc, #32]	@ (8002f40 <HAL_Init+0x40>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a07      	ldr	r2, [pc, #28]	@ (8002f40 <HAL_Init+0x40>)
 8002f22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f28:	2003      	movs	r0, #3
 8002f2a:	f000 f94f 	bl	80031cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f2e:	2000      	movs	r0, #0
 8002f30:	f000 f808 	bl	8002f44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f34:	f7ff fca0 	bl	8002878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40023c00 	.word	0x40023c00

08002f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f4c:	4b12      	ldr	r3, [pc, #72]	@ (8002f98 <HAL_InitTick+0x54>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	4b12      	ldr	r3, [pc, #72]	@ (8002f9c <HAL_InitTick+0x58>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	4619      	mov	r1, r3
 8002f56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 f967 	bl	8003236 <HAL_SYSTICK_Config>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e00e      	b.n	8002f90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b0f      	cmp	r3, #15
 8002f76:	d80a      	bhi.n	8002f8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f78:	2200      	movs	r2, #0
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f80:	f000 f92f 	bl	80031e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f84:	4a06      	ldr	r2, [pc, #24]	@ (8002fa0 <HAL_InitTick+0x5c>)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	e000      	b.n	8002f90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	20000094 	.word	0x20000094
 8002f9c:	2000009c 	.word	0x2000009c
 8002fa0:	20000098 	.word	0x20000098

08002fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fa8:	4b06      	ldr	r3, [pc, #24]	@ (8002fc4 <HAL_IncTick+0x20>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	461a      	mov	r2, r3
 8002fae:	4b06      	ldr	r3, [pc, #24]	@ (8002fc8 <HAL_IncTick+0x24>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	4a04      	ldr	r2, [pc, #16]	@ (8002fc8 <HAL_IncTick+0x24>)
 8002fb6:	6013      	str	r3, [r2, #0]
}
 8002fb8:	bf00      	nop
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	2000009c 	.word	0x2000009c
 8002fc8:	200005c8 	.word	0x200005c8

08002fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return uwTick;
 8002fd0:	4b03      	ldr	r3, [pc, #12]	@ (8002fe0 <HAL_GetTick+0x14>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	200005c8 	.word	0x200005c8

08002fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fec:	f7ff ffee 	bl	8002fcc <HAL_GetTick>
 8002ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffc:	d005      	beq.n	800300a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8003028 <HAL_Delay+0x44>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	461a      	mov	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4413      	add	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800300a:	bf00      	nop
 800300c:	f7ff ffde 	bl	8002fcc <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	429a      	cmp	r2, r3
 800301a:	d8f7      	bhi.n	800300c <HAL_Delay+0x28>
  {
  }
}
 800301c:	bf00      	nop
 800301e:	bf00      	nop
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	2000009c 	.word	0x2000009c

0800302c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800303c:	4b0c      	ldr	r3, [pc, #48]	@ (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003048:	4013      	ands	r3, r2
 800304a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003054:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003058:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800305c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800305e:	4a04      	ldr	r2, [pc, #16]	@ (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	60d3      	str	r3, [r2, #12]
}
 8003064:	bf00      	nop
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003078:	4b04      	ldr	r3, [pc, #16]	@ (800308c <__NVIC_GetPriorityGrouping+0x18>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	0a1b      	lsrs	r3, r3, #8
 800307e:	f003 0307 	and.w	r3, r3, #7
}
 8003082:	4618      	mov	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	db0b      	blt.n	80030ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	f003 021f 	and.w	r2, r3, #31
 80030a8:	4907      	ldr	r1, [pc, #28]	@ (80030c8 <__NVIC_EnableIRQ+0x38>)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	2001      	movs	r0, #1
 80030b2:	fa00 f202 	lsl.w	r2, r0, r2
 80030b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	e000e100 	.word	0xe000e100

080030cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	6039      	str	r1, [r7, #0]
 80030d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	db0a      	blt.n	80030f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	490c      	ldr	r1, [pc, #48]	@ (8003118 <__NVIC_SetPriority+0x4c>)
 80030e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ea:	0112      	lsls	r2, r2, #4
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	440b      	add	r3, r1
 80030f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030f4:	e00a      	b.n	800310c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	4908      	ldr	r1, [pc, #32]	@ (800311c <__NVIC_SetPriority+0x50>)
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	3b04      	subs	r3, #4
 8003104:	0112      	lsls	r2, r2, #4
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	440b      	add	r3, r1
 800310a:	761a      	strb	r2, [r3, #24]
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	e000e100 	.word	0xe000e100
 800311c:	e000ed00 	.word	0xe000ed00

08003120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003120:	b480      	push	{r7}
 8003122:	b089      	sub	sp, #36	@ 0x24
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f1c3 0307 	rsb	r3, r3, #7
 800313a:	2b04      	cmp	r3, #4
 800313c:	bf28      	it	cs
 800313e:	2304      	movcs	r3, #4
 8003140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	3304      	adds	r3, #4
 8003146:	2b06      	cmp	r3, #6
 8003148:	d902      	bls.n	8003150 <NVIC_EncodePriority+0x30>
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	3b03      	subs	r3, #3
 800314e:	e000      	b.n	8003152 <NVIC_EncodePriority+0x32>
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003154:	f04f 32ff 	mov.w	r2, #4294967295
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43da      	mvns	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	401a      	ands	r2, r3
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003168:	f04f 31ff 	mov.w	r1, #4294967295
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	fa01 f303 	lsl.w	r3, r1, r3
 8003172:	43d9      	mvns	r1, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003178:	4313      	orrs	r3, r2
         );
}
 800317a:	4618      	mov	r0, r3
 800317c:	3724      	adds	r7, #36	@ 0x24
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
	...

08003188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3b01      	subs	r3, #1
 8003194:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003198:	d301      	bcc.n	800319e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800319a:	2301      	movs	r3, #1
 800319c:	e00f      	b.n	80031be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800319e:	4a0a      	ldr	r2, [pc, #40]	@ (80031c8 <SysTick_Config+0x40>)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031a6:	210f      	movs	r1, #15
 80031a8:	f04f 30ff 	mov.w	r0, #4294967295
 80031ac:	f7ff ff8e 	bl	80030cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031b0:	4b05      	ldr	r3, [pc, #20]	@ (80031c8 <SysTick_Config+0x40>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031b6:	4b04      	ldr	r3, [pc, #16]	@ (80031c8 <SysTick_Config+0x40>)
 80031b8:	2207      	movs	r2, #7
 80031ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	e000e010 	.word	0xe000e010

080031cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7ff ff29 	bl	800302c <__NVIC_SetPriorityGrouping>
}
 80031da:	bf00      	nop
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b086      	sub	sp, #24
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	4603      	mov	r3, r0
 80031ea:	60b9      	str	r1, [r7, #8]
 80031ec:	607a      	str	r2, [r7, #4]
 80031ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031f4:	f7ff ff3e 	bl	8003074 <__NVIC_GetPriorityGrouping>
 80031f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	68b9      	ldr	r1, [r7, #8]
 80031fe:	6978      	ldr	r0, [r7, #20]
 8003200:	f7ff ff8e 	bl	8003120 <NVIC_EncodePriority>
 8003204:	4602      	mov	r2, r0
 8003206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800320a:	4611      	mov	r1, r2
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff ff5d 	bl	80030cc <__NVIC_SetPriority>
}
 8003212:	bf00      	nop
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	4603      	mov	r3, r0
 8003222:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff ff31 	bl	8003090 <__NVIC_EnableIRQ>
}
 800322e:	bf00      	nop
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7ff ffa2 	bl	8003188 <SysTick_Config>
 8003244:	4603      	mov	r3, r0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800325c:	f7ff feb6 	bl	8002fcc <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e099      	b.n	80033a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2202      	movs	r2, #2
 8003270:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0201 	bic.w	r2, r2, #1
 800328a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800328c:	e00f      	b.n	80032ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800328e:	f7ff fe9d 	bl	8002fcc <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b05      	cmp	r3, #5
 800329a:	d908      	bls.n	80032ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2220      	movs	r2, #32
 80032a0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2203      	movs	r2, #3
 80032a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e078      	b.n	80033a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1e8      	bne.n	800328e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	4b38      	ldr	r3, [pc, #224]	@ (80033a8 <HAL_DMA_Init+0x158>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003304:	2b04      	cmp	r3, #4
 8003306:	d107      	bne.n	8003318 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003310:	4313      	orrs	r3, r2
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	4313      	orrs	r3, r2
 8003316:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	f023 0307 	bic.w	r3, r3, #7
 800332e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	4313      	orrs	r3, r2
 8003338:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333e:	2b04      	cmp	r3, #4
 8003340:	d117      	bne.n	8003372 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	4313      	orrs	r3, r2
 800334a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00e      	beq.n	8003372 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 fb01 	bl	800395c <DMA_CheckFifoParam>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d008      	beq.n	8003372 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2240      	movs	r2, #64	@ 0x40
 8003364:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800336e:	2301      	movs	r3, #1
 8003370:	e016      	b.n	80033a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 fab8 	bl	80038f0 <DMA_CalcBaseAndBitshift>
 8003380:	4603      	mov	r3, r0
 8003382:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003388:	223f      	movs	r2, #63	@ 0x3f
 800338a:	409a      	lsls	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	f010803f 	.word	0xf010803f

080033ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
 80033b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033ba:	2300      	movs	r3, #0
 80033bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d101      	bne.n	80033d2 <HAL_DMA_Start_IT+0x26>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e040      	b.n	8003454 <HAL_DMA_Start_IT+0xa8>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d12f      	bne.n	8003446 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2202      	movs	r2, #2
 80033ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	68b9      	ldr	r1, [r7, #8]
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f000 fa4a 	bl	8003894 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003404:	223f      	movs	r2, #63	@ 0x3f
 8003406:	409a      	lsls	r2, r3
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0216 	orr.w	r2, r2, #22
 800341a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003420:	2b00      	cmp	r3, #0
 8003422:	d007      	beq.n	8003434 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0208 	orr.w	r2, r2, #8
 8003432:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0201 	orr.w	r2, r2, #1
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	e005      	b.n	8003452 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800344e:	2302      	movs	r3, #2
 8003450:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003452:	7dfb      	ldrb	r3, [r7, #23]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003468:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800346a:	f7ff fdaf 	bl	8002fcc <HAL_GetTick>
 800346e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d008      	beq.n	800348e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2280      	movs	r2, #128	@ 0x80
 8003480:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e052      	b.n	8003534 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 0216 	bic.w	r2, r2, #22
 800349c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	695a      	ldr	r2, [r3, #20]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d103      	bne.n	80034be <HAL_DMA_Abort+0x62>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d007      	beq.n	80034ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0208 	bic.w	r2, r2, #8
 80034cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0201 	bic.w	r2, r2, #1
 80034dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034de:	e013      	b.n	8003508 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034e0:	f7ff fd74 	bl	8002fcc <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b05      	cmp	r3, #5
 80034ec:	d90c      	bls.n	8003508 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2220      	movs	r2, #32
 80034f2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2203      	movs	r2, #3
 80034f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e015      	b.n	8003534 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1e4      	bne.n	80034e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800351a:	223f      	movs	r2, #63	@ 0x3f
 800351c:	409a      	lsls	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d004      	beq.n	800355a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2280      	movs	r2, #128	@ 0x80
 8003554:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e00c      	b.n	8003574 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2205      	movs	r2, #5
 800355e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0201 	bic.w	r2, r2, #1
 8003570:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800358c:	4b8e      	ldr	r3, [pc, #568]	@ (80037c8 <HAL_DMA_IRQHandler+0x248>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a8e      	ldr	r2, [pc, #568]	@ (80037cc <HAL_DMA_IRQHandler+0x24c>)
 8003592:	fba2 2303 	umull	r2, r3, r2, r3
 8003596:	0a9b      	lsrs	r3, r3, #10
 8003598:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800359e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035aa:	2208      	movs	r2, #8
 80035ac:	409a      	lsls	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d01a      	beq.n	80035ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d013      	beq.n	80035ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0204 	bic.w	r2, r2, #4
 80035d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035d8:	2208      	movs	r2, #8
 80035da:	409a      	lsls	r2, r3
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e4:	f043 0201 	orr.w	r2, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f0:	2201      	movs	r2, #1
 80035f2:	409a      	lsls	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4013      	ands	r3, r2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d012      	beq.n	8003622 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00b      	beq.n	8003622 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800360e:	2201      	movs	r2, #1
 8003610:	409a      	lsls	r2, r3
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800361a:	f043 0202 	orr.w	r2, r3, #2
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003626:	2204      	movs	r2, #4
 8003628:	409a      	lsls	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	4013      	ands	r3, r2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d012      	beq.n	8003658 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00b      	beq.n	8003658 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003644:	2204      	movs	r2, #4
 8003646:	409a      	lsls	r2, r3
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003650:	f043 0204 	orr.w	r2, r3, #4
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800365c:	2210      	movs	r2, #16
 800365e:	409a      	lsls	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4013      	ands	r3, r2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d043      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0308 	and.w	r3, r3, #8
 8003672:	2b00      	cmp	r3, #0
 8003674:	d03c      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800367a:	2210      	movs	r2, #16
 800367c:	409a      	lsls	r2, r3
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d018      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d108      	bne.n	80036b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d024      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	4798      	blx	r3
 80036ae:	e01f      	b.n	80036f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d01b      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	4798      	blx	r3
 80036c0:	e016      	b.n	80036f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d107      	bne.n	80036e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 0208 	bic.w	r2, r2, #8
 80036de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f4:	2220      	movs	r2, #32
 80036f6:	409a      	lsls	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4013      	ands	r3, r2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 808f 	beq.w	8003820 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0310 	and.w	r3, r3, #16
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 8087 	beq.w	8003820 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003716:	2220      	movs	r2, #32
 8003718:	409a      	lsls	r2, r3
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b05      	cmp	r3, #5
 8003728:	d136      	bne.n	8003798 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0216 	bic.w	r2, r2, #22
 8003738:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695a      	ldr	r2, [r3, #20]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003748:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374e:	2b00      	cmp	r3, #0
 8003750:	d103      	bne.n	800375a <HAL_DMA_IRQHandler+0x1da>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003756:	2b00      	cmp	r3, #0
 8003758:	d007      	beq.n	800376a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0208 	bic.w	r2, r2, #8
 8003768:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800376e:	223f      	movs	r2, #63	@ 0x3f
 8003770:	409a      	lsls	r2, r3
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800378a:	2b00      	cmp	r3, #0
 800378c:	d07e      	beq.n	800388c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	4798      	blx	r3
        }
        return;
 8003796:	e079      	b.n	800388c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d01d      	beq.n	80037e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10d      	bne.n	80037d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d031      	beq.n	8003820 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	4798      	blx	r3
 80037c4:	e02c      	b.n	8003820 <HAL_DMA_IRQHandler+0x2a0>
 80037c6:	bf00      	nop
 80037c8:	20000094 	.word	0x20000094
 80037cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d023      	beq.n	8003820 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	4798      	blx	r3
 80037e0:	e01e      	b.n	8003820 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10f      	bne.n	8003810 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0210 	bic.w	r2, r2, #16
 80037fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003824:	2b00      	cmp	r3, #0
 8003826:	d032      	beq.n	800388e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b00      	cmp	r3, #0
 8003832:	d022      	beq.n	800387a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2205      	movs	r2, #5
 8003838:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0201 	bic.w	r2, r2, #1
 800384a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	3301      	adds	r3, #1
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	429a      	cmp	r2, r3
 8003856:	d307      	bcc.n	8003868 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1f2      	bne.n	800384c <HAL_DMA_IRQHandler+0x2cc>
 8003866:	e000      	b.n	800386a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003868:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800387e:	2b00      	cmp	r3, #0
 8003880:	d005      	beq.n	800388e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	4798      	blx	r3
 800388a:	e000      	b.n	800388e <HAL_DMA_IRQHandler+0x30e>
        return;
 800388c:	bf00      	nop
    }
  }
}
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
 80038a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80038b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2b40      	cmp	r3, #64	@ 0x40
 80038c0:	d108      	bne.n	80038d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80038d2:	e007      	b.n	80038e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	60da      	str	r2, [r3, #12]
}
 80038e4:	bf00      	nop
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	3b10      	subs	r3, #16
 8003900:	4a14      	ldr	r2, [pc, #80]	@ (8003954 <DMA_CalcBaseAndBitshift+0x64>)
 8003902:	fba2 2303 	umull	r2, r3, r2, r3
 8003906:	091b      	lsrs	r3, r3, #4
 8003908:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800390a:	4a13      	ldr	r2, [pc, #76]	@ (8003958 <DMA_CalcBaseAndBitshift+0x68>)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	4413      	add	r3, r2
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	461a      	mov	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2b03      	cmp	r3, #3
 800391c:	d909      	bls.n	8003932 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003926:	f023 0303 	bic.w	r3, r3, #3
 800392a:	1d1a      	adds	r2, r3, #4
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003930:	e007      	b.n	8003942 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800393a:	f023 0303 	bic.w	r3, r3, #3
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003946:	4618      	mov	r0, r3
 8003948:	3714      	adds	r7, #20
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	aaaaaaab 	.word	0xaaaaaaab
 8003958:	08006d6c 	.word	0x08006d6c

0800395c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003964:	2300      	movs	r3, #0
 8003966:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800396c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d11f      	bne.n	80039b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	2b03      	cmp	r3, #3
 800397a:	d856      	bhi.n	8003a2a <DMA_CheckFifoParam+0xce>
 800397c:	a201      	add	r2, pc, #4	@ (adr r2, 8003984 <DMA_CheckFifoParam+0x28>)
 800397e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003982:	bf00      	nop
 8003984:	08003995 	.word	0x08003995
 8003988:	080039a7 	.word	0x080039a7
 800398c:	08003995 	.word	0x08003995
 8003990:	08003a2b 	.word	0x08003a2b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003998:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d046      	beq.n	8003a2e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039a4:	e043      	b.n	8003a2e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039aa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80039ae:	d140      	bne.n	8003a32 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039b4:	e03d      	b.n	8003a32 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039be:	d121      	bne.n	8003a04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2b03      	cmp	r3, #3
 80039c4:	d837      	bhi.n	8003a36 <DMA_CheckFifoParam+0xda>
 80039c6:	a201      	add	r2, pc, #4	@ (adr r2, 80039cc <DMA_CheckFifoParam+0x70>)
 80039c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039cc:	080039dd 	.word	0x080039dd
 80039d0:	080039e3 	.word	0x080039e3
 80039d4:	080039dd 	.word	0x080039dd
 80039d8:	080039f5 	.word	0x080039f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	73fb      	strb	r3, [r7, #15]
      break;
 80039e0:	e030      	b.n	8003a44 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d025      	beq.n	8003a3a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039f2:	e022      	b.n	8003a3a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80039fc:	d11f      	bne.n	8003a3e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a02:	e01c      	b.n	8003a3e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d903      	bls.n	8003a12 <DMA_CheckFifoParam+0xb6>
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	2b03      	cmp	r3, #3
 8003a0e:	d003      	beq.n	8003a18 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a10:	e018      	b.n	8003a44 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	73fb      	strb	r3, [r7, #15]
      break;
 8003a16:	e015      	b.n	8003a44 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00e      	beq.n	8003a42 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	73fb      	strb	r3, [r7, #15]
      break;
 8003a28:	e00b      	b.n	8003a42 <DMA_CheckFifoParam+0xe6>
      break;
 8003a2a:	bf00      	nop
 8003a2c:	e00a      	b.n	8003a44 <DMA_CheckFifoParam+0xe8>
      break;
 8003a2e:	bf00      	nop
 8003a30:	e008      	b.n	8003a44 <DMA_CheckFifoParam+0xe8>
      break;
 8003a32:	bf00      	nop
 8003a34:	e006      	b.n	8003a44 <DMA_CheckFifoParam+0xe8>
      break;
 8003a36:	bf00      	nop
 8003a38:	e004      	b.n	8003a44 <DMA_CheckFifoParam+0xe8>
      break;
 8003a3a:	bf00      	nop
 8003a3c:	e002      	b.n	8003a44 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a3e:	bf00      	nop
 8003a40:	e000      	b.n	8003a44 <DMA_CheckFifoParam+0xe8>
      break;
 8003a42:	bf00      	nop
    }
  } 
  
  return status; 
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop

08003a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b089      	sub	sp, #36	@ 0x24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61fb      	str	r3, [r7, #28]
 8003a6e:	e159      	b.n	8003d24 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a70:	2201      	movs	r2, #1
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	4013      	ands	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	f040 8148 	bne.w	8003d1e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f003 0303 	and.w	r3, r3, #3
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d005      	beq.n	8003aa6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d130      	bne.n	8003b08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	2203      	movs	r2, #3
 8003ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	4013      	ands	r3, r2
 8003abc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	68da      	ldr	r2, [r3, #12]
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003adc:	2201      	movs	r2, #1
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	091b      	lsrs	r3, r3, #4
 8003af2:	f003 0201 	and.w	r2, r3, #1
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f003 0303 	and.w	r3, r3, #3
 8003b10:	2b03      	cmp	r3, #3
 8003b12:	d017      	beq.n	8003b44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	2203      	movs	r2, #3
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	43db      	mvns	r3, r3
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	fa02 f303 	lsl.w	r3, r2, r3
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f003 0303 	and.w	r3, r3, #3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d123      	bne.n	8003b98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	08da      	lsrs	r2, r3, #3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3208      	adds	r2, #8
 8003b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	220f      	movs	r2, #15
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	4013      	ands	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	08da      	lsrs	r2, r3, #3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	3208      	adds	r2, #8
 8003b92:	69b9      	ldr	r1, [r7, #24]
 8003b94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	2203      	movs	r2, #3
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	4013      	ands	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f003 0203 	and.w	r2, r3, #3
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 80a2 	beq.w	8003d1e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	4b57      	ldr	r3, [pc, #348]	@ (8003d3c <HAL_GPIO_Init+0x2e8>)
 8003be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be2:	4a56      	ldr	r2, [pc, #344]	@ (8003d3c <HAL_GPIO_Init+0x2e8>)
 8003be4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003be8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bea:	4b54      	ldr	r3, [pc, #336]	@ (8003d3c <HAL_GPIO_Init+0x2e8>)
 8003bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bf6:	4a52      	ldr	r2, [pc, #328]	@ (8003d40 <HAL_GPIO_Init+0x2ec>)
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	089b      	lsrs	r3, r3, #2
 8003bfc:	3302      	adds	r3, #2
 8003bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	220f      	movs	r2, #15
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	43db      	mvns	r3, r3
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	4013      	ands	r3, r2
 8003c18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a49      	ldr	r2, [pc, #292]	@ (8003d44 <HAL_GPIO_Init+0x2f0>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d019      	beq.n	8003c56 <HAL_GPIO_Init+0x202>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a48      	ldr	r2, [pc, #288]	@ (8003d48 <HAL_GPIO_Init+0x2f4>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d013      	beq.n	8003c52 <HAL_GPIO_Init+0x1fe>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a47      	ldr	r2, [pc, #284]	@ (8003d4c <HAL_GPIO_Init+0x2f8>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00d      	beq.n	8003c4e <HAL_GPIO_Init+0x1fa>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a46      	ldr	r2, [pc, #280]	@ (8003d50 <HAL_GPIO_Init+0x2fc>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d007      	beq.n	8003c4a <HAL_GPIO_Init+0x1f6>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a45      	ldr	r2, [pc, #276]	@ (8003d54 <HAL_GPIO_Init+0x300>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d101      	bne.n	8003c46 <HAL_GPIO_Init+0x1f2>
 8003c42:	2304      	movs	r3, #4
 8003c44:	e008      	b.n	8003c58 <HAL_GPIO_Init+0x204>
 8003c46:	2307      	movs	r3, #7
 8003c48:	e006      	b.n	8003c58 <HAL_GPIO_Init+0x204>
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e004      	b.n	8003c58 <HAL_GPIO_Init+0x204>
 8003c4e:	2302      	movs	r3, #2
 8003c50:	e002      	b.n	8003c58 <HAL_GPIO_Init+0x204>
 8003c52:	2301      	movs	r3, #1
 8003c54:	e000      	b.n	8003c58 <HAL_GPIO_Init+0x204>
 8003c56:	2300      	movs	r3, #0
 8003c58:	69fa      	ldr	r2, [r7, #28]
 8003c5a:	f002 0203 	and.w	r2, r2, #3
 8003c5e:	0092      	lsls	r2, r2, #2
 8003c60:	4093      	lsls	r3, r2
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c68:	4935      	ldr	r1, [pc, #212]	@ (8003d40 <HAL_GPIO_Init+0x2ec>)
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	089b      	lsrs	r3, r3, #2
 8003c6e:	3302      	adds	r3, #2
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c76:	4b38      	ldr	r3, [pc, #224]	@ (8003d58 <HAL_GPIO_Init+0x304>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	43db      	mvns	r3, r3
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	4013      	ands	r3, r2
 8003c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c9a:	4a2f      	ldr	r2, [pc, #188]	@ (8003d58 <HAL_GPIO_Init+0x304>)
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ca0:	4b2d      	ldr	r3, [pc, #180]	@ (8003d58 <HAL_GPIO_Init+0x304>)
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	4013      	ands	r3, r2
 8003cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cc4:	4a24      	ldr	r2, [pc, #144]	@ (8003d58 <HAL_GPIO_Init+0x304>)
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cca:	4b23      	ldr	r3, [pc, #140]	@ (8003d58 <HAL_GPIO_Init+0x304>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	43db      	mvns	r3, r3
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cee:	4a1a      	ldr	r2, [pc, #104]	@ (8003d58 <HAL_GPIO_Init+0x304>)
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cf4:	4b18      	ldr	r3, [pc, #96]	@ (8003d58 <HAL_GPIO_Init+0x304>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	4013      	ands	r3, r2
 8003d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d003      	beq.n	8003d18 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d18:	4a0f      	ldr	r2, [pc, #60]	@ (8003d58 <HAL_GPIO_Init+0x304>)
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	3301      	adds	r3, #1
 8003d22:	61fb      	str	r3, [r7, #28]
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	2b0f      	cmp	r3, #15
 8003d28:	f67f aea2 	bls.w	8003a70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d2c:	bf00      	nop
 8003d2e:	bf00      	nop
 8003d30:	3724      	adds	r7, #36	@ 0x24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	40023800 	.word	0x40023800
 8003d40:	40013800 	.word	0x40013800
 8003d44:	40020000 	.word	0x40020000
 8003d48:	40020400 	.word	0x40020400
 8003d4c:	40020800 	.word	0x40020800
 8003d50:	40020c00 	.word	0x40020c00
 8003d54:	40021000 	.word	0x40021000
 8003d58:	40013c00 	.word	0x40013c00

08003d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	460b      	mov	r3, r1
 8003d66:	807b      	strh	r3, [r7, #2]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d6c:	787b      	ldrb	r3, [r7, #1]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d72:	887a      	ldrh	r2, [r7, #2]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d78:	e003      	b.n	8003d82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d7a:	887b      	ldrh	r3, [r7, #2]
 8003d7c:	041a      	lsls	r2, r3, #16
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	619a      	str	r2, [r3, #24]
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
	...

08003d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d94:	4b03      	ldr	r3, [pc, #12]	@ (8003da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d96:	681b      	ldr	r3, [r3, #0]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	20000094 	.word	0x20000094

08003da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003dac:	f7ff fff0 	bl	8003d90 <HAL_RCC_GetHCLKFreq>
 8003db0:	4602      	mov	r2, r0
 8003db2:	4b05      	ldr	r3, [pc, #20]	@ (8003dc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	0a9b      	lsrs	r3, r3, #10
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	4903      	ldr	r1, [pc, #12]	@ (8003dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dbe:	5ccb      	ldrb	r3, [r1, r3]
 8003dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	08006d64 	.word	0x08006d64

08003dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003dd4:	f7ff ffdc 	bl	8003d90 <HAL_RCC_GetHCLKFreq>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	4b05      	ldr	r3, [pc, #20]	@ (8003df0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	0b5b      	lsrs	r3, r3, #13
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	4903      	ldr	r1, [pc, #12]	@ (8003df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003de6:	5ccb      	ldrb	r3, [r1, r3]
 8003de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40023800 	.word	0x40023800
 8003df4:	08006d64 	.word	0x08006d64

08003df8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e042      	b.n	8003e90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d106      	bne.n	8003e24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7fe fd52 	bl	80028c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2224      	movs	r2, #36	@ 0x24
 8003e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68da      	ldr	r2, [r3, #12]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 ffcf 	bl	8004de0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695a      	ldr	r2, [r3, #20]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68da      	ldr	r2, [r3, #12]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b08a      	sub	sp, #40	@ 0x28
 8003e9c:	af02      	add	r7, sp, #8
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	603b      	str	r3, [r7, #0]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b20      	cmp	r3, #32
 8003eb6:	d175      	bne.n	8003fa4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d002      	beq.n	8003ec4 <HAL_UART_Transmit+0x2c>
 8003ebe:	88fb      	ldrh	r3, [r7, #6]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e06e      	b.n	8003fa6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2221      	movs	r2, #33	@ 0x21
 8003ed2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ed6:	f7ff f879 	bl	8002fcc <HAL_GetTick>
 8003eda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	88fa      	ldrh	r2, [r7, #6]
 8003ee0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	88fa      	ldrh	r2, [r7, #6]
 8003ee6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ef0:	d108      	bne.n	8003f04 <HAL_UART_Transmit+0x6c>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d104      	bne.n	8003f04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003efa:	2300      	movs	r3, #0
 8003efc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	61bb      	str	r3, [r7, #24]
 8003f02:	e003      	b.n	8003f0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f0c:	e02e      	b.n	8003f6c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	2200      	movs	r2, #0
 8003f16:	2180      	movs	r1, #128	@ 0x80
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 fca7 	bl	800486c <UART_WaitOnFlagUntilTimeout>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d005      	beq.n	8003f30 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2220      	movs	r2, #32
 8003f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e03a      	b.n	8003fa6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10b      	bne.n	8003f4e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	881b      	ldrh	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	3302      	adds	r3, #2
 8003f4a:	61bb      	str	r3, [r7, #24]
 8003f4c:	e007      	b.n	8003f5e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	781a      	ldrb	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1cb      	bne.n	8003f0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	2140      	movs	r1, #64	@ 0x40
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 fc73 	bl	800486c <UART_WaitOnFlagUntilTimeout>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d005      	beq.n	8003f98 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e006      	b.n	8003fa6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	e000      	b.n	8003fa6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003fa4:	2302      	movs	r3, #2
  }
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3720      	adds	r7, #32
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b084      	sub	sp, #16
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	60f8      	str	r0, [r7, #12]
 8003fb6:	60b9      	str	r1, [r7, #8]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b20      	cmp	r3, #32
 8003fc6:	d112      	bne.n	8003fee <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d002      	beq.n	8003fd4 <HAL_UART_Receive_DMA+0x26>
 8003fce:	88fb      	ldrh	r3, [r7, #6]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e00b      	b.n	8003ff0 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003fde:	88fb      	ldrh	r3, [r7, #6]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	68b9      	ldr	r1, [r7, #8]
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 fc9b 	bl	8004920 <UART_Start_Receive_DMA>
 8003fea:	4603      	mov	r3, r0
 8003fec:	e000      	b.n	8003ff0 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003fee:	2302      	movs	r3, #2
  }
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b090      	sub	sp, #64	@ 0x40
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004000:	2300      	movs	r3, #0
 8004002:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800400e:	2b80      	cmp	r3, #128	@ 0x80
 8004010:	bf0c      	ite	eq
 8004012:	2301      	moveq	r3, #1
 8004014:	2300      	movne	r3, #0
 8004016:	b2db      	uxtb	r3, r3
 8004018:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b21      	cmp	r3, #33	@ 0x21
 8004024:	d128      	bne.n	8004078 <HAL_UART_DMAStop+0x80>
 8004026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004028:	2b00      	cmp	r3, #0
 800402a:	d025      	beq.n	8004078 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3314      	adds	r3, #20
 8004032:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004036:	e853 3f00 	ldrex	r3, [r3]
 800403a:	623b      	str	r3, [r7, #32]
   return(result);
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004042:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	3314      	adds	r3, #20
 800404a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800404c:	633a      	str	r2, [r7, #48]	@ 0x30
 800404e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004050:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004052:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004054:	e841 2300 	strex	r3, r2, [r1]
 8004058:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800405a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1e5      	bne.n	800402c <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004064:	2b00      	cmp	r3, #0
 8004066:	d004      	beq.n	8004072 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff f9f5 	bl	800345c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 fcee 	bl	8004a54 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004082:	2b40      	cmp	r3, #64	@ 0x40
 8004084:	bf0c      	ite	eq
 8004086:	2301      	moveq	r3, #1
 8004088:	2300      	movne	r3, #0
 800408a:	b2db      	uxtb	r3, r3
 800408c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b22      	cmp	r3, #34	@ 0x22
 8004098:	d128      	bne.n	80040ec <HAL_UART_DMAStop+0xf4>
 800409a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800409c:	2b00      	cmp	r3, #0
 800409e:	d025      	beq.n	80040ec <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3314      	adds	r3, #20
 80040a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	e853 3f00 	ldrex	r3, [r3]
 80040ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	3314      	adds	r3, #20
 80040be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80040c0:	61fa      	str	r2, [r7, #28]
 80040c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c4:	69b9      	ldr	r1, [r7, #24]
 80040c6:	69fa      	ldr	r2, [r7, #28]
 80040c8:	e841 2300 	strex	r3, r2, [r1]
 80040cc:	617b      	str	r3, [r7, #20]
   return(result);
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1e5      	bne.n	80040a0 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d004      	beq.n	80040e6 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7ff f9bb 	bl	800345c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 fcdc 	bl	8004aa4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3740      	adds	r7, #64	@ 0x40
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b0ba      	sub	sp, #232	@ 0xe8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800411e:	2300      	movs	r3, #0
 8004120:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004124:	2300      	movs	r3, #0
 8004126:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800412a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800412e:	f003 030f 	and.w	r3, r3, #15
 8004132:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004136:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10f      	bne.n	800415e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800413e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004142:	f003 0320 	and.w	r3, r3, #32
 8004146:	2b00      	cmp	r3, #0
 8004148:	d009      	beq.n	800415e <HAL_UART_IRQHandler+0x66>
 800414a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800414e:	f003 0320 	and.w	r3, r3, #32
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 fd83 	bl	8004c62 <UART_Receive_IT>
      return;
 800415c:	e25b      	b.n	8004616 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800415e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 80de 	beq.w	8004324 <HAL_UART_IRQHandler+0x22c>
 8004168:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b00      	cmp	r3, #0
 8004172:	d106      	bne.n	8004182 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004178:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 80d1 	beq.w	8004324 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00b      	beq.n	80041a6 <HAL_UART_IRQHandler+0xae>
 800418e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004196:	2b00      	cmp	r3, #0
 8004198:	d005      	beq.n	80041a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419e:	f043 0201 	orr.w	r2, r3, #1
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041aa:	f003 0304 	and.w	r3, r3, #4
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00b      	beq.n	80041ca <HAL_UART_IRQHandler+0xd2>
 80041b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d005      	beq.n	80041ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041c2:	f043 0202 	orr.w	r2, r3, #2
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00b      	beq.n	80041ee <HAL_UART_IRQHandler+0xf6>
 80041d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d005      	beq.n	80041ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e6:	f043 0204 	orr.w	r2, r3, #4
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80041ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041f2:	f003 0308 	and.w	r3, r3, #8
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d011      	beq.n	800421e <HAL_UART_IRQHandler+0x126>
 80041fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041fe:	f003 0320 	and.w	r3, r3, #32
 8004202:	2b00      	cmp	r3, #0
 8004204:	d105      	bne.n	8004212 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	d005      	beq.n	800421e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004216:	f043 0208 	orr.w	r2, r3, #8
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 81f2 	beq.w	800460c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800422c:	f003 0320 	and.w	r3, r3, #32
 8004230:	2b00      	cmp	r3, #0
 8004232:	d008      	beq.n	8004246 <HAL_UART_IRQHandler+0x14e>
 8004234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004238:	f003 0320 	and.w	r3, r3, #32
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 fd0e 	bl	8004c62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004250:	2b40      	cmp	r3, #64	@ 0x40
 8004252:	bf0c      	ite	eq
 8004254:	2301      	moveq	r3, #1
 8004256:	2300      	movne	r3, #0
 8004258:	b2db      	uxtb	r3, r3
 800425a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004262:	f003 0308 	and.w	r3, r3, #8
 8004266:	2b00      	cmp	r3, #0
 8004268:	d103      	bne.n	8004272 <HAL_UART_IRQHandler+0x17a>
 800426a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800426e:	2b00      	cmp	r3, #0
 8004270:	d04f      	beq.n	8004312 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 fc16 	bl	8004aa4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004282:	2b40      	cmp	r3, #64	@ 0x40
 8004284:	d141      	bne.n	800430a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	3314      	adds	r3, #20
 800428c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004290:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004294:	e853 3f00 	ldrex	r3, [r3]
 8004298:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800429c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3314      	adds	r3, #20
 80042ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80042b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80042b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80042be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80042c2:	e841 2300 	strex	r3, r2, [r1]
 80042c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80042ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1d9      	bne.n	8004286 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d013      	beq.n	8004302 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042de:	4a7e      	ldr	r2, [pc, #504]	@ (80044d8 <HAL_UART_IRQHandler+0x3e0>)
 80042e0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7ff f928 	bl	800353c <HAL_DMA_Abort_IT>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d016      	beq.n	8004320 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80042fc:	4610      	mov	r0, r2
 80042fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004300:	e00e      	b.n	8004320 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f99e 	bl	8004644 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004308:	e00a      	b.n	8004320 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f99a 	bl	8004644 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004310:	e006      	b.n	8004320 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f996 	bl	8004644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800431e:	e175      	b.n	800460c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004320:	bf00      	nop
    return;
 8004322:	e173      	b.n	800460c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004328:	2b01      	cmp	r3, #1
 800432a:	f040 814f 	bne.w	80045cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800432e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004332:	f003 0310 	and.w	r3, r3, #16
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 8148 	beq.w	80045cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800433c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004340:	f003 0310 	and.w	r3, r3, #16
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 8141 	beq.w	80045cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800434a:	2300      	movs	r3, #0
 800434c:	60bb      	str	r3, [r7, #8]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	60bb      	str	r3, [r7, #8]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	60bb      	str	r3, [r7, #8]
 800435e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800436a:	2b40      	cmp	r3, #64	@ 0x40
 800436c:	f040 80b6 	bne.w	80044dc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800437c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 8145 	beq.w	8004610 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800438a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800438e:	429a      	cmp	r2, r3
 8004390:	f080 813e 	bcs.w	8004610 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800439a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043a6:	f000 8088 	beq.w	80044ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	330c      	adds	r3, #12
 80043b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80043b8:	e853 3f00 	ldrex	r3, [r3]
 80043bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80043c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80043c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	330c      	adds	r3, #12
 80043d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80043d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80043da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043de:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80043e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80043e6:	e841 2300 	strex	r3, r2, [r1]
 80043ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80043ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1d9      	bne.n	80043aa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	3314      	adds	r3, #20
 80043fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004400:	e853 3f00 	ldrex	r3, [r3]
 8004404:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004406:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004408:	f023 0301 	bic.w	r3, r3, #1
 800440c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	3314      	adds	r3, #20
 8004416:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800441a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800441e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004420:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004422:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004426:	e841 2300 	strex	r3, r2, [r1]
 800442a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800442c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1e1      	bne.n	80043f6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	3314      	adds	r3, #20
 8004438:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800443c:	e853 3f00 	ldrex	r3, [r3]
 8004440:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004442:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004444:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004448:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	3314      	adds	r3, #20
 8004452:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004456:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004458:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800445c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800445e:	e841 2300 	strex	r3, r2, [r1]
 8004462:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004464:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1e3      	bne.n	8004432 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2220      	movs	r2, #32
 800446e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	330c      	adds	r3, #12
 800447e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004480:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004482:	e853 3f00 	ldrex	r3, [r3]
 8004486:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004488:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800448a:	f023 0310 	bic.w	r3, r3, #16
 800448e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	330c      	adds	r3, #12
 8004498:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800449c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800449e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80044a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80044a4:	e841 2300 	strex	r3, r2, [r1]
 80044a8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80044aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1e3      	bne.n	8004478 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7fe ffd1 	bl	800345c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2202      	movs	r2, #2
 80044be:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	4619      	mov	r1, r3
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f8c1 	bl	8004658 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044d6:	e09b      	b.n	8004610 <HAL_UART_IRQHandler+0x518>
 80044d8:	08004b6b 	.word	0x08004b6b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 808e 	beq.w	8004614 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80044f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 8089 	beq.w	8004614 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	330c      	adds	r3, #12
 8004508:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800450c:	e853 3f00 	ldrex	r3, [r3]
 8004510:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004514:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004518:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	330c      	adds	r3, #12
 8004522:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004526:	647a      	str	r2, [r7, #68]	@ 0x44
 8004528:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800452c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800452e:	e841 2300 	strex	r3, r2, [r1]
 8004532:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004534:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1e3      	bne.n	8004502 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	3314      	adds	r3, #20
 8004540:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004544:	e853 3f00 	ldrex	r3, [r3]
 8004548:	623b      	str	r3, [r7, #32]
   return(result);
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	f023 0301 	bic.w	r3, r3, #1
 8004550:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3314      	adds	r3, #20
 800455a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800455e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004560:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004562:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004564:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004566:	e841 2300 	strex	r3, r2, [r1]
 800456a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800456c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1e3      	bne.n	800453a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2220      	movs	r2, #32
 8004576:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	330c      	adds	r3, #12
 8004586:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	e853 3f00 	ldrex	r3, [r3]
 800458e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f023 0310 	bic.w	r3, r3, #16
 8004596:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	330c      	adds	r3, #12
 80045a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80045a4:	61fa      	str	r2, [r7, #28]
 80045a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a8:	69b9      	ldr	r1, [r7, #24]
 80045aa:	69fa      	ldr	r2, [r7, #28]
 80045ac:	e841 2300 	strex	r3, r2, [r1]
 80045b0:	617b      	str	r3, [r7, #20]
   return(result);
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1e3      	bne.n	8004580 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2202      	movs	r2, #2
 80045bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045c2:	4619      	mov	r1, r3
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f847 	bl	8004658 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045ca:	e023      	b.n	8004614 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80045cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d009      	beq.n	80045ec <HAL_UART_IRQHandler+0x4f4>
 80045d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d003      	beq.n	80045ec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 fad4 	bl	8004b92 <UART_Transmit_IT>
    return;
 80045ea:	e014      	b.n	8004616 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00e      	beq.n	8004616 <HAL_UART_IRQHandler+0x51e>
 80045f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004600:	2b00      	cmp	r3, #0
 8004602:	d008      	beq.n	8004616 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 fb14 	bl	8004c32 <UART_EndTransmit_IT>
    return;
 800460a:	e004      	b.n	8004616 <HAL_UART_IRQHandler+0x51e>
    return;
 800460c:	bf00      	nop
 800460e:	e002      	b.n	8004616 <HAL_UART_IRQHandler+0x51e>
      return;
 8004610:	bf00      	nop
 8004612:	e000      	b.n	8004616 <HAL_UART_IRQHandler+0x51e>
      return;
 8004614:	bf00      	nop
  }
}
 8004616:	37e8      	adds	r7, #232	@ 0xe8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	460b      	mov	r3, r1
 8004662:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b09c      	sub	sp, #112	@ 0x70
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800467c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004688:	2b00      	cmp	r3, #0
 800468a:	d172      	bne.n	8004772 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800468c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800468e:	2200      	movs	r2, #0
 8004690:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004692:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	330c      	adds	r3, #12
 8004698:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800469c:	e853 3f00 	ldrex	r3, [r3]
 80046a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80046a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	330c      	adds	r3, #12
 80046b0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80046b2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80046b4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80046b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80046ba:	e841 2300 	strex	r3, r2, [r1]
 80046be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80046c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1e5      	bne.n	8004692 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	3314      	adds	r3, #20
 80046cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046d0:	e853 3f00 	ldrex	r3, [r3]
 80046d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80046d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046d8:	f023 0301 	bic.w	r3, r3, #1
 80046dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80046de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	3314      	adds	r3, #20
 80046e4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80046e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80046e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046ee:	e841 2300 	strex	r3, r2, [r1]
 80046f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1e5      	bne.n	80046c6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	3314      	adds	r3, #20
 8004700:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004704:	e853 3f00 	ldrex	r3, [r3]
 8004708:	623b      	str	r3, [r7, #32]
   return(result);
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004710:	663b      	str	r3, [r7, #96]	@ 0x60
 8004712:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	3314      	adds	r3, #20
 8004718:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800471a:	633a      	str	r2, [r7, #48]	@ 0x30
 800471c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004720:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004722:	e841 2300 	strex	r3, r2, [r1]
 8004726:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1e5      	bne.n	80046fa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800472e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004730:	2220      	movs	r2, #32
 8004732:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004736:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800473a:	2b01      	cmp	r3, #1
 800473c:	d119      	bne.n	8004772 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800473e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	330c      	adds	r3, #12
 8004744:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	e853 3f00 	ldrex	r3, [r3]
 800474c:	60fb      	str	r3, [r7, #12]
   return(result);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f023 0310 	bic.w	r3, r3, #16
 8004754:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004756:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	330c      	adds	r3, #12
 800475c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800475e:	61fa      	str	r2, [r7, #28]
 8004760:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004762:	69b9      	ldr	r1, [r7, #24]
 8004764:	69fa      	ldr	r2, [r7, #28]
 8004766:	e841 2300 	strex	r3, r2, [r1]
 800476a:	617b      	str	r3, [r7, #20]
   return(result);
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1e5      	bne.n	800473e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004772:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004774:	2200      	movs	r2, #0
 8004776:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004778:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800477a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800477c:	2b01      	cmp	r3, #1
 800477e:	d106      	bne.n	800478e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004780:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004782:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004784:	4619      	mov	r1, r3
 8004786:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004788:	f7ff ff66 	bl	8004658 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800478c:	e002      	b.n	8004794 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800478e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004790:	f7fb ff14 	bl	80005bc <HAL_UART_RxCpltCallback>
}
 8004794:	bf00      	nop
 8004796:	3770      	adds	r7, #112	@ 0x70
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2201      	movs	r2, #1
 80047ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d108      	bne.n	80047ca <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80047bc:	085b      	lsrs	r3, r3, #1
 80047be:	b29b      	uxth	r3, r3
 80047c0:	4619      	mov	r1, r3
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f7ff ff48 	bl	8004658 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80047c8:	e002      	b.n	80047d0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f7ff ff30 	bl	8004630 <HAL_UART_RxHalfCpltCallback>
}
 80047d0:	bf00      	nop
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047f4:	2b80      	cmp	r3, #128	@ 0x80
 80047f6:	bf0c      	ite	eq
 80047f8:	2301      	moveq	r3, #1
 80047fa:	2300      	movne	r3, #0
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b21      	cmp	r3, #33	@ 0x21
 800480a:	d108      	bne.n	800481e <UART_DMAError+0x46>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d005      	beq.n	800481e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	2200      	movs	r2, #0
 8004816:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004818:	68b8      	ldr	r0, [r7, #8]
 800481a:	f000 f91b 	bl	8004a54 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004828:	2b40      	cmp	r3, #64	@ 0x40
 800482a:	bf0c      	ite	eq
 800482c:	2301      	moveq	r3, #1
 800482e:	2300      	movne	r3, #0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b22      	cmp	r3, #34	@ 0x22
 800483e:	d108      	bne.n	8004852 <UART_DMAError+0x7a>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d005      	beq.n	8004852 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	2200      	movs	r2, #0
 800484a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800484c:	68b8      	ldr	r0, [r7, #8]
 800484e:	f000 f929 	bl	8004aa4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004856:	f043 0210 	orr.w	r2, r3, #16
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800485e:	68b8      	ldr	r0, [r7, #8]
 8004860:	f7ff fef0 	bl	8004644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004864:	bf00      	nop
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	603b      	str	r3, [r7, #0]
 8004878:	4613      	mov	r3, r2
 800487a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800487c:	e03b      	b.n	80048f6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004884:	d037      	beq.n	80048f6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004886:	f7fe fba1 	bl	8002fcc <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	6a3a      	ldr	r2, [r7, #32]
 8004892:	429a      	cmp	r2, r3
 8004894:	d302      	bcc.n	800489c <UART_WaitOnFlagUntilTimeout+0x30>
 8004896:	6a3b      	ldr	r3, [r7, #32]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e03a      	b.n	8004916 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	f003 0304 	and.w	r3, r3, #4
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d023      	beq.n	80048f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b80      	cmp	r3, #128	@ 0x80
 80048b2:	d020      	beq.n	80048f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2b40      	cmp	r3, #64	@ 0x40
 80048b8:	d01d      	beq.n	80048f6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0308 	and.w	r3, r3, #8
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	d116      	bne.n	80048f6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80048c8:	2300      	movs	r3, #0
 80048ca:	617b      	str	r3, [r7, #20]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	617b      	str	r3, [r7, #20]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	617b      	str	r3, [r7, #20]
 80048dc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f000 f8e0 	bl	8004aa4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2208      	movs	r2, #8
 80048e8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e00f      	b.n	8004916 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	4013      	ands	r3, r2
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	429a      	cmp	r2, r3
 8004904:	bf0c      	ite	eq
 8004906:	2301      	moveq	r3, #1
 8004908:	2300      	movne	r3, #0
 800490a:	b2db      	uxtb	r3, r3
 800490c:	461a      	mov	r2, r3
 800490e:	79fb      	ldrb	r3, [r7, #7]
 8004910:	429a      	cmp	r2, r3
 8004912:	d0b4      	beq.n	800487e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3718      	adds	r7, #24
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
	...

08004920 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b098      	sub	sp, #96	@ 0x60
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	4613      	mov	r3, r2
 800492c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	88fa      	ldrh	r2, [r7, #6]
 8004938:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2222      	movs	r2, #34	@ 0x22
 8004944:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800494c:	4a3e      	ldr	r2, [pc, #248]	@ (8004a48 <UART_Start_Receive_DMA+0x128>)
 800494e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004954:	4a3d      	ldr	r2, [pc, #244]	@ (8004a4c <UART_Start_Receive_DMA+0x12c>)
 8004956:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800495c:	4a3c      	ldr	r2, [pc, #240]	@ (8004a50 <UART_Start_Receive_DMA+0x130>)
 800495e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004964:	2200      	movs	r2, #0
 8004966:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004968:	f107 0308 	add.w	r3, r7, #8
 800496c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	3304      	adds	r3, #4
 8004978:	4619      	mov	r1, r3
 800497a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	88fb      	ldrh	r3, [r7, #6]
 8004980:	f7fe fd14 	bl	80033ac <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004984:	2300      	movs	r3, #0
 8004986:	613b      	str	r3, [r7, #16]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	613b      	str	r3, [r7, #16]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	613b      	str	r3, [r7, #16]
 8004998:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d019      	beq.n	80049d6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	330c      	adds	r3, #12
 80049a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049ac:	e853 3f00 	ldrex	r3, [r3]
 80049b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80049b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	330c      	adds	r3, #12
 80049c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80049c2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80049c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80049c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80049ca:	e841 2300 	strex	r3, r2, [r1]
 80049ce:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80049d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1e5      	bne.n	80049a2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	3314      	adds	r3, #20
 80049dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e0:	e853 3f00 	ldrex	r3, [r3]
 80049e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e8:	f043 0301 	orr.w	r3, r3, #1
 80049ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3314      	adds	r3, #20
 80049f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80049f6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80049f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80049fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80049fe:	e841 2300 	strex	r3, r2, [r1]
 8004a02:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1e5      	bne.n	80049d6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	3314      	adds	r3, #20
 8004a10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	e853 3f00 	ldrex	r3, [r3]
 8004a18:	617b      	str	r3, [r7, #20]
   return(result);
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a20:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	3314      	adds	r3, #20
 8004a28:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004a2a:	627a      	str	r2, [r7, #36]	@ 0x24
 8004a2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2e:	6a39      	ldr	r1, [r7, #32]
 8004a30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a32:	e841 2300 	strex	r3, r2, [r1]
 8004a36:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1e5      	bne.n	8004a0a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3760      	adds	r7, #96	@ 0x60
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	08004671 	.word	0x08004671
 8004a4c:	0800479d 	.word	0x0800479d
 8004a50:	080047d9 	.word	0x080047d9

08004a54 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b089      	sub	sp, #36	@ 0x24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	330c      	adds	r3, #12
 8004a62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	e853 3f00 	ldrex	r3, [r3]
 8004a6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004a72:	61fb      	str	r3, [r7, #28]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	330c      	adds	r3, #12
 8004a7a:	69fa      	ldr	r2, [r7, #28]
 8004a7c:	61ba      	str	r2, [r7, #24]
 8004a7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a80:	6979      	ldr	r1, [r7, #20]
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	e841 2300 	strex	r3, r2, [r1]
 8004a88:	613b      	str	r3, [r7, #16]
   return(result);
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1e5      	bne.n	8004a5c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004a98:	bf00      	nop
 8004a9a:	3724      	adds	r7, #36	@ 0x24
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b095      	sub	sp, #84	@ 0x54
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	330c      	adds	r3, #12
 8004ab2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ab6:	e853 3f00 	ldrex	r3, [r3]
 8004aba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004abe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	330c      	adds	r3, #12
 8004aca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004acc:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ad2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ad4:	e841 2300 	strex	r3, r2, [r1]
 8004ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1e5      	bne.n	8004aac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	3314      	adds	r3, #20
 8004ae6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae8:	6a3b      	ldr	r3, [r7, #32]
 8004aea:	e853 3f00 	ldrex	r3, [r3]
 8004aee:	61fb      	str	r3, [r7, #28]
   return(result);
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	f023 0301 	bic.w	r3, r3, #1
 8004af6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3314      	adds	r3, #20
 8004afe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b00:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b08:	e841 2300 	strex	r3, r2, [r1]
 8004b0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1e5      	bne.n	8004ae0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d119      	bne.n	8004b50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	330c      	adds	r3, #12
 8004b22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	e853 3f00 	ldrex	r3, [r3]
 8004b2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	f023 0310 	bic.w	r3, r3, #16
 8004b32:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	330c      	adds	r3, #12
 8004b3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b3c:	61ba      	str	r2, [r7, #24]
 8004b3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b40:	6979      	ldr	r1, [r7, #20]
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	e841 2300 	strex	r3, r2, [r1]
 8004b48:	613b      	str	r3, [r7, #16]
   return(result);
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1e5      	bne.n	8004b1c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2220      	movs	r2, #32
 8004b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004b5e:	bf00      	nop
 8004b60:	3754      	adds	r7, #84	@ 0x54
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f7ff fd5d 	bl	8004644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b8a:	bf00      	nop
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b085      	sub	sp, #20
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b21      	cmp	r3, #33	@ 0x21
 8004ba4:	d13e      	bne.n	8004c24 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bae:	d114      	bne.n	8004bda <UART_Transmit_IT+0x48>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d110      	bne.n	8004bda <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	881b      	ldrh	r3, [r3, #0]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bcc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	1c9a      	adds	r2, r3, #2
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	621a      	str	r2, [r3, #32]
 8004bd8:	e008      	b.n	8004bec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	1c59      	adds	r1, r3, #1
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	6211      	str	r1, [r2, #32]
 8004be4:	781a      	ldrb	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10f      	bne.n	8004c20 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68da      	ldr	r2, [r3, #12]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c0e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68da      	ldr	r2, [r3, #12]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c1e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c20:	2300      	movs	r3, #0
 8004c22:	e000      	b.n	8004c26 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c24:	2302      	movs	r3, #2
  }
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b082      	sub	sp, #8
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68da      	ldr	r2, [r3, #12]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2220      	movs	r2, #32
 8004c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7ff fce2 	bl	800461c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b08c      	sub	sp, #48	@ 0x30
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b22      	cmp	r3, #34	@ 0x22
 8004c74:	f040 80ae 	bne.w	8004dd4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c80:	d117      	bne.n	8004cb2 <UART_Receive_IT+0x50>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d113      	bne.n	8004cb2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c92:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004caa:	1c9a      	adds	r2, r3, #2
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	629a      	str	r2, [r3, #40]	@ 0x28
 8004cb0:	e026      	b.n	8004d00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cc4:	d007      	beq.n	8004cd6 <UART_Receive_IT+0x74>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10a      	bne.n	8004ce4 <UART_Receive_IT+0x82>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d106      	bne.n	8004ce4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	b2da      	uxtb	r2, r3
 8004cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce0:	701a      	strb	r2, [r3, #0]
 8004ce2:	e008      	b.n	8004cf6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cf0:	b2da      	uxtb	r2, r3
 8004cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cf4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cfa:	1c5a      	adds	r2, r3, #1
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	3b01      	subs	r3, #1
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d15d      	bne.n	8004dd0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68da      	ldr	r2, [r3, #12]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 0220 	bic.w	r2, r2, #32
 8004d22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68da      	ldr	r2, [r3, #12]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	695a      	ldr	r2, [r3, #20]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 0201 	bic.w	r2, r2, #1
 8004d42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2220      	movs	r2, #32
 8004d48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d135      	bne.n	8004dc6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	330c      	adds	r3, #12
 8004d66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	e853 3f00 	ldrex	r3, [r3]
 8004d6e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	f023 0310 	bic.w	r3, r3, #16
 8004d76:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	330c      	adds	r3, #12
 8004d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d80:	623a      	str	r2, [r7, #32]
 8004d82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d84:	69f9      	ldr	r1, [r7, #28]
 8004d86:	6a3a      	ldr	r2, [r7, #32]
 8004d88:	e841 2300 	strex	r3, r2, [r1]
 8004d8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1e5      	bne.n	8004d60 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0310 	and.w	r3, r3, #16
 8004d9e:	2b10      	cmp	r3, #16
 8004da0:	d10a      	bne.n	8004db8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004da2:	2300      	movs	r3, #0
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	60fb      	str	r3, [r7, #12]
 8004db6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7ff fc4a 	bl	8004658 <HAL_UARTEx_RxEventCallback>
 8004dc4:	e002      	b.n	8004dcc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7fb fbf8 	bl	80005bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	e002      	b.n	8004dd6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	e000      	b.n	8004dd6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004dd4:	2302      	movs	r3, #2
  }
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3730      	adds	r7, #48	@ 0x30
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
	...

08004de0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004de4:	b0c0      	sub	sp, #256	@ 0x100
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dfc:	68d9      	ldr	r1, [r3, #12]
 8004dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	ea40 0301 	orr.w	r3, r0, r1
 8004e08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	431a      	orrs	r2, r3
 8004e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004e38:	f021 010c 	bic.w	r1, r1, #12
 8004e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e46:	430b      	orrs	r3, r1
 8004e48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e5a:	6999      	ldr	r1, [r3, #24]
 8004e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	ea40 0301 	orr.w	r3, r0, r1
 8004e66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	4b8f      	ldr	r3, [pc, #572]	@ (80050ac <UART_SetConfig+0x2cc>)
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d005      	beq.n	8004e80 <UART_SetConfig+0xa0>
 8004e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	4b8d      	ldr	r3, [pc, #564]	@ (80050b0 <UART_SetConfig+0x2d0>)
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d104      	bne.n	8004e8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e80:	f7fe ffa6 	bl	8003dd0 <HAL_RCC_GetPCLK2Freq>
 8004e84:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004e88:	e003      	b.n	8004e92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e8a:	f7fe ff8d 	bl	8003da8 <HAL_RCC_GetPCLK1Freq>
 8004e8e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e96:	69db      	ldr	r3, [r3, #28]
 8004e98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e9c:	f040 810c 	bne.w	80050b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ea0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004eaa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004eae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004eb2:	4622      	mov	r2, r4
 8004eb4:	462b      	mov	r3, r5
 8004eb6:	1891      	adds	r1, r2, r2
 8004eb8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004eba:	415b      	adcs	r3, r3
 8004ebc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ebe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004ec2:	4621      	mov	r1, r4
 8004ec4:	eb12 0801 	adds.w	r8, r2, r1
 8004ec8:	4629      	mov	r1, r5
 8004eca:	eb43 0901 	adc.w	r9, r3, r1
 8004ece:	f04f 0200 	mov.w	r2, #0
 8004ed2:	f04f 0300 	mov.w	r3, #0
 8004ed6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004eda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ede:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ee2:	4690      	mov	r8, r2
 8004ee4:	4699      	mov	r9, r3
 8004ee6:	4623      	mov	r3, r4
 8004ee8:	eb18 0303 	adds.w	r3, r8, r3
 8004eec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ef0:	462b      	mov	r3, r5
 8004ef2:	eb49 0303 	adc.w	r3, r9, r3
 8004ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f06:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004f0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004f0e:	460b      	mov	r3, r1
 8004f10:	18db      	adds	r3, r3, r3
 8004f12:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f14:	4613      	mov	r3, r2
 8004f16:	eb42 0303 	adc.w	r3, r2, r3
 8004f1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004f20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004f24:	f7fb f9b4 	bl	8000290 <__aeabi_uldivmod>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	4b61      	ldr	r3, [pc, #388]	@ (80050b4 <UART_SetConfig+0x2d4>)
 8004f2e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f32:	095b      	lsrs	r3, r3, #5
 8004f34:	011c      	lsls	r4, r3, #4
 8004f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f40:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004f44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004f48:	4642      	mov	r2, r8
 8004f4a:	464b      	mov	r3, r9
 8004f4c:	1891      	adds	r1, r2, r2
 8004f4e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004f50:	415b      	adcs	r3, r3
 8004f52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f58:	4641      	mov	r1, r8
 8004f5a:	eb12 0a01 	adds.w	sl, r2, r1
 8004f5e:	4649      	mov	r1, r9
 8004f60:	eb43 0b01 	adc.w	fp, r3, r1
 8004f64:	f04f 0200 	mov.w	r2, #0
 8004f68:	f04f 0300 	mov.w	r3, #0
 8004f6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f78:	4692      	mov	sl, r2
 8004f7a:	469b      	mov	fp, r3
 8004f7c:	4643      	mov	r3, r8
 8004f7e:	eb1a 0303 	adds.w	r3, sl, r3
 8004f82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f86:	464b      	mov	r3, r9
 8004f88:	eb4b 0303 	adc.w	r3, fp, r3
 8004f8c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f9c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004fa0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	18db      	adds	r3, r3, r3
 8004fa8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004faa:	4613      	mov	r3, r2
 8004fac:	eb42 0303 	adc.w	r3, r2, r3
 8004fb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004fb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004fba:	f7fb f969 	bl	8000290 <__aeabi_uldivmod>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	4611      	mov	r1, r2
 8004fc4:	4b3b      	ldr	r3, [pc, #236]	@ (80050b4 <UART_SetConfig+0x2d4>)
 8004fc6:	fba3 2301 	umull	r2, r3, r3, r1
 8004fca:	095b      	lsrs	r3, r3, #5
 8004fcc:	2264      	movs	r2, #100	@ 0x64
 8004fce:	fb02 f303 	mul.w	r3, r2, r3
 8004fd2:	1acb      	subs	r3, r1, r3
 8004fd4:	00db      	lsls	r3, r3, #3
 8004fd6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004fda:	4b36      	ldr	r3, [pc, #216]	@ (80050b4 <UART_SetConfig+0x2d4>)
 8004fdc:	fba3 2302 	umull	r2, r3, r3, r2
 8004fe0:	095b      	lsrs	r3, r3, #5
 8004fe2:	005b      	lsls	r3, r3, #1
 8004fe4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004fe8:	441c      	add	r4, r3
 8004fea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ff4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004ff8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004ffc:	4642      	mov	r2, r8
 8004ffe:	464b      	mov	r3, r9
 8005000:	1891      	adds	r1, r2, r2
 8005002:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005004:	415b      	adcs	r3, r3
 8005006:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005008:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800500c:	4641      	mov	r1, r8
 800500e:	1851      	adds	r1, r2, r1
 8005010:	6339      	str	r1, [r7, #48]	@ 0x30
 8005012:	4649      	mov	r1, r9
 8005014:	414b      	adcs	r3, r1
 8005016:	637b      	str	r3, [r7, #52]	@ 0x34
 8005018:	f04f 0200 	mov.w	r2, #0
 800501c:	f04f 0300 	mov.w	r3, #0
 8005020:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005024:	4659      	mov	r1, fp
 8005026:	00cb      	lsls	r3, r1, #3
 8005028:	4651      	mov	r1, sl
 800502a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800502e:	4651      	mov	r1, sl
 8005030:	00ca      	lsls	r2, r1, #3
 8005032:	4610      	mov	r0, r2
 8005034:	4619      	mov	r1, r3
 8005036:	4603      	mov	r3, r0
 8005038:	4642      	mov	r2, r8
 800503a:	189b      	adds	r3, r3, r2
 800503c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005040:	464b      	mov	r3, r9
 8005042:	460a      	mov	r2, r1
 8005044:	eb42 0303 	adc.w	r3, r2, r3
 8005048:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800504c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005058:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800505c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005060:	460b      	mov	r3, r1
 8005062:	18db      	adds	r3, r3, r3
 8005064:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005066:	4613      	mov	r3, r2
 8005068:	eb42 0303 	adc.w	r3, r2, r3
 800506c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800506e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005072:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005076:	f7fb f90b 	bl	8000290 <__aeabi_uldivmod>
 800507a:	4602      	mov	r2, r0
 800507c:	460b      	mov	r3, r1
 800507e:	4b0d      	ldr	r3, [pc, #52]	@ (80050b4 <UART_SetConfig+0x2d4>)
 8005080:	fba3 1302 	umull	r1, r3, r3, r2
 8005084:	095b      	lsrs	r3, r3, #5
 8005086:	2164      	movs	r1, #100	@ 0x64
 8005088:	fb01 f303 	mul.w	r3, r1, r3
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	00db      	lsls	r3, r3, #3
 8005090:	3332      	adds	r3, #50	@ 0x32
 8005092:	4a08      	ldr	r2, [pc, #32]	@ (80050b4 <UART_SetConfig+0x2d4>)
 8005094:	fba2 2303 	umull	r2, r3, r2, r3
 8005098:	095b      	lsrs	r3, r3, #5
 800509a:	f003 0207 	and.w	r2, r3, #7
 800509e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4422      	add	r2, r4
 80050a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80050a8:	e106      	b.n	80052b8 <UART_SetConfig+0x4d8>
 80050aa:	bf00      	nop
 80050ac:	40011000 	.word	0x40011000
 80050b0:	40011400 	.word	0x40011400
 80050b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050bc:	2200      	movs	r2, #0
 80050be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80050c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80050c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80050ca:	4642      	mov	r2, r8
 80050cc:	464b      	mov	r3, r9
 80050ce:	1891      	adds	r1, r2, r2
 80050d0:	6239      	str	r1, [r7, #32]
 80050d2:	415b      	adcs	r3, r3
 80050d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80050d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050da:	4641      	mov	r1, r8
 80050dc:	1854      	adds	r4, r2, r1
 80050de:	4649      	mov	r1, r9
 80050e0:	eb43 0501 	adc.w	r5, r3, r1
 80050e4:	f04f 0200 	mov.w	r2, #0
 80050e8:	f04f 0300 	mov.w	r3, #0
 80050ec:	00eb      	lsls	r3, r5, #3
 80050ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050f2:	00e2      	lsls	r2, r4, #3
 80050f4:	4614      	mov	r4, r2
 80050f6:	461d      	mov	r5, r3
 80050f8:	4643      	mov	r3, r8
 80050fa:	18e3      	adds	r3, r4, r3
 80050fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005100:	464b      	mov	r3, r9
 8005102:	eb45 0303 	adc.w	r3, r5, r3
 8005106:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800510a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005116:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800511a:	f04f 0200 	mov.w	r2, #0
 800511e:	f04f 0300 	mov.w	r3, #0
 8005122:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005126:	4629      	mov	r1, r5
 8005128:	008b      	lsls	r3, r1, #2
 800512a:	4621      	mov	r1, r4
 800512c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005130:	4621      	mov	r1, r4
 8005132:	008a      	lsls	r2, r1, #2
 8005134:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005138:	f7fb f8aa 	bl	8000290 <__aeabi_uldivmod>
 800513c:	4602      	mov	r2, r0
 800513e:	460b      	mov	r3, r1
 8005140:	4b60      	ldr	r3, [pc, #384]	@ (80052c4 <UART_SetConfig+0x4e4>)
 8005142:	fba3 2302 	umull	r2, r3, r3, r2
 8005146:	095b      	lsrs	r3, r3, #5
 8005148:	011c      	lsls	r4, r3, #4
 800514a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800514e:	2200      	movs	r2, #0
 8005150:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005154:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005158:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800515c:	4642      	mov	r2, r8
 800515e:	464b      	mov	r3, r9
 8005160:	1891      	adds	r1, r2, r2
 8005162:	61b9      	str	r1, [r7, #24]
 8005164:	415b      	adcs	r3, r3
 8005166:	61fb      	str	r3, [r7, #28]
 8005168:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800516c:	4641      	mov	r1, r8
 800516e:	1851      	adds	r1, r2, r1
 8005170:	6139      	str	r1, [r7, #16]
 8005172:	4649      	mov	r1, r9
 8005174:	414b      	adcs	r3, r1
 8005176:	617b      	str	r3, [r7, #20]
 8005178:	f04f 0200 	mov.w	r2, #0
 800517c:	f04f 0300 	mov.w	r3, #0
 8005180:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005184:	4659      	mov	r1, fp
 8005186:	00cb      	lsls	r3, r1, #3
 8005188:	4651      	mov	r1, sl
 800518a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800518e:	4651      	mov	r1, sl
 8005190:	00ca      	lsls	r2, r1, #3
 8005192:	4610      	mov	r0, r2
 8005194:	4619      	mov	r1, r3
 8005196:	4603      	mov	r3, r0
 8005198:	4642      	mov	r2, r8
 800519a:	189b      	adds	r3, r3, r2
 800519c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80051a0:	464b      	mov	r3, r9
 80051a2:	460a      	mov	r2, r1
 80051a4:	eb42 0303 	adc.w	r3, r2, r3
 80051a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80051ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80051b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80051b8:	f04f 0200 	mov.w	r2, #0
 80051bc:	f04f 0300 	mov.w	r3, #0
 80051c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80051c4:	4649      	mov	r1, r9
 80051c6:	008b      	lsls	r3, r1, #2
 80051c8:	4641      	mov	r1, r8
 80051ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051ce:	4641      	mov	r1, r8
 80051d0:	008a      	lsls	r2, r1, #2
 80051d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80051d6:	f7fb f85b 	bl	8000290 <__aeabi_uldivmod>
 80051da:	4602      	mov	r2, r0
 80051dc:	460b      	mov	r3, r1
 80051de:	4611      	mov	r1, r2
 80051e0:	4b38      	ldr	r3, [pc, #224]	@ (80052c4 <UART_SetConfig+0x4e4>)
 80051e2:	fba3 2301 	umull	r2, r3, r3, r1
 80051e6:	095b      	lsrs	r3, r3, #5
 80051e8:	2264      	movs	r2, #100	@ 0x64
 80051ea:	fb02 f303 	mul.w	r3, r2, r3
 80051ee:	1acb      	subs	r3, r1, r3
 80051f0:	011b      	lsls	r3, r3, #4
 80051f2:	3332      	adds	r3, #50	@ 0x32
 80051f4:	4a33      	ldr	r2, [pc, #204]	@ (80052c4 <UART_SetConfig+0x4e4>)
 80051f6:	fba2 2303 	umull	r2, r3, r2, r3
 80051fa:	095b      	lsrs	r3, r3, #5
 80051fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005200:	441c      	add	r4, r3
 8005202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005206:	2200      	movs	r2, #0
 8005208:	673b      	str	r3, [r7, #112]	@ 0x70
 800520a:	677a      	str	r2, [r7, #116]	@ 0x74
 800520c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005210:	4642      	mov	r2, r8
 8005212:	464b      	mov	r3, r9
 8005214:	1891      	adds	r1, r2, r2
 8005216:	60b9      	str	r1, [r7, #8]
 8005218:	415b      	adcs	r3, r3
 800521a:	60fb      	str	r3, [r7, #12]
 800521c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005220:	4641      	mov	r1, r8
 8005222:	1851      	adds	r1, r2, r1
 8005224:	6039      	str	r1, [r7, #0]
 8005226:	4649      	mov	r1, r9
 8005228:	414b      	adcs	r3, r1
 800522a:	607b      	str	r3, [r7, #4]
 800522c:	f04f 0200 	mov.w	r2, #0
 8005230:	f04f 0300 	mov.w	r3, #0
 8005234:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005238:	4659      	mov	r1, fp
 800523a:	00cb      	lsls	r3, r1, #3
 800523c:	4651      	mov	r1, sl
 800523e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005242:	4651      	mov	r1, sl
 8005244:	00ca      	lsls	r2, r1, #3
 8005246:	4610      	mov	r0, r2
 8005248:	4619      	mov	r1, r3
 800524a:	4603      	mov	r3, r0
 800524c:	4642      	mov	r2, r8
 800524e:	189b      	adds	r3, r3, r2
 8005250:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005252:	464b      	mov	r3, r9
 8005254:	460a      	mov	r2, r1
 8005256:	eb42 0303 	adc.w	r3, r2, r3
 800525a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800525c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	663b      	str	r3, [r7, #96]	@ 0x60
 8005266:	667a      	str	r2, [r7, #100]	@ 0x64
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	f04f 0300 	mov.w	r3, #0
 8005270:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005274:	4649      	mov	r1, r9
 8005276:	008b      	lsls	r3, r1, #2
 8005278:	4641      	mov	r1, r8
 800527a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800527e:	4641      	mov	r1, r8
 8005280:	008a      	lsls	r2, r1, #2
 8005282:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005286:	f7fb f803 	bl	8000290 <__aeabi_uldivmod>
 800528a:	4602      	mov	r2, r0
 800528c:	460b      	mov	r3, r1
 800528e:	4b0d      	ldr	r3, [pc, #52]	@ (80052c4 <UART_SetConfig+0x4e4>)
 8005290:	fba3 1302 	umull	r1, r3, r3, r2
 8005294:	095b      	lsrs	r3, r3, #5
 8005296:	2164      	movs	r1, #100	@ 0x64
 8005298:	fb01 f303 	mul.w	r3, r1, r3
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	011b      	lsls	r3, r3, #4
 80052a0:	3332      	adds	r3, #50	@ 0x32
 80052a2:	4a08      	ldr	r2, [pc, #32]	@ (80052c4 <UART_SetConfig+0x4e4>)
 80052a4:	fba2 2303 	umull	r2, r3, r2, r3
 80052a8:	095b      	lsrs	r3, r3, #5
 80052aa:	f003 020f 	and.w	r2, r3, #15
 80052ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4422      	add	r2, r4
 80052b6:	609a      	str	r2, [r3, #8]
}
 80052b8:	bf00      	nop
 80052ba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80052be:	46bd      	mov	sp, r7
 80052c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052c4:	51eb851f 	.word	0x51eb851f

080052c8 <srand>:
 80052c8:	b538      	push	{r3, r4, r5, lr}
 80052ca:	4b10      	ldr	r3, [pc, #64]	@ (800530c <srand+0x44>)
 80052cc:	681d      	ldr	r5, [r3, #0]
 80052ce:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80052d0:	4604      	mov	r4, r0
 80052d2:	b9b3      	cbnz	r3, 8005302 <srand+0x3a>
 80052d4:	2018      	movs	r0, #24
 80052d6:	f000 fa8b 	bl	80057f0 <malloc>
 80052da:	4602      	mov	r2, r0
 80052dc:	6328      	str	r0, [r5, #48]	@ 0x30
 80052de:	b920      	cbnz	r0, 80052ea <srand+0x22>
 80052e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005310 <srand+0x48>)
 80052e2:	480c      	ldr	r0, [pc, #48]	@ (8005314 <srand+0x4c>)
 80052e4:	2146      	movs	r1, #70	@ 0x46
 80052e6:	f000 fa1b 	bl	8005720 <__assert_func>
 80052ea:	490b      	ldr	r1, [pc, #44]	@ (8005318 <srand+0x50>)
 80052ec:	4b0b      	ldr	r3, [pc, #44]	@ (800531c <srand+0x54>)
 80052ee:	e9c0 1300 	strd	r1, r3, [r0]
 80052f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005320 <srand+0x58>)
 80052f4:	6083      	str	r3, [r0, #8]
 80052f6:	230b      	movs	r3, #11
 80052f8:	8183      	strh	r3, [r0, #12]
 80052fa:	2100      	movs	r1, #0
 80052fc:	2001      	movs	r0, #1
 80052fe:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005302:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005304:	2200      	movs	r2, #0
 8005306:	611c      	str	r4, [r3, #16]
 8005308:	615a      	str	r2, [r3, #20]
 800530a:	bd38      	pop	{r3, r4, r5, pc}
 800530c:	200000ac 	.word	0x200000ac
 8005310:	08006d74 	.word	0x08006d74
 8005314:	08006d8b 	.word	0x08006d8b
 8005318:	abcd330e 	.word	0xabcd330e
 800531c:	e66d1234 	.word	0xe66d1234
 8005320:	0005deec 	.word	0x0005deec

08005324 <std>:
 8005324:	2300      	movs	r3, #0
 8005326:	b510      	push	{r4, lr}
 8005328:	4604      	mov	r4, r0
 800532a:	e9c0 3300 	strd	r3, r3, [r0]
 800532e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005332:	6083      	str	r3, [r0, #8]
 8005334:	8181      	strh	r1, [r0, #12]
 8005336:	6643      	str	r3, [r0, #100]	@ 0x64
 8005338:	81c2      	strh	r2, [r0, #14]
 800533a:	6183      	str	r3, [r0, #24]
 800533c:	4619      	mov	r1, r3
 800533e:	2208      	movs	r2, #8
 8005340:	305c      	adds	r0, #92	@ 0x5c
 8005342:	f000 f963 	bl	800560c <memset>
 8005346:	4b0d      	ldr	r3, [pc, #52]	@ (800537c <std+0x58>)
 8005348:	6263      	str	r3, [r4, #36]	@ 0x24
 800534a:	4b0d      	ldr	r3, [pc, #52]	@ (8005380 <std+0x5c>)
 800534c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800534e:	4b0d      	ldr	r3, [pc, #52]	@ (8005384 <std+0x60>)
 8005350:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005352:	4b0d      	ldr	r3, [pc, #52]	@ (8005388 <std+0x64>)
 8005354:	6323      	str	r3, [r4, #48]	@ 0x30
 8005356:	4b0d      	ldr	r3, [pc, #52]	@ (800538c <std+0x68>)
 8005358:	6224      	str	r4, [r4, #32]
 800535a:	429c      	cmp	r4, r3
 800535c:	d006      	beq.n	800536c <std+0x48>
 800535e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005362:	4294      	cmp	r4, r2
 8005364:	d002      	beq.n	800536c <std+0x48>
 8005366:	33d0      	adds	r3, #208	@ 0xd0
 8005368:	429c      	cmp	r4, r3
 800536a:	d105      	bne.n	8005378 <std+0x54>
 800536c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005374:	f000 b9c2 	b.w	80056fc <__retarget_lock_init_recursive>
 8005378:	bd10      	pop	{r4, pc}
 800537a:	bf00      	nop
 800537c:	080054ed 	.word	0x080054ed
 8005380:	0800550f 	.word	0x0800550f
 8005384:	08005547 	.word	0x08005547
 8005388:	0800556b 	.word	0x0800556b
 800538c:	200005cc 	.word	0x200005cc

08005390 <stdio_exit_handler>:
 8005390:	4a02      	ldr	r2, [pc, #8]	@ (800539c <stdio_exit_handler+0xc>)
 8005392:	4903      	ldr	r1, [pc, #12]	@ (80053a0 <stdio_exit_handler+0x10>)
 8005394:	4803      	ldr	r0, [pc, #12]	@ (80053a4 <stdio_exit_handler+0x14>)
 8005396:	f000 b869 	b.w	800546c <_fwalk_sglue>
 800539a:	bf00      	nop
 800539c:	200000a0 	.word	0x200000a0
 80053a0:	0800602d 	.word	0x0800602d
 80053a4:	200000b0 	.word	0x200000b0

080053a8 <cleanup_stdio>:
 80053a8:	6841      	ldr	r1, [r0, #4]
 80053aa:	4b0c      	ldr	r3, [pc, #48]	@ (80053dc <cleanup_stdio+0x34>)
 80053ac:	4299      	cmp	r1, r3
 80053ae:	b510      	push	{r4, lr}
 80053b0:	4604      	mov	r4, r0
 80053b2:	d001      	beq.n	80053b8 <cleanup_stdio+0x10>
 80053b4:	f000 fe3a 	bl	800602c <_fflush_r>
 80053b8:	68a1      	ldr	r1, [r4, #8]
 80053ba:	4b09      	ldr	r3, [pc, #36]	@ (80053e0 <cleanup_stdio+0x38>)
 80053bc:	4299      	cmp	r1, r3
 80053be:	d002      	beq.n	80053c6 <cleanup_stdio+0x1e>
 80053c0:	4620      	mov	r0, r4
 80053c2:	f000 fe33 	bl	800602c <_fflush_r>
 80053c6:	68e1      	ldr	r1, [r4, #12]
 80053c8:	4b06      	ldr	r3, [pc, #24]	@ (80053e4 <cleanup_stdio+0x3c>)
 80053ca:	4299      	cmp	r1, r3
 80053cc:	d004      	beq.n	80053d8 <cleanup_stdio+0x30>
 80053ce:	4620      	mov	r0, r4
 80053d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053d4:	f000 be2a 	b.w	800602c <_fflush_r>
 80053d8:	bd10      	pop	{r4, pc}
 80053da:	bf00      	nop
 80053dc:	200005cc 	.word	0x200005cc
 80053e0:	20000634 	.word	0x20000634
 80053e4:	2000069c 	.word	0x2000069c

080053e8 <global_stdio_init.part.0>:
 80053e8:	b510      	push	{r4, lr}
 80053ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005418 <global_stdio_init.part.0+0x30>)
 80053ec:	4c0b      	ldr	r4, [pc, #44]	@ (800541c <global_stdio_init.part.0+0x34>)
 80053ee:	4a0c      	ldr	r2, [pc, #48]	@ (8005420 <global_stdio_init.part.0+0x38>)
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	4620      	mov	r0, r4
 80053f4:	2200      	movs	r2, #0
 80053f6:	2104      	movs	r1, #4
 80053f8:	f7ff ff94 	bl	8005324 <std>
 80053fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005400:	2201      	movs	r2, #1
 8005402:	2109      	movs	r1, #9
 8005404:	f7ff ff8e 	bl	8005324 <std>
 8005408:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800540c:	2202      	movs	r2, #2
 800540e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005412:	2112      	movs	r1, #18
 8005414:	f7ff bf86 	b.w	8005324 <std>
 8005418:	20000704 	.word	0x20000704
 800541c:	200005cc 	.word	0x200005cc
 8005420:	08005391 	.word	0x08005391

08005424 <__sfp_lock_acquire>:
 8005424:	4801      	ldr	r0, [pc, #4]	@ (800542c <__sfp_lock_acquire+0x8>)
 8005426:	f000 b96a 	b.w	80056fe <__retarget_lock_acquire_recursive>
 800542a:	bf00      	nop
 800542c:	2000070d 	.word	0x2000070d

08005430 <__sfp_lock_release>:
 8005430:	4801      	ldr	r0, [pc, #4]	@ (8005438 <__sfp_lock_release+0x8>)
 8005432:	f000 b965 	b.w	8005700 <__retarget_lock_release_recursive>
 8005436:	bf00      	nop
 8005438:	2000070d 	.word	0x2000070d

0800543c <__sinit>:
 800543c:	b510      	push	{r4, lr}
 800543e:	4604      	mov	r4, r0
 8005440:	f7ff fff0 	bl	8005424 <__sfp_lock_acquire>
 8005444:	6a23      	ldr	r3, [r4, #32]
 8005446:	b11b      	cbz	r3, 8005450 <__sinit+0x14>
 8005448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800544c:	f7ff bff0 	b.w	8005430 <__sfp_lock_release>
 8005450:	4b04      	ldr	r3, [pc, #16]	@ (8005464 <__sinit+0x28>)
 8005452:	6223      	str	r3, [r4, #32]
 8005454:	4b04      	ldr	r3, [pc, #16]	@ (8005468 <__sinit+0x2c>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1f5      	bne.n	8005448 <__sinit+0xc>
 800545c:	f7ff ffc4 	bl	80053e8 <global_stdio_init.part.0>
 8005460:	e7f2      	b.n	8005448 <__sinit+0xc>
 8005462:	bf00      	nop
 8005464:	080053a9 	.word	0x080053a9
 8005468:	20000704 	.word	0x20000704

0800546c <_fwalk_sglue>:
 800546c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005470:	4607      	mov	r7, r0
 8005472:	4688      	mov	r8, r1
 8005474:	4614      	mov	r4, r2
 8005476:	2600      	movs	r6, #0
 8005478:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800547c:	f1b9 0901 	subs.w	r9, r9, #1
 8005480:	d505      	bpl.n	800548e <_fwalk_sglue+0x22>
 8005482:	6824      	ldr	r4, [r4, #0]
 8005484:	2c00      	cmp	r4, #0
 8005486:	d1f7      	bne.n	8005478 <_fwalk_sglue+0xc>
 8005488:	4630      	mov	r0, r6
 800548a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800548e:	89ab      	ldrh	r3, [r5, #12]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d907      	bls.n	80054a4 <_fwalk_sglue+0x38>
 8005494:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005498:	3301      	adds	r3, #1
 800549a:	d003      	beq.n	80054a4 <_fwalk_sglue+0x38>
 800549c:	4629      	mov	r1, r5
 800549e:	4638      	mov	r0, r7
 80054a0:	47c0      	blx	r8
 80054a2:	4306      	orrs	r6, r0
 80054a4:	3568      	adds	r5, #104	@ 0x68
 80054a6:	e7e9      	b.n	800547c <_fwalk_sglue+0x10>

080054a8 <siprintf>:
 80054a8:	b40e      	push	{r1, r2, r3}
 80054aa:	b510      	push	{r4, lr}
 80054ac:	b09d      	sub	sp, #116	@ 0x74
 80054ae:	ab1f      	add	r3, sp, #124	@ 0x7c
 80054b0:	9002      	str	r0, [sp, #8]
 80054b2:	9006      	str	r0, [sp, #24]
 80054b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80054b8:	480a      	ldr	r0, [pc, #40]	@ (80054e4 <siprintf+0x3c>)
 80054ba:	9107      	str	r1, [sp, #28]
 80054bc:	9104      	str	r1, [sp, #16]
 80054be:	490a      	ldr	r1, [pc, #40]	@ (80054e8 <siprintf+0x40>)
 80054c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80054c4:	9105      	str	r1, [sp, #20]
 80054c6:	2400      	movs	r4, #0
 80054c8:	a902      	add	r1, sp, #8
 80054ca:	6800      	ldr	r0, [r0, #0]
 80054cc:	9301      	str	r3, [sp, #4]
 80054ce:	941b      	str	r4, [sp, #108]	@ 0x6c
 80054d0:	f000 faa0 	bl	8005a14 <_svfiprintf_r>
 80054d4:	9b02      	ldr	r3, [sp, #8]
 80054d6:	701c      	strb	r4, [r3, #0]
 80054d8:	b01d      	add	sp, #116	@ 0x74
 80054da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054de:	b003      	add	sp, #12
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	200000ac 	.word	0x200000ac
 80054e8:	ffff0208 	.word	0xffff0208

080054ec <__sread>:
 80054ec:	b510      	push	{r4, lr}
 80054ee:	460c      	mov	r4, r1
 80054f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054f4:	f000 f8b4 	bl	8005660 <_read_r>
 80054f8:	2800      	cmp	r0, #0
 80054fa:	bfab      	itete	ge
 80054fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80054fe:	89a3      	ldrhlt	r3, [r4, #12]
 8005500:	181b      	addge	r3, r3, r0
 8005502:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005506:	bfac      	ite	ge
 8005508:	6563      	strge	r3, [r4, #84]	@ 0x54
 800550a:	81a3      	strhlt	r3, [r4, #12]
 800550c:	bd10      	pop	{r4, pc}

0800550e <__swrite>:
 800550e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005512:	461f      	mov	r7, r3
 8005514:	898b      	ldrh	r3, [r1, #12]
 8005516:	05db      	lsls	r3, r3, #23
 8005518:	4605      	mov	r5, r0
 800551a:	460c      	mov	r4, r1
 800551c:	4616      	mov	r6, r2
 800551e:	d505      	bpl.n	800552c <__swrite+0x1e>
 8005520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005524:	2302      	movs	r3, #2
 8005526:	2200      	movs	r2, #0
 8005528:	f000 f888 	bl	800563c <_lseek_r>
 800552c:	89a3      	ldrh	r3, [r4, #12]
 800552e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005532:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005536:	81a3      	strh	r3, [r4, #12]
 8005538:	4632      	mov	r2, r6
 800553a:	463b      	mov	r3, r7
 800553c:	4628      	mov	r0, r5
 800553e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005542:	f000 b89f 	b.w	8005684 <_write_r>

08005546 <__sseek>:
 8005546:	b510      	push	{r4, lr}
 8005548:	460c      	mov	r4, r1
 800554a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800554e:	f000 f875 	bl	800563c <_lseek_r>
 8005552:	1c43      	adds	r3, r0, #1
 8005554:	89a3      	ldrh	r3, [r4, #12]
 8005556:	bf15      	itete	ne
 8005558:	6560      	strne	r0, [r4, #84]	@ 0x54
 800555a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800555e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005562:	81a3      	strheq	r3, [r4, #12]
 8005564:	bf18      	it	ne
 8005566:	81a3      	strhne	r3, [r4, #12]
 8005568:	bd10      	pop	{r4, pc}

0800556a <__sclose>:
 800556a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800556e:	f000 b855 	b.w	800561c <_close_r>

08005572 <_vsniprintf_r>:
 8005572:	b530      	push	{r4, r5, lr}
 8005574:	4614      	mov	r4, r2
 8005576:	2c00      	cmp	r4, #0
 8005578:	b09b      	sub	sp, #108	@ 0x6c
 800557a:	4605      	mov	r5, r0
 800557c:	461a      	mov	r2, r3
 800557e:	da05      	bge.n	800558c <_vsniprintf_r+0x1a>
 8005580:	238b      	movs	r3, #139	@ 0x8b
 8005582:	6003      	str	r3, [r0, #0]
 8005584:	f04f 30ff 	mov.w	r0, #4294967295
 8005588:	b01b      	add	sp, #108	@ 0x6c
 800558a:	bd30      	pop	{r4, r5, pc}
 800558c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005590:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005594:	f04f 0300 	mov.w	r3, #0
 8005598:	9319      	str	r3, [sp, #100]	@ 0x64
 800559a:	bf14      	ite	ne
 800559c:	f104 33ff 	addne.w	r3, r4, #4294967295
 80055a0:	4623      	moveq	r3, r4
 80055a2:	9302      	str	r3, [sp, #8]
 80055a4:	9305      	str	r3, [sp, #20]
 80055a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80055aa:	9100      	str	r1, [sp, #0]
 80055ac:	9104      	str	r1, [sp, #16]
 80055ae:	f8ad 300e 	strh.w	r3, [sp, #14]
 80055b2:	4669      	mov	r1, sp
 80055b4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80055b6:	f000 fa2d 	bl	8005a14 <_svfiprintf_r>
 80055ba:	1c43      	adds	r3, r0, #1
 80055bc:	bfbc      	itt	lt
 80055be:	238b      	movlt	r3, #139	@ 0x8b
 80055c0:	602b      	strlt	r3, [r5, #0]
 80055c2:	2c00      	cmp	r4, #0
 80055c4:	d0e0      	beq.n	8005588 <_vsniprintf_r+0x16>
 80055c6:	9b00      	ldr	r3, [sp, #0]
 80055c8:	2200      	movs	r2, #0
 80055ca:	701a      	strb	r2, [r3, #0]
 80055cc:	e7dc      	b.n	8005588 <_vsniprintf_r+0x16>
	...

080055d0 <vsniprintf>:
 80055d0:	b507      	push	{r0, r1, r2, lr}
 80055d2:	9300      	str	r3, [sp, #0]
 80055d4:	4613      	mov	r3, r2
 80055d6:	460a      	mov	r2, r1
 80055d8:	4601      	mov	r1, r0
 80055da:	4803      	ldr	r0, [pc, #12]	@ (80055e8 <vsniprintf+0x18>)
 80055dc:	6800      	ldr	r0, [r0, #0]
 80055de:	f7ff ffc8 	bl	8005572 <_vsniprintf_r>
 80055e2:	b003      	add	sp, #12
 80055e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80055e8:	200000ac 	.word	0x200000ac

080055ec <memcmp>:
 80055ec:	b510      	push	{r4, lr}
 80055ee:	3901      	subs	r1, #1
 80055f0:	4402      	add	r2, r0
 80055f2:	4290      	cmp	r0, r2
 80055f4:	d101      	bne.n	80055fa <memcmp+0xe>
 80055f6:	2000      	movs	r0, #0
 80055f8:	e005      	b.n	8005606 <memcmp+0x1a>
 80055fa:	7803      	ldrb	r3, [r0, #0]
 80055fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005600:	42a3      	cmp	r3, r4
 8005602:	d001      	beq.n	8005608 <memcmp+0x1c>
 8005604:	1b18      	subs	r0, r3, r4
 8005606:	bd10      	pop	{r4, pc}
 8005608:	3001      	adds	r0, #1
 800560a:	e7f2      	b.n	80055f2 <memcmp+0x6>

0800560c <memset>:
 800560c:	4402      	add	r2, r0
 800560e:	4603      	mov	r3, r0
 8005610:	4293      	cmp	r3, r2
 8005612:	d100      	bne.n	8005616 <memset+0xa>
 8005614:	4770      	bx	lr
 8005616:	f803 1b01 	strb.w	r1, [r3], #1
 800561a:	e7f9      	b.n	8005610 <memset+0x4>

0800561c <_close_r>:
 800561c:	b538      	push	{r3, r4, r5, lr}
 800561e:	4d06      	ldr	r5, [pc, #24]	@ (8005638 <_close_r+0x1c>)
 8005620:	2300      	movs	r3, #0
 8005622:	4604      	mov	r4, r0
 8005624:	4608      	mov	r0, r1
 8005626:	602b      	str	r3, [r5, #0]
 8005628:	f7fd fbc4 	bl	8002db4 <_close>
 800562c:	1c43      	adds	r3, r0, #1
 800562e:	d102      	bne.n	8005636 <_close_r+0x1a>
 8005630:	682b      	ldr	r3, [r5, #0]
 8005632:	b103      	cbz	r3, 8005636 <_close_r+0x1a>
 8005634:	6023      	str	r3, [r4, #0]
 8005636:	bd38      	pop	{r3, r4, r5, pc}
 8005638:	20000708 	.word	0x20000708

0800563c <_lseek_r>:
 800563c:	b538      	push	{r3, r4, r5, lr}
 800563e:	4d07      	ldr	r5, [pc, #28]	@ (800565c <_lseek_r+0x20>)
 8005640:	4604      	mov	r4, r0
 8005642:	4608      	mov	r0, r1
 8005644:	4611      	mov	r1, r2
 8005646:	2200      	movs	r2, #0
 8005648:	602a      	str	r2, [r5, #0]
 800564a:	461a      	mov	r2, r3
 800564c:	f7fd fbd9 	bl	8002e02 <_lseek>
 8005650:	1c43      	adds	r3, r0, #1
 8005652:	d102      	bne.n	800565a <_lseek_r+0x1e>
 8005654:	682b      	ldr	r3, [r5, #0]
 8005656:	b103      	cbz	r3, 800565a <_lseek_r+0x1e>
 8005658:	6023      	str	r3, [r4, #0]
 800565a:	bd38      	pop	{r3, r4, r5, pc}
 800565c:	20000708 	.word	0x20000708

08005660 <_read_r>:
 8005660:	b538      	push	{r3, r4, r5, lr}
 8005662:	4d07      	ldr	r5, [pc, #28]	@ (8005680 <_read_r+0x20>)
 8005664:	4604      	mov	r4, r0
 8005666:	4608      	mov	r0, r1
 8005668:	4611      	mov	r1, r2
 800566a:	2200      	movs	r2, #0
 800566c:	602a      	str	r2, [r5, #0]
 800566e:	461a      	mov	r2, r3
 8005670:	f7fd fb67 	bl	8002d42 <_read>
 8005674:	1c43      	adds	r3, r0, #1
 8005676:	d102      	bne.n	800567e <_read_r+0x1e>
 8005678:	682b      	ldr	r3, [r5, #0]
 800567a:	b103      	cbz	r3, 800567e <_read_r+0x1e>
 800567c:	6023      	str	r3, [r4, #0]
 800567e:	bd38      	pop	{r3, r4, r5, pc}
 8005680:	20000708 	.word	0x20000708

08005684 <_write_r>:
 8005684:	b538      	push	{r3, r4, r5, lr}
 8005686:	4d07      	ldr	r5, [pc, #28]	@ (80056a4 <_write_r+0x20>)
 8005688:	4604      	mov	r4, r0
 800568a:	4608      	mov	r0, r1
 800568c:	4611      	mov	r1, r2
 800568e:	2200      	movs	r2, #0
 8005690:	602a      	str	r2, [r5, #0]
 8005692:	461a      	mov	r2, r3
 8005694:	f7fd fb72 	bl	8002d7c <_write>
 8005698:	1c43      	adds	r3, r0, #1
 800569a:	d102      	bne.n	80056a2 <_write_r+0x1e>
 800569c:	682b      	ldr	r3, [r5, #0]
 800569e:	b103      	cbz	r3, 80056a2 <_write_r+0x1e>
 80056a0:	6023      	str	r3, [r4, #0]
 80056a2:	bd38      	pop	{r3, r4, r5, pc}
 80056a4:	20000708 	.word	0x20000708

080056a8 <__errno>:
 80056a8:	4b01      	ldr	r3, [pc, #4]	@ (80056b0 <__errno+0x8>)
 80056aa:	6818      	ldr	r0, [r3, #0]
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	200000ac 	.word	0x200000ac

080056b4 <__libc_init_array>:
 80056b4:	b570      	push	{r4, r5, r6, lr}
 80056b6:	4d0d      	ldr	r5, [pc, #52]	@ (80056ec <__libc_init_array+0x38>)
 80056b8:	4c0d      	ldr	r4, [pc, #52]	@ (80056f0 <__libc_init_array+0x3c>)
 80056ba:	1b64      	subs	r4, r4, r5
 80056bc:	10a4      	asrs	r4, r4, #2
 80056be:	2600      	movs	r6, #0
 80056c0:	42a6      	cmp	r6, r4
 80056c2:	d109      	bne.n	80056d8 <__libc_init_array+0x24>
 80056c4:	4d0b      	ldr	r5, [pc, #44]	@ (80056f4 <__libc_init_array+0x40>)
 80056c6:	4c0c      	ldr	r4, [pc, #48]	@ (80056f8 <__libc_init_array+0x44>)
 80056c8:	f000 ffee 	bl	80066a8 <_init>
 80056cc:	1b64      	subs	r4, r4, r5
 80056ce:	10a4      	asrs	r4, r4, #2
 80056d0:	2600      	movs	r6, #0
 80056d2:	42a6      	cmp	r6, r4
 80056d4:	d105      	bne.n	80056e2 <__libc_init_array+0x2e>
 80056d6:	bd70      	pop	{r4, r5, r6, pc}
 80056d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80056dc:	4798      	blx	r3
 80056de:	3601      	adds	r6, #1
 80056e0:	e7ee      	b.n	80056c0 <__libc_init_array+0xc>
 80056e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80056e6:	4798      	blx	r3
 80056e8:	3601      	adds	r6, #1
 80056ea:	e7f2      	b.n	80056d2 <__libc_init_array+0x1e>
 80056ec:	08006e5c 	.word	0x08006e5c
 80056f0:	08006e5c 	.word	0x08006e5c
 80056f4:	08006e5c 	.word	0x08006e5c
 80056f8:	08006e60 	.word	0x08006e60

080056fc <__retarget_lock_init_recursive>:
 80056fc:	4770      	bx	lr

080056fe <__retarget_lock_acquire_recursive>:
 80056fe:	4770      	bx	lr

08005700 <__retarget_lock_release_recursive>:
 8005700:	4770      	bx	lr

08005702 <memcpy>:
 8005702:	440a      	add	r2, r1
 8005704:	4291      	cmp	r1, r2
 8005706:	f100 33ff 	add.w	r3, r0, #4294967295
 800570a:	d100      	bne.n	800570e <memcpy+0xc>
 800570c:	4770      	bx	lr
 800570e:	b510      	push	{r4, lr}
 8005710:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005714:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005718:	4291      	cmp	r1, r2
 800571a:	d1f9      	bne.n	8005710 <memcpy+0xe>
 800571c:	bd10      	pop	{r4, pc}
	...

08005720 <__assert_func>:
 8005720:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005722:	4614      	mov	r4, r2
 8005724:	461a      	mov	r2, r3
 8005726:	4b09      	ldr	r3, [pc, #36]	@ (800574c <__assert_func+0x2c>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4605      	mov	r5, r0
 800572c:	68d8      	ldr	r0, [r3, #12]
 800572e:	b14c      	cbz	r4, 8005744 <__assert_func+0x24>
 8005730:	4b07      	ldr	r3, [pc, #28]	@ (8005750 <__assert_func+0x30>)
 8005732:	9100      	str	r1, [sp, #0]
 8005734:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005738:	4906      	ldr	r1, [pc, #24]	@ (8005754 <__assert_func+0x34>)
 800573a:	462b      	mov	r3, r5
 800573c:	f000 fc9e 	bl	800607c <fiprintf>
 8005740:	f000 fcd8 	bl	80060f4 <abort>
 8005744:	4b04      	ldr	r3, [pc, #16]	@ (8005758 <__assert_func+0x38>)
 8005746:	461c      	mov	r4, r3
 8005748:	e7f3      	b.n	8005732 <__assert_func+0x12>
 800574a:	bf00      	nop
 800574c:	200000ac 	.word	0x200000ac
 8005750:	08006de3 	.word	0x08006de3
 8005754:	08006df0 	.word	0x08006df0
 8005758:	08006e1e 	.word	0x08006e1e

0800575c <_free_r>:
 800575c:	b538      	push	{r3, r4, r5, lr}
 800575e:	4605      	mov	r5, r0
 8005760:	2900      	cmp	r1, #0
 8005762:	d041      	beq.n	80057e8 <_free_r+0x8c>
 8005764:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005768:	1f0c      	subs	r4, r1, #4
 800576a:	2b00      	cmp	r3, #0
 800576c:	bfb8      	it	lt
 800576e:	18e4      	addlt	r4, r4, r3
 8005770:	f000 f8e8 	bl	8005944 <__malloc_lock>
 8005774:	4a1d      	ldr	r2, [pc, #116]	@ (80057ec <_free_r+0x90>)
 8005776:	6813      	ldr	r3, [r2, #0]
 8005778:	b933      	cbnz	r3, 8005788 <_free_r+0x2c>
 800577a:	6063      	str	r3, [r4, #4]
 800577c:	6014      	str	r4, [r2, #0]
 800577e:	4628      	mov	r0, r5
 8005780:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005784:	f000 b8e4 	b.w	8005950 <__malloc_unlock>
 8005788:	42a3      	cmp	r3, r4
 800578a:	d908      	bls.n	800579e <_free_r+0x42>
 800578c:	6820      	ldr	r0, [r4, #0]
 800578e:	1821      	adds	r1, r4, r0
 8005790:	428b      	cmp	r3, r1
 8005792:	bf01      	itttt	eq
 8005794:	6819      	ldreq	r1, [r3, #0]
 8005796:	685b      	ldreq	r3, [r3, #4]
 8005798:	1809      	addeq	r1, r1, r0
 800579a:	6021      	streq	r1, [r4, #0]
 800579c:	e7ed      	b.n	800577a <_free_r+0x1e>
 800579e:	461a      	mov	r2, r3
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	b10b      	cbz	r3, 80057a8 <_free_r+0x4c>
 80057a4:	42a3      	cmp	r3, r4
 80057a6:	d9fa      	bls.n	800579e <_free_r+0x42>
 80057a8:	6811      	ldr	r1, [r2, #0]
 80057aa:	1850      	adds	r0, r2, r1
 80057ac:	42a0      	cmp	r0, r4
 80057ae:	d10b      	bne.n	80057c8 <_free_r+0x6c>
 80057b0:	6820      	ldr	r0, [r4, #0]
 80057b2:	4401      	add	r1, r0
 80057b4:	1850      	adds	r0, r2, r1
 80057b6:	4283      	cmp	r3, r0
 80057b8:	6011      	str	r1, [r2, #0]
 80057ba:	d1e0      	bne.n	800577e <_free_r+0x22>
 80057bc:	6818      	ldr	r0, [r3, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	6053      	str	r3, [r2, #4]
 80057c2:	4408      	add	r0, r1
 80057c4:	6010      	str	r0, [r2, #0]
 80057c6:	e7da      	b.n	800577e <_free_r+0x22>
 80057c8:	d902      	bls.n	80057d0 <_free_r+0x74>
 80057ca:	230c      	movs	r3, #12
 80057cc:	602b      	str	r3, [r5, #0]
 80057ce:	e7d6      	b.n	800577e <_free_r+0x22>
 80057d0:	6820      	ldr	r0, [r4, #0]
 80057d2:	1821      	adds	r1, r4, r0
 80057d4:	428b      	cmp	r3, r1
 80057d6:	bf04      	itt	eq
 80057d8:	6819      	ldreq	r1, [r3, #0]
 80057da:	685b      	ldreq	r3, [r3, #4]
 80057dc:	6063      	str	r3, [r4, #4]
 80057de:	bf04      	itt	eq
 80057e0:	1809      	addeq	r1, r1, r0
 80057e2:	6021      	streq	r1, [r4, #0]
 80057e4:	6054      	str	r4, [r2, #4]
 80057e6:	e7ca      	b.n	800577e <_free_r+0x22>
 80057e8:	bd38      	pop	{r3, r4, r5, pc}
 80057ea:	bf00      	nop
 80057ec:	20000714 	.word	0x20000714

080057f0 <malloc>:
 80057f0:	4b02      	ldr	r3, [pc, #8]	@ (80057fc <malloc+0xc>)
 80057f2:	4601      	mov	r1, r0
 80057f4:	6818      	ldr	r0, [r3, #0]
 80057f6:	f000 b825 	b.w	8005844 <_malloc_r>
 80057fa:	bf00      	nop
 80057fc:	200000ac 	.word	0x200000ac

08005800 <sbrk_aligned>:
 8005800:	b570      	push	{r4, r5, r6, lr}
 8005802:	4e0f      	ldr	r6, [pc, #60]	@ (8005840 <sbrk_aligned+0x40>)
 8005804:	460c      	mov	r4, r1
 8005806:	6831      	ldr	r1, [r6, #0]
 8005808:	4605      	mov	r5, r0
 800580a:	b911      	cbnz	r1, 8005812 <sbrk_aligned+0x12>
 800580c:	f000 fc62 	bl	80060d4 <_sbrk_r>
 8005810:	6030      	str	r0, [r6, #0]
 8005812:	4621      	mov	r1, r4
 8005814:	4628      	mov	r0, r5
 8005816:	f000 fc5d 	bl	80060d4 <_sbrk_r>
 800581a:	1c43      	adds	r3, r0, #1
 800581c:	d103      	bne.n	8005826 <sbrk_aligned+0x26>
 800581e:	f04f 34ff 	mov.w	r4, #4294967295
 8005822:	4620      	mov	r0, r4
 8005824:	bd70      	pop	{r4, r5, r6, pc}
 8005826:	1cc4      	adds	r4, r0, #3
 8005828:	f024 0403 	bic.w	r4, r4, #3
 800582c:	42a0      	cmp	r0, r4
 800582e:	d0f8      	beq.n	8005822 <sbrk_aligned+0x22>
 8005830:	1a21      	subs	r1, r4, r0
 8005832:	4628      	mov	r0, r5
 8005834:	f000 fc4e 	bl	80060d4 <_sbrk_r>
 8005838:	3001      	adds	r0, #1
 800583a:	d1f2      	bne.n	8005822 <sbrk_aligned+0x22>
 800583c:	e7ef      	b.n	800581e <sbrk_aligned+0x1e>
 800583e:	bf00      	nop
 8005840:	20000710 	.word	0x20000710

08005844 <_malloc_r>:
 8005844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005848:	1ccd      	adds	r5, r1, #3
 800584a:	f025 0503 	bic.w	r5, r5, #3
 800584e:	3508      	adds	r5, #8
 8005850:	2d0c      	cmp	r5, #12
 8005852:	bf38      	it	cc
 8005854:	250c      	movcc	r5, #12
 8005856:	2d00      	cmp	r5, #0
 8005858:	4606      	mov	r6, r0
 800585a:	db01      	blt.n	8005860 <_malloc_r+0x1c>
 800585c:	42a9      	cmp	r1, r5
 800585e:	d904      	bls.n	800586a <_malloc_r+0x26>
 8005860:	230c      	movs	r3, #12
 8005862:	6033      	str	r3, [r6, #0]
 8005864:	2000      	movs	r0, #0
 8005866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800586a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005940 <_malloc_r+0xfc>
 800586e:	f000 f869 	bl	8005944 <__malloc_lock>
 8005872:	f8d8 3000 	ldr.w	r3, [r8]
 8005876:	461c      	mov	r4, r3
 8005878:	bb44      	cbnz	r4, 80058cc <_malloc_r+0x88>
 800587a:	4629      	mov	r1, r5
 800587c:	4630      	mov	r0, r6
 800587e:	f7ff ffbf 	bl	8005800 <sbrk_aligned>
 8005882:	1c43      	adds	r3, r0, #1
 8005884:	4604      	mov	r4, r0
 8005886:	d158      	bne.n	800593a <_malloc_r+0xf6>
 8005888:	f8d8 4000 	ldr.w	r4, [r8]
 800588c:	4627      	mov	r7, r4
 800588e:	2f00      	cmp	r7, #0
 8005890:	d143      	bne.n	800591a <_malloc_r+0xd6>
 8005892:	2c00      	cmp	r4, #0
 8005894:	d04b      	beq.n	800592e <_malloc_r+0xea>
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	4639      	mov	r1, r7
 800589a:	4630      	mov	r0, r6
 800589c:	eb04 0903 	add.w	r9, r4, r3
 80058a0:	f000 fc18 	bl	80060d4 <_sbrk_r>
 80058a4:	4581      	cmp	r9, r0
 80058a6:	d142      	bne.n	800592e <_malloc_r+0xea>
 80058a8:	6821      	ldr	r1, [r4, #0]
 80058aa:	1a6d      	subs	r5, r5, r1
 80058ac:	4629      	mov	r1, r5
 80058ae:	4630      	mov	r0, r6
 80058b0:	f7ff ffa6 	bl	8005800 <sbrk_aligned>
 80058b4:	3001      	adds	r0, #1
 80058b6:	d03a      	beq.n	800592e <_malloc_r+0xea>
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	442b      	add	r3, r5
 80058bc:	6023      	str	r3, [r4, #0]
 80058be:	f8d8 3000 	ldr.w	r3, [r8]
 80058c2:	685a      	ldr	r2, [r3, #4]
 80058c4:	bb62      	cbnz	r2, 8005920 <_malloc_r+0xdc>
 80058c6:	f8c8 7000 	str.w	r7, [r8]
 80058ca:	e00f      	b.n	80058ec <_malloc_r+0xa8>
 80058cc:	6822      	ldr	r2, [r4, #0]
 80058ce:	1b52      	subs	r2, r2, r5
 80058d0:	d420      	bmi.n	8005914 <_malloc_r+0xd0>
 80058d2:	2a0b      	cmp	r2, #11
 80058d4:	d917      	bls.n	8005906 <_malloc_r+0xc2>
 80058d6:	1961      	adds	r1, r4, r5
 80058d8:	42a3      	cmp	r3, r4
 80058da:	6025      	str	r5, [r4, #0]
 80058dc:	bf18      	it	ne
 80058de:	6059      	strne	r1, [r3, #4]
 80058e0:	6863      	ldr	r3, [r4, #4]
 80058e2:	bf08      	it	eq
 80058e4:	f8c8 1000 	streq.w	r1, [r8]
 80058e8:	5162      	str	r2, [r4, r5]
 80058ea:	604b      	str	r3, [r1, #4]
 80058ec:	4630      	mov	r0, r6
 80058ee:	f000 f82f 	bl	8005950 <__malloc_unlock>
 80058f2:	f104 000b 	add.w	r0, r4, #11
 80058f6:	1d23      	adds	r3, r4, #4
 80058f8:	f020 0007 	bic.w	r0, r0, #7
 80058fc:	1ac2      	subs	r2, r0, r3
 80058fe:	bf1c      	itt	ne
 8005900:	1a1b      	subne	r3, r3, r0
 8005902:	50a3      	strne	r3, [r4, r2]
 8005904:	e7af      	b.n	8005866 <_malloc_r+0x22>
 8005906:	6862      	ldr	r2, [r4, #4]
 8005908:	42a3      	cmp	r3, r4
 800590a:	bf0c      	ite	eq
 800590c:	f8c8 2000 	streq.w	r2, [r8]
 8005910:	605a      	strne	r2, [r3, #4]
 8005912:	e7eb      	b.n	80058ec <_malloc_r+0xa8>
 8005914:	4623      	mov	r3, r4
 8005916:	6864      	ldr	r4, [r4, #4]
 8005918:	e7ae      	b.n	8005878 <_malloc_r+0x34>
 800591a:	463c      	mov	r4, r7
 800591c:	687f      	ldr	r7, [r7, #4]
 800591e:	e7b6      	b.n	800588e <_malloc_r+0x4a>
 8005920:	461a      	mov	r2, r3
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	42a3      	cmp	r3, r4
 8005926:	d1fb      	bne.n	8005920 <_malloc_r+0xdc>
 8005928:	2300      	movs	r3, #0
 800592a:	6053      	str	r3, [r2, #4]
 800592c:	e7de      	b.n	80058ec <_malloc_r+0xa8>
 800592e:	230c      	movs	r3, #12
 8005930:	6033      	str	r3, [r6, #0]
 8005932:	4630      	mov	r0, r6
 8005934:	f000 f80c 	bl	8005950 <__malloc_unlock>
 8005938:	e794      	b.n	8005864 <_malloc_r+0x20>
 800593a:	6005      	str	r5, [r0, #0]
 800593c:	e7d6      	b.n	80058ec <_malloc_r+0xa8>
 800593e:	bf00      	nop
 8005940:	20000714 	.word	0x20000714

08005944 <__malloc_lock>:
 8005944:	4801      	ldr	r0, [pc, #4]	@ (800594c <__malloc_lock+0x8>)
 8005946:	f7ff beda 	b.w	80056fe <__retarget_lock_acquire_recursive>
 800594a:	bf00      	nop
 800594c:	2000070c 	.word	0x2000070c

08005950 <__malloc_unlock>:
 8005950:	4801      	ldr	r0, [pc, #4]	@ (8005958 <__malloc_unlock+0x8>)
 8005952:	f7ff bed5 	b.w	8005700 <__retarget_lock_release_recursive>
 8005956:	bf00      	nop
 8005958:	2000070c 	.word	0x2000070c

0800595c <__ssputs_r>:
 800595c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005960:	688e      	ldr	r6, [r1, #8]
 8005962:	461f      	mov	r7, r3
 8005964:	42be      	cmp	r6, r7
 8005966:	680b      	ldr	r3, [r1, #0]
 8005968:	4682      	mov	sl, r0
 800596a:	460c      	mov	r4, r1
 800596c:	4690      	mov	r8, r2
 800596e:	d82d      	bhi.n	80059cc <__ssputs_r+0x70>
 8005970:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005974:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005978:	d026      	beq.n	80059c8 <__ssputs_r+0x6c>
 800597a:	6965      	ldr	r5, [r4, #20]
 800597c:	6909      	ldr	r1, [r1, #16]
 800597e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005982:	eba3 0901 	sub.w	r9, r3, r1
 8005986:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800598a:	1c7b      	adds	r3, r7, #1
 800598c:	444b      	add	r3, r9
 800598e:	106d      	asrs	r5, r5, #1
 8005990:	429d      	cmp	r5, r3
 8005992:	bf38      	it	cc
 8005994:	461d      	movcc	r5, r3
 8005996:	0553      	lsls	r3, r2, #21
 8005998:	d527      	bpl.n	80059ea <__ssputs_r+0x8e>
 800599a:	4629      	mov	r1, r5
 800599c:	f7ff ff52 	bl	8005844 <_malloc_r>
 80059a0:	4606      	mov	r6, r0
 80059a2:	b360      	cbz	r0, 80059fe <__ssputs_r+0xa2>
 80059a4:	6921      	ldr	r1, [r4, #16]
 80059a6:	464a      	mov	r2, r9
 80059a8:	f7ff feab 	bl	8005702 <memcpy>
 80059ac:	89a3      	ldrh	r3, [r4, #12]
 80059ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80059b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059b6:	81a3      	strh	r3, [r4, #12]
 80059b8:	6126      	str	r6, [r4, #16]
 80059ba:	6165      	str	r5, [r4, #20]
 80059bc:	444e      	add	r6, r9
 80059be:	eba5 0509 	sub.w	r5, r5, r9
 80059c2:	6026      	str	r6, [r4, #0]
 80059c4:	60a5      	str	r5, [r4, #8]
 80059c6:	463e      	mov	r6, r7
 80059c8:	42be      	cmp	r6, r7
 80059ca:	d900      	bls.n	80059ce <__ssputs_r+0x72>
 80059cc:	463e      	mov	r6, r7
 80059ce:	6820      	ldr	r0, [r4, #0]
 80059d0:	4632      	mov	r2, r6
 80059d2:	4641      	mov	r1, r8
 80059d4:	f000 fb64 	bl	80060a0 <memmove>
 80059d8:	68a3      	ldr	r3, [r4, #8]
 80059da:	1b9b      	subs	r3, r3, r6
 80059dc:	60a3      	str	r3, [r4, #8]
 80059de:	6823      	ldr	r3, [r4, #0]
 80059e0:	4433      	add	r3, r6
 80059e2:	6023      	str	r3, [r4, #0]
 80059e4:	2000      	movs	r0, #0
 80059e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ea:	462a      	mov	r2, r5
 80059ec:	f000 fb89 	bl	8006102 <_realloc_r>
 80059f0:	4606      	mov	r6, r0
 80059f2:	2800      	cmp	r0, #0
 80059f4:	d1e0      	bne.n	80059b8 <__ssputs_r+0x5c>
 80059f6:	6921      	ldr	r1, [r4, #16]
 80059f8:	4650      	mov	r0, sl
 80059fa:	f7ff feaf 	bl	800575c <_free_r>
 80059fe:	230c      	movs	r3, #12
 8005a00:	f8ca 3000 	str.w	r3, [sl]
 8005a04:	89a3      	ldrh	r3, [r4, #12]
 8005a06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a0a:	81a3      	strh	r3, [r4, #12]
 8005a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a10:	e7e9      	b.n	80059e6 <__ssputs_r+0x8a>
	...

08005a14 <_svfiprintf_r>:
 8005a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a18:	4698      	mov	r8, r3
 8005a1a:	898b      	ldrh	r3, [r1, #12]
 8005a1c:	061b      	lsls	r3, r3, #24
 8005a1e:	b09d      	sub	sp, #116	@ 0x74
 8005a20:	4607      	mov	r7, r0
 8005a22:	460d      	mov	r5, r1
 8005a24:	4614      	mov	r4, r2
 8005a26:	d510      	bpl.n	8005a4a <_svfiprintf_r+0x36>
 8005a28:	690b      	ldr	r3, [r1, #16]
 8005a2a:	b973      	cbnz	r3, 8005a4a <_svfiprintf_r+0x36>
 8005a2c:	2140      	movs	r1, #64	@ 0x40
 8005a2e:	f7ff ff09 	bl	8005844 <_malloc_r>
 8005a32:	6028      	str	r0, [r5, #0]
 8005a34:	6128      	str	r0, [r5, #16]
 8005a36:	b930      	cbnz	r0, 8005a46 <_svfiprintf_r+0x32>
 8005a38:	230c      	movs	r3, #12
 8005a3a:	603b      	str	r3, [r7, #0]
 8005a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a40:	b01d      	add	sp, #116	@ 0x74
 8005a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a46:	2340      	movs	r3, #64	@ 0x40
 8005a48:	616b      	str	r3, [r5, #20]
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a4e:	2320      	movs	r3, #32
 8005a50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a54:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a58:	2330      	movs	r3, #48	@ 0x30
 8005a5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005bf8 <_svfiprintf_r+0x1e4>
 8005a5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a62:	f04f 0901 	mov.w	r9, #1
 8005a66:	4623      	mov	r3, r4
 8005a68:	469a      	mov	sl, r3
 8005a6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a6e:	b10a      	cbz	r2, 8005a74 <_svfiprintf_r+0x60>
 8005a70:	2a25      	cmp	r2, #37	@ 0x25
 8005a72:	d1f9      	bne.n	8005a68 <_svfiprintf_r+0x54>
 8005a74:	ebba 0b04 	subs.w	fp, sl, r4
 8005a78:	d00b      	beq.n	8005a92 <_svfiprintf_r+0x7e>
 8005a7a:	465b      	mov	r3, fp
 8005a7c:	4622      	mov	r2, r4
 8005a7e:	4629      	mov	r1, r5
 8005a80:	4638      	mov	r0, r7
 8005a82:	f7ff ff6b 	bl	800595c <__ssputs_r>
 8005a86:	3001      	adds	r0, #1
 8005a88:	f000 80a7 	beq.w	8005bda <_svfiprintf_r+0x1c6>
 8005a8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a8e:	445a      	add	r2, fp
 8005a90:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a92:	f89a 3000 	ldrb.w	r3, [sl]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 809f 	beq.w	8005bda <_svfiprintf_r+0x1c6>
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8005aa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005aa6:	f10a 0a01 	add.w	sl, sl, #1
 8005aaa:	9304      	str	r3, [sp, #16]
 8005aac:	9307      	str	r3, [sp, #28]
 8005aae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005ab2:	931a      	str	r3, [sp, #104]	@ 0x68
 8005ab4:	4654      	mov	r4, sl
 8005ab6:	2205      	movs	r2, #5
 8005ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005abc:	484e      	ldr	r0, [pc, #312]	@ (8005bf8 <_svfiprintf_r+0x1e4>)
 8005abe:	f7fa fb97 	bl	80001f0 <memchr>
 8005ac2:	9a04      	ldr	r2, [sp, #16]
 8005ac4:	b9d8      	cbnz	r0, 8005afe <_svfiprintf_r+0xea>
 8005ac6:	06d0      	lsls	r0, r2, #27
 8005ac8:	bf44      	itt	mi
 8005aca:	2320      	movmi	r3, #32
 8005acc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ad0:	0711      	lsls	r1, r2, #28
 8005ad2:	bf44      	itt	mi
 8005ad4:	232b      	movmi	r3, #43	@ 0x2b
 8005ad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ada:	f89a 3000 	ldrb.w	r3, [sl]
 8005ade:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ae0:	d015      	beq.n	8005b0e <_svfiprintf_r+0xfa>
 8005ae2:	9a07      	ldr	r2, [sp, #28]
 8005ae4:	4654      	mov	r4, sl
 8005ae6:	2000      	movs	r0, #0
 8005ae8:	f04f 0c0a 	mov.w	ip, #10
 8005aec:	4621      	mov	r1, r4
 8005aee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005af2:	3b30      	subs	r3, #48	@ 0x30
 8005af4:	2b09      	cmp	r3, #9
 8005af6:	d94b      	bls.n	8005b90 <_svfiprintf_r+0x17c>
 8005af8:	b1b0      	cbz	r0, 8005b28 <_svfiprintf_r+0x114>
 8005afa:	9207      	str	r2, [sp, #28]
 8005afc:	e014      	b.n	8005b28 <_svfiprintf_r+0x114>
 8005afe:	eba0 0308 	sub.w	r3, r0, r8
 8005b02:	fa09 f303 	lsl.w	r3, r9, r3
 8005b06:	4313      	orrs	r3, r2
 8005b08:	9304      	str	r3, [sp, #16]
 8005b0a:	46a2      	mov	sl, r4
 8005b0c:	e7d2      	b.n	8005ab4 <_svfiprintf_r+0xa0>
 8005b0e:	9b03      	ldr	r3, [sp, #12]
 8005b10:	1d19      	adds	r1, r3, #4
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	9103      	str	r1, [sp, #12]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	bfbb      	ittet	lt
 8005b1a:	425b      	neglt	r3, r3
 8005b1c:	f042 0202 	orrlt.w	r2, r2, #2
 8005b20:	9307      	strge	r3, [sp, #28]
 8005b22:	9307      	strlt	r3, [sp, #28]
 8005b24:	bfb8      	it	lt
 8005b26:	9204      	strlt	r2, [sp, #16]
 8005b28:	7823      	ldrb	r3, [r4, #0]
 8005b2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b2c:	d10a      	bne.n	8005b44 <_svfiprintf_r+0x130>
 8005b2e:	7863      	ldrb	r3, [r4, #1]
 8005b30:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b32:	d132      	bne.n	8005b9a <_svfiprintf_r+0x186>
 8005b34:	9b03      	ldr	r3, [sp, #12]
 8005b36:	1d1a      	adds	r2, r3, #4
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	9203      	str	r2, [sp, #12]
 8005b3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b40:	3402      	adds	r4, #2
 8005b42:	9305      	str	r3, [sp, #20]
 8005b44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005c08 <_svfiprintf_r+0x1f4>
 8005b48:	7821      	ldrb	r1, [r4, #0]
 8005b4a:	2203      	movs	r2, #3
 8005b4c:	4650      	mov	r0, sl
 8005b4e:	f7fa fb4f 	bl	80001f0 <memchr>
 8005b52:	b138      	cbz	r0, 8005b64 <_svfiprintf_r+0x150>
 8005b54:	9b04      	ldr	r3, [sp, #16]
 8005b56:	eba0 000a 	sub.w	r0, r0, sl
 8005b5a:	2240      	movs	r2, #64	@ 0x40
 8005b5c:	4082      	lsls	r2, r0
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	3401      	adds	r4, #1
 8005b62:	9304      	str	r3, [sp, #16]
 8005b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b68:	4824      	ldr	r0, [pc, #144]	@ (8005bfc <_svfiprintf_r+0x1e8>)
 8005b6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b6e:	2206      	movs	r2, #6
 8005b70:	f7fa fb3e 	bl	80001f0 <memchr>
 8005b74:	2800      	cmp	r0, #0
 8005b76:	d036      	beq.n	8005be6 <_svfiprintf_r+0x1d2>
 8005b78:	4b21      	ldr	r3, [pc, #132]	@ (8005c00 <_svfiprintf_r+0x1ec>)
 8005b7a:	bb1b      	cbnz	r3, 8005bc4 <_svfiprintf_r+0x1b0>
 8005b7c:	9b03      	ldr	r3, [sp, #12]
 8005b7e:	3307      	adds	r3, #7
 8005b80:	f023 0307 	bic.w	r3, r3, #7
 8005b84:	3308      	adds	r3, #8
 8005b86:	9303      	str	r3, [sp, #12]
 8005b88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b8a:	4433      	add	r3, r6
 8005b8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b8e:	e76a      	b.n	8005a66 <_svfiprintf_r+0x52>
 8005b90:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b94:	460c      	mov	r4, r1
 8005b96:	2001      	movs	r0, #1
 8005b98:	e7a8      	b.n	8005aec <_svfiprintf_r+0xd8>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	3401      	adds	r4, #1
 8005b9e:	9305      	str	r3, [sp, #20]
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	f04f 0c0a 	mov.w	ip, #10
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bac:	3a30      	subs	r2, #48	@ 0x30
 8005bae:	2a09      	cmp	r2, #9
 8005bb0:	d903      	bls.n	8005bba <_svfiprintf_r+0x1a6>
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d0c6      	beq.n	8005b44 <_svfiprintf_r+0x130>
 8005bb6:	9105      	str	r1, [sp, #20]
 8005bb8:	e7c4      	b.n	8005b44 <_svfiprintf_r+0x130>
 8005bba:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bbe:	4604      	mov	r4, r0
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e7f0      	b.n	8005ba6 <_svfiprintf_r+0x192>
 8005bc4:	ab03      	add	r3, sp, #12
 8005bc6:	9300      	str	r3, [sp, #0]
 8005bc8:	462a      	mov	r2, r5
 8005bca:	4b0e      	ldr	r3, [pc, #56]	@ (8005c04 <_svfiprintf_r+0x1f0>)
 8005bcc:	a904      	add	r1, sp, #16
 8005bce:	4638      	mov	r0, r7
 8005bd0:	f3af 8000 	nop.w
 8005bd4:	1c42      	adds	r2, r0, #1
 8005bd6:	4606      	mov	r6, r0
 8005bd8:	d1d6      	bne.n	8005b88 <_svfiprintf_r+0x174>
 8005bda:	89ab      	ldrh	r3, [r5, #12]
 8005bdc:	065b      	lsls	r3, r3, #25
 8005bde:	f53f af2d 	bmi.w	8005a3c <_svfiprintf_r+0x28>
 8005be2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005be4:	e72c      	b.n	8005a40 <_svfiprintf_r+0x2c>
 8005be6:	ab03      	add	r3, sp, #12
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	462a      	mov	r2, r5
 8005bec:	4b05      	ldr	r3, [pc, #20]	@ (8005c04 <_svfiprintf_r+0x1f0>)
 8005bee:	a904      	add	r1, sp, #16
 8005bf0:	4638      	mov	r0, r7
 8005bf2:	f000 f879 	bl	8005ce8 <_printf_i>
 8005bf6:	e7ed      	b.n	8005bd4 <_svfiprintf_r+0x1c0>
 8005bf8:	08006e1f 	.word	0x08006e1f
 8005bfc:	08006e29 	.word	0x08006e29
 8005c00:	00000000 	.word	0x00000000
 8005c04:	0800595d 	.word	0x0800595d
 8005c08:	08006e25 	.word	0x08006e25

08005c0c <_printf_common>:
 8005c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c10:	4616      	mov	r6, r2
 8005c12:	4698      	mov	r8, r3
 8005c14:	688a      	ldr	r2, [r1, #8]
 8005c16:	690b      	ldr	r3, [r1, #16]
 8005c18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	bfb8      	it	lt
 8005c20:	4613      	movlt	r3, r2
 8005c22:	6033      	str	r3, [r6, #0]
 8005c24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c28:	4607      	mov	r7, r0
 8005c2a:	460c      	mov	r4, r1
 8005c2c:	b10a      	cbz	r2, 8005c32 <_printf_common+0x26>
 8005c2e:	3301      	adds	r3, #1
 8005c30:	6033      	str	r3, [r6, #0]
 8005c32:	6823      	ldr	r3, [r4, #0]
 8005c34:	0699      	lsls	r1, r3, #26
 8005c36:	bf42      	ittt	mi
 8005c38:	6833      	ldrmi	r3, [r6, #0]
 8005c3a:	3302      	addmi	r3, #2
 8005c3c:	6033      	strmi	r3, [r6, #0]
 8005c3e:	6825      	ldr	r5, [r4, #0]
 8005c40:	f015 0506 	ands.w	r5, r5, #6
 8005c44:	d106      	bne.n	8005c54 <_printf_common+0x48>
 8005c46:	f104 0a19 	add.w	sl, r4, #25
 8005c4a:	68e3      	ldr	r3, [r4, #12]
 8005c4c:	6832      	ldr	r2, [r6, #0]
 8005c4e:	1a9b      	subs	r3, r3, r2
 8005c50:	42ab      	cmp	r3, r5
 8005c52:	dc26      	bgt.n	8005ca2 <_printf_common+0x96>
 8005c54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005c58:	6822      	ldr	r2, [r4, #0]
 8005c5a:	3b00      	subs	r3, #0
 8005c5c:	bf18      	it	ne
 8005c5e:	2301      	movne	r3, #1
 8005c60:	0692      	lsls	r2, r2, #26
 8005c62:	d42b      	bmi.n	8005cbc <_printf_common+0xb0>
 8005c64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005c68:	4641      	mov	r1, r8
 8005c6a:	4638      	mov	r0, r7
 8005c6c:	47c8      	blx	r9
 8005c6e:	3001      	adds	r0, #1
 8005c70:	d01e      	beq.n	8005cb0 <_printf_common+0xa4>
 8005c72:	6823      	ldr	r3, [r4, #0]
 8005c74:	6922      	ldr	r2, [r4, #16]
 8005c76:	f003 0306 	and.w	r3, r3, #6
 8005c7a:	2b04      	cmp	r3, #4
 8005c7c:	bf02      	ittt	eq
 8005c7e:	68e5      	ldreq	r5, [r4, #12]
 8005c80:	6833      	ldreq	r3, [r6, #0]
 8005c82:	1aed      	subeq	r5, r5, r3
 8005c84:	68a3      	ldr	r3, [r4, #8]
 8005c86:	bf0c      	ite	eq
 8005c88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c8c:	2500      	movne	r5, #0
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	bfc4      	itt	gt
 8005c92:	1a9b      	subgt	r3, r3, r2
 8005c94:	18ed      	addgt	r5, r5, r3
 8005c96:	2600      	movs	r6, #0
 8005c98:	341a      	adds	r4, #26
 8005c9a:	42b5      	cmp	r5, r6
 8005c9c:	d11a      	bne.n	8005cd4 <_printf_common+0xc8>
 8005c9e:	2000      	movs	r0, #0
 8005ca0:	e008      	b.n	8005cb4 <_printf_common+0xa8>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	4652      	mov	r2, sl
 8005ca6:	4641      	mov	r1, r8
 8005ca8:	4638      	mov	r0, r7
 8005caa:	47c8      	blx	r9
 8005cac:	3001      	adds	r0, #1
 8005cae:	d103      	bne.n	8005cb8 <_printf_common+0xac>
 8005cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cb8:	3501      	adds	r5, #1
 8005cba:	e7c6      	b.n	8005c4a <_printf_common+0x3e>
 8005cbc:	18e1      	adds	r1, r4, r3
 8005cbe:	1c5a      	adds	r2, r3, #1
 8005cc0:	2030      	movs	r0, #48	@ 0x30
 8005cc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005cc6:	4422      	add	r2, r4
 8005cc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ccc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005cd0:	3302      	adds	r3, #2
 8005cd2:	e7c7      	b.n	8005c64 <_printf_common+0x58>
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	4622      	mov	r2, r4
 8005cd8:	4641      	mov	r1, r8
 8005cda:	4638      	mov	r0, r7
 8005cdc:	47c8      	blx	r9
 8005cde:	3001      	adds	r0, #1
 8005ce0:	d0e6      	beq.n	8005cb0 <_printf_common+0xa4>
 8005ce2:	3601      	adds	r6, #1
 8005ce4:	e7d9      	b.n	8005c9a <_printf_common+0x8e>
	...

08005ce8 <_printf_i>:
 8005ce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cec:	7e0f      	ldrb	r7, [r1, #24]
 8005cee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005cf0:	2f78      	cmp	r7, #120	@ 0x78
 8005cf2:	4691      	mov	r9, r2
 8005cf4:	4680      	mov	r8, r0
 8005cf6:	460c      	mov	r4, r1
 8005cf8:	469a      	mov	sl, r3
 8005cfa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005cfe:	d807      	bhi.n	8005d10 <_printf_i+0x28>
 8005d00:	2f62      	cmp	r7, #98	@ 0x62
 8005d02:	d80a      	bhi.n	8005d1a <_printf_i+0x32>
 8005d04:	2f00      	cmp	r7, #0
 8005d06:	f000 80d1 	beq.w	8005eac <_printf_i+0x1c4>
 8005d0a:	2f58      	cmp	r7, #88	@ 0x58
 8005d0c:	f000 80b8 	beq.w	8005e80 <_printf_i+0x198>
 8005d10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d18:	e03a      	b.n	8005d90 <_printf_i+0xa8>
 8005d1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d1e:	2b15      	cmp	r3, #21
 8005d20:	d8f6      	bhi.n	8005d10 <_printf_i+0x28>
 8005d22:	a101      	add	r1, pc, #4	@ (adr r1, 8005d28 <_printf_i+0x40>)
 8005d24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d28:	08005d81 	.word	0x08005d81
 8005d2c:	08005d95 	.word	0x08005d95
 8005d30:	08005d11 	.word	0x08005d11
 8005d34:	08005d11 	.word	0x08005d11
 8005d38:	08005d11 	.word	0x08005d11
 8005d3c:	08005d11 	.word	0x08005d11
 8005d40:	08005d95 	.word	0x08005d95
 8005d44:	08005d11 	.word	0x08005d11
 8005d48:	08005d11 	.word	0x08005d11
 8005d4c:	08005d11 	.word	0x08005d11
 8005d50:	08005d11 	.word	0x08005d11
 8005d54:	08005e93 	.word	0x08005e93
 8005d58:	08005dbf 	.word	0x08005dbf
 8005d5c:	08005e4d 	.word	0x08005e4d
 8005d60:	08005d11 	.word	0x08005d11
 8005d64:	08005d11 	.word	0x08005d11
 8005d68:	08005eb5 	.word	0x08005eb5
 8005d6c:	08005d11 	.word	0x08005d11
 8005d70:	08005dbf 	.word	0x08005dbf
 8005d74:	08005d11 	.word	0x08005d11
 8005d78:	08005d11 	.word	0x08005d11
 8005d7c:	08005e55 	.word	0x08005e55
 8005d80:	6833      	ldr	r3, [r6, #0]
 8005d82:	1d1a      	adds	r2, r3, #4
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	6032      	str	r2, [r6, #0]
 8005d88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005d90:	2301      	movs	r3, #1
 8005d92:	e09c      	b.n	8005ece <_printf_i+0x1e6>
 8005d94:	6833      	ldr	r3, [r6, #0]
 8005d96:	6820      	ldr	r0, [r4, #0]
 8005d98:	1d19      	adds	r1, r3, #4
 8005d9a:	6031      	str	r1, [r6, #0]
 8005d9c:	0606      	lsls	r6, r0, #24
 8005d9e:	d501      	bpl.n	8005da4 <_printf_i+0xbc>
 8005da0:	681d      	ldr	r5, [r3, #0]
 8005da2:	e003      	b.n	8005dac <_printf_i+0xc4>
 8005da4:	0645      	lsls	r5, r0, #25
 8005da6:	d5fb      	bpl.n	8005da0 <_printf_i+0xb8>
 8005da8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005dac:	2d00      	cmp	r5, #0
 8005dae:	da03      	bge.n	8005db8 <_printf_i+0xd0>
 8005db0:	232d      	movs	r3, #45	@ 0x2d
 8005db2:	426d      	negs	r5, r5
 8005db4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005db8:	4858      	ldr	r0, [pc, #352]	@ (8005f1c <_printf_i+0x234>)
 8005dba:	230a      	movs	r3, #10
 8005dbc:	e011      	b.n	8005de2 <_printf_i+0xfa>
 8005dbe:	6821      	ldr	r1, [r4, #0]
 8005dc0:	6833      	ldr	r3, [r6, #0]
 8005dc2:	0608      	lsls	r0, r1, #24
 8005dc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005dc8:	d402      	bmi.n	8005dd0 <_printf_i+0xe8>
 8005dca:	0649      	lsls	r1, r1, #25
 8005dcc:	bf48      	it	mi
 8005dce:	b2ad      	uxthmi	r5, r5
 8005dd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005dd2:	4852      	ldr	r0, [pc, #328]	@ (8005f1c <_printf_i+0x234>)
 8005dd4:	6033      	str	r3, [r6, #0]
 8005dd6:	bf14      	ite	ne
 8005dd8:	230a      	movne	r3, #10
 8005dda:	2308      	moveq	r3, #8
 8005ddc:	2100      	movs	r1, #0
 8005dde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005de2:	6866      	ldr	r6, [r4, #4]
 8005de4:	60a6      	str	r6, [r4, #8]
 8005de6:	2e00      	cmp	r6, #0
 8005de8:	db05      	blt.n	8005df6 <_printf_i+0x10e>
 8005dea:	6821      	ldr	r1, [r4, #0]
 8005dec:	432e      	orrs	r6, r5
 8005dee:	f021 0104 	bic.w	r1, r1, #4
 8005df2:	6021      	str	r1, [r4, #0]
 8005df4:	d04b      	beq.n	8005e8e <_printf_i+0x1a6>
 8005df6:	4616      	mov	r6, r2
 8005df8:	fbb5 f1f3 	udiv	r1, r5, r3
 8005dfc:	fb03 5711 	mls	r7, r3, r1, r5
 8005e00:	5dc7      	ldrb	r7, [r0, r7]
 8005e02:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e06:	462f      	mov	r7, r5
 8005e08:	42bb      	cmp	r3, r7
 8005e0a:	460d      	mov	r5, r1
 8005e0c:	d9f4      	bls.n	8005df8 <_printf_i+0x110>
 8005e0e:	2b08      	cmp	r3, #8
 8005e10:	d10b      	bne.n	8005e2a <_printf_i+0x142>
 8005e12:	6823      	ldr	r3, [r4, #0]
 8005e14:	07df      	lsls	r7, r3, #31
 8005e16:	d508      	bpl.n	8005e2a <_printf_i+0x142>
 8005e18:	6923      	ldr	r3, [r4, #16]
 8005e1a:	6861      	ldr	r1, [r4, #4]
 8005e1c:	4299      	cmp	r1, r3
 8005e1e:	bfde      	ittt	le
 8005e20:	2330      	movle	r3, #48	@ 0x30
 8005e22:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e26:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e2a:	1b92      	subs	r2, r2, r6
 8005e2c:	6122      	str	r2, [r4, #16]
 8005e2e:	f8cd a000 	str.w	sl, [sp]
 8005e32:	464b      	mov	r3, r9
 8005e34:	aa03      	add	r2, sp, #12
 8005e36:	4621      	mov	r1, r4
 8005e38:	4640      	mov	r0, r8
 8005e3a:	f7ff fee7 	bl	8005c0c <_printf_common>
 8005e3e:	3001      	adds	r0, #1
 8005e40:	d14a      	bne.n	8005ed8 <_printf_i+0x1f0>
 8005e42:	f04f 30ff 	mov.w	r0, #4294967295
 8005e46:	b004      	add	sp, #16
 8005e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e4c:	6823      	ldr	r3, [r4, #0]
 8005e4e:	f043 0320 	orr.w	r3, r3, #32
 8005e52:	6023      	str	r3, [r4, #0]
 8005e54:	4832      	ldr	r0, [pc, #200]	@ (8005f20 <_printf_i+0x238>)
 8005e56:	2778      	movs	r7, #120	@ 0x78
 8005e58:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005e5c:	6823      	ldr	r3, [r4, #0]
 8005e5e:	6831      	ldr	r1, [r6, #0]
 8005e60:	061f      	lsls	r7, r3, #24
 8005e62:	f851 5b04 	ldr.w	r5, [r1], #4
 8005e66:	d402      	bmi.n	8005e6e <_printf_i+0x186>
 8005e68:	065f      	lsls	r7, r3, #25
 8005e6a:	bf48      	it	mi
 8005e6c:	b2ad      	uxthmi	r5, r5
 8005e6e:	6031      	str	r1, [r6, #0]
 8005e70:	07d9      	lsls	r1, r3, #31
 8005e72:	bf44      	itt	mi
 8005e74:	f043 0320 	orrmi.w	r3, r3, #32
 8005e78:	6023      	strmi	r3, [r4, #0]
 8005e7a:	b11d      	cbz	r5, 8005e84 <_printf_i+0x19c>
 8005e7c:	2310      	movs	r3, #16
 8005e7e:	e7ad      	b.n	8005ddc <_printf_i+0xf4>
 8005e80:	4826      	ldr	r0, [pc, #152]	@ (8005f1c <_printf_i+0x234>)
 8005e82:	e7e9      	b.n	8005e58 <_printf_i+0x170>
 8005e84:	6823      	ldr	r3, [r4, #0]
 8005e86:	f023 0320 	bic.w	r3, r3, #32
 8005e8a:	6023      	str	r3, [r4, #0]
 8005e8c:	e7f6      	b.n	8005e7c <_printf_i+0x194>
 8005e8e:	4616      	mov	r6, r2
 8005e90:	e7bd      	b.n	8005e0e <_printf_i+0x126>
 8005e92:	6833      	ldr	r3, [r6, #0]
 8005e94:	6825      	ldr	r5, [r4, #0]
 8005e96:	6961      	ldr	r1, [r4, #20]
 8005e98:	1d18      	adds	r0, r3, #4
 8005e9a:	6030      	str	r0, [r6, #0]
 8005e9c:	062e      	lsls	r6, r5, #24
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	d501      	bpl.n	8005ea6 <_printf_i+0x1be>
 8005ea2:	6019      	str	r1, [r3, #0]
 8005ea4:	e002      	b.n	8005eac <_printf_i+0x1c4>
 8005ea6:	0668      	lsls	r0, r5, #25
 8005ea8:	d5fb      	bpl.n	8005ea2 <_printf_i+0x1ba>
 8005eaa:	8019      	strh	r1, [r3, #0]
 8005eac:	2300      	movs	r3, #0
 8005eae:	6123      	str	r3, [r4, #16]
 8005eb0:	4616      	mov	r6, r2
 8005eb2:	e7bc      	b.n	8005e2e <_printf_i+0x146>
 8005eb4:	6833      	ldr	r3, [r6, #0]
 8005eb6:	1d1a      	adds	r2, r3, #4
 8005eb8:	6032      	str	r2, [r6, #0]
 8005eba:	681e      	ldr	r6, [r3, #0]
 8005ebc:	6862      	ldr	r2, [r4, #4]
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	4630      	mov	r0, r6
 8005ec2:	f7fa f995 	bl	80001f0 <memchr>
 8005ec6:	b108      	cbz	r0, 8005ecc <_printf_i+0x1e4>
 8005ec8:	1b80      	subs	r0, r0, r6
 8005eca:	6060      	str	r0, [r4, #4]
 8005ecc:	6863      	ldr	r3, [r4, #4]
 8005ece:	6123      	str	r3, [r4, #16]
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ed6:	e7aa      	b.n	8005e2e <_printf_i+0x146>
 8005ed8:	6923      	ldr	r3, [r4, #16]
 8005eda:	4632      	mov	r2, r6
 8005edc:	4649      	mov	r1, r9
 8005ede:	4640      	mov	r0, r8
 8005ee0:	47d0      	blx	sl
 8005ee2:	3001      	adds	r0, #1
 8005ee4:	d0ad      	beq.n	8005e42 <_printf_i+0x15a>
 8005ee6:	6823      	ldr	r3, [r4, #0]
 8005ee8:	079b      	lsls	r3, r3, #30
 8005eea:	d413      	bmi.n	8005f14 <_printf_i+0x22c>
 8005eec:	68e0      	ldr	r0, [r4, #12]
 8005eee:	9b03      	ldr	r3, [sp, #12]
 8005ef0:	4298      	cmp	r0, r3
 8005ef2:	bfb8      	it	lt
 8005ef4:	4618      	movlt	r0, r3
 8005ef6:	e7a6      	b.n	8005e46 <_printf_i+0x15e>
 8005ef8:	2301      	movs	r3, #1
 8005efa:	4632      	mov	r2, r6
 8005efc:	4649      	mov	r1, r9
 8005efe:	4640      	mov	r0, r8
 8005f00:	47d0      	blx	sl
 8005f02:	3001      	adds	r0, #1
 8005f04:	d09d      	beq.n	8005e42 <_printf_i+0x15a>
 8005f06:	3501      	adds	r5, #1
 8005f08:	68e3      	ldr	r3, [r4, #12]
 8005f0a:	9903      	ldr	r1, [sp, #12]
 8005f0c:	1a5b      	subs	r3, r3, r1
 8005f0e:	42ab      	cmp	r3, r5
 8005f10:	dcf2      	bgt.n	8005ef8 <_printf_i+0x210>
 8005f12:	e7eb      	b.n	8005eec <_printf_i+0x204>
 8005f14:	2500      	movs	r5, #0
 8005f16:	f104 0619 	add.w	r6, r4, #25
 8005f1a:	e7f5      	b.n	8005f08 <_printf_i+0x220>
 8005f1c:	08006e30 	.word	0x08006e30
 8005f20:	08006e41 	.word	0x08006e41

08005f24 <__sflush_r>:
 8005f24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f2c:	0716      	lsls	r6, r2, #28
 8005f2e:	4605      	mov	r5, r0
 8005f30:	460c      	mov	r4, r1
 8005f32:	d454      	bmi.n	8005fde <__sflush_r+0xba>
 8005f34:	684b      	ldr	r3, [r1, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	dc02      	bgt.n	8005f40 <__sflush_r+0x1c>
 8005f3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	dd48      	ble.n	8005fd2 <__sflush_r+0xae>
 8005f40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f42:	2e00      	cmp	r6, #0
 8005f44:	d045      	beq.n	8005fd2 <__sflush_r+0xae>
 8005f46:	2300      	movs	r3, #0
 8005f48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005f4c:	682f      	ldr	r7, [r5, #0]
 8005f4e:	6a21      	ldr	r1, [r4, #32]
 8005f50:	602b      	str	r3, [r5, #0]
 8005f52:	d030      	beq.n	8005fb6 <__sflush_r+0x92>
 8005f54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005f56:	89a3      	ldrh	r3, [r4, #12]
 8005f58:	0759      	lsls	r1, r3, #29
 8005f5a:	d505      	bpl.n	8005f68 <__sflush_r+0x44>
 8005f5c:	6863      	ldr	r3, [r4, #4]
 8005f5e:	1ad2      	subs	r2, r2, r3
 8005f60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005f62:	b10b      	cbz	r3, 8005f68 <__sflush_r+0x44>
 8005f64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005f66:	1ad2      	subs	r2, r2, r3
 8005f68:	2300      	movs	r3, #0
 8005f6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f6c:	6a21      	ldr	r1, [r4, #32]
 8005f6e:	4628      	mov	r0, r5
 8005f70:	47b0      	blx	r6
 8005f72:	1c43      	adds	r3, r0, #1
 8005f74:	89a3      	ldrh	r3, [r4, #12]
 8005f76:	d106      	bne.n	8005f86 <__sflush_r+0x62>
 8005f78:	6829      	ldr	r1, [r5, #0]
 8005f7a:	291d      	cmp	r1, #29
 8005f7c:	d82b      	bhi.n	8005fd6 <__sflush_r+0xb2>
 8005f7e:	4a2a      	ldr	r2, [pc, #168]	@ (8006028 <__sflush_r+0x104>)
 8005f80:	40ca      	lsrs	r2, r1
 8005f82:	07d6      	lsls	r6, r2, #31
 8005f84:	d527      	bpl.n	8005fd6 <__sflush_r+0xb2>
 8005f86:	2200      	movs	r2, #0
 8005f88:	6062      	str	r2, [r4, #4]
 8005f8a:	04d9      	lsls	r1, r3, #19
 8005f8c:	6922      	ldr	r2, [r4, #16]
 8005f8e:	6022      	str	r2, [r4, #0]
 8005f90:	d504      	bpl.n	8005f9c <__sflush_r+0x78>
 8005f92:	1c42      	adds	r2, r0, #1
 8005f94:	d101      	bne.n	8005f9a <__sflush_r+0x76>
 8005f96:	682b      	ldr	r3, [r5, #0]
 8005f98:	b903      	cbnz	r3, 8005f9c <__sflush_r+0x78>
 8005f9a:	6560      	str	r0, [r4, #84]	@ 0x54
 8005f9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f9e:	602f      	str	r7, [r5, #0]
 8005fa0:	b1b9      	cbz	r1, 8005fd2 <__sflush_r+0xae>
 8005fa2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005fa6:	4299      	cmp	r1, r3
 8005fa8:	d002      	beq.n	8005fb0 <__sflush_r+0x8c>
 8005faa:	4628      	mov	r0, r5
 8005fac:	f7ff fbd6 	bl	800575c <_free_r>
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	6363      	str	r3, [r4, #52]	@ 0x34
 8005fb4:	e00d      	b.n	8005fd2 <__sflush_r+0xae>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	4628      	mov	r0, r5
 8005fba:	47b0      	blx	r6
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	1c50      	adds	r0, r2, #1
 8005fc0:	d1c9      	bne.n	8005f56 <__sflush_r+0x32>
 8005fc2:	682b      	ldr	r3, [r5, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d0c6      	beq.n	8005f56 <__sflush_r+0x32>
 8005fc8:	2b1d      	cmp	r3, #29
 8005fca:	d001      	beq.n	8005fd0 <__sflush_r+0xac>
 8005fcc:	2b16      	cmp	r3, #22
 8005fce:	d11e      	bne.n	800600e <__sflush_r+0xea>
 8005fd0:	602f      	str	r7, [r5, #0]
 8005fd2:	2000      	movs	r0, #0
 8005fd4:	e022      	b.n	800601c <__sflush_r+0xf8>
 8005fd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fda:	b21b      	sxth	r3, r3
 8005fdc:	e01b      	b.n	8006016 <__sflush_r+0xf2>
 8005fde:	690f      	ldr	r7, [r1, #16]
 8005fe0:	2f00      	cmp	r7, #0
 8005fe2:	d0f6      	beq.n	8005fd2 <__sflush_r+0xae>
 8005fe4:	0793      	lsls	r3, r2, #30
 8005fe6:	680e      	ldr	r6, [r1, #0]
 8005fe8:	bf08      	it	eq
 8005fea:	694b      	ldreq	r3, [r1, #20]
 8005fec:	600f      	str	r7, [r1, #0]
 8005fee:	bf18      	it	ne
 8005ff0:	2300      	movne	r3, #0
 8005ff2:	eba6 0807 	sub.w	r8, r6, r7
 8005ff6:	608b      	str	r3, [r1, #8]
 8005ff8:	f1b8 0f00 	cmp.w	r8, #0
 8005ffc:	dde9      	ble.n	8005fd2 <__sflush_r+0xae>
 8005ffe:	6a21      	ldr	r1, [r4, #32]
 8006000:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006002:	4643      	mov	r3, r8
 8006004:	463a      	mov	r2, r7
 8006006:	4628      	mov	r0, r5
 8006008:	47b0      	blx	r6
 800600a:	2800      	cmp	r0, #0
 800600c:	dc08      	bgt.n	8006020 <__sflush_r+0xfc>
 800600e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006012:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006016:	81a3      	strh	r3, [r4, #12]
 8006018:	f04f 30ff 	mov.w	r0, #4294967295
 800601c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006020:	4407      	add	r7, r0
 8006022:	eba8 0800 	sub.w	r8, r8, r0
 8006026:	e7e7      	b.n	8005ff8 <__sflush_r+0xd4>
 8006028:	20400001 	.word	0x20400001

0800602c <_fflush_r>:
 800602c:	b538      	push	{r3, r4, r5, lr}
 800602e:	690b      	ldr	r3, [r1, #16]
 8006030:	4605      	mov	r5, r0
 8006032:	460c      	mov	r4, r1
 8006034:	b913      	cbnz	r3, 800603c <_fflush_r+0x10>
 8006036:	2500      	movs	r5, #0
 8006038:	4628      	mov	r0, r5
 800603a:	bd38      	pop	{r3, r4, r5, pc}
 800603c:	b118      	cbz	r0, 8006046 <_fflush_r+0x1a>
 800603e:	6a03      	ldr	r3, [r0, #32]
 8006040:	b90b      	cbnz	r3, 8006046 <_fflush_r+0x1a>
 8006042:	f7ff f9fb 	bl	800543c <__sinit>
 8006046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d0f3      	beq.n	8006036 <_fflush_r+0xa>
 800604e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006050:	07d0      	lsls	r0, r2, #31
 8006052:	d404      	bmi.n	800605e <_fflush_r+0x32>
 8006054:	0599      	lsls	r1, r3, #22
 8006056:	d402      	bmi.n	800605e <_fflush_r+0x32>
 8006058:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800605a:	f7ff fb50 	bl	80056fe <__retarget_lock_acquire_recursive>
 800605e:	4628      	mov	r0, r5
 8006060:	4621      	mov	r1, r4
 8006062:	f7ff ff5f 	bl	8005f24 <__sflush_r>
 8006066:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006068:	07da      	lsls	r2, r3, #31
 800606a:	4605      	mov	r5, r0
 800606c:	d4e4      	bmi.n	8006038 <_fflush_r+0xc>
 800606e:	89a3      	ldrh	r3, [r4, #12]
 8006070:	059b      	lsls	r3, r3, #22
 8006072:	d4e1      	bmi.n	8006038 <_fflush_r+0xc>
 8006074:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006076:	f7ff fb43 	bl	8005700 <__retarget_lock_release_recursive>
 800607a:	e7dd      	b.n	8006038 <_fflush_r+0xc>

0800607c <fiprintf>:
 800607c:	b40e      	push	{r1, r2, r3}
 800607e:	b503      	push	{r0, r1, lr}
 8006080:	4601      	mov	r1, r0
 8006082:	ab03      	add	r3, sp, #12
 8006084:	4805      	ldr	r0, [pc, #20]	@ (800609c <fiprintf+0x20>)
 8006086:	f853 2b04 	ldr.w	r2, [r3], #4
 800608a:	6800      	ldr	r0, [r0, #0]
 800608c:	9301      	str	r3, [sp, #4]
 800608e:	f000 f88f 	bl	80061b0 <_vfiprintf_r>
 8006092:	b002      	add	sp, #8
 8006094:	f85d eb04 	ldr.w	lr, [sp], #4
 8006098:	b003      	add	sp, #12
 800609a:	4770      	bx	lr
 800609c:	200000ac 	.word	0x200000ac

080060a0 <memmove>:
 80060a0:	4288      	cmp	r0, r1
 80060a2:	b510      	push	{r4, lr}
 80060a4:	eb01 0402 	add.w	r4, r1, r2
 80060a8:	d902      	bls.n	80060b0 <memmove+0x10>
 80060aa:	4284      	cmp	r4, r0
 80060ac:	4623      	mov	r3, r4
 80060ae:	d807      	bhi.n	80060c0 <memmove+0x20>
 80060b0:	1e43      	subs	r3, r0, #1
 80060b2:	42a1      	cmp	r1, r4
 80060b4:	d008      	beq.n	80060c8 <memmove+0x28>
 80060b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80060be:	e7f8      	b.n	80060b2 <memmove+0x12>
 80060c0:	4402      	add	r2, r0
 80060c2:	4601      	mov	r1, r0
 80060c4:	428a      	cmp	r2, r1
 80060c6:	d100      	bne.n	80060ca <memmove+0x2a>
 80060c8:	bd10      	pop	{r4, pc}
 80060ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80060d2:	e7f7      	b.n	80060c4 <memmove+0x24>

080060d4 <_sbrk_r>:
 80060d4:	b538      	push	{r3, r4, r5, lr}
 80060d6:	4d06      	ldr	r5, [pc, #24]	@ (80060f0 <_sbrk_r+0x1c>)
 80060d8:	2300      	movs	r3, #0
 80060da:	4604      	mov	r4, r0
 80060dc:	4608      	mov	r0, r1
 80060de:	602b      	str	r3, [r5, #0]
 80060e0:	f7fc fe9c 	bl	8002e1c <_sbrk>
 80060e4:	1c43      	adds	r3, r0, #1
 80060e6:	d102      	bne.n	80060ee <_sbrk_r+0x1a>
 80060e8:	682b      	ldr	r3, [r5, #0]
 80060ea:	b103      	cbz	r3, 80060ee <_sbrk_r+0x1a>
 80060ec:	6023      	str	r3, [r4, #0]
 80060ee:	bd38      	pop	{r3, r4, r5, pc}
 80060f0:	20000708 	.word	0x20000708

080060f4 <abort>:
 80060f4:	b508      	push	{r3, lr}
 80060f6:	2006      	movs	r0, #6
 80060f8:	f000 fa2e 	bl	8006558 <raise>
 80060fc:	2001      	movs	r0, #1
 80060fe:	f7fc fe15 	bl	8002d2c <_exit>

08006102 <_realloc_r>:
 8006102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006106:	4607      	mov	r7, r0
 8006108:	4614      	mov	r4, r2
 800610a:	460d      	mov	r5, r1
 800610c:	b921      	cbnz	r1, 8006118 <_realloc_r+0x16>
 800610e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006112:	4611      	mov	r1, r2
 8006114:	f7ff bb96 	b.w	8005844 <_malloc_r>
 8006118:	b92a      	cbnz	r2, 8006126 <_realloc_r+0x24>
 800611a:	f7ff fb1f 	bl	800575c <_free_r>
 800611e:	4625      	mov	r5, r4
 8006120:	4628      	mov	r0, r5
 8006122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006126:	f000 fa33 	bl	8006590 <_malloc_usable_size_r>
 800612a:	4284      	cmp	r4, r0
 800612c:	4606      	mov	r6, r0
 800612e:	d802      	bhi.n	8006136 <_realloc_r+0x34>
 8006130:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006134:	d8f4      	bhi.n	8006120 <_realloc_r+0x1e>
 8006136:	4621      	mov	r1, r4
 8006138:	4638      	mov	r0, r7
 800613a:	f7ff fb83 	bl	8005844 <_malloc_r>
 800613e:	4680      	mov	r8, r0
 8006140:	b908      	cbnz	r0, 8006146 <_realloc_r+0x44>
 8006142:	4645      	mov	r5, r8
 8006144:	e7ec      	b.n	8006120 <_realloc_r+0x1e>
 8006146:	42b4      	cmp	r4, r6
 8006148:	4622      	mov	r2, r4
 800614a:	4629      	mov	r1, r5
 800614c:	bf28      	it	cs
 800614e:	4632      	movcs	r2, r6
 8006150:	f7ff fad7 	bl	8005702 <memcpy>
 8006154:	4629      	mov	r1, r5
 8006156:	4638      	mov	r0, r7
 8006158:	f7ff fb00 	bl	800575c <_free_r>
 800615c:	e7f1      	b.n	8006142 <_realloc_r+0x40>

0800615e <__sfputc_r>:
 800615e:	6893      	ldr	r3, [r2, #8]
 8006160:	3b01      	subs	r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	b410      	push	{r4}
 8006166:	6093      	str	r3, [r2, #8]
 8006168:	da08      	bge.n	800617c <__sfputc_r+0x1e>
 800616a:	6994      	ldr	r4, [r2, #24]
 800616c:	42a3      	cmp	r3, r4
 800616e:	db01      	blt.n	8006174 <__sfputc_r+0x16>
 8006170:	290a      	cmp	r1, #10
 8006172:	d103      	bne.n	800617c <__sfputc_r+0x1e>
 8006174:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006178:	f000 b932 	b.w	80063e0 <__swbuf_r>
 800617c:	6813      	ldr	r3, [r2, #0]
 800617e:	1c58      	adds	r0, r3, #1
 8006180:	6010      	str	r0, [r2, #0]
 8006182:	7019      	strb	r1, [r3, #0]
 8006184:	4608      	mov	r0, r1
 8006186:	f85d 4b04 	ldr.w	r4, [sp], #4
 800618a:	4770      	bx	lr

0800618c <__sfputs_r>:
 800618c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800618e:	4606      	mov	r6, r0
 8006190:	460f      	mov	r7, r1
 8006192:	4614      	mov	r4, r2
 8006194:	18d5      	adds	r5, r2, r3
 8006196:	42ac      	cmp	r4, r5
 8006198:	d101      	bne.n	800619e <__sfputs_r+0x12>
 800619a:	2000      	movs	r0, #0
 800619c:	e007      	b.n	80061ae <__sfputs_r+0x22>
 800619e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061a2:	463a      	mov	r2, r7
 80061a4:	4630      	mov	r0, r6
 80061a6:	f7ff ffda 	bl	800615e <__sfputc_r>
 80061aa:	1c43      	adds	r3, r0, #1
 80061ac:	d1f3      	bne.n	8006196 <__sfputs_r+0xa>
 80061ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080061b0 <_vfiprintf_r>:
 80061b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061b4:	460d      	mov	r5, r1
 80061b6:	b09d      	sub	sp, #116	@ 0x74
 80061b8:	4614      	mov	r4, r2
 80061ba:	4698      	mov	r8, r3
 80061bc:	4606      	mov	r6, r0
 80061be:	b118      	cbz	r0, 80061c8 <_vfiprintf_r+0x18>
 80061c0:	6a03      	ldr	r3, [r0, #32]
 80061c2:	b90b      	cbnz	r3, 80061c8 <_vfiprintf_r+0x18>
 80061c4:	f7ff f93a 	bl	800543c <__sinit>
 80061c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80061ca:	07d9      	lsls	r1, r3, #31
 80061cc:	d405      	bmi.n	80061da <_vfiprintf_r+0x2a>
 80061ce:	89ab      	ldrh	r3, [r5, #12]
 80061d0:	059a      	lsls	r2, r3, #22
 80061d2:	d402      	bmi.n	80061da <_vfiprintf_r+0x2a>
 80061d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80061d6:	f7ff fa92 	bl	80056fe <__retarget_lock_acquire_recursive>
 80061da:	89ab      	ldrh	r3, [r5, #12]
 80061dc:	071b      	lsls	r3, r3, #28
 80061de:	d501      	bpl.n	80061e4 <_vfiprintf_r+0x34>
 80061e0:	692b      	ldr	r3, [r5, #16]
 80061e2:	b99b      	cbnz	r3, 800620c <_vfiprintf_r+0x5c>
 80061e4:	4629      	mov	r1, r5
 80061e6:	4630      	mov	r0, r6
 80061e8:	f000 f938 	bl	800645c <__swsetup_r>
 80061ec:	b170      	cbz	r0, 800620c <_vfiprintf_r+0x5c>
 80061ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80061f0:	07dc      	lsls	r4, r3, #31
 80061f2:	d504      	bpl.n	80061fe <_vfiprintf_r+0x4e>
 80061f4:	f04f 30ff 	mov.w	r0, #4294967295
 80061f8:	b01d      	add	sp, #116	@ 0x74
 80061fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061fe:	89ab      	ldrh	r3, [r5, #12]
 8006200:	0598      	lsls	r0, r3, #22
 8006202:	d4f7      	bmi.n	80061f4 <_vfiprintf_r+0x44>
 8006204:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006206:	f7ff fa7b 	bl	8005700 <__retarget_lock_release_recursive>
 800620a:	e7f3      	b.n	80061f4 <_vfiprintf_r+0x44>
 800620c:	2300      	movs	r3, #0
 800620e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006210:	2320      	movs	r3, #32
 8006212:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006216:	f8cd 800c 	str.w	r8, [sp, #12]
 800621a:	2330      	movs	r3, #48	@ 0x30
 800621c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80063cc <_vfiprintf_r+0x21c>
 8006220:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006224:	f04f 0901 	mov.w	r9, #1
 8006228:	4623      	mov	r3, r4
 800622a:	469a      	mov	sl, r3
 800622c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006230:	b10a      	cbz	r2, 8006236 <_vfiprintf_r+0x86>
 8006232:	2a25      	cmp	r2, #37	@ 0x25
 8006234:	d1f9      	bne.n	800622a <_vfiprintf_r+0x7a>
 8006236:	ebba 0b04 	subs.w	fp, sl, r4
 800623a:	d00b      	beq.n	8006254 <_vfiprintf_r+0xa4>
 800623c:	465b      	mov	r3, fp
 800623e:	4622      	mov	r2, r4
 8006240:	4629      	mov	r1, r5
 8006242:	4630      	mov	r0, r6
 8006244:	f7ff ffa2 	bl	800618c <__sfputs_r>
 8006248:	3001      	adds	r0, #1
 800624a:	f000 80a7 	beq.w	800639c <_vfiprintf_r+0x1ec>
 800624e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006250:	445a      	add	r2, fp
 8006252:	9209      	str	r2, [sp, #36]	@ 0x24
 8006254:	f89a 3000 	ldrb.w	r3, [sl]
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 809f 	beq.w	800639c <_vfiprintf_r+0x1ec>
 800625e:	2300      	movs	r3, #0
 8006260:	f04f 32ff 	mov.w	r2, #4294967295
 8006264:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006268:	f10a 0a01 	add.w	sl, sl, #1
 800626c:	9304      	str	r3, [sp, #16]
 800626e:	9307      	str	r3, [sp, #28]
 8006270:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006274:	931a      	str	r3, [sp, #104]	@ 0x68
 8006276:	4654      	mov	r4, sl
 8006278:	2205      	movs	r2, #5
 800627a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800627e:	4853      	ldr	r0, [pc, #332]	@ (80063cc <_vfiprintf_r+0x21c>)
 8006280:	f7f9 ffb6 	bl	80001f0 <memchr>
 8006284:	9a04      	ldr	r2, [sp, #16]
 8006286:	b9d8      	cbnz	r0, 80062c0 <_vfiprintf_r+0x110>
 8006288:	06d1      	lsls	r1, r2, #27
 800628a:	bf44      	itt	mi
 800628c:	2320      	movmi	r3, #32
 800628e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006292:	0713      	lsls	r3, r2, #28
 8006294:	bf44      	itt	mi
 8006296:	232b      	movmi	r3, #43	@ 0x2b
 8006298:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800629c:	f89a 3000 	ldrb.w	r3, [sl]
 80062a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80062a2:	d015      	beq.n	80062d0 <_vfiprintf_r+0x120>
 80062a4:	9a07      	ldr	r2, [sp, #28]
 80062a6:	4654      	mov	r4, sl
 80062a8:	2000      	movs	r0, #0
 80062aa:	f04f 0c0a 	mov.w	ip, #10
 80062ae:	4621      	mov	r1, r4
 80062b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062b4:	3b30      	subs	r3, #48	@ 0x30
 80062b6:	2b09      	cmp	r3, #9
 80062b8:	d94b      	bls.n	8006352 <_vfiprintf_r+0x1a2>
 80062ba:	b1b0      	cbz	r0, 80062ea <_vfiprintf_r+0x13a>
 80062bc:	9207      	str	r2, [sp, #28]
 80062be:	e014      	b.n	80062ea <_vfiprintf_r+0x13a>
 80062c0:	eba0 0308 	sub.w	r3, r0, r8
 80062c4:	fa09 f303 	lsl.w	r3, r9, r3
 80062c8:	4313      	orrs	r3, r2
 80062ca:	9304      	str	r3, [sp, #16]
 80062cc:	46a2      	mov	sl, r4
 80062ce:	e7d2      	b.n	8006276 <_vfiprintf_r+0xc6>
 80062d0:	9b03      	ldr	r3, [sp, #12]
 80062d2:	1d19      	adds	r1, r3, #4
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	9103      	str	r1, [sp, #12]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	bfbb      	ittet	lt
 80062dc:	425b      	neglt	r3, r3
 80062de:	f042 0202 	orrlt.w	r2, r2, #2
 80062e2:	9307      	strge	r3, [sp, #28]
 80062e4:	9307      	strlt	r3, [sp, #28]
 80062e6:	bfb8      	it	lt
 80062e8:	9204      	strlt	r2, [sp, #16]
 80062ea:	7823      	ldrb	r3, [r4, #0]
 80062ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80062ee:	d10a      	bne.n	8006306 <_vfiprintf_r+0x156>
 80062f0:	7863      	ldrb	r3, [r4, #1]
 80062f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80062f4:	d132      	bne.n	800635c <_vfiprintf_r+0x1ac>
 80062f6:	9b03      	ldr	r3, [sp, #12]
 80062f8:	1d1a      	adds	r2, r3, #4
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	9203      	str	r2, [sp, #12]
 80062fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006302:	3402      	adds	r4, #2
 8006304:	9305      	str	r3, [sp, #20]
 8006306:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80063dc <_vfiprintf_r+0x22c>
 800630a:	7821      	ldrb	r1, [r4, #0]
 800630c:	2203      	movs	r2, #3
 800630e:	4650      	mov	r0, sl
 8006310:	f7f9 ff6e 	bl	80001f0 <memchr>
 8006314:	b138      	cbz	r0, 8006326 <_vfiprintf_r+0x176>
 8006316:	9b04      	ldr	r3, [sp, #16]
 8006318:	eba0 000a 	sub.w	r0, r0, sl
 800631c:	2240      	movs	r2, #64	@ 0x40
 800631e:	4082      	lsls	r2, r0
 8006320:	4313      	orrs	r3, r2
 8006322:	3401      	adds	r4, #1
 8006324:	9304      	str	r3, [sp, #16]
 8006326:	f814 1b01 	ldrb.w	r1, [r4], #1
 800632a:	4829      	ldr	r0, [pc, #164]	@ (80063d0 <_vfiprintf_r+0x220>)
 800632c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006330:	2206      	movs	r2, #6
 8006332:	f7f9 ff5d 	bl	80001f0 <memchr>
 8006336:	2800      	cmp	r0, #0
 8006338:	d03f      	beq.n	80063ba <_vfiprintf_r+0x20a>
 800633a:	4b26      	ldr	r3, [pc, #152]	@ (80063d4 <_vfiprintf_r+0x224>)
 800633c:	bb1b      	cbnz	r3, 8006386 <_vfiprintf_r+0x1d6>
 800633e:	9b03      	ldr	r3, [sp, #12]
 8006340:	3307      	adds	r3, #7
 8006342:	f023 0307 	bic.w	r3, r3, #7
 8006346:	3308      	adds	r3, #8
 8006348:	9303      	str	r3, [sp, #12]
 800634a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800634c:	443b      	add	r3, r7
 800634e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006350:	e76a      	b.n	8006228 <_vfiprintf_r+0x78>
 8006352:	fb0c 3202 	mla	r2, ip, r2, r3
 8006356:	460c      	mov	r4, r1
 8006358:	2001      	movs	r0, #1
 800635a:	e7a8      	b.n	80062ae <_vfiprintf_r+0xfe>
 800635c:	2300      	movs	r3, #0
 800635e:	3401      	adds	r4, #1
 8006360:	9305      	str	r3, [sp, #20]
 8006362:	4619      	mov	r1, r3
 8006364:	f04f 0c0a 	mov.w	ip, #10
 8006368:	4620      	mov	r0, r4
 800636a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800636e:	3a30      	subs	r2, #48	@ 0x30
 8006370:	2a09      	cmp	r2, #9
 8006372:	d903      	bls.n	800637c <_vfiprintf_r+0x1cc>
 8006374:	2b00      	cmp	r3, #0
 8006376:	d0c6      	beq.n	8006306 <_vfiprintf_r+0x156>
 8006378:	9105      	str	r1, [sp, #20]
 800637a:	e7c4      	b.n	8006306 <_vfiprintf_r+0x156>
 800637c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006380:	4604      	mov	r4, r0
 8006382:	2301      	movs	r3, #1
 8006384:	e7f0      	b.n	8006368 <_vfiprintf_r+0x1b8>
 8006386:	ab03      	add	r3, sp, #12
 8006388:	9300      	str	r3, [sp, #0]
 800638a:	462a      	mov	r2, r5
 800638c:	4b12      	ldr	r3, [pc, #72]	@ (80063d8 <_vfiprintf_r+0x228>)
 800638e:	a904      	add	r1, sp, #16
 8006390:	4630      	mov	r0, r6
 8006392:	f3af 8000 	nop.w
 8006396:	4607      	mov	r7, r0
 8006398:	1c78      	adds	r0, r7, #1
 800639a:	d1d6      	bne.n	800634a <_vfiprintf_r+0x19a>
 800639c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800639e:	07d9      	lsls	r1, r3, #31
 80063a0:	d405      	bmi.n	80063ae <_vfiprintf_r+0x1fe>
 80063a2:	89ab      	ldrh	r3, [r5, #12]
 80063a4:	059a      	lsls	r2, r3, #22
 80063a6:	d402      	bmi.n	80063ae <_vfiprintf_r+0x1fe>
 80063a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063aa:	f7ff f9a9 	bl	8005700 <__retarget_lock_release_recursive>
 80063ae:	89ab      	ldrh	r3, [r5, #12]
 80063b0:	065b      	lsls	r3, r3, #25
 80063b2:	f53f af1f 	bmi.w	80061f4 <_vfiprintf_r+0x44>
 80063b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80063b8:	e71e      	b.n	80061f8 <_vfiprintf_r+0x48>
 80063ba:	ab03      	add	r3, sp, #12
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	462a      	mov	r2, r5
 80063c0:	4b05      	ldr	r3, [pc, #20]	@ (80063d8 <_vfiprintf_r+0x228>)
 80063c2:	a904      	add	r1, sp, #16
 80063c4:	4630      	mov	r0, r6
 80063c6:	f7ff fc8f 	bl	8005ce8 <_printf_i>
 80063ca:	e7e4      	b.n	8006396 <_vfiprintf_r+0x1e6>
 80063cc:	08006e1f 	.word	0x08006e1f
 80063d0:	08006e29 	.word	0x08006e29
 80063d4:	00000000 	.word	0x00000000
 80063d8:	0800618d 	.word	0x0800618d
 80063dc:	08006e25 	.word	0x08006e25

080063e0 <__swbuf_r>:
 80063e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e2:	460e      	mov	r6, r1
 80063e4:	4614      	mov	r4, r2
 80063e6:	4605      	mov	r5, r0
 80063e8:	b118      	cbz	r0, 80063f2 <__swbuf_r+0x12>
 80063ea:	6a03      	ldr	r3, [r0, #32]
 80063ec:	b90b      	cbnz	r3, 80063f2 <__swbuf_r+0x12>
 80063ee:	f7ff f825 	bl	800543c <__sinit>
 80063f2:	69a3      	ldr	r3, [r4, #24]
 80063f4:	60a3      	str	r3, [r4, #8]
 80063f6:	89a3      	ldrh	r3, [r4, #12]
 80063f8:	071a      	lsls	r2, r3, #28
 80063fa:	d501      	bpl.n	8006400 <__swbuf_r+0x20>
 80063fc:	6923      	ldr	r3, [r4, #16]
 80063fe:	b943      	cbnz	r3, 8006412 <__swbuf_r+0x32>
 8006400:	4621      	mov	r1, r4
 8006402:	4628      	mov	r0, r5
 8006404:	f000 f82a 	bl	800645c <__swsetup_r>
 8006408:	b118      	cbz	r0, 8006412 <__swbuf_r+0x32>
 800640a:	f04f 37ff 	mov.w	r7, #4294967295
 800640e:	4638      	mov	r0, r7
 8006410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006412:	6823      	ldr	r3, [r4, #0]
 8006414:	6922      	ldr	r2, [r4, #16]
 8006416:	1a98      	subs	r0, r3, r2
 8006418:	6963      	ldr	r3, [r4, #20]
 800641a:	b2f6      	uxtb	r6, r6
 800641c:	4283      	cmp	r3, r0
 800641e:	4637      	mov	r7, r6
 8006420:	dc05      	bgt.n	800642e <__swbuf_r+0x4e>
 8006422:	4621      	mov	r1, r4
 8006424:	4628      	mov	r0, r5
 8006426:	f7ff fe01 	bl	800602c <_fflush_r>
 800642a:	2800      	cmp	r0, #0
 800642c:	d1ed      	bne.n	800640a <__swbuf_r+0x2a>
 800642e:	68a3      	ldr	r3, [r4, #8]
 8006430:	3b01      	subs	r3, #1
 8006432:	60a3      	str	r3, [r4, #8]
 8006434:	6823      	ldr	r3, [r4, #0]
 8006436:	1c5a      	adds	r2, r3, #1
 8006438:	6022      	str	r2, [r4, #0]
 800643a:	701e      	strb	r6, [r3, #0]
 800643c:	6962      	ldr	r2, [r4, #20]
 800643e:	1c43      	adds	r3, r0, #1
 8006440:	429a      	cmp	r2, r3
 8006442:	d004      	beq.n	800644e <__swbuf_r+0x6e>
 8006444:	89a3      	ldrh	r3, [r4, #12]
 8006446:	07db      	lsls	r3, r3, #31
 8006448:	d5e1      	bpl.n	800640e <__swbuf_r+0x2e>
 800644a:	2e0a      	cmp	r6, #10
 800644c:	d1df      	bne.n	800640e <__swbuf_r+0x2e>
 800644e:	4621      	mov	r1, r4
 8006450:	4628      	mov	r0, r5
 8006452:	f7ff fdeb 	bl	800602c <_fflush_r>
 8006456:	2800      	cmp	r0, #0
 8006458:	d0d9      	beq.n	800640e <__swbuf_r+0x2e>
 800645a:	e7d6      	b.n	800640a <__swbuf_r+0x2a>

0800645c <__swsetup_r>:
 800645c:	b538      	push	{r3, r4, r5, lr}
 800645e:	4b29      	ldr	r3, [pc, #164]	@ (8006504 <__swsetup_r+0xa8>)
 8006460:	4605      	mov	r5, r0
 8006462:	6818      	ldr	r0, [r3, #0]
 8006464:	460c      	mov	r4, r1
 8006466:	b118      	cbz	r0, 8006470 <__swsetup_r+0x14>
 8006468:	6a03      	ldr	r3, [r0, #32]
 800646a:	b90b      	cbnz	r3, 8006470 <__swsetup_r+0x14>
 800646c:	f7fe ffe6 	bl	800543c <__sinit>
 8006470:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006474:	0719      	lsls	r1, r3, #28
 8006476:	d422      	bmi.n	80064be <__swsetup_r+0x62>
 8006478:	06da      	lsls	r2, r3, #27
 800647a:	d407      	bmi.n	800648c <__swsetup_r+0x30>
 800647c:	2209      	movs	r2, #9
 800647e:	602a      	str	r2, [r5, #0]
 8006480:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006484:	81a3      	strh	r3, [r4, #12]
 8006486:	f04f 30ff 	mov.w	r0, #4294967295
 800648a:	e033      	b.n	80064f4 <__swsetup_r+0x98>
 800648c:	0758      	lsls	r0, r3, #29
 800648e:	d512      	bpl.n	80064b6 <__swsetup_r+0x5a>
 8006490:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006492:	b141      	cbz	r1, 80064a6 <__swsetup_r+0x4a>
 8006494:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006498:	4299      	cmp	r1, r3
 800649a:	d002      	beq.n	80064a2 <__swsetup_r+0x46>
 800649c:	4628      	mov	r0, r5
 800649e:	f7ff f95d 	bl	800575c <_free_r>
 80064a2:	2300      	movs	r3, #0
 80064a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80064a6:	89a3      	ldrh	r3, [r4, #12]
 80064a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80064ac:	81a3      	strh	r3, [r4, #12]
 80064ae:	2300      	movs	r3, #0
 80064b0:	6063      	str	r3, [r4, #4]
 80064b2:	6923      	ldr	r3, [r4, #16]
 80064b4:	6023      	str	r3, [r4, #0]
 80064b6:	89a3      	ldrh	r3, [r4, #12]
 80064b8:	f043 0308 	orr.w	r3, r3, #8
 80064bc:	81a3      	strh	r3, [r4, #12]
 80064be:	6923      	ldr	r3, [r4, #16]
 80064c0:	b94b      	cbnz	r3, 80064d6 <__swsetup_r+0x7a>
 80064c2:	89a3      	ldrh	r3, [r4, #12]
 80064c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80064c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064cc:	d003      	beq.n	80064d6 <__swsetup_r+0x7a>
 80064ce:	4621      	mov	r1, r4
 80064d0:	4628      	mov	r0, r5
 80064d2:	f000 f88b 	bl	80065ec <__smakebuf_r>
 80064d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064da:	f013 0201 	ands.w	r2, r3, #1
 80064de:	d00a      	beq.n	80064f6 <__swsetup_r+0x9a>
 80064e0:	2200      	movs	r2, #0
 80064e2:	60a2      	str	r2, [r4, #8]
 80064e4:	6962      	ldr	r2, [r4, #20]
 80064e6:	4252      	negs	r2, r2
 80064e8:	61a2      	str	r2, [r4, #24]
 80064ea:	6922      	ldr	r2, [r4, #16]
 80064ec:	b942      	cbnz	r2, 8006500 <__swsetup_r+0xa4>
 80064ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80064f2:	d1c5      	bne.n	8006480 <__swsetup_r+0x24>
 80064f4:	bd38      	pop	{r3, r4, r5, pc}
 80064f6:	0799      	lsls	r1, r3, #30
 80064f8:	bf58      	it	pl
 80064fa:	6962      	ldrpl	r2, [r4, #20]
 80064fc:	60a2      	str	r2, [r4, #8]
 80064fe:	e7f4      	b.n	80064ea <__swsetup_r+0x8e>
 8006500:	2000      	movs	r0, #0
 8006502:	e7f7      	b.n	80064f4 <__swsetup_r+0x98>
 8006504:	200000ac 	.word	0x200000ac

08006508 <_raise_r>:
 8006508:	291f      	cmp	r1, #31
 800650a:	b538      	push	{r3, r4, r5, lr}
 800650c:	4605      	mov	r5, r0
 800650e:	460c      	mov	r4, r1
 8006510:	d904      	bls.n	800651c <_raise_r+0x14>
 8006512:	2316      	movs	r3, #22
 8006514:	6003      	str	r3, [r0, #0]
 8006516:	f04f 30ff 	mov.w	r0, #4294967295
 800651a:	bd38      	pop	{r3, r4, r5, pc}
 800651c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800651e:	b112      	cbz	r2, 8006526 <_raise_r+0x1e>
 8006520:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006524:	b94b      	cbnz	r3, 800653a <_raise_r+0x32>
 8006526:	4628      	mov	r0, r5
 8006528:	f000 f830 	bl	800658c <_getpid_r>
 800652c:	4622      	mov	r2, r4
 800652e:	4601      	mov	r1, r0
 8006530:	4628      	mov	r0, r5
 8006532:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006536:	f000 b817 	b.w	8006568 <_kill_r>
 800653a:	2b01      	cmp	r3, #1
 800653c:	d00a      	beq.n	8006554 <_raise_r+0x4c>
 800653e:	1c59      	adds	r1, r3, #1
 8006540:	d103      	bne.n	800654a <_raise_r+0x42>
 8006542:	2316      	movs	r3, #22
 8006544:	6003      	str	r3, [r0, #0]
 8006546:	2001      	movs	r0, #1
 8006548:	e7e7      	b.n	800651a <_raise_r+0x12>
 800654a:	2100      	movs	r1, #0
 800654c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006550:	4620      	mov	r0, r4
 8006552:	4798      	blx	r3
 8006554:	2000      	movs	r0, #0
 8006556:	e7e0      	b.n	800651a <_raise_r+0x12>

08006558 <raise>:
 8006558:	4b02      	ldr	r3, [pc, #8]	@ (8006564 <raise+0xc>)
 800655a:	4601      	mov	r1, r0
 800655c:	6818      	ldr	r0, [r3, #0]
 800655e:	f7ff bfd3 	b.w	8006508 <_raise_r>
 8006562:	bf00      	nop
 8006564:	200000ac 	.word	0x200000ac

08006568 <_kill_r>:
 8006568:	b538      	push	{r3, r4, r5, lr}
 800656a:	4d07      	ldr	r5, [pc, #28]	@ (8006588 <_kill_r+0x20>)
 800656c:	2300      	movs	r3, #0
 800656e:	4604      	mov	r4, r0
 8006570:	4608      	mov	r0, r1
 8006572:	4611      	mov	r1, r2
 8006574:	602b      	str	r3, [r5, #0]
 8006576:	f7fc fbc9 	bl	8002d0c <_kill>
 800657a:	1c43      	adds	r3, r0, #1
 800657c:	d102      	bne.n	8006584 <_kill_r+0x1c>
 800657e:	682b      	ldr	r3, [r5, #0]
 8006580:	b103      	cbz	r3, 8006584 <_kill_r+0x1c>
 8006582:	6023      	str	r3, [r4, #0]
 8006584:	bd38      	pop	{r3, r4, r5, pc}
 8006586:	bf00      	nop
 8006588:	20000708 	.word	0x20000708

0800658c <_getpid_r>:
 800658c:	f7fc bbb6 	b.w	8002cfc <_getpid>

08006590 <_malloc_usable_size_r>:
 8006590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006594:	1f18      	subs	r0, r3, #4
 8006596:	2b00      	cmp	r3, #0
 8006598:	bfbc      	itt	lt
 800659a:	580b      	ldrlt	r3, [r1, r0]
 800659c:	18c0      	addlt	r0, r0, r3
 800659e:	4770      	bx	lr

080065a0 <__swhatbuf_r>:
 80065a0:	b570      	push	{r4, r5, r6, lr}
 80065a2:	460c      	mov	r4, r1
 80065a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065a8:	2900      	cmp	r1, #0
 80065aa:	b096      	sub	sp, #88	@ 0x58
 80065ac:	4615      	mov	r5, r2
 80065ae:	461e      	mov	r6, r3
 80065b0:	da0d      	bge.n	80065ce <__swhatbuf_r+0x2e>
 80065b2:	89a3      	ldrh	r3, [r4, #12]
 80065b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80065b8:	f04f 0100 	mov.w	r1, #0
 80065bc:	bf14      	ite	ne
 80065be:	2340      	movne	r3, #64	@ 0x40
 80065c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80065c4:	2000      	movs	r0, #0
 80065c6:	6031      	str	r1, [r6, #0]
 80065c8:	602b      	str	r3, [r5, #0]
 80065ca:	b016      	add	sp, #88	@ 0x58
 80065cc:	bd70      	pop	{r4, r5, r6, pc}
 80065ce:	466a      	mov	r2, sp
 80065d0:	f000 f848 	bl	8006664 <_fstat_r>
 80065d4:	2800      	cmp	r0, #0
 80065d6:	dbec      	blt.n	80065b2 <__swhatbuf_r+0x12>
 80065d8:	9901      	ldr	r1, [sp, #4]
 80065da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80065de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80065e2:	4259      	negs	r1, r3
 80065e4:	4159      	adcs	r1, r3
 80065e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065ea:	e7eb      	b.n	80065c4 <__swhatbuf_r+0x24>

080065ec <__smakebuf_r>:
 80065ec:	898b      	ldrh	r3, [r1, #12]
 80065ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065f0:	079d      	lsls	r5, r3, #30
 80065f2:	4606      	mov	r6, r0
 80065f4:	460c      	mov	r4, r1
 80065f6:	d507      	bpl.n	8006608 <__smakebuf_r+0x1c>
 80065f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80065fc:	6023      	str	r3, [r4, #0]
 80065fe:	6123      	str	r3, [r4, #16]
 8006600:	2301      	movs	r3, #1
 8006602:	6163      	str	r3, [r4, #20]
 8006604:	b003      	add	sp, #12
 8006606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006608:	ab01      	add	r3, sp, #4
 800660a:	466a      	mov	r2, sp
 800660c:	f7ff ffc8 	bl	80065a0 <__swhatbuf_r>
 8006610:	9f00      	ldr	r7, [sp, #0]
 8006612:	4605      	mov	r5, r0
 8006614:	4639      	mov	r1, r7
 8006616:	4630      	mov	r0, r6
 8006618:	f7ff f914 	bl	8005844 <_malloc_r>
 800661c:	b948      	cbnz	r0, 8006632 <__smakebuf_r+0x46>
 800661e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006622:	059a      	lsls	r2, r3, #22
 8006624:	d4ee      	bmi.n	8006604 <__smakebuf_r+0x18>
 8006626:	f023 0303 	bic.w	r3, r3, #3
 800662a:	f043 0302 	orr.w	r3, r3, #2
 800662e:	81a3      	strh	r3, [r4, #12]
 8006630:	e7e2      	b.n	80065f8 <__smakebuf_r+0xc>
 8006632:	89a3      	ldrh	r3, [r4, #12]
 8006634:	6020      	str	r0, [r4, #0]
 8006636:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800663a:	81a3      	strh	r3, [r4, #12]
 800663c:	9b01      	ldr	r3, [sp, #4]
 800663e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006642:	b15b      	cbz	r3, 800665c <__smakebuf_r+0x70>
 8006644:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006648:	4630      	mov	r0, r6
 800664a:	f000 f81d 	bl	8006688 <_isatty_r>
 800664e:	b128      	cbz	r0, 800665c <__smakebuf_r+0x70>
 8006650:	89a3      	ldrh	r3, [r4, #12]
 8006652:	f023 0303 	bic.w	r3, r3, #3
 8006656:	f043 0301 	orr.w	r3, r3, #1
 800665a:	81a3      	strh	r3, [r4, #12]
 800665c:	89a3      	ldrh	r3, [r4, #12]
 800665e:	431d      	orrs	r5, r3
 8006660:	81a5      	strh	r5, [r4, #12]
 8006662:	e7cf      	b.n	8006604 <__smakebuf_r+0x18>

08006664 <_fstat_r>:
 8006664:	b538      	push	{r3, r4, r5, lr}
 8006666:	4d07      	ldr	r5, [pc, #28]	@ (8006684 <_fstat_r+0x20>)
 8006668:	2300      	movs	r3, #0
 800666a:	4604      	mov	r4, r0
 800666c:	4608      	mov	r0, r1
 800666e:	4611      	mov	r1, r2
 8006670:	602b      	str	r3, [r5, #0]
 8006672:	f7fc fbab 	bl	8002dcc <_fstat>
 8006676:	1c43      	adds	r3, r0, #1
 8006678:	d102      	bne.n	8006680 <_fstat_r+0x1c>
 800667a:	682b      	ldr	r3, [r5, #0]
 800667c:	b103      	cbz	r3, 8006680 <_fstat_r+0x1c>
 800667e:	6023      	str	r3, [r4, #0]
 8006680:	bd38      	pop	{r3, r4, r5, pc}
 8006682:	bf00      	nop
 8006684:	20000708 	.word	0x20000708

08006688 <_isatty_r>:
 8006688:	b538      	push	{r3, r4, r5, lr}
 800668a:	4d06      	ldr	r5, [pc, #24]	@ (80066a4 <_isatty_r+0x1c>)
 800668c:	2300      	movs	r3, #0
 800668e:	4604      	mov	r4, r0
 8006690:	4608      	mov	r0, r1
 8006692:	602b      	str	r3, [r5, #0]
 8006694:	f7fc fbaa 	bl	8002dec <_isatty>
 8006698:	1c43      	adds	r3, r0, #1
 800669a:	d102      	bne.n	80066a2 <_isatty_r+0x1a>
 800669c:	682b      	ldr	r3, [r5, #0]
 800669e:	b103      	cbz	r3, 80066a2 <_isatty_r+0x1a>
 80066a0:	6023      	str	r3, [r4, #0]
 80066a2:	bd38      	pop	{r3, r4, r5, pc}
 80066a4:	20000708 	.word	0x20000708

080066a8 <_init>:
 80066a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066aa:	bf00      	nop
 80066ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ae:	bc08      	pop	{r3}
 80066b0:	469e      	mov	lr, r3
 80066b2:	4770      	bx	lr

080066b4 <_fini>:
 80066b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066b6:	bf00      	nop
 80066b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ba:	bc08      	pop	{r3}
 80066bc:	469e      	mov	lr, r3
 80066be:	4770      	bx	lr
