
wdak.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000642c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007dc  080065cc  080065cc  000075cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006da8  08006da8  00008090  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006da8  08006da8  00007da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006db0  08006db0  00008090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006db0  08006db0  00007db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006db4  08006db4  00007db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  08006db8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b94  20000090  08006e48  00008090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c24  08006e48  00008c24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad39  00000000  00000000  000080c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020a2  00000000  00000000  00012df9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000920  00000000  00000000  00014ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006e1  00000000  00000000  000157c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e58  00000000  00000000  00015ea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be55  00000000  00000000  0002ccf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088a44  00000000  00000000  00038b4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1592  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c04  00000000  00000000  000c15d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  000c41dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080065b4 	.word	0x080065b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	080065b4 	.word	0x080065b4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Переопределение функции _write для вывода через UART2 */
int _write(int file, char *ptr, int len) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	f04f 33ff 	mov.w	r3, #4294967295
 80005d0:	68b9      	ldr	r1, [r7, #8]
 80005d2:	4804      	ldr	r0, [pc, #16]	@ (80005e4 <_write+0x28>)
 80005d4:	f003 ffae 	bl	8004534 <HAL_UART_Transmit>
    return len;
 80005d8:	687b      	ldr	r3, [r7, #4]
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	200000fc 	.word	0x200000fc

080005e8 <HAL_UART_RxCpltCallback>:

/* Обработчик завершения приема по UART */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART6) {
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a0d      	ldr	r2, [pc, #52]	@ (800062c <HAL_UART_RxCpltCallback+0x44>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d107      	bne.n	800060a <HAL_UART_RxCpltCallback+0x22>
        // Вызываем обработчик пакета для UART6
        SecureUart_RxCpltCallback(&g_secure_uart_ctx6, huart);
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	480c      	ldr	r0, [pc, #48]	@ (8000630 <HAL_UART_RxCpltCallback+0x48>)
 80005fe:	f001 f86a 	bl	80016d6 <SecureUart_RxCpltCallback>
        g_rx_ready = 1;
 8000602:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <HAL_UART_RxCpltCallback+0x4c>)
 8000604:	2201      	movs	r2, #1
 8000606:	701a      	strb	r2, [r3, #0]
    } else if (huart->Instance == USART1) {
        // Вызываем обработчик пакета для UART1
        SecureUart_RxCpltCallback(&g_secure_uart_ctx1, huart);
        g_rx_ready = 1;
    }
}
 8000608:	e00b      	b.n	8000622 <HAL_UART_RxCpltCallback+0x3a>
    } else if (huart->Instance == USART1) {
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a0a      	ldr	r2, [pc, #40]	@ (8000638 <HAL_UART_RxCpltCallback+0x50>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d106      	bne.n	8000622 <HAL_UART_RxCpltCallback+0x3a>
        SecureUart_RxCpltCallback(&g_secure_uart_ctx1, huart);
 8000614:	6879      	ldr	r1, [r7, #4]
 8000616:	4809      	ldr	r0, [pc, #36]	@ (800063c <HAL_UART_RxCpltCallback+0x54>)
 8000618:	f001 f85d 	bl	80016d6 <SecureUart_RxCpltCallback>
        g_rx_ready = 1;
 800061c:	4b05      	ldr	r3, [pc, #20]	@ (8000634 <HAL_UART_RxCpltCallback+0x4c>)
 800061e:	2201      	movs	r2, #1
 8000620:	701a      	strb	r2, [r3, #0]
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40011400 	.word	0x40011400
 8000630:	200005ec 	.word	0x200005ec
 8000634:	20000a60 	.word	0x20000a60
 8000638:	40011000 	.word	0x40011000
 800063c:	2000018c 	.word	0x2000018c

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f002 fe3b 	bl	80032c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f85d 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 f957 	bl	8000900 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000652:	f000 f901 	bl	8000858 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8000656:	f000 f8c1 	bl	80007dc <MX_CRC_Init>
  MX_USART1_UART_Init();
 800065a:	f000 f8d3 	bl	8000804 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800065e:	f000 f925 	bl	80008ac <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

    // Инициализация защищенного UART1 (передатчик)
    if (!SecureUart_Init(&g_secure_uart_ctx1, &huart1, &huart1, &huart2, &hcrc,
 8000662:	4b1d      	ldr	r3, [pc, #116]	@ (80006d8 <main+0x98>)
 8000664:	9302      	str	r3, [sp, #8]
 8000666:	4b1d      	ldr	r3, [pc, #116]	@ (80006dc <main+0x9c>)
 8000668:	9301      	str	r3, [sp, #4]
 800066a:	4b1d      	ldr	r3, [pc, #116]	@ (80006e0 <main+0xa0>)
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	4b1d      	ldr	r3, [pc, #116]	@ (80006e4 <main+0xa4>)
 8000670:	4a1d      	ldr	r2, [pc, #116]	@ (80006e8 <main+0xa8>)
 8000672:	491d      	ldr	r1, [pc, #116]	@ (80006e8 <main+0xa8>)
 8000674:	481d      	ldr	r0, [pc, #116]	@ (80006ec <main+0xac>)
 8000676:	f000 fb7f 	bl	8000d78 <SecureUart_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	f083 0301 	eor.w	r3, r3, #1
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2b00      	cmp	r3, #0
 8000684:	d002      	beq.n	800068c <main+0x4c>
                         g_encryption_key, g_mac_key)) {
        printf("[ERROR] Не удалось инициализировать защищенный UART1\r\n");
 8000686:	481a      	ldr	r0, [pc, #104]	@ (80006f0 <main+0xb0>)
 8000688:	f005 f872 	bl	8005770 <puts>
    }

    // Инициализация защищенного UART6 (приемник)
    if (!SecureUart_Init(&g_secure_uart_ctx6, &huart6, &huart6, &huart2, &hcrc,
 800068c:	4b12      	ldr	r3, [pc, #72]	@ (80006d8 <main+0x98>)
 800068e:	9302      	str	r3, [sp, #8]
 8000690:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <main+0x9c>)
 8000692:	9301      	str	r3, [sp, #4]
 8000694:	4b12      	ldr	r3, [pc, #72]	@ (80006e0 <main+0xa0>)
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <main+0xa4>)
 800069a:	4a16      	ldr	r2, [pc, #88]	@ (80006f4 <main+0xb4>)
 800069c:	4915      	ldr	r1, [pc, #84]	@ (80006f4 <main+0xb4>)
 800069e:	4816      	ldr	r0, [pc, #88]	@ (80006f8 <main+0xb8>)
 80006a0:	f000 fb6a 	bl	8000d78 <SecureUart_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	f083 0301 	eor.w	r3, r3, #1
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d002      	beq.n	80006b6 <main+0x76>
                         g_encryption_key, g_mac_key)) {
        printf("[ERROR] Не удалось инициализировать защищенный UART6\r\n");
 80006b0:	4812      	ldr	r0, [pc, #72]	@ (80006fc <main+0xbc>)
 80006b2:	f005 f85d 	bl	8005770 <puts>
    }

    // Инициализация структуры бенчмаркинга
    SecureUart_ResetBenchmark(&g_benchmark);
 80006b6:	4812      	ldr	r0, [pc, #72]	@ (8000700 <main+0xc0>)
 80006b8:	f001 f91a 	bl	80018f0 <SecureUart_ResetBenchmark>

    // Запускаем тестирование
    printf("\r\n*** Тестирование защищенного UART протокола ***\r\n\r\n");
 80006bc:	4811      	ldr	r0, [pc, #68]	@ (8000704 <main+0xc4>)
 80006be:	f005 f857 	bl	8005770 <puts>

    // Запускаем прием на USART6
    SecureUart_StartReceive(&g_secure_uart_ctx6);
 80006c2:	480d      	ldr	r0, [pc, #52]	@ (80006f8 <main+0xb8>)
 80006c4:	f000 ffe6 	bl	8001694 <SecureUart_StartReceive>
    while (1)
    {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
        TestSecureUart();
 80006c8:	f000 f988 	bl	80009dc <TestSecureUart>
        HAL_Delay(50000);  // Пауза между тестами
 80006cc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80006d0:	f002 fe68 	bl	80033a4 <HAL_Delay>
        TestSecureUart();
 80006d4:	bf00      	nop
 80006d6:	e7f7      	b.n	80006c8 <main+0x88>
 80006d8:	20000010 	.word	0x20000010
 80006dc:	20000000 	.word	0x20000000
 80006e0:	200000ac 	.word	0x200000ac
 80006e4:	200000fc 	.word	0x200000fc
 80006e8:	200000b4 	.word	0x200000b4
 80006ec:	2000018c 	.word	0x2000018c
 80006f0:	080065cc 	.word	0x080065cc
 80006f4:	20000144 	.word	0x20000144
 80006f8:	200005ec 	.word	0x200005ec
 80006fc:	08006628 	.word	0x08006628
 8000700:	20000a4c 	.word	0x20000a4c
 8000704:	08006684 	.word	0x08006684

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	@ 0x50
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0320 	add.w	r3, r7, #32
 8000712:	2230      	movs	r2, #48	@ 0x30
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f005 f956 	bl	80059c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	4b28      	ldr	r3, [pc, #160]	@ (80007d4 <SystemClock_Config+0xcc>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000734:	4a27      	ldr	r2, [pc, #156]	@ (80007d4 <SystemClock_Config+0xcc>)
 8000736:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800073a:	6413      	str	r3, [r2, #64]	@ 0x40
 800073c:	4b25      	ldr	r3, [pc, #148]	@ (80007d4 <SystemClock_Config+0xcc>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000740:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000748:	2300      	movs	r3, #0
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	4b22      	ldr	r3, [pc, #136]	@ (80007d8 <SystemClock_Config+0xd0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a21      	ldr	r2, [pc, #132]	@ (80007d8 <SystemClock_Config+0xd0>)
 8000752:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000756:	6013      	str	r3, [r2, #0]
 8000758:	4b1f      	ldr	r3, [pc, #124]	@ (80007d8 <SystemClock_Config+0xd0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000764:	2302      	movs	r3, #2
 8000766:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000768:	2301      	movs	r3, #1
 800076a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076c:	2310      	movs	r3, #16
 800076e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000770:	2302      	movs	r3, #2
 8000772:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000774:	2300      	movs	r3, #0
 8000776:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000778:	2310      	movs	r3, #16
 800077a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800077c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000780:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000782:	2304      	movs	r3, #4
 8000784:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000786:	2304      	movs	r3, #4
 8000788:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078a:	f107 0320 	add.w	r3, r7, #32
 800078e:	4618      	mov	r0, r3
 8000790:	f003 f9e8 	bl	8003b64 <HAL_RCC_OscConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800079a:	f000 fa4d 	bl	8000c38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079e:	230f      	movs	r3, #15
 80007a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a2:	2302      	movs	r3, #2
 80007a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	2102      	movs	r1, #2
 80007ba:	4618      	mov	r0, r3
 80007bc:	f003 fc4a 	bl	8004054 <HAL_RCC_ClockConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007c6:	f000 fa37 	bl	8000c38 <Error_Handler>
  }
}
 80007ca:	bf00      	nop
 80007cc:	3750      	adds	r7, #80	@ 0x50
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40007000 	.word	0x40007000

080007dc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007e0:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <MX_CRC_Init+0x20>)
 80007e2:	4a07      	ldr	r2, [pc, #28]	@ (8000800 <MX_CRC_Init+0x24>)
 80007e4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	@ (80007fc <MX_CRC_Init+0x20>)
 80007e8:	f002 ff11 	bl	800360e <HAL_CRC_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80007f2:	f000 fa21 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200000ac 	.word	0x200000ac
 8000800:	40023000 	.word	0x40023000

08000804 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000808:	4b11      	ldr	r3, [pc, #68]	@ (8000850 <MX_USART1_UART_Init+0x4c>)
 800080a:	4a12      	ldr	r2, [pc, #72]	@ (8000854 <MX_USART1_UART_Init+0x50>)
 800080c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800080e:	4b10      	ldr	r3, [pc, #64]	@ (8000850 <MX_USART1_UART_Init+0x4c>)
 8000810:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000814:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <MX_USART1_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <MX_USART1_UART_Init+0x4c>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	@ (8000850 <MX_USART1_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <MX_USART1_UART_Init+0x4c>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b08      	ldr	r3, [pc, #32]	@ (8000850 <MX_USART1_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <MX_USART1_UART_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	@ (8000850 <MX_USART1_UART_Init+0x4c>)
 800083c:	f003 fe2a 	bl	8004494 <HAL_UART_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000846:	f000 f9f7 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200000b4 	.word	0x200000b4
 8000854:	40011000 	.word	0x40011000

08000858 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800085c:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <MX_USART2_UART_Init+0x4c>)
 800085e:	4a12      	ldr	r2, [pc, #72]	@ (80008a8 <MX_USART2_UART_Init+0x50>)
 8000860:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000862:	4b10      	ldr	r3, [pc, #64]	@ (80008a4 <MX_USART2_UART_Init+0x4c>)
 8000864:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000868:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b0e      	ldr	r3, [pc, #56]	@ (80008a4 <MX_USART2_UART_Init+0x4c>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <MX_USART2_UART_Init+0x4c>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000876:	4b0b      	ldr	r3, [pc, #44]	@ (80008a4 <MX_USART2_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800087c:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <MX_USART2_UART_Init+0x4c>)
 800087e:	220c      	movs	r2, #12
 8000880:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <MX_USART2_UART_Init+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000888:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <MX_USART2_UART_Init+0x4c>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	@ (80008a4 <MX_USART2_UART_Init+0x4c>)
 8000890:	f003 fe00 	bl	8004494 <HAL_UART_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800089a:	f000 f9cd 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200000fc 	.word	0x200000fc
 80008a8:	40004400 	.word	0x40004400

080008ac <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80008b0:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <MX_USART6_UART_Init+0x4c>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	@ (80008fc <MX_USART6_UART_Init+0x50>)
 80008b4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80008b6:	4b10      	ldr	r3, [pc, #64]	@ (80008f8 <MX_USART6_UART_Init+0x4c>)
 80008b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008bc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <MX_USART6_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <MX_USART6_UART_Init+0x4c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	@ (80008f8 <MX_USART6_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <MX_USART6_UART_Init+0x4c>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <MX_USART6_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80008dc:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <MX_USART6_UART_Init+0x4c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80008e2:	4805      	ldr	r0, [pc, #20]	@ (80008f8 <MX_USART6_UART_Init+0x4c>)
 80008e4:	f003 fdd6 	bl	8004494 <HAL_UART_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80008ee:	f000 f9a3 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000144 	.word	0x20000144
 80008fc:	40011400 	.word	0x40011400

08000900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	@ 0x28
 8000904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	613b      	str	r3, [r7, #16]
 800091a:	4b2d      	ldr	r3, [pc, #180]	@ (80009d0 <MX_GPIO_Init+0xd0>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a2c      	ldr	r2, [pc, #176]	@ (80009d0 <MX_GPIO_Init+0xd0>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b2a      	ldr	r3, [pc, #168]	@ (80009d0 <MX_GPIO_Init+0xd0>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0304 	and.w	r3, r3, #4
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	4b26      	ldr	r3, [pc, #152]	@ (80009d0 <MX_GPIO_Init+0xd0>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a25      	ldr	r2, [pc, #148]	@ (80009d0 <MX_GPIO_Init+0xd0>)
 800093c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b23      	ldr	r3, [pc, #140]	@ (80009d0 <MX_GPIO_Init+0xd0>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	4b1f      	ldr	r3, [pc, #124]	@ (80009d0 <MX_GPIO_Init+0xd0>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	4a1e      	ldr	r2, [pc, #120]	@ (80009d0 <MX_GPIO_Init+0xd0>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6313      	str	r3, [r2, #48]	@ 0x30
 800095e:	4b1c      	ldr	r3, [pc, #112]	@ (80009d0 <MX_GPIO_Init+0xd0>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b18      	ldr	r3, [pc, #96]	@ (80009d0 <MX_GPIO_Init+0xd0>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a17      	ldr	r2, [pc, #92]	@ (80009d0 <MX_GPIO_Init+0xd0>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b15      	ldr	r3, [pc, #84]	@ (80009d0 <MX_GPIO_Init+0xd0>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2120      	movs	r1, #32
 800098a:	4812      	ldr	r0, [pc, #72]	@ (80009d4 <MX_GPIO_Init+0xd4>)
 800098c:	f003 f8d0 	bl	8003b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000990:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000996:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800099a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4619      	mov	r1, r3
 80009a6:	480c      	ldr	r0, [pc, #48]	@ (80009d8 <MX_GPIO_Init+0xd8>)
 80009a8:	f002 ff3e 	bl	8003828 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009ac:	2320      	movs	r3, #32
 80009ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4619      	mov	r1, r3
 80009c2:	4804      	ldr	r0, [pc, #16]	@ (80009d4 <MX_GPIO_Init+0xd4>)
 80009c4:	f002 ff30 	bl	8003828 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80009c8:	bf00      	nop
 80009ca:	3728      	adds	r7, #40	@ 0x28
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020000 	.word	0x40020000
 80009d8:	40020800 	.word	0x40020800

080009dc <TestSecureUart>:
/**
  * @brief Функция тестирования защищенного UART протокола
  * @param None
  * @retval None
  */
void TestSecureUart(void) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b098      	sub	sp, #96	@ 0x60
 80009e0:	af02      	add	r7, sp, #8
    // Сбрасываем бенчмарки
    SecureUart_ResetBenchmark(&g_benchmark);
 80009e2:	4888      	ldr	r0, [pc, #544]	@ (8000c04 <TestSecureUart+0x228>)
 80009e4:	f000 ff84 	bl	80018f0 <SecureUart_ResetBenchmark>

    // Подготовка тестовых данных
    uint8_t test_data[64];
    for (int i = 0; i < sizeof(test_data); i++) {
 80009e8:	2300      	movs	r3, #0
 80009ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80009ec:	e009      	b.n	8000a02 <TestSecureUart+0x26>
        test_data[i] = i;
 80009ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80009f0:	b2d9      	uxtb	r1, r3
 80009f2:	1d3a      	adds	r2, r7, #4
 80009f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80009f6:	4413      	add	r3, r2
 80009f8:	460a      	mov	r2, r1
 80009fa:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < sizeof(test_data); i++) {
 80009fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80009fe:	3301      	adds	r3, #1
 8000a00:	657b      	str	r3, [r7, #84]	@ 0x54
 8000a02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a04:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a06:	d9f2      	bls.n	80009ee <TestSecureUart+0x12>
    }

    printf("\r\n--- Начало теста ---\r\n");
 8000a08:	487f      	ldr	r0, [pc, #508]	@ (8000c08 <TestSecureUart+0x22c>)
 8000a0a:	f004 feb1 	bl	8005770 <puts>

    // Тест 1: Отправка незашифрованных данных без MAC
    printf("[Тест 1] Отправка незашифрованных данных без MAC\r\n");
 8000a0e:	487f      	ldr	r0, [pc, #508]	@ (8000c0c <TestSecureUart+0x230>)
 8000a10:	f004 feae 	bl	8005770 <puts>
    g_rx_ready = 0;
 8000a14:	4b7e      	ldr	r3, [pc, #504]	@ (8000c10 <TestSecureUart+0x234>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	701a      	strb	r2, [r3, #0]

    if (SecureUart_Send(&g_secure_uart_ctx1, test_data, sizeof(test_data), false, false)) {
 8000a1a:	1d39      	adds	r1, r7, #4
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	2300      	movs	r3, #0
 8000a22:	2240      	movs	r2, #64	@ 0x40
 8000a24:	487b      	ldr	r0, [pc, #492]	@ (8000c14 <TestSecureUart+0x238>)
 8000a26:	f000 fa13 	bl	8000e50 <SecureUart_Send>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d025      	beq.n	8000a7c <TestSecureUart+0xa0>
        printf("  Данные успешно отправлены\r\n");
 8000a30:	4879      	ldr	r0, [pc, #484]	@ (8000c18 <TestSecureUart+0x23c>)
 8000a32:	f004 fe9d 	bl	8005770 <puts>

        // Ждем получения пакета
        uint32_t timeout = HAL_GetTick() + 1000;
 8000a36:	f002 fca9 	bl	800338c <HAL_GetTick>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000a40:	653b      	str	r3, [r7, #80]	@ 0x50
        while (!g_rx_ready && HAL_GetTick() < timeout) {
 8000a42:	bf00      	nop
 8000a44:	4b72      	ldr	r3, [pc, #456]	@ (8000c10 <TestSecureUart+0x234>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d105      	bne.n	8000a5a <TestSecureUart+0x7e>
 8000a4e:	f002 fc9d 	bl	800338c <HAL_GetTick>
 8000a52:	4602      	mov	r2, r0
 8000a54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d8f4      	bhi.n	8000a44 <TestSecureUart+0x68>
            // Ожидание
        }

        if (g_rx_ready) {
 8000a5a:	4b6d      	ldr	r3, [pc, #436]	@ (8000c10 <TestSecureUart+0x234>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d007      	beq.n	8000a74 <TestSecureUart+0x98>
            printf("  Пакет успешно принят\r\n");
 8000a64:	486d      	ldr	r0, [pc, #436]	@ (8000c1c <TestSecureUart+0x240>)
 8000a66:	f004 fe83 	bl	8005770 <puts>

            // Выводим результаты бенчмаркинга
            SecureUart_PrintBenchmark(&g_secure_uart_ctx1, &g_benchmark);
 8000a6a:	4966      	ldr	r1, [pc, #408]	@ (8000c04 <TestSecureUart+0x228>)
 8000a6c:	4869      	ldr	r0, [pc, #420]	@ (8000c14 <TestSecureUart+0x238>)
 8000a6e:	f000 fef1 	bl	8001854 <SecureUart_PrintBenchmark>
 8000a72:	e006      	b.n	8000a82 <TestSecureUart+0xa6>
        } else {
            printf("  [ERROR] Тайм-аут приема пакета\r\n");
 8000a74:	486a      	ldr	r0, [pc, #424]	@ (8000c20 <TestSecureUart+0x244>)
 8000a76:	f004 fe7b 	bl	8005770 <puts>
 8000a7a:	e002      	b.n	8000a82 <TestSecureUart+0xa6>
        }
    } else {
        printf("  [ERROR] Ошибка отправки данных\r\n");
 8000a7c:	4869      	ldr	r0, [pc, #420]	@ (8000c24 <TestSecureUart+0x248>)
 8000a7e:	f004 fe77 	bl	8005770 <puts>
    }

    HAL_Delay(1000);
 8000a82:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a86:	f002 fc8d 	bl	80033a4 <HAL_Delay>

    // Тест 2: Отправка зашифрованных данных с MAC
    printf("[Тест 2] Отправка зашифрованных данных с MAC\r\n");
 8000a8a:	4867      	ldr	r0, [pc, #412]	@ (8000c28 <TestSecureUart+0x24c>)
 8000a8c:	f004 fe70 	bl	8005770 <puts>
    g_rx_ready = 0;
 8000a90:	4b5f      	ldr	r3, [pc, #380]	@ (8000c10 <TestSecureUart+0x234>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	701a      	strb	r2, [r3, #0]

    if (SecureUart_Send(&g_secure_uart_ctx1, test_data, sizeof(test_data), true, true)) {
 8000a96:	1d39      	adds	r1, r7, #4
 8000a98:	2301      	movs	r3, #1
 8000a9a:	9300      	str	r3, [sp, #0]
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	2240      	movs	r2, #64	@ 0x40
 8000aa0:	485c      	ldr	r0, [pc, #368]	@ (8000c14 <TestSecureUart+0x238>)
 8000aa2:	f000 f9d5 	bl	8000e50 <SecureUart_Send>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d025      	beq.n	8000af8 <TestSecureUart+0x11c>
        printf("  Данные успешно отправлены\r\n");
 8000aac:	485a      	ldr	r0, [pc, #360]	@ (8000c18 <TestSecureUart+0x23c>)
 8000aae:	f004 fe5f 	bl	8005770 <puts>

        // Ждем получения пакета
        uint32_t timeout = HAL_GetTick() + 1000;
 8000ab2:	f002 fc6b 	bl	800338c <HAL_GetTick>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000abc:	64fb      	str	r3, [r7, #76]	@ 0x4c
        while (!g_rx_ready && HAL_GetTick() < timeout) {
 8000abe:	bf00      	nop
 8000ac0:	4b53      	ldr	r3, [pc, #332]	@ (8000c10 <TestSecureUart+0x234>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d105      	bne.n	8000ad6 <TestSecureUart+0xfa>
 8000aca:	f002 fc5f 	bl	800338c <HAL_GetTick>
 8000ace:	4602      	mov	r2, r0
 8000ad0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d8f4      	bhi.n	8000ac0 <TestSecureUart+0xe4>
            // Ожидание
        }

        if (g_rx_ready) {
 8000ad6:	4b4e      	ldr	r3, [pc, #312]	@ (8000c10 <TestSecureUart+0x234>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d007      	beq.n	8000af0 <TestSecureUart+0x114>
            printf("  Пакет успешно принят\r\n");
 8000ae0:	484e      	ldr	r0, [pc, #312]	@ (8000c1c <TestSecureUart+0x240>)
 8000ae2:	f004 fe45 	bl	8005770 <puts>

            // Выводим результаты бенчмаркинга
            SecureUart_PrintBenchmark(&g_secure_uart_ctx1, &g_benchmark);
 8000ae6:	4947      	ldr	r1, [pc, #284]	@ (8000c04 <TestSecureUart+0x228>)
 8000ae8:	484a      	ldr	r0, [pc, #296]	@ (8000c14 <TestSecureUart+0x238>)
 8000aea:	f000 feb3 	bl	8001854 <SecureUart_PrintBenchmark>
 8000aee:	e006      	b.n	8000afe <TestSecureUart+0x122>
        } else {
            printf("  [ERROR] Тайм-аут приема пакета\r\n");
 8000af0:	484b      	ldr	r0, [pc, #300]	@ (8000c20 <TestSecureUart+0x244>)
 8000af2:	f004 fe3d 	bl	8005770 <puts>
 8000af6:	e002      	b.n	8000afe <TestSecureUart+0x122>
        }
    } else {
        printf("  [ERROR] Ошибка отправки данных\r\n");
 8000af8:	484a      	ldr	r0, [pc, #296]	@ (8000c24 <TestSecureUart+0x248>)
 8000afa:	f004 fe39 	bl	8005770 <puts>
    }

    HAL_Delay(1000);
 8000afe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b02:	f002 fc4f 	bl	80033a4 <HAL_Delay>

    // Тест 3: Отправка зашифрованных данных без MAC
    printf("[Тест 3] Отправка зашифрованных данных без MAC\r\n");
 8000b06:	4849      	ldr	r0, [pc, #292]	@ (8000c2c <TestSecureUart+0x250>)
 8000b08:	f004 fe32 	bl	8005770 <puts>
    g_rx_ready = 0;
 8000b0c:	4b40      	ldr	r3, [pc, #256]	@ (8000c10 <TestSecureUart+0x234>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	701a      	strb	r2, [r3, #0]

    if (SecureUart_Send(&g_secure_uart_ctx1, test_data, sizeof(test_data), true, false)) {
 8000b12:	1d39      	adds	r1, r7, #4
 8000b14:	2300      	movs	r3, #0
 8000b16:	9300      	str	r3, [sp, #0]
 8000b18:	2301      	movs	r3, #1
 8000b1a:	2240      	movs	r2, #64	@ 0x40
 8000b1c:	483d      	ldr	r0, [pc, #244]	@ (8000c14 <TestSecureUart+0x238>)
 8000b1e:	f000 f997 	bl	8000e50 <SecureUart_Send>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d025      	beq.n	8000b74 <TestSecureUart+0x198>
        printf("  Данные успешно отправлены\r\n");
 8000b28:	483b      	ldr	r0, [pc, #236]	@ (8000c18 <TestSecureUart+0x23c>)
 8000b2a:	f004 fe21 	bl	8005770 <puts>

        // Ждем получения пакета
        uint32_t timeout = HAL_GetTick() + 1000;
 8000b2e:	f002 fc2d 	bl	800338c <HAL_GetTick>
 8000b32:	4603      	mov	r3, r0
 8000b34:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000b38:	64bb      	str	r3, [r7, #72]	@ 0x48
        while (!g_rx_ready && HAL_GetTick() < timeout) {
 8000b3a:	bf00      	nop
 8000b3c:	4b34      	ldr	r3, [pc, #208]	@ (8000c10 <TestSecureUart+0x234>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d105      	bne.n	8000b52 <TestSecureUart+0x176>
 8000b46:	f002 fc21 	bl	800338c <HAL_GetTick>
 8000b4a:	4602      	mov	r2, r0
 8000b4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d8f4      	bhi.n	8000b3c <TestSecureUart+0x160>
            // Ожидание
        }

        if (g_rx_ready) {
 8000b52:	4b2f      	ldr	r3, [pc, #188]	@ (8000c10 <TestSecureUart+0x234>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d007      	beq.n	8000b6c <TestSecureUart+0x190>
            printf("  Пакет успешно принят\r\n");
 8000b5c:	482f      	ldr	r0, [pc, #188]	@ (8000c1c <TestSecureUart+0x240>)
 8000b5e:	f004 fe07 	bl	8005770 <puts>

            // Выводим результаты бенчмаркинга
            SecureUart_PrintBenchmark(&g_secure_uart_ctx1, &g_benchmark);
 8000b62:	4928      	ldr	r1, [pc, #160]	@ (8000c04 <TestSecureUart+0x228>)
 8000b64:	482b      	ldr	r0, [pc, #172]	@ (8000c14 <TestSecureUart+0x238>)
 8000b66:	f000 fe75 	bl	8001854 <SecureUart_PrintBenchmark>
 8000b6a:	e006      	b.n	8000b7a <TestSecureUart+0x19e>
        } else {
            printf("  [ERROR] Тайм-аут приема пакета\r\n");
 8000b6c:	482c      	ldr	r0, [pc, #176]	@ (8000c20 <TestSecureUart+0x244>)
 8000b6e:	f004 fdff 	bl	8005770 <puts>
 8000b72:	e002      	b.n	8000b7a <TestSecureUart+0x19e>
        }
    } else {
        printf("  [ERROR] Ошибка отправки данных\r\n");
 8000b74:	482b      	ldr	r0, [pc, #172]	@ (8000c24 <TestSecureUart+0x248>)
 8000b76:	f004 fdfb 	bl	8005770 <puts>
    }

    HAL_Delay(1000);
 8000b7a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b7e:	f002 fc11 	bl	80033a4 <HAL_Delay>

    // Тест 4: Отправка незашифрованных данных с MAC
    printf("[Тест 4] Отправка незашифрованных данных с MAC\r\n");
 8000b82:	482b      	ldr	r0, [pc, #172]	@ (8000c30 <TestSecureUart+0x254>)
 8000b84:	f004 fdf4 	bl	8005770 <puts>
    g_rx_ready = 0;
 8000b88:	4b21      	ldr	r3, [pc, #132]	@ (8000c10 <TestSecureUart+0x234>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	701a      	strb	r2, [r3, #0]

    if (SecureUart_Send(&g_secure_uart_ctx1, test_data, sizeof(test_data), false, true)) {
 8000b8e:	1d39      	adds	r1, r7, #4
 8000b90:	2301      	movs	r3, #1
 8000b92:	9300      	str	r3, [sp, #0]
 8000b94:	2300      	movs	r3, #0
 8000b96:	2240      	movs	r2, #64	@ 0x40
 8000b98:	481e      	ldr	r0, [pc, #120]	@ (8000c14 <TestSecureUart+0x238>)
 8000b9a:	f000 f959 	bl	8000e50 <SecureUart_Send>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d025      	beq.n	8000bf0 <TestSecureUart+0x214>
        printf("  Данные успешно отправлены\r\n");
 8000ba4:	481c      	ldr	r0, [pc, #112]	@ (8000c18 <TestSecureUart+0x23c>)
 8000ba6:	f004 fde3 	bl	8005770 <puts>

        // Ждем получения пакета
        uint32_t timeout = HAL_GetTick() + 1000;
 8000baa:	f002 fbef 	bl	800338c <HAL_GetTick>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000bb4:	647b      	str	r3, [r7, #68]	@ 0x44
        while (!g_rx_ready && HAL_GetTick() < timeout) {
 8000bb6:	bf00      	nop
 8000bb8:	4b15      	ldr	r3, [pc, #84]	@ (8000c10 <TestSecureUart+0x234>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d105      	bne.n	8000bce <TestSecureUart+0x1f2>
 8000bc2:	f002 fbe3 	bl	800338c <HAL_GetTick>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d8f4      	bhi.n	8000bb8 <TestSecureUart+0x1dc>
            // Ожидание
        }

        if (g_rx_ready) {
 8000bce:	4b10      	ldr	r3, [pc, #64]	@ (8000c10 <TestSecureUart+0x234>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d007      	beq.n	8000be8 <TestSecureUart+0x20c>
            printf("  Пакет успешно принят\r\n");
 8000bd8:	4810      	ldr	r0, [pc, #64]	@ (8000c1c <TestSecureUart+0x240>)
 8000bda:	f004 fdc9 	bl	8005770 <puts>

            // Выводим результаты бенчмаркинга
            SecureUart_PrintBenchmark(&g_secure_uart_ctx1, &g_benchmark);
 8000bde:	4909      	ldr	r1, [pc, #36]	@ (8000c04 <TestSecureUart+0x228>)
 8000be0:	480c      	ldr	r0, [pc, #48]	@ (8000c14 <TestSecureUart+0x238>)
 8000be2:	f000 fe37 	bl	8001854 <SecureUart_PrintBenchmark>
 8000be6:	e006      	b.n	8000bf6 <TestSecureUart+0x21a>
        } else {
            printf("  [ERROR] Тайм-аут приема пакета\r\n");
 8000be8:	480d      	ldr	r0, [pc, #52]	@ (8000c20 <TestSecureUart+0x244>)
 8000bea:	f004 fdc1 	bl	8005770 <puts>
 8000bee:	e002      	b.n	8000bf6 <TestSecureUart+0x21a>
        }
    } else {
        printf("  [ERROR] Ошибка отправки данных\r\n");
 8000bf0:	480c      	ldr	r0, [pc, #48]	@ (8000c24 <TestSecureUart+0x248>)
 8000bf2:	f004 fdbd 	bl	8005770 <puts>
    }

    printf("--- Тест завершен ---\r\n");
 8000bf6:	480f      	ldr	r0, [pc, #60]	@ (8000c34 <TestSecureUart+0x258>)
 8000bf8:	f004 fdba 	bl	8005770 <puts>
}
 8000bfc:	bf00      	nop
 8000bfe:	3758      	adds	r7, #88	@ 0x58
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000a4c 	.word	0x20000a4c
 8000c08:	080066dc 	.word	0x080066dc
 8000c0c:	08006700 	.word	0x08006700
 8000c10:	20000a60 	.word	0x20000a60
 8000c14:	2000018c 	.word	0x2000018c
 8000c18:	08006758 	.word	0x08006758
 8000c1c:	0800678c 	.word	0x0800678c
 8000c20:	080067b8 	.word	0x080067b8
 8000c24:	080067f0 	.word	0x080067f0
 8000c28:	08006828 	.word	0x08006828
 8000c2c:	08006878 	.word	0x08006878
 8000c30:	080068cc 	.word	0x080068cc
 8000c34:	08006920 	.word	0x08006920

08000c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c3c:	b672      	cpsid	i
}
 8000c3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <Error_Handler+0x8>

08000c44 <SecureUart_CalculateHeaderChecksum>:
static SpeckContext g_speck_ctx;

/**
 * @brief Вычисление контрольной суммы заголовка
 */
uint16_t SecureUart_CalculateHeaderChecksum(SecureUartHeader* header) {
 8000c44:	b480      	push	{r7}
 8000c46:	b087      	sub	sp, #28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
    uint16_t original_checksum = header->checksum;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	88db      	ldrh	r3, [r3, #6]
 8000c50:	81fb      	strh	r3, [r7, #14]
    header->checksum = 0;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2200      	movs	r2, #0
 8000c56:	80da      	strh	r2, [r3, #6]

    uint16_t checksum = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	82fb      	strh	r3, [r7, #22]
    uint8_t* ptr = (uint8_t*)header;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	60bb      	str	r3, [r7, #8]

    for (int i = 0; i < SECURE_UART_HEADER_SIZE; i++) {
 8000c60:	2300      	movs	r3, #0
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	e00a      	b.n	8000c7c <SecureUart_CalculateHeaderChecksum+0x38>
        checksum += ptr[i];
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	68ba      	ldr	r2, [r7, #8]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	461a      	mov	r2, r3
 8000c70:	8afb      	ldrh	r3, [r7, #22]
 8000c72:	4413      	add	r3, r2
 8000c74:	82fb      	strh	r3, [r7, #22]
    for (int i = 0; i < SECURE_UART_HEADER_SIZE; i++) {
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	2b07      	cmp	r3, #7
 8000c80:	ddf1      	ble.n	8000c66 <SecureUart_CalculateHeaderChecksum+0x22>
    }

    header->checksum = original_checksum;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	89fa      	ldrh	r2, [r7, #14]
 8000c86:	80da      	strh	r2, [r3, #6]
    return checksum;
 8000c88:	8afb      	ldrh	r3, [r7, #22]
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	371c      	adds	r7, #28
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <SecureUart_ValidateHeaderChecksum>:

/**
 * @brief Проверка контрольной суммы заголовка
 */
bool SecureUart_ValidateHeaderChecksum(SecureUartHeader* header) {
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b084      	sub	sp, #16
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
    uint16_t calculated = SecureUart_CalculateHeaderChecksum(header);
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff ffd0 	bl	8000c44 <SecureUart_CalculateHeaderChecksum>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	81fb      	strh	r3, [r7, #14]
    return (calculated == header->checksum);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	88db      	ldrh	r3, [r3, #6]
 8000cac:	89fa      	ldrh	r2, [r7, #14]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	bf0c      	ite	eq
 8000cb2:	2301      	moveq	r3, #1
 8000cb4:	2300      	movne	r3, #0
 8000cb6:	b2db      	uxtb	r3, r3
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <UART_SendData>:

/**
 * @brief Отправка данных через UART
 */
static bool UART_SendData(UART_HandleTypeDef* huart, uint8_t* data, uint16_t size) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status = HAL_UART_Transmit(huart, data, size, 1000);
 8000cce:	88fa      	ldrh	r2, [r7, #6]
 8000cd0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cd4:	68b9      	ldr	r1, [r7, #8]
 8000cd6:	68f8      	ldr	r0, [r7, #12]
 8000cd8:	f003 fc2c 	bl	8004534 <HAL_UART_Transmit>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	75fb      	strb	r3, [r7, #23]
    return (status == HAL_OK);
 8000ce0:	7dfb      	ldrb	r3, [r7, #23]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	bf0c      	ite	eq
 8000ce6:	2301      	moveq	r3, #1
 8000ce8:	2300      	movne	r3, #0
 8000cea:	b2db      	uxtb	r3, r3
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <Debug_Print>:

/**
 * @brief Отправка отладочной информации
 */
static void Debug_Print(SecureUartContext* ctx, const char* format, ...) {
 8000cf4:	b40e      	push	{r1, r2, r3}
 8000cf6:	b590      	push	{r4, r7, lr}
 8000cf8:	b0c4      	sub	sp, #272	@ 0x110
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000d00:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000d04:	6018      	str	r0, [r3, #0]
    if (ctx->huart_debug == NULL) {
 8000d06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000d0a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d027      	beq.n	8000d66 <Debug_Print+0x72>
        return;
    }

    char buffer[256];
    va_list args;
    va_start(args, format);
 8000d16:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000d1a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000d1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000d22:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8000d24:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000d28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000d2c:	f107 0010 	add.w	r0, r7, #16
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8000d36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d3a:	f004 fd93 	bl	8005864 <vsniprintf>
    va_end(args);

    HAL_UART_Transmit(ctx->huart_debug, (uint8_t*)buffer, strlen(buffer), 100);
 8000d3e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000d42:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	689c      	ldr	r4, [r3, #8]
 8000d4a:	f107 0310 	add.w	r3, r7, #16
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fa46 	bl	80001e0 <strlen>
 8000d54:	4603      	mov	r3, r0
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	f107 0110 	add.w	r1, r7, #16
 8000d5c:	2364      	movs	r3, #100	@ 0x64
 8000d5e:	4620      	mov	r0, r4
 8000d60:	f003 fbe8 	bl	8004534 <HAL_UART_Transmit>
 8000d64:	e000      	b.n	8000d68 <Debug_Print+0x74>
        return;
 8000d66:	bf00      	nop
}
 8000d68:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000d72:	b003      	add	sp, #12
 8000d74:	4770      	bx	lr
	...

08000d78 <SecureUart_Init>:
                     UART_HandleTypeDef* huart_tx,
                     UART_HandleTypeDef* huart_rx,
                     UART_HandleTypeDef* huart_debug,
                     CRC_HandleTypeDef* hcrc,
                     uint8_t* key,
                     uint8_t* mac_key) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
 8000d84:	603b      	str	r3, [r7, #0]

    if (ctx == NULL || huart_tx == NULL || huart_rx == NULL || hcrc == NULL || key == NULL || mac_key == NULL) {
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d00e      	beq.n	8000daa <SecureUart_Init+0x32>
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d00b      	beq.n	8000daa <SecureUart_Init+0x32>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d008      	beq.n	8000daa <SecureUart_Init+0x32>
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d005      	beq.n	8000daa <SecureUart_Init+0x32>
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d002      	beq.n	8000daa <SecureUart_Init+0x32>
 8000da4:	6a3b      	ldr	r3, [r7, #32]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d101      	bne.n	8000dae <SecureUart_Init+0x36>
        return false;
 8000daa:	2300      	movs	r3, #0
 8000dac:	e044      	b.n	8000e38 <SecureUart_Init+0xc0>
    }

    // Включаем DWT для измерения тактов процессора
    ENABLE_DWT();
 8000dae:	4b24      	ldr	r3, [pc, #144]	@ (8000e40 <SecureUart_Init+0xc8>)
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	4a23      	ldr	r2, [pc, #140]	@ (8000e40 <SecureUart_Init+0xc8>)
 8000db4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000db8:	60d3      	str	r3, [r2, #12]
 8000dba:	4b22      	ldr	r3, [pc, #136]	@ (8000e44 <SecureUart_Init+0xcc>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a21      	ldr	r2, [pc, #132]	@ (8000e44 <SecureUart_Init+0xcc>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6013      	str	r3, [r2, #0]

    // Инициализируем контекст
    ctx->huart_tx = huart_tx;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	68ba      	ldr	r2, [r7, #8]
 8000dca:	601a      	str	r2, [r3, #0]
    ctx->huart_rx = huart_rx;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	605a      	str	r2, [r3, #4]
    ctx->huart_debug = huart_debug;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	683a      	ldr	r2, [r7, #0]
 8000dd6:	609a      	str	r2, [r3, #8]
    ctx->hcrc = hcrc;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	60da      	str	r2, [r3, #12]

    // Копируем ключи
    memcpy(ctx->key, key, 16);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	3318      	adds	r3, #24
 8000de2:	2210      	movs	r2, #16
 8000de4:	69f9      	ldr	r1, [r7, #28]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f004 fe69 	bl	8005abe <memcpy>
    memcpy(ctx->mac_key, mac_key, 16);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	3328      	adds	r3, #40	@ 0x28
 8000df0:	2210      	movs	r2, #16
 8000df2:	6a39      	ldr	r1, [r7, #32]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f004 fe62 	bl	8005abe <memcpy>

    // Инициализируем Speck
    Speck_Init(&g_speck_ctx, key);
 8000dfa:	69f9      	ldr	r1, [r7, #28]
 8000dfc:	4812      	ldr	r0, [pc, #72]	@ (8000e48 <SecureUart_Init+0xd0>)
 8000dfe:	f001 fda7 	bl	8002950 <Speck_Init>

    // Сбрасываем счетчики пакетов
    ctx->tx_sequence = 0;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
    ctx->rx_sequence = 0;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	615a      	str	r2, [r3, #20]

    // Сбрасываем буфер приема
    ctx->rx_index = 0;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	2200      	movs	r2, #0
 8000e12:	f8c3 2458 	str.w	r2, [r3, #1112]	@ 0x458
    memset(ctx->rx_buffer, 0, sizeof(SecureUartPacket));
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	3338      	adds	r3, #56	@ 0x38
 8000e1a:	f44f 6284 	mov.w	r2, #1056	@ 0x420
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f004 fdd1 	bl	80059c8 <memset>

    ctx->initialized = true;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	2201      	movs	r2, #1
 8000e2a:	f883 245c 	strb.w	r2, [r3, #1116]	@ 0x45c

    // Выводим отладочную информацию
    Debug_Print(ctx, "Защищенный UART инициализирован\r\n");
 8000e2e:	4907      	ldr	r1, [pc, #28]	@ (8000e4c <SecureUart_Init+0xd4>)
 8000e30:	68f8      	ldr	r0, [r7, #12]
 8000e32:	f7ff ff5f 	bl	8000cf4 <Debug_Print>

    return true;
 8000e36:	2301      	movs	r3, #1
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	e000edf0 	.word	0xe000edf0
 8000e44:	e0001000 	.word	0xe0001000
 8000e48:	20000a64 	.word	0x20000a64
 8000e4c:	08006944 	.word	0x08006944

08000e50 <SecureUart_Send>:
 */
bool SecureUart_Send(SecureUartContext* ctx,
                     uint8_t* data,
                     uint16_t length,
                     bool encrypt,
                     bool use_mac) {
 8000e50:	b590      	push	{r4, r7, lr}
 8000e52:	f2ad 4d74 	subw	sp, sp, #1140	@ 0x474
 8000e56:	af02      	add	r7, sp, #8
 8000e58:	f507 648d 	add.w	r4, r7, #1128	@ 0x468
 8000e5c:	f2a4 445c 	subw	r4, r4, #1116	@ 0x45c
 8000e60:	6020      	str	r0, [r4, #0]
 8000e62:	f507 608d 	add.w	r0, r7, #1128	@ 0x468
 8000e66:	f5a0 608c 	sub.w	r0, r0, #1120	@ 0x460
 8000e6a:	6001      	str	r1, [r0, #0]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8000e72:	f2a3 4362 	subw	r3, r3, #1122	@ 0x462
 8000e76:	801a      	strh	r2, [r3, #0]
 8000e78:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8000e7c:	f2a3 4363 	subw	r3, r3, #1123	@ 0x463
 8000e80:	460a      	mov	r2, r1
 8000e82:	701a      	strb	r2, [r3, #0]

    if (!ctx->initialized || length > SECURE_UART_MAX_DATA_LEN) {
 8000e84:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8000e88:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f893 345c 	ldrb.w	r3, [r3, #1116]	@ 0x45c
 8000e92:	f083 0301 	eor.w	r3, r3, #1
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d107      	bne.n	8000eac <SecureUart_Send+0x5c>
 8000e9c:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8000ea0:	f2a3 4362 	subw	r3, r3, #1122	@ 0x462
 8000ea4:	881b      	ldrh	r3, [r3, #0]
 8000ea6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000eaa:	d901      	bls.n	8000eb0 <SecureUart_Send+0x60>
        return false;
 8000eac:	2300      	movs	r3, #0
 8000eae:	e18e      	b.n	80011ce <SecureUart_Send+0x37e>
    }

    uint32_t t0, t1;
    uint32_t t0_frame, t1_frame;

    t0_frame = DWT_GET_CYCLES();
 8000eb0:	4bc9      	ldr	r3, [pc, #804]	@ (80011d8 <SecureUart_Send+0x388>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f8c7 3458 	str.w	r3, [r7, #1112]	@ 0x458

    uint8_t packet_buffer[sizeof(SecureUartPacket)];
    SecureUartPacket* packet = (SecureUartPacket*)packet_buffer;
 8000eb8:	f107 0318 	add.w	r3, r7, #24
 8000ebc:	f8c7 3454 	str.w	r3, [r7, #1108]	@ 0x454

    // Заполняем заголовок
    packet->header.magic = SECURE_UART_MAGIC;
 8000ec0:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8000ec4:	f24a 52c3 	movw	r2, #42435	@ 0xa5c3
 8000ec8:	801a      	strh	r2, [r3, #0]
    packet->header.length = length;
 8000eca:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8000ece:	f507 628d 	add.w	r2, r7, #1128	@ 0x468
 8000ed2:	f2a2 4262 	subw	r2, r2, #1122	@ 0x462
 8000ed6:	8812      	ldrh	r2, [r2, #0]
 8000ed8:	805a      	strh	r2, [r3, #2]
    packet->header.flags = 0;
 8000eda:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8000ede:	2200      	movs	r2, #0
 8000ee0:	711a      	strb	r2, [r3, #4]
    packet->header.reserved = 0;
 8000ee2:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	715a      	strb	r2, [r3, #5]

    if (encrypt) {
 8000eea:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8000eee:	f2a3 4363 	subw	r3, r3, #1123	@ 0x463
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d008      	beq.n	8000f0a <SecureUart_Send+0xba>
        packet->header.flags |= SECURE_UART_FLAG_ENCRYPTED;
 8000ef8:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8000efc:	791b      	ldrb	r3, [r3, #4]
 8000efe:	f043 0301 	orr.w	r3, r3, #1
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8000f08:	711a      	strb	r2, [r3, #4]
    }

    if (use_mac) {
 8000f0a:	f897 3478 	ldrb.w	r3, [r7, #1144]	@ 0x478
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d008      	beq.n	8000f24 <SecureUart_Send+0xd4>
        packet->header.flags |= SECURE_UART_FLAG_HAS_MAC;
 8000f12:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8000f16:	791b      	ldrb	r3, [r3, #4]
 8000f18:	f043 0302 	orr.w	r3, r3, #2
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8000f22:	711a      	strb	r2, [r3, #4]
    }

    // Устанавливаем номер пакета (защита от replay-атак)
    packet->sequence = ctx->tx_sequence++;
 8000f24:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8000f28:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	691b      	ldr	r3, [r3, #16]
 8000f30:	1c59      	adds	r1, r3, #1
 8000f32:	f507 628d 	add.w	r2, r7, #1128	@ 0x468
 8000f36:	f2a2 425c 	subw	r2, r2, #1116	@ 0x45c
 8000f3a:	6812      	ldr	r2, [r2, #0]
 8000f3c:	6111      	str	r1, [r2, #16]
 8000f3e:	f8d7 2454 	ldr.w	r2, [r7, #1108]	@ 0x454
 8000f42:	f8c2 3410 	str.w	r3, [r2, #1040]	@ 0x410

    // Если шифрование требуется, шифруем данные
    if (encrypt) {
 8000f46:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8000f4a:	f2a3 4363 	subw	r3, r3, #1123	@ 0x463
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d029      	beq.n	8000fa8 <SecureUart_Send+0x158>
        t0 = DWT_GET_CYCLES();
 8000f54:	4ba0      	ldr	r3, [pc, #640]	@ (80011d8 <SecureUart_Send+0x388>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
        size_t padded_length = Speck_CBC_Encrypt(&g_speck_ctx, data, length,
 8000f5c:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8000f60:	f2a3 4362 	subw	r3, r3, #1122	@ 0x462
 8000f64:	881a      	ldrh	r2, [r3, #0]
                                                g_default_iv, packet->data);
 8000f66:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8000f6a:	3308      	adds	r3, #8
        size_t padded_length = Speck_CBC_Encrypt(&g_speck_ctx, data, length,
 8000f6c:	f507 618d 	add.w	r1, r7, #1128	@ 0x468
 8000f70:	f5a1 618c 	sub.w	r1, r1, #1120	@ 0x460
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	4b99      	ldr	r3, [pc, #612]	@ (80011dc <SecureUart_Send+0x38c>)
 8000f78:	6809      	ldr	r1, [r1, #0]
 8000f7a:	4899      	ldr	r0, [pc, #612]	@ (80011e0 <SecureUart_Send+0x390>)
 8000f7c:	f001 fe70 	bl	8002c60 <Speck_CBC_Encrypt>
 8000f80:	f8c7 044c 	str.w	r0, [r7, #1100]	@ 0x44c
        t1 = DWT_GET_CYCLES();
 8000f84:	4b94      	ldr	r3, [pc, #592]	@ (80011d8 <SecureUart_Send+0x388>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f8c7 3448 	str.w	r3, [r7, #1096]	@ 0x448
        g_benchmark.encryption_cycles = t1 - t0;
 8000f8c:	f8d7 2448 	ldr.w	r2, [r7, #1096]	@ 0x448
 8000f90:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	4a93      	ldr	r2, [pc, #588]	@ (80011e4 <SecureUart_Send+0x394>)
 8000f98:	6093      	str	r3, [r2, #8]

        // Обновляем длину данных с учетом дополнения
        packet->header.length = padded_length;
 8000f9a:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8000fa4:	805a      	strh	r2, [r3, #2]
 8000fa6:	e00f      	b.n	8000fc8 <SecureUart_Send+0x178>
    } else {
        // Просто копируем данные
        memcpy(packet->data, data, length);
 8000fa8:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8000fac:	f103 0008 	add.w	r0, r3, #8
 8000fb0:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8000fb4:	f2a3 4362 	subw	r3, r3, #1122	@ 0x462
 8000fb8:	881a      	ldrh	r2, [r3, #0]
 8000fba:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8000fbe:	f5a3 638c 	sub.w	r3, r3, #1120	@ 0x460
 8000fc2:	6819      	ldr	r1, [r3, #0]
 8000fc4:	f004 fd7b 	bl	8005abe <memcpy>
    }

    // Вычисляем контрольную сумму заголовка
    packet->header.checksum = SecureUart_CalculateHeaderChecksum(&packet->header);
 8000fc8:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fe39 	bl	8000c44 <SecureUart_CalculateHeaderChecksum>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8000fda:	80da      	strh	r2, [r3, #6]

    // Вычисляем CRC32 для всего пакета кроме поля CRC
    t0 = DWT_GET_CYCLES();
 8000fdc:	4b7e      	ldr	r3, [pc, #504]	@ (80011d8 <SecureUart_Send+0x388>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
    // Размер пакета для CRC (заголовок + данные + счетчик + MAC, но не CRC)
    size_t crc_size = SECURE_UART_HEADER_SIZE + packet->header.length + SECURE_UART_SEQ_SIZE;
 8000fe4:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8000fe8:	885b      	ldrh	r3, [r3, #2]
 8000fea:	330c      	adds	r3, #12
 8000fec:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
    if (use_mac) {
 8000ff0:	f897 3478 	ldrb.w	r3, [r7, #1144]	@ 0x478
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d004      	beq.n	8001002 <SecureUart_Send+0x1b2>
        crc_size += SECURE_UART_MAC_SIZE;
 8000ff8:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8000ffc:	3308      	adds	r3, #8
 8000ffe:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
    }

    // Вычисляем аппаратный CRC32
    __HAL_CRC_DR_RESET(ctx->hcrc);
 8001002:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8001006:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	689a      	ldr	r2, [r3, #8]
 8001012:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8001016:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f042 0201 	orr.w	r2, r2, #1
 8001024:	609a      	str	r2, [r3, #8]
    packet->crc = HAL_CRC_Calculate(ctx->hcrc, (uint32_t*)packet_buffer, crc_size / 4);
 8001026:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 800102a:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	68d8      	ldr	r0, [r3, #12]
 8001032:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8001036:	089a      	lsrs	r2, r3, #2
 8001038:	f107 0318 	add.w	r3, r7, #24
 800103c:	4619      	mov	r1, r3
 800103e:	f002 fb2d 	bl	800369c <HAL_CRC_Calculate>
 8001042:	4602      	mov	r2, r0
 8001044:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8001048:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c

    // Если размер не кратен 4, добавляем оставшиеся байты
    if (crc_size % 4 != 0) {
 800104c:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	2b00      	cmp	r3, #0
 8001056:	d03d      	beq.n	80010d4 <SecureUart_Send+0x284>
        uint32_t temp = 0;
 8001058:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 800105c:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
        uint8_t* p_temp = (uint8_t*)&temp;
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
        for (int i = 0; i < crc_size % 4; i++) {
 800106c:	2300      	movs	r3, #0
 800106e:	f8c7 3460 	str.w	r3, [r7, #1120]	@ 0x460
 8001072:	e016      	b.n	80010a2 <SecureUart_Send+0x252>
            p_temp[i] = packet_buffer[crc_size - (crc_size % 4) + i];
 8001074:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8001078:	f023 0203 	bic.w	r2, r3, #3
 800107c:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 8001080:	441a      	add	r2, r3
 8001082:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 8001086:	f8d7 1444 	ldr.w	r1, [r7, #1092]	@ 0x444
 800108a:	440b      	add	r3, r1
 800108c:	f507 618d 	add.w	r1, r7, #1128	@ 0x468
 8001090:	f5a1 618a 	sub.w	r1, r1, #1104	@ 0x450
 8001094:	5c8a      	ldrb	r2, [r1, r2]
 8001096:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < crc_size % 4; i++) {
 8001098:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 800109c:	3301      	adds	r3, #1
 800109e:	f8c7 3460 	str.w	r3, [r7, #1120]	@ 0x460
 80010a2:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 80010a6:	f003 0203 	and.w	r2, r3, #3
 80010aa:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d8e0      	bhi.n	8001074 <SecureUart_Send+0x224>
        }
        packet->crc = HAL_CRC_Accumulate(ctx->hcrc, &temp, 1);
 80010b2:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 80010b6:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	f107 0114 	add.w	r1, r7, #20
 80010c2:	2201      	movs	r2, #1
 80010c4:	4618      	mov	r0, r3
 80010c6:	f002 fabe 	bl	8003646 <HAL_CRC_Accumulate>
 80010ca:	4602      	mov	r2, r0
 80010cc:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 80010d0:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
    }
    t1 = DWT_GET_CYCLES();
 80010d4:	4b40      	ldr	r3, [pc, #256]	@ (80011d8 <SecureUart_Send+0x388>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f8c7 3448 	str.w	r3, [r7, #1096]	@ 0x448
    g_benchmark.crc_cycles = t1 - t0;
 80010dc:	f8d7 2448 	ldr.w	r2, [r7, #1096]	@ 0x448
 80010e0:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	4a3f      	ldr	r2, [pc, #252]	@ (80011e4 <SecureUart_Send+0x394>)
 80010e8:	6113      	str	r3, [r2, #16]

    // Если нужен MAC, вычисляем его
    if (use_mac) {
 80010ea:	f897 3478 	ldrb.w	r3, [r7, #1144]	@ 0x478
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d025      	beq.n	800113e <SecureUart_Send+0x2ee>
        t0 = DWT_GET_CYCLES();
 80010f2:	4b39      	ldr	r3, [pc, #228]	@ (80011d8 <SecureUart_Send+0x388>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
        // Вычисляем MAC для заголовка, данных и счетчика
        size_t mac_data_size = SECURE_UART_HEADER_SIZE + packet->header.length + SECURE_UART_SEQ_SIZE;
 80010fa:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 80010fe:	885b      	ldrh	r3, [r3, #2]
 8001100:	330c      	adds	r3, #12
 8001102:	f8c7 3440 	str.w	r3, [r7, #1088]	@ 0x440
        SipHash_2_4_MAC(ctx->mac_key, packet_buffer, mac_data_size, packet->mac);
 8001106:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 800110a:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8001114:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8001118:	f203 4314 	addw	r3, r3, #1044	@ 0x414
 800111c:	f107 0118 	add.w	r1, r7, #24
 8001120:	f8d7 2440 	ldr.w	r2, [r7, #1088]	@ 0x440
 8001124:	f001 fb68 	bl	80027f8 <SipHash_2_4_MAC>
        t1 = DWT_GET_CYCLES();
 8001128:	4b2b      	ldr	r3, [pc, #172]	@ (80011d8 <SecureUart_Send+0x388>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f8c7 3448 	str.w	r3, [r7, #1096]	@ 0x448
        g_benchmark.mac_cycles = t1 - t0;
 8001130:	f8d7 2448 	ldr.w	r2, [r7, #1096]	@ 0x448
 8001134:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	4a2a      	ldr	r2, [pc, #168]	@ (80011e4 <SecureUart_Send+0x394>)
 800113c:	60d3      	str	r3, [r2, #12]
    }

    // Вычисляем полный размер пакета
    size_t packet_size = SECURE_UART_HEADER_SIZE + packet->header.length + SECURE_UART_SEQ_SIZE
 800113e:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8001142:	885b      	ldrh	r3, [r3, #2]
                         + SECURE_UART_CRC_SIZE;
 8001144:	3310      	adds	r3, #16
    size_t packet_size = SECURE_UART_HEADER_SIZE + packet->header.length + SECURE_UART_SEQ_SIZE
 8001146:	f8c7 345c 	str.w	r3, [r7, #1116]	@ 0x45c
    if (use_mac) {
 800114a:	f897 3478 	ldrb.w	r3, [r7, #1144]	@ 0x478
 800114e:	2b00      	cmp	r3, #0
 8001150:	d004      	beq.n	800115c <SecureUart_Send+0x30c>
        packet_size += SECURE_UART_MAC_SIZE;
 8001152:	f8d7 345c 	ldr.w	r3, [r7, #1116]	@ 0x45c
 8001156:	3308      	adds	r3, #8
 8001158:	f8c7 345c 	str.w	r3, [r7, #1116]	@ 0x45c
    }

    t1_frame = DWT_GET_CYCLES();
 800115c:	4b1e      	ldr	r3, [pc, #120]	@ (80011d8 <SecureUart_Send+0x388>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f8c7 343c 	str.w	r3, [r7, #1084]	@ 0x43c
    g_benchmark.frame_build_cycles = t1_frame - t0_frame;
 8001164:	f8d7 243c 	ldr.w	r2, [r7, #1084]	@ 0x43c
 8001168:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	4a1d      	ldr	r2, [pc, #116]	@ (80011e4 <SecureUart_Send+0x394>)
 8001170:	6013      	str	r3, [r2, #0]

    // Отправляем пакет
    bool result = UART_SendData(ctx->huart_tx, packet_buffer, packet_size);
 8001172:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8001176:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f8d7 245c 	ldr.w	r2, [r7, #1116]	@ 0x45c
 8001182:	b292      	uxth	r2, r2
 8001184:	f107 0118 	add.w	r1, r7, #24
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff fd99 	bl	8000cc0 <UART_SendData>
 800118e:	4603      	mov	r3, r0
 8001190:	f887 343b 	strb.w	r3, [r7, #1083]	@ 0x43b

    // Выводим отладочную информацию при успешной отправке
    if (result) {
 8001194:	f897 343b 	ldrb.w	r3, [r7, #1083]	@ 0x43b
 8001198:	2b00      	cmp	r3, #0
 800119a:	d00e      	beq.n	80011ba <SecureUart_Send+0x36a>
        Debug_Print(ctx, "Отправлен пакет #%lu, размер: %u байт\r\n",
                   (unsigned long)packet->sequence, (unsigned int)packet_size);
 800119c:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 80011a0:	f8d3 2410 	ldr.w	r2, [r3, #1040]	@ 0x410
        Debug_Print(ctx, "Отправлен пакет #%lu, размер: %u байт\r\n",
 80011a4:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 80011a8:	f2a3 405c 	subw	r0, r3, #1116	@ 0x45c
 80011ac:	f8d7 345c 	ldr.w	r3, [r7, #1116]	@ 0x45c
 80011b0:	490d      	ldr	r1, [pc, #52]	@ (80011e8 <SecureUart_Send+0x398>)
 80011b2:	6800      	ldr	r0, [r0, #0]
 80011b4:	f7ff fd9e 	bl	8000cf4 <Debug_Print>
 80011b8:	e007      	b.n	80011ca <SecureUart_Send+0x37a>
    } else {
        Debug_Print(ctx, "Ошибка отправки пакета!\r\n");
 80011ba:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 80011be:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 80011c2:	490a      	ldr	r1, [pc, #40]	@ (80011ec <SecureUart_Send+0x39c>)
 80011c4:	6818      	ldr	r0, [r3, #0]
 80011c6:	f7ff fd95 	bl	8000cf4 <Debug_Print>
    }

    return result;
 80011ca:	f897 343b 	ldrb.w	r3, [r7, #1083]	@ 0x43b
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	f207 476c 	addw	r7, r7, #1132	@ 0x46c
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd90      	pop	{r4, r7, pc}
 80011d8:	e0001000 	.word	0xe0001000
 80011dc:	20000020 	.word	0x20000020
 80011e0:	20000a64 	.word	0x20000a64
 80011e4:	20000a4c 	.word	0x20000a4c
 80011e8:	08006980 	.word	0x08006980
 80011ec:	080069c0 	.word	0x080069c0

080011f0 <SecureUart_ProcessReceived>:

/**
 * @brief Обработка принятого пакета
 */
bool SecureUart_ProcessReceived(SecureUartContext* ctx) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	f5ad 6d8c 	sub.w	sp, sp, #1120	@ 0x460
 80011f6:	af02      	add	r7, sp, #8
 80011f8:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80011fc:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001200:	6018      	str	r0, [r3, #0]
    if (!ctx->initialized) {
 8001202:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001206:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f893 345c 	ldrb.w	r3, [r3, #1116]	@ 0x45c
 8001210:	f083 0301 	eor.w	r3, r3, #1
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <SecureUart_ProcessReceived+0x2e>
        return false;
 800121a:	2300      	movs	r3, #0
 800121c:	e223      	b.n	8001666 <SecureUart_ProcessReceived+0x476>
    }

    uint32_t t0_frame, t1_frame;
    uint32_t t0, t1;

    t0_frame = DWT_GET_CYCLES();
 800121e:	4baa      	ldr	r3, [pc, #680]	@ (80014c8 <SecureUart_ProcessReceived+0x2d8>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f8c7 3440 	str.w	r3, [r7, #1088]	@ 0x440

    SecureUartPacket* packet = (SecureUartPacket*)ctx->rx_buffer;
 8001226:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800122a:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	3338      	adds	r3, #56	@ 0x38
 8001232:	f8c7 343c 	str.w	r3, [r7, #1084]	@ 0x43c

    // Проверяем магическое число
    if (packet->header.magic != SECURE_UART_MAGIC) {
 8001236:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	f24a 52c3 	movw	r2, #42435	@ 0xa5c3
 8001240:	4293      	cmp	r3, r2
 8001242:	d009      	beq.n	8001258 <SecureUart_ProcessReceived+0x68>
        Debug_Print(ctx, "Ошибка: неверное магическое число\r\n");
 8001244:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001248:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 800124c:	499f      	ldr	r1, [pc, #636]	@ (80014cc <SecureUart_ProcessReceived+0x2dc>)
 800124e:	6818      	ldr	r0, [r3, #0]
 8001250:	f7ff fd50 	bl	8000cf4 <Debug_Print>
        return false;
 8001254:	2300      	movs	r3, #0
 8001256:	e206      	b.n	8001666 <SecureUart_ProcessReceived+0x476>
    }

    // Проверяем контрольную сумму заголовка
    if (!SecureUart_ValidateHeaderChecksum(&packet->header)) {
 8001258:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fd1a 	bl	8000c96 <SecureUart_ValidateHeaderChecksum>
 8001262:	4603      	mov	r3, r0
 8001264:	f083 0301 	eor.w	r3, r3, #1
 8001268:	b2db      	uxtb	r3, r3
 800126a:	2b00      	cmp	r3, #0
 800126c:	d009      	beq.n	8001282 <SecureUart_ProcessReceived+0x92>
        Debug_Print(ctx, "Ошибка: неверная контрольная сумма заголовка\r\n");
 800126e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001272:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001276:	4996      	ldr	r1, [pc, #600]	@ (80014d0 <SecureUart_ProcessReceived+0x2e0>)
 8001278:	6818      	ldr	r0, [r3, #0]
 800127a:	f7ff fd3b 	bl	8000cf4 <Debug_Print>
        return false;
 800127e:	2300      	movs	r3, #0
 8001280:	e1f1      	b.n	8001666 <SecureUart_ProcessReceived+0x476>
    }

    // Проверяем, не превышает ли длина максимальное значение
    if (packet->header.length > SECURE_UART_MAX_DATA_LEN) {
 8001282:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8001286:	885b      	ldrh	r3, [r3, #2]
 8001288:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800128c:	d909      	bls.n	80012a2 <SecureUart_ProcessReceived+0xb2>
        Debug_Print(ctx, "Ошибка: слишком большой размер данных\r\n");
 800128e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001292:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001296:	498f      	ldr	r1, [pc, #572]	@ (80014d4 <SecureUart_ProcessReceived+0x2e4>)
 8001298:	6818      	ldr	r0, [r3, #0]
 800129a:	f7ff fd2b 	bl	8000cf4 <Debug_Print>
        return false;
 800129e:	2300      	movs	r3, #0
 80012a0:	e1e1      	b.n	8001666 <SecureUart_ProcessReceived+0x476>
    }

    // Проверяем CRC32
    t0 = DWT_GET_CYCLES();
 80012a2:	4b89      	ldr	r3, [pc, #548]	@ (80014c8 <SecureUart_ProcessReceived+0x2d8>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438

    // Размер пакета для CRC (заголовок + данные + счетчик + MAC, но не CRC)
    size_t crc_size = SECURE_UART_HEADER_SIZE + packet->header.length + SECURE_UART_SEQ_SIZE;
 80012aa:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 80012ae:	885b      	ldrh	r3, [r3, #2]
 80012b0:	330c      	adds	r3, #12
 80012b2:	f8c7 3454 	str.w	r3, [r7, #1108]	@ 0x454
    if (packet->header.flags & SECURE_UART_FLAG_HAS_MAC) {
 80012b6:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 80012ba:	791b      	ldrb	r3, [r3, #4]
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d004      	beq.n	80012ce <SecureUart_ProcessReceived+0xde>
        crc_size += SECURE_UART_MAC_SIZE;
 80012c4:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 80012c8:	3308      	adds	r3, #8
 80012ca:	f8c7 3454 	str.w	r3, [r7, #1108]	@ 0x454
    }

    // Сохраняем оригинальный CRC и вычисляем аппаратный CRC32
    uint32_t original_crc = packet->crc;
 80012ce:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 80012d2:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 80012d6:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434

    __HAL_CRC_DR_RESET(ctx->hcrc);
 80012da:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80012de:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	689a      	ldr	r2, [r3, #8]
 80012ea:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80012ee:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f042 0201 	orr.w	r2, r2, #1
 80012fc:	609a      	str	r2, [r3, #8]
    uint32_t calculated_crc = HAL_CRC_Calculate(ctx->hcrc, (uint32_t*)ctx->rx_buffer, crc_size / 4);
 80012fe:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001302:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	68d8      	ldr	r0, [r3, #12]
 800130a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800130e:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8001318:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 800131c:	089b      	lsrs	r3, r3, #2
 800131e:	461a      	mov	r2, r3
 8001320:	f002 f9bc 	bl	800369c <HAL_CRC_Calculate>
 8001324:	f8c7 0450 	str.w	r0, [r7, #1104]	@ 0x450

    // Если размер не кратен 4, добавляем оставшиеся байты
    if (crc_size % 4 != 0) {
 8001328:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	2b00      	cmp	r3, #0
 8001332:	d03d      	beq.n	80013b0 <SecureUart_ProcessReceived+0x1c0>
        uint32_t temp = 0;
 8001334:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001338:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
        uint8_t* p_temp = (uint8_t*)&temp;
 8001340:	f107 031c 	add.w	r3, r7, #28
 8001344:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
        for (int i = 0; i < crc_size % 4; i++) {
 8001348:	2300      	movs	r3, #0
 800134a:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c
 800134e:	e019      	b.n	8001384 <SecureUart_ProcessReceived+0x194>
            p_temp[i] = ctx->rx_buffer[crc_size - (crc_size % 4) + i];
 8001350:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8001354:	f023 0203 	bic.w	r2, r3, #3
 8001358:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 800135c:	441a      	add	r2, r3
 800135e:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 8001362:	f8d7 1430 	ldr.w	r1, [r7, #1072]	@ 0x430
 8001366:	440b      	add	r3, r1
 8001368:	f507 618b 	add.w	r1, r7, #1112	@ 0x458
 800136c:	f2a1 4154 	subw	r1, r1, #1108	@ 0x454
 8001370:	6809      	ldr	r1, [r1, #0]
 8001372:	440a      	add	r2, r1
 8001374:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
 8001378:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < crc_size % 4; i++) {
 800137a:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 800137e:	3301      	adds	r3, #1
 8001380:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c
 8001384:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8001388:	f003 0203 	and.w	r2, r3, #3
 800138c:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 8001390:	429a      	cmp	r2, r3
 8001392:	d8dd      	bhi.n	8001350 <SecureUart_ProcessReceived+0x160>
        }
        calculated_crc = HAL_CRC_Accumulate(ctx->hcrc, &temp, 1);
 8001394:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001398:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	f107 011c 	add.w	r1, r7, #28
 80013a4:	2201      	movs	r2, #1
 80013a6:	4618      	mov	r0, r3
 80013a8:	f002 f94d 	bl	8003646 <HAL_CRC_Accumulate>
 80013ac:	f8c7 0450 	str.w	r0, [r7, #1104]	@ 0x450
    }

    t1 = DWT_GET_CYCLES();
 80013b0:	4b45      	ldr	r3, [pc, #276]	@ (80014c8 <SecureUart_ProcessReceived+0x2d8>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f8c7 342c 	str.w	r3, [r7, #1068]	@ 0x42c
    g_benchmark.crc_cycles = t1 - t0;
 80013b8:	f8d7 242c 	ldr.w	r2, [r7, #1068]	@ 0x42c
 80013bc:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	4a45      	ldr	r2, [pc, #276]	@ (80014d8 <SecureUart_ProcessReceived+0x2e8>)
 80013c4:	6113      	str	r3, [r2, #16]

    if (calculated_crc != original_crc) {
 80013c6:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 80013ca:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d009      	beq.n	80013e6 <SecureUart_ProcessReceived+0x1f6>
        Debug_Print(ctx, "Ошибка: неверный CRC32\r\n");
 80013d2:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80013d6:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 80013da:	4940      	ldr	r1, [pc, #256]	@ (80014dc <SecureUart_ProcessReceived+0x2ec>)
 80013dc:	6818      	ldr	r0, [r3, #0]
 80013de:	f7ff fc89 	bl	8000cf4 <Debug_Print>
        return false;
 80013e2:	2300      	movs	r3, #0
 80013e4:	e13f      	b.n	8001666 <SecureUart_ProcessReceived+0x476>
    }

    // Если есть MAC, проверяем его
    if (packet->header.flags & SECURE_UART_FLAG_HAS_MAC) {
 80013e6:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 80013ea:	791b      	ldrb	r3, [r3, #4]
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d048      	beq.n	8001486 <SecureUart_ProcessReceived+0x296>
        t0 = DWT_GET_CYCLES();
 80013f4:	4b34      	ldr	r3, [pc, #208]	@ (80014c8 <SecureUart_ProcessReceived+0x2d8>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438

        // Сохраняем оригинальный MAC
        uint8_t original_mac[SECURE_UART_MAC_SIZE];
        memcpy(original_mac, packet->mac, SECURE_UART_MAC_SIZE);
 80013fc:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8001400:	f203 4214 	addw	r2, r3, #1044	@ 0x414
 8001404:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001408:	f2a3 4344 	subw	r3, r3, #1092	@ 0x444
 800140c:	6810      	ldr	r0, [r2, #0]
 800140e:	6851      	ldr	r1, [r2, #4]
 8001410:	c303      	stmia	r3!, {r0, r1}

        // Вычисляем MAC для заголовка, данных и счетчика
        size_t mac_data_size = SECURE_UART_HEADER_SIZE + packet->header.length + SECURE_UART_SEQ_SIZE;
 8001412:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8001416:	885b      	ldrh	r3, [r3, #2]
 8001418:	330c      	adds	r3, #12
 800141a:	f8c7 3428 	str.w	r3, [r7, #1064]	@ 0x428
        uint8_t calculated_mac[SECURE_UART_MAC_SIZE];
        SipHash_2_4_MAC(ctx->mac_key, ctx->rx_buffer, mac_data_size, calculated_mac);
 800141e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001422:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800142c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001430:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800143a:	f107 030c 	add.w	r3, r7, #12
 800143e:	f8d7 2428 	ldr.w	r2, [r7, #1064]	@ 0x428
 8001442:	f001 f9d9 	bl	80027f8 <SipHash_2_4_MAC>

        t1 = DWT_GET_CYCLES();
 8001446:	4b20      	ldr	r3, [pc, #128]	@ (80014c8 <SecureUart_ProcessReceived+0x2d8>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f8c7 342c 	str.w	r3, [r7, #1068]	@ 0x42c
        g_benchmark.mac_cycles = t1 - t0;
 800144e:	f8d7 242c 	ldr.w	r2, [r7, #1068]	@ 0x42c
 8001452:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	4a1f      	ldr	r2, [pc, #124]	@ (80014d8 <SecureUart_ProcessReceived+0x2e8>)
 800145a:	60d3      	str	r3, [r2, #12]

        // Сравниваем MAC
        if (memcmp(original_mac, calculated_mac, SECURE_UART_MAC_SIZE) != 0) {
 800145c:	f107 010c 	add.w	r1, r7, #12
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	2208      	movs	r2, #8
 8001466:	4618      	mov	r0, r3
 8001468:	f004 fa9e 	bl	80059a8 <memcmp>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d009      	beq.n	8001486 <SecureUart_ProcessReceived+0x296>
            Debug_Print(ctx, "Ошибка: неверный MAC\r\n");
 8001472:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001476:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 800147a:	4919      	ldr	r1, [pc, #100]	@ (80014e0 <SecureUart_ProcessReceived+0x2f0>)
 800147c:	6818      	ldr	r0, [r3, #0]
 800147e:	f7ff fc39 	bl	8000cf4 <Debug_Print>
            return false;
 8001482:	2300      	movs	r3, #0
 8001484:	e0ef      	b.n	8001666 <SecureUart_ProcessReceived+0x476>
        }
    }

    // Проверяем защиту от replay-атак (порядковый номер пакета)
    if (packet->sequence <= ctx->rx_sequence) {
 8001486:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 800148a:	f8d3 2410 	ldr.w	r2, [r3, #1040]	@ 0x410
 800148e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001492:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	429a      	cmp	r2, r3
 800149c:	d824      	bhi.n	80014e8 <SecureUart_ProcessReceived+0x2f8>
        Debug_Print(ctx, "Внимание: возможная replay-атака, пакет #%lu <= последний #%lu\r\n",
                   (unsigned long)packet->sequence, (unsigned long)ctx->rx_sequence);
 800149e:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 80014a2:	f8d3 2410 	ldr.w	r2, [r3, #1040]	@ 0x410
 80014a6:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80014aa:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	695b      	ldr	r3, [r3, #20]
        Debug_Print(ctx, "Внимание: возможная replay-атака, пакет #%lu <= последний #%lu\r\n",
 80014b2:	f507 618b 	add.w	r1, r7, #1112	@ 0x458
 80014b6:	f2a1 4054 	subw	r0, r1, #1108	@ 0x454
 80014ba:	490a      	ldr	r1, [pc, #40]	@ (80014e4 <SecureUart_ProcessReceived+0x2f4>)
 80014bc:	6800      	ldr	r0, [r0, #0]
 80014be:	f7ff fc19 	bl	8000cf4 <Debug_Print>
        return false;
 80014c2:	2300      	movs	r3, #0
 80014c4:	e0cf      	b.n	8001666 <SecureUart_ProcessReceived+0x476>
 80014c6:	bf00      	nop
 80014c8:	e0001000 	.word	0xe0001000
 80014cc:	080069f0 	.word	0x080069f0
 80014d0:	08006a34 	.word	0x08006a34
 80014d4:	08006a8c 	.word	0x08006a8c
 80014d8:	20000a4c 	.word	0x20000a4c
 80014dc:	08006ad4 	.word	0x08006ad4
 80014e0:	08006afc 	.word	0x08006afc
 80014e4:	08006b24 	.word	0x08006b24
    }

    // Обновляем счетчик последнего полученного пакета
    ctx->rx_sequence = packet->sequence;
 80014e8:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 80014ec:	f8d3 2410 	ldr.w	r2, [r3, #1040]	@ 0x410
 80014f0:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80014f4:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	615a      	str	r2, [r3, #20]

    // Расшифровываем данные, если они зашифрованы
    uint8_t decrypted_data[SECURE_UART_MAX_DATA_LEN];
    uint16_t data_length = packet->header.length;
 80014fc:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8001500:	885b      	ldrh	r3, [r3, #2]
 8001502:	f8a7 3426 	strh.w	r3, [r7, #1062]	@ 0x426

    if (packet->header.flags & SECURE_UART_FLAG_ENCRYPTED) {
 8001506:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 800150a:	791b      	ldrb	r3, [r3, #4]
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	2b00      	cmp	r3, #0
 8001512:	d053      	beq.n	80015bc <SecureUart_ProcessReceived+0x3cc>
        t0 = DWT_GET_CYCLES();
 8001514:	4b56      	ldr	r3, [pc, #344]	@ (8001670 <SecureUart_ProcessReceived+0x480>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438

        // Расшифровываем данные
        data_length = Speck_CBC_Decrypt(&g_speck_ctx, packet->data, packet->header.length,
 800151c:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8001520:	f103 0108 	add.w	r1, r3, #8
 8001524:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8001528:	885b      	ldrh	r3, [r3, #2]
 800152a:	461a      	mov	r2, r3
 800152c:	f107 0320 	add.w	r3, r7, #32
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	4b50      	ldr	r3, [pc, #320]	@ (8001674 <SecureUart_ProcessReceived+0x484>)
 8001534:	4850      	ldr	r0, [pc, #320]	@ (8001678 <SecureUart_ProcessReceived+0x488>)
 8001536:	f001 fc52 	bl	8002dde <Speck_CBC_Decrypt>
 800153a:	4603      	mov	r3, r0
 800153c:	f8a7 3426 	strh.w	r3, [r7, #1062]	@ 0x426
                                       g_default_iv, decrypted_data);

        t1 = DWT_GET_CYCLES();
 8001540:	4b4b      	ldr	r3, [pc, #300]	@ (8001670 <SecureUart_ProcessReceived+0x480>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f8c7 342c 	str.w	r3, [r7, #1068]	@ 0x42c
        g_benchmark.encryption_cycles = t1 - t0;
 8001548:	f8d7 242c 	ldr.w	r2, [r7, #1068]	@ 0x42c
 800154c:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	4a4a      	ldr	r2, [pc, #296]	@ (800167c <SecureUart_ProcessReceived+0x48c>)
 8001554:	6093      	str	r3, [r2, #8]

        // Выводим расшифрованные данные в отладочный порт
        Debug_Print(ctx, "Расшифрованные данные (%u байт): ", data_length);
 8001556:	f8b7 2426 	ldrh.w	r2, [r7, #1062]	@ 0x426
 800155a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800155e:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001562:	4947      	ldr	r1, [pc, #284]	@ (8001680 <SecureUart_ProcessReceived+0x490>)
 8001564:	6818      	ldr	r0, [r3, #0]
 8001566:	f7ff fbc5 	bl	8000cf4 <Debug_Print>
        for (int i = 0; i < data_length; i++) {
 800156a:	2300      	movs	r3, #0
 800156c:	f8c7 3448 	str.w	r3, [r7, #1096]	@ 0x448
 8001570:	e015      	b.n	800159e <SecureUart_ProcessReceived+0x3ae>
            Debug_Print(ctx, "%02X ", decrypted_data[i]);
 8001572:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001576:	f5a3 6287 	sub.w	r2, r3, #1080	@ 0x438
 800157a:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 800157e:	4413      	add	r3, r2
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	461a      	mov	r2, r3
 8001584:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001588:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 800158c:	493d      	ldr	r1, [pc, #244]	@ (8001684 <SecureUart_ProcessReceived+0x494>)
 800158e:	6818      	ldr	r0, [r3, #0]
 8001590:	f7ff fbb0 	bl	8000cf4 <Debug_Print>
        for (int i = 0; i < data_length; i++) {
 8001594:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 8001598:	3301      	adds	r3, #1
 800159a:	f8c7 3448 	str.w	r3, [r7, #1096]	@ 0x448
 800159e:	f8b7 3426 	ldrh.w	r3, [r7, #1062]	@ 0x426
 80015a2:	f8d7 2448 	ldr.w	r2, [r7, #1096]	@ 0x448
 80015a6:	429a      	cmp	r2, r3
 80015a8:	dbe3      	blt.n	8001572 <SecureUart_ProcessReceived+0x382>
        }
        Debug_Print(ctx, "\r\n");
 80015aa:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80015ae:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 80015b2:	4935      	ldr	r1, [pc, #212]	@ (8001688 <SecureUart_ProcessReceived+0x498>)
 80015b4:	6818      	ldr	r0, [r3, #0]
 80015b6:	f7ff fb9d 	bl	8000cf4 <Debug_Print>
 80015ba:	e03c      	b.n	8001636 <SecureUart_ProcessReceived+0x446>
    } else {
        // Просто копируем данные
        memcpy(decrypted_data, packet->data, data_length);
 80015bc:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 80015c0:	f103 0108 	add.w	r1, r3, #8
 80015c4:	f8b7 2426 	ldrh.w	r2, [r7, #1062]	@ 0x426
 80015c8:	f107 0320 	add.w	r3, r7, #32
 80015cc:	4618      	mov	r0, r3
 80015ce:	f004 fa76 	bl	8005abe <memcpy>

        // Выводим данные в отладочный порт
        Debug_Print(ctx, "Полученные данные (%u байт): ", data_length);
 80015d2:	f8b7 2426 	ldrh.w	r2, [r7, #1062]	@ 0x426
 80015d6:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80015da:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 80015de:	492b      	ldr	r1, [pc, #172]	@ (800168c <SecureUart_ProcessReceived+0x49c>)
 80015e0:	6818      	ldr	r0, [r3, #0]
 80015e2:	f7ff fb87 	bl	8000cf4 <Debug_Print>
        for (int i = 0; i < data_length; i++) {
 80015e6:	2300      	movs	r3, #0
 80015e8:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
 80015ec:	e015      	b.n	800161a <SecureUart_ProcessReceived+0x42a>
            Debug_Print(ctx, "%02X ", decrypted_data[i]);
 80015ee:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80015f2:	f5a3 6287 	sub.w	r2, r3, #1080	@ 0x438
 80015f6:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 80015fa:	4413      	add	r3, r2
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	461a      	mov	r2, r3
 8001600:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001604:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001608:	491e      	ldr	r1, [pc, #120]	@ (8001684 <SecureUart_ProcessReceived+0x494>)
 800160a:	6818      	ldr	r0, [r3, #0]
 800160c:	f7ff fb72 	bl	8000cf4 <Debug_Print>
        for (int i = 0; i < data_length; i++) {
 8001610:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 8001614:	3301      	adds	r3, #1
 8001616:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
 800161a:	f8b7 3426 	ldrh.w	r3, [r7, #1062]	@ 0x426
 800161e:	f8d7 2444 	ldr.w	r2, [r7, #1092]	@ 0x444
 8001622:	429a      	cmp	r2, r3
 8001624:	dbe3      	blt.n	80015ee <SecureUart_ProcessReceived+0x3fe>
        }
        Debug_Print(ctx, "\r\n");
 8001626:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800162a:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 800162e:	4916      	ldr	r1, [pc, #88]	@ (8001688 <SecureUart_ProcessReceived+0x498>)
 8001630:	6818      	ldr	r0, [r3, #0]
 8001632:	f7ff fb5f 	bl	8000cf4 <Debug_Print>
    }

    t1_frame = DWT_GET_CYCLES();
 8001636:	4b0e      	ldr	r3, [pc, #56]	@ (8001670 <SecureUart_ProcessReceived+0x480>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f8c7 3420 	str.w	r3, [r7, #1056]	@ 0x420
    g_benchmark.frame_parse_cycles = t1_frame - t0_frame;
 800163e:	f8d7 2420 	ldr.w	r2, [r7, #1056]	@ 0x420
 8001642:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	4a0c      	ldr	r2, [pc, #48]	@ (800167c <SecureUart_ProcessReceived+0x48c>)
 800164a:	6053      	str	r3, [r2, #4]

    Debug_Print(ctx, "Успешно принят пакет #%lu\r\n", (unsigned long)packet->sequence);
 800164c:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8001650:	f8d3 2410 	ldr.w	r2, [r3, #1040]	@ 0x410
 8001654:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001658:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 800165c:	490c      	ldr	r1, [pc, #48]	@ (8001690 <SecureUart_ProcessReceived+0x4a0>)
 800165e:	6818      	ldr	r0, [r3, #0]
 8001660:	f7ff fb48 	bl	8000cf4 <Debug_Print>

    return true;
 8001664:	2301      	movs	r3, #1
}
 8001666:	4618      	mov	r0, r3
 8001668:	f507 678b 	add.w	r7, r7, #1112	@ 0x458
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	e0001000 	.word	0xe0001000
 8001674:	20000020 	.word	0x20000020
 8001678:	20000a64 	.word	0x20000a64
 800167c:	20000a4c 	.word	0x20000a4c
 8001680:	08006b8c 	.word	0x08006b8c
 8001684:	08006bc8 	.word	0x08006bc8
 8001688:	08006bd0 	.word	0x08006bd0
 800168c:	08006bd4 	.word	0x08006bd4
 8001690:	08006c08 	.word	0x08006c08

08001694 <SecureUart_StartReceive>:

/**
 * @brief Начало приема данных (в режиме прерываний)
 */
void SecureUart_StartReceive(SecureUartContext* ctx) {
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
    if (!ctx->initialized) {
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f893 345c 	ldrb.w	r3, [r3, #1116]	@ 0x45c
 80016a2:	f083 0301 	eor.w	r3, r3, #1
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d110      	bne.n	80016ce <SecureUart_StartReceive+0x3a>
        return;
    }

    // Сбрасываем индекс приема
    ctx->rx_index = 0;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f8c3 2458 	str.w	r2, [r3, #1112]	@ 0x458

    // Начинаем прием первого байта
    HAL_UART_Receive_IT(ctx->huart_rx, &ctx->rx_buffer[ctx->rx_index], 1);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6858      	ldr	r0, [r3, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 80016be:	3338      	adds	r3, #56	@ 0x38
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	4413      	add	r3, r2
 80016c4:	2201      	movs	r2, #1
 80016c6:	4619      	mov	r1, r3
 80016c8:	f002 ffbf 	bl	800464a <HAL_UART_Receive_IT>
 80016cc:	e000      	b.n	80016d0 <SecureUart_StartReceive+0x3c>
        return;
 80016ce:	bf00      	nop
}
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <SecureUart_RxCpltCallback>:

/**
 * @brief Колбэк завершения приема по UART
 * Эта функция должна быть вызвана из обработчика прерывания HAL_UART_RxCpltCallback
 */
void SecureUart_RxCpltCallback(SecureUartContext* ctx, UART_HandleTypeDef* huart) {
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b086      	sub	sp, #24
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	6039      	str	r1, [r7, #0]
    if (!ctx->initialized || huart != ctx->huart_rx) {
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f893 345c 	ldrb.w	r3, [r3, #1116]	@ 0x45c
 80016e6:	f083 0301 	eor.w	r3, r3, #1
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f040 80ad 	bne.w	800184c <SecureUart_RxCpltCallback+0x176>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	f040 80a7 	bne.w	800184c <SecureUart_RxCpltCallback+0x176>
        return;
    }

    // Увеличиваем индекс приема
    ctx->rx_index++;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8001704:	1c5a      	adds	r2, r3, #1
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f8c3 2458 	str.w	r2, [r3, #1112]	@ 0x458

    // Проверяем, получили ли мы заголовок
    if (ctx->rx_index == SECURE_UART_HEADER_SIZE) {
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8001712:	2b08      	cmp	r3, #8
 8001714:	d163      	bne.n	80017de <SecureUart_RxCpltCallback+0x108>
        SecureUartHeader* header = (SecureUartHeader*)ctx->rx_buffer;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3338      	adds	r3, #56	@ 0x38
 800171a:	60fb      	str	r3, [r7, #12]

        // Проверяем магическое число
        if (header->magic != SECURE_UART_MAGIC) {
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	f24a 52c3 	movw	r2, #42435	@ 0xa5c3
 8001724:	4293      	cmp	r3, r2
 8001726:	d010      	beq.n	800174a <SecureUart_RxCpltCallback+0x74>
            // Неверное магическое число, сбрасываем прием
            ctx->rx_index = 0;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f8c3 2458 	str.w	r2, [r3, #1112]	@ 0x458
            HAL_UART_Receive_IT(ctx->huart_rx, &ctx->rx_buffer[ctx->rx_index], 1);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6858      	ldr	r0, [r3, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 800173a:	3338      	adds	r3, #56	@ 0x38
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	4413      	add	r3, r2
 8001740:	2201      	movs	r2, #1
 8001742:	4619      	mov	r1, r3
 8001744:	f002 ff81 	bl	800464a <HAL_UART_Receive_IT>
            return;
 8001748:	e081      	b.n	800184e <SecureUart_RxCpltCallback+0x178>
        }

        // Проверяем контрольную сумму заголовка
        if (!SecureUart_ValidateHeaderChecksum(header)) {
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	f7ff faa3 	bl	8000c96 <SecureUart_ValidateHeaderChecksum>
 8001750:	4603      	mov	r3, r0
 8001752:	f083 0301 	eor.w	r3, r3, #1
 8001756:	b2db      	uxtb	r3, r3
 8001758:	2b00      	cmp	r3, #0
 800175a:	d010      	beq.n	800177e <SecureUart_RxCpltCallback+0xa8>
            // Неверная контрольная сумма, сбрасываем прием
            ctx->rx_index = 0;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f8c3 2458 	str.w	r2, [r3, #1112]	@ 0x458
            HAL_UART_Receive_IT(ctx->huart_rx, &ctx->rx_buffer[ctx->rx_index], 1);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6858      	ldr	r0, [r3, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 800176e:	3338      	adds	r3, #56	@ 0x38
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	4413      	add	r3, r2
 8001774:	2201      	movs	r2, #1
 8001776:	4619      	mov	r1, r3
 8001778:	f002 ff67 	bl	800464a <HAL_UART_Receive_IT>
            return;
 800177c:	e067      	b.n	800184e <SecureUart_RxCpltCallback+0x178>
        }

        // Проверяем длину данных
        if (header->length > SECURE_UART_MAX_DATA_LEN) {
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	885b      	ldrh	r3, [r3, #2]
 8001782:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001786:	d910      	bls.n	80017aa <SecureUart_RxCpltCallback+0xd4>
            // Слишком большой размер, сбрасываем прием
            ctx->rx_index = 0;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f8c3 2458 	str.w	r2, [r3, #1112]	@ 0x458
            HAL_UART_Receive_IT(ctx->huart_rx, &ctx->rx_buffer[ctx->rx_index], 1);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6858      	ldr	r0, [r3, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 800179a:	3338      	adds	r3, #56	@ 0x38
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	4413      	add	r3, r2
 80017a0:	2201      	movs	r2, #1
 80017a2:	4619      	mov	r1, r3
 80017a4:	f002 ff51 	bl	800464a <HAL_UART_Receive_IT>
            return;
 80017a8:	e051      	b.n	800184e <SecureUart_RxCpltCallback+0x178>
        }

        // Вычисляем размер оставшихся данных
        uint16_t remaining_size = header->length + SECURE_UART_SEQ_SIZE + SECURE_UART_CRC_SIZE;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	885b      	ldrh	r3, [r3, #2]
 80017ae:	3308      	adds	r3, #8
 80017b0:	82fb      	strh	r3, [r7, #22]
        if (header->flags & SECURE_UART_FLAG_HAS_MAC) {
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	791b      	ldrb	r3, [r3, #4]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d002      	beq.n	80017c4 <SecureUart_RxCpltCallback+0xee>
            remaining_size += SECURE_UART_MAC_SIZE;
 80017be:	8afb      	ldrh	r3, [r7, #22]
 80017c0:	3308      	adds	r3, #8
 80017c2:	82fb      	strh	r3, [r7, #22]
        }

        // Принимаем оставшиеся данные
        HAL_UART_Receive_IT(ctx->huart_rx, &ctx->rx_buffer[ctx->rx_index], remaining_size);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6858      	ldr	r0, [r3, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 80017ce:	3338      	adds	r3, #56	@ 0x38
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	4413      	add	r3, r2
 80017d4:	8afa      	ldrh	r2, [r7, #22]
 80017d6:	4619      	mov	r1, r3
 80017d8:	f002 ff37 	bl	800464a <HAL_UART_Receive_IT>
 80017dc:	e037      	b.n	800184e <SecureUart_RxCpltCallback+0x178>
    } else {
        // Проверяем, получили ли мы полный пакет
        SecureUartHeader* header = (SecureUartHeader*)ctx->rx_buffer;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3338      	adds	r3, #56	@ 0x38
 80017e2:	613b      	str	r3, [r7, #16]
        uint16_t total_size = SECURE_UART_HEADER_SIZE + header->length + SECURE_UART_SEQ_SIZE + SECURE_UART_CRC_SIZE;
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	885b      	ldrh	r3, [r3, #2]
 80017e8:	3310      	adds	r3, #16
 80017ea:	82bb      	strh	r3, [r7, #20]
        if (header->flags & SECURE_UART_FLAG_HAS_MAC) {
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	791b      	ldrb	r3, [r3, #4]
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d002      	beq.n	80017fe <SecureUart_RxCpltCallback+0x128>
            total_size += SECURE_UART_MAC_SIZE;
 80017f8:	8abb      	ldrh	r3, [r7, #20]
 80017fa:	3308      	adds	r3, #8
 80017fc:	82bb      	strh	r3, [r7, #20]
        }

        if (ctx->rx_index >= total_size) {
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8001804:	8abb      	ldrh	r3, [r7, #20]
 8001806:	429a      	cmp	r2, r3
 8001808:	d313      	bcc.n	8001832 <SecureUart_RxCpltCallback+0x15c>
            // Полный пакет получен, обрабатываем его
            SecureUart_ProcessReceived(ctx);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff fcf0 	bl	80011f0 <SecureUart_ProcessReceived>

            // Начинаем новый прием
            ctx->rx_index = 0;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f8c3 2458 	str.w	r2, [r3, #1112]	@ 0x458
            HAL_UART_Receive_IT(ctx->huart_rx, &ctx->rx_buffer[ctx->rx_index], 1);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6858      	ldr	r0, [r3, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8001822:	3338      	adds	r3, #56	@ 0x38
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	4413      	add	r3, r2
 8001828:	2201      	movs	r2, #1
 800182a:	4619      	mov	r1, r3
 800182c:	f002 ff0d 	bl	800464a <HAL_UART_Receive_IT>
 8001830:	e00d      	b.n	800184e <SecureUart_RxCpltCallback+0x178>
        } else {
            // Продолжаем прием по одному байту
            HAL_UART_Receive_IT(ctx->huart_rx, &ctx->rx_buffer[ctx->rx_index], 1);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6858      	ldr	r0, [r3, #4]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 800183c:	3338      	adds	r3, #56	@ 0x38
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	2201      	movs	r2, #1
 8001844:	4619      	mov	r1, r3
 8001846:	f002 ff00 	bl	800464a <HAL_UART_Receive_IT>
 800184a:	e000      	b.n	800184e <SecureUart_RxCpltCallback+0x178>
        return;
 800184c:	bf00      	nop
        }
    }
}
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <SecureUart_PrintBenchmark>:

/**
 * @brief Вывод результатов бенчмаркинга
 */
void SecureUart_PrintBenchmark(SecureUartContext* ctx, SecureUartBenchmark* benchmark) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
    if (!ctx->initialized || benchmark == NULL) {
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 345c 	ldrb.w	r3, [r3, #1116]	@ 0x45c
 8001864:	f083 0301 	eor.w	r3, r3, #1
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d12e      	bne.n	80018cc <SecureUart_PrintBenchmark+0x78>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d02b      	beq.n	80018cc <SecureUart_PrintBenchmark+0x78>
        return;
    }

    Debug_Print(ctx, "\r\n----- Результаты бенчмаркинга -----\r\n");
 8001874:	4917      	ldr	r1, [pc, #92]	@ (80018d4 <SecureUart_PrintBenchmark+0x80>)
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff fa3c 	bl	8000cf4 <Debug_Print>
    Debug_Print(ctx, "Сборка фрейма: %lu тактов\r\n", (unsigned long)benchmark->frame_build_cycles);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4915      	ldr	r1, [pc, #84]	@ (80018d8 <SecureUart_PrintBenchmark+0x84>)
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff fa35 	bl	8000cf4 <Debug_Print>
    Debug_Print(ctx, "Разбор фрейма: %lu тактов\r\n", (unsigned long)benchmark->frame_parse_cycles);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	461a      	mov	r2, r3
 8001890:	4912      	ldr	r1, [pc, #72]	@ (80018dc <SecureUart_PrintBenchmark+0x88>)
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff fa2e 	bl	8000cf4 <Debug_Print>
    Debug_Print(ctx, "Шифрование: %lu тактов\r\n", (unsigned long)benchmark->encryption_cycles);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	461a      	mov	r2, r3
 800189e:	4910      	ldr	r1, [pc, #64]	@ (80018e0 <SecureUart_PrintBenchmark+0x8c>)
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff fa27 	bl	8000cf4 <Debug_Print>
    Debug_Print(ctx, "MAC: %lu тактов\r\n", (unsigned long)benchmark->mac_cycles);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	461a      	mov	r2, r3
 80018ac:	490d      	ldr	r1, [pc, #52]	@ (80018e4 <SecureUart_PrintBenchmark+0x90>)
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff fa20 	bl	8000cf4 <Debug_Print>
    Debug_Print(ctx, "CRC: %lu тактов\r\n", (unsigned long)benchmark->crc_cycles);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	461a      	mov	r2, r3
 80018ba:	490b      	ldr	r1, [pc, #44]	@ (80018e8 <SecureUart_PrintBenchmark+0x94>)
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff fa19 	bl	8000cf4 <Debug_Print>
    Debug_Print(ctx, "--------------------------------\r\n\r\n");
 80018c2:	490a      	ldr	r1, [pc, #40]	@ (80018ec <SecureUart_PrintBenchmark+0x98>)
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff fa15 	bl	8000cf4 <Debug_Print>
 80018ca:	e000      	b.n	80018ce <SecureUart_PrintBenchmark+0x7a>
        return;
 80018cc:	bf00      	nop
}
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	08006c38 	.word	0x08006c38
 80018d8:	08006c78 	.word	0x08006c78
 80018dc:	08006ca8 	.word	0x08006ca8
 80018e0:	08006cd8 	.word	0x08006cd8
 80018e4:	08006d04 	.word	0x08006d04
 80018e8:	08006d1c 	.word	0x08006d1c
 80018ec:	08006d34 	.word	0x08006d34

080018f0 <SecureUart_ResetBenchmark>:

/**
 * @brief Сброс результатов бенчмаркинга
 */
void SecureUart_ResetBenchmark(SecureUartBenchmark* benchmark) {
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
    if (benchmark == NULL) {
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00f      	beq.n	800191e <SecureUart_ResetBenchmark+0x2e>
        return;
    }

    benchmark->frame_build_cycles = 0;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
    benchmark->frame_parse_cycles = 0;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	605a      	str	r2, [r3, #4]
    benchmark->encryption_cycles = 0;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
    benchmark->mac_cycles = 0;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	60da      	str	r2, [r3, #12]
    benchmark->crc_cycles = 0;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	611a      	str	r2, [r3, #16]
 800191c:	e000      	b.n	8001920 <SecureUart_ResetBenchmark+0x30>
        return;
 800191e:	bf00      	nop
}
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	0000      	movs	r0, r0
 800192c:	0000      	movs	r0, r0
	...

08001930 <SipHash_2_4>:
        v2 += v3; v3 = ROTL64(v3, 16); v3 ^= v2; \
        v0 += v3; v3 = ROTL64(v3, 21); v3 ^= v0; \
        v2 += v1; v1 = ROTL64(v1, 17); v1 ^= v2; v2 = ROTL64(v2, 32); \
    } while (0)

uint64_t SipHash_2_4(const uint8_t* key, const uint8_t* data, size_t len) {
 8001930:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001934:	f2ad 4d04 	subw	sp, sp, #1028	@ 0x404
 8001938:	af00      	add	r7, sp, #0
 800193a:	f8c7 03a4 	str.w	r0, [r7, #932]	@ 0x3a4
 800193e:	f8c7 13a0 	str.w	r1, [r7, #928]	@ 0x3a0
 8001942:	f8c7 239c 	str.w	r2, [r7, #924]	@ 0x39c
    /* "константа" инициализации */
    const uint64_t k0 = U8TO64_LE(key);
 8001946:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2200      	movs	r2, #0
 8001950:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
 8001954:	f8c7 2394 	str.w	r2, [r7, #916]	@ 0x394
 8001958:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 800195c:	3301      	adds	r3, #1
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2200      	movs	r2, #0
 8001964:	461c      	mov	r4, r3
 8001966:	4615      	mov	r5, r2
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	f04f 0300 	mov.w	r3, #0
 8001970:	022b      	lsls	r3, r5, #8
 8001972:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8001976:	0222      	lsls	r2, r4, #8
 8001978:	e9d7 45e4 	ldrd	r4, r5, [r7, #912]	@ 0x390
 800197c:	4621      	mov	r1, r4
 800197e:	4311      	orrs	r1, r2
 8001980:	f8c7 1388 	str.w	r1, [r7, #904]	@ 0x388
 8001984:	4629      	mov	r1, r5
 8001986:	4319      	orrs	r1, r3
 8001988:	f8c7 138c 	str.w	r1, [r7, #908]	@ 0x38c
 800198c:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8001990:	3302      	adds	r3, #2
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2200      	movs	r2, #0
 8001998:	4698      	mov	r8, r3
 800199a:	4691      	mov	r9, r2
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	f04f 0300 	mov.w	r3, #0
 80019a4:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80019a8:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80019ac:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80019b0:	e9d7 45e2 	ldrd	r4, r5, [r7, #904]	@ 0x388
 80019b4:	4621      	mov	r1, r4
 80019b6:	4311      	orrs	r1, r2
 80019b8:	f8c7 1380 	str.w	r1, [r7, #896]	@ 0x380
 80019bc:	4629      	mov	r1, r5
 80019be:	4319      	orrs	r1, r3
 80019c0:	f8c7 1384 	str.w	r1, [r7, #900]	@ 0x384
 80019c4:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 80019c8:	3303      	adds	r3, #3
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2200      	movs	r2, #0
 80019d0:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
 80019d4:	f8c7 237c 	str.w	r2, [r7, #892]	@ 0x37c
 80019d8:	e9d7 12de 	ldrd	r1, r2, [r7, #888]	@ 0x378
 80019dc:	460b      	mov	r3, r1
 80019de:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 80019e2:	460b      	mov	r3, r1
 80019e4:	ea4f 6a03 	mov.w	sl, r3, lsl #24
 80019e8:	e9d7 12e0 	ldrd	r1, r2, [r7, #896]	@ 0x380
 80019ec:	460b      	mov	r3, r1
 80019ee:	ea43 030a 	orr.w	r3, r3, sl
 80019f2:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370
 80019f6:	4613      	mov	r3, r2
 80019f8:	ea43 030b 	orr.w	r3, r3, fp
 80019fc:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 8001a00:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8001a04:	3304      	adds	r3, #4
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
 8001a10:	f8c7 236c 	str.w	r2, [r7, #876]	@ 0x36c
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	f04f 0300 	mov.w	r3, #0
 8001a1c:	f8d7 1368 	ldr.w	r1, [r7, #872]	@ 0x368
 8001a20:	000b      	movs	r3, r1
 8001a22:	2200      	movs	r2, #0
 8001a24:	e9d7 45dc 	ldrd	r4, r5, [r7, #880]	@ 0x370
 8001a28:	4621      	mov	r1, r4
 8001a2a:	4311      	orrs	r1, r2
 8001a2c:	f8c7 1360 	str.w	r1, [r7, #864]	@ 0x360
 8001a30:	4629      	mov	r1, r5
 8001a32:	4319      	orrs	r1, r3
 8001a34:	f8c7 1364 	str.w	r1, [r7, #868]	@ 0x364
 8001a38:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8001a3c:	3305      	adds	r3, #5
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2200      	movs	r2, #0
 8001a44:	f8c7 3358 	str.w	r3, [r7, #856]	@ 0x358
 8001a48:	f8c7 235c 	str.w	r2, [r7, #860]	@ 0x35c
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	f04f 0300 	mov.w	r3, #0
 8001a54:	f8d7 1358 	ldr.w	r1, [r7, #856]	@ 0x358
 8001a58:	020b      	lsls	r3, r1, #8
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	e9d7 45d8 	ldrd	r4, r5, [r7, #864]	@ 0x360
 8001a60:	4621      	mov	r1, r4
 8001a62:	4311      	orrs	r1, r2
 8001a64:	f8c7 1350 	str.w	r1, [r7, #848]	@ 0x350
 8001a68:	4629      	mov	r1, r5
 8001a6a:	4319      	orrs	r1, r3
 8001a6c:	f8c7 1354 	str.w	r1, [r7, #852]	@ 0x354
 8001a70:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8001a74:	3306      	adds	r3, #6
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
 8001a80:	f8c7 234c 	str.w	r2, [r7, #844]	@ 0x34c
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	f04f 0300 	mov.w	r3, #0
 8001a8c:	f8d7 1348 	ldr.w	r1, [r7, #840]	@ 0x348
 8001a90:	040b      	lsls	r3, r1, #16
 8001a92:	2200      	movs	r2, #0
 8001a94:	e9d7 45d4 	ldrd	r4, r5, [r7, #848]	@ 0x350
 8001a98:	4621      	mov	r1, r4
 8001a9a:	4311      	orrs	r1, r2
 8001a9c:	f8c7 1340 	str.w	r1, [r7, #832]	@ 0x340
 8001aa0:	4629      	mov	r1, r5
 8001aa2:	4319      	orrs	r1, r3
 8001aa4:	f8c7 1344 	str.w	r1, [r7, #836]	@ 0x344
 8001aa8:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8001aac:	3307      	adds	r3, #7
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8001ab8:	f8c7 233c 	str.w	r2, [r7, #828]	@ 0x33c
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	f8d7 1338 	ldr.w	r1, [r7, #824]	@ 0x338
 8001ac8:	060b      	lsls	r3, r1, #24
 8001aca:	2200      	movs	r2, #0
 8001acc:	e9d7 45d0 	ldrd	r4, r5, [r7, #832]	@ 0x340
 8001ad0:	4621      	mov	r1, r4
 8001ad2:	4311      	orrs	r1, r2
 8001ad4:	f8c7 11e0 	str.w	r1, [r7, #480]	@ 0x1e0
 8001ad8:	4629      	mov	r1, r5
 8001ada:	4319      	orrs	r1, r3
 8001adc:	f8c7 11e4 	str.w	r1, [r7, #484]	@ 0x1e4
 8001ae0:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	@ 0x1e0
 8001ae4:	e9c7 34f0 	strd	r3, r4, [r7, #960]	@ 0x3c0
    const uint64_t k1 = U8TO64_LE(key + 8);
 8001ae8:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8001aec:	3308      	adds	r3, #8
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2200      	movs	r2, #0
 8001af4:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 8001af8:	f8c7 2334 	str.w	r2, [r7, #820]	@ 0x334
 8001afc:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8001b00:	3309      	adds	r3, #9
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2200      	movs	r2, #0
 8001b08:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 8001b0c:	f8c7 232c 	str.w	r2, [r7, #812]	@ 0x32c
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	e9d7 45ca 	ldrd	r4, r5, [r7, #808]	@ 0x328
 8001b1c:	4629      	mov	r1, r5
 8001b1e:	020b      	lsls	r3, r1, #8
 8001b20:	4621      	mov	r1, r4
 8001b22:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8001b26:	4621      	mov	r1, r4
 8001b28:	020a      	lsls	r2, r1, #8
 8001b2a:	e9d7 45cc 	ldrd	r4, r5, [r7, #816]	@ 0x330
 8001b2e:	4621      	mov	r1, r4
 8001b30:	4311      	orrs	r1, r2
 8001b32:	f8c7 1320 	str.w	r1, [r7, #800]	@ 0x320
 8001b36:	4629      	mov	r1, r5
 8001b38:	4319      	orrs	r1, r3
 8001b3a:	f8c7 1324 	str.w	r1, [r7, #804]	@ 0x324
 8001b3e:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8001b42:	330a      	adds	r3, #10
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
 8001b4e:	f8c7 231c 	str.w	r2, [r7, #796]	@ 0x31c
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	e9d7 45c6 	ldrd	r4, r5, [r7, #792]	@ 0x318
 8001b5e:	4629      	mov	r1, r5
 8001b60:	040b      	lsls	r3, r1, #16
 8001b62:	4621      	mov	r1, r4
 8001b64:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8001b68:	4621      	mov	r1, r4
 8001b6a:	040a      	lsls	r2, r1, #16
 8001b6c:	e9d7 45c8 	ldrd	r4, r5, [r7, #800]	@ 0x320
 8001b70:	4621      	mov	r1, r4
 8001b72:	4311      	orrs	r1, r2
 8001b74:	f8c7 1310 	str.w	r1, [r7, #784]	@ 0x310
 8001b78:	4629      	mov	r1, r5
 8001b7a:	4319      	orrs	r1, r3
 8001b7c:	f8c7 1314 	str.w	r1, [r7, #788]	@ 0x314
 8001b80:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8001b84:	330b      	adds	r3, #11
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
 8001b90:	f8c7 230c 	str.w	r2, [r7, #780]	@ 0x30c
 8001b94:	e9d7 12c2 	ldrd	r1, r2, [r7, #776]	@ 0x308
 8001b98:	460b      	mov	r3, r1
 8001b9a:	0a1b      	lsrs	r3, r3, #8
 8001b9c:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	061b      	lsls	r3, r3, #24
 8001ba4:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
 8001ba8:	e9d7 45c4 	ldrd	r4, r5, [r7, #784]	@ 0x310
 8001bac:	4623      	mov	r3, r4
 8001bae:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	@ 0x300
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
 8001bba:	462b      	mov	r3, r5
 8001bbc:	460a      	mov	r2, r1
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 8001bc4:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8001bc8:	330c      	adds	r3, #12
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 8001bd4:	f8c7 22f4 	str.w	r2, [r7, #756]	@ 0x2f4
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	f04f 0300 	mov.w	r3, #0
 8001be0:	f8d7 12f0 	ldr.w	r1, [r7, #752]	@ 0x2f0
 8001be4:	000b      	movs	r3, r1
 8001be6:	2200      	movs	r2, #0
 8001be8:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	@ 0x2f8
 8001bec:	4621      	mov	r1, r4
 8001bee:	4311      	orrs	r1, r2
 8001bf0:	f8c7 12e8 	str.w	r1, [r7, #744]	@ 0x2e8
 8001bf4:	4629      	mov	r1, r5
 8001bf6:	4319      	orrs	r1, r3
 8001bf8:	f8c7 12ec 	str.w	r1, [r7, #748]	@ 0x2ec
 8001bfc:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8001c00:	330d      	adds	r3, #13
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2200      	movs	r2, #0
 8001c08:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 8001c0c:	f8c7 22e4 	str.w	r2, [r7, #740]	@ 0x2e4
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	f04f 0300 	mov.w	r3, #0
 8001c18:	f8d7 12e0 	ldr.w	r1, [r7, #736]	@ 0x2e0
 8001c1c:	020b      	lsls	r3, r1, #8
 8001c1e:	2200      	movs	r2, #0
 8001c20:	e9d7 45ba 	ldrd	r4, r5, [r7, #744]	@ 0x2e8
 8001c24:	4621      	mov	r1, r4
 8001c26:	4311      	orrs	r1, r2
 8001c28:	f8c7 12d8 	str.w	r1, [r7, #728]	@ 0x2d8
 8001c2c:	4629      	mov	r1, r5
 8001c2e:	4319      	orrs	r1, r3
 8001c30:	f8c7 12dc 	str.w	r1, [r7, #732]	@ 0x2dc
 8001c34:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8001c38:	330e      	adds	r3, #14
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 8001c44:	f8c7 22d4 	str.w	r2, [r7, #724]	@ 0x2d4
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	f04f 0300 	mov.w	r3, #0
 8001c50:	f8d7 12d0 	ldr.w	r1, [r7, #720]	@ 0x2d0
 8001c54:	040b      	lsls	r3, r1, #16
 8001c56:	2200      	movs	r2, #0
 8001c58:	e9d7 45b6 	ldrd	r4, r5, [r7, #728]	@ 0x2d8
 8001c5c:	4621      	mov	r1, r4
 8001c5e:	4311      	orrs	r1, r2
 8001c60:	f8c7 12c8 	str.w	r1, [r7, #712]	@ 0x2c8
 8001c64:	4629      	mov	r1, r5
 8001c66:	4319      	orrs	r1, r3
 8001c68:	f8c7 12cc 	str.w	r1, [r7, #716]	@ 0x2cc
 8001c6c:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8001c70:	330f      	adds	r3, #15
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2200      	movs	r2, #0
 8001c78:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
 8001c7c:	f8c7 22c4 	str.w	r2, [r7, #708]	@ 0x2c4
 8001c80:	f04f 0200 	mov.w	r2, #0
 8001c84:	f04f 0300 	mov.w	r3, #0
 8001c88:	f8d7 12c0 	ldr.w	r1, [r7, #704]	@ 0x2c0
 8001c8c:	060b      	lsls	r3, r1, #24
 8001c8e:	2200      	movs	r2, #0
 8001c90:	e9d7 45b2 	ldrd	r4, r5, [r7, #712]	@ 0x2c8
 8001c94:	4621      	mov	r1, r4
 8001c96:	4311      	orrs	r1, r2
 8001c98:	f8c7 11d8 	str.w	r1, [r7, #472]	@ 0x1d8
 8001c9c:	4629      	mov	r1, r5
 8001c9e:	4319      	orrs	r1, r3
 8001ca0:	f8c7 11dc 	str.w	r1, [r7, #476]	@ 0x1dc
 8001ca4:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	@ 0x1d8
 8001ca8:	e9c7 34ee 	strd	r3, r4, [r7, #952]	@ 0x3b8

    /* Инициализация состояния */
    uint64_t v0 = 0x736f6d6570736575ULL;
 8001cac:	f60f 3328 	addw	r3, pc, #2856	@ 0xb28
 8001cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb4:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	@ 0x3f8
    uint64_t v1 = 0x646f72616e646f6dULL;
 8001cb8:	f60f 3324 	addw	r3, pc, #2852	@ 0xb24
 8001cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc0:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	@ 0x3f0
    uint64_t v2 = 0x6c7967656e657261ULL;
 8001cc4:	f60f 3320 	addw	r3, pc, #2848	@ 0xb20
 8001cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ccc:	e9c7 23fa 	strd	r2, r3, [r7, #1000]	@ 0x3e8
    uint64_t v3 = 0x7465646279746573ULL;
 8001cd0:	f60f 331c 	addw	r3, pc, #2844	@ 0xb1c
 8001cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd8:	e9c7 23f8 	strd	r2, r3, [r7, #992]	@ 0x3e0

    /* Смешивание ключа с начальным состоянием */
    v0 ^= k0;
 8001cdc:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	@ 0x3f8
 8001ce0:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	@ 0x3c0
 8001ce4:	ea80 0402 	eor.w	r4, r0, r2
 8001ce8:	f8c7 41d0 	str.w	r4, [r7, #464]	@ 0x1d0
 8001cec:	404b      	eors	r3, r1
 8001cee:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8001cf2:	e9d7 3474 	ldrd	r3, r4, [r7, #464]	@ 0x1d0
 8001cf6:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	@ 0x3f8
    v1 ^= k1;
 8001cfa:	e9d7 01fc 	ldrd	r0, r1, [r7, #1008]	@ 0x3f0
 8001cfe:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	@ 0x3b8
 8001d02:	ea80 0402 	eor.w	r4, r0, r2
 8001d06:	f8c7 41c8 	str.w	r4, [r7, #456]	@ 0x1c8
 8001d0a:	404b      	eors	r3, r1
 8001d0c:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8001d10:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	@ 0x1c8
 8001d14:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
    v2 ^= k0;
 8001d18:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	@ 0x3e8
 8001d1c:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	@ 0x3c0
 8001d20:	ea80 0402 	eor.w	r4, r0, r2
 8001d24:	f8c7 41c0 	str.w	r4, [r7, #448]	@ 0x1c0
 8001d28:	404b      	eors	r3, r1
 8001d2a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001d2e:	e9d7 3470 	ldrd	r3, r4, [r7, #448]	@ 0x1c0
 8001d32:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	@ 0x3e8
    v3 ^= k1;
 8001d36:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	@ 0x3e0
 8001d3a:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	@ 0x3b8
 8001d3e:	ea80 0402 	eor.w	r4, r0, r2
 8001d42:	f8c7 41b8 	str.w	r4, [r7, #440]	@ 0x1b8
 8001d46:	404b      	eors	r3, r1
 8001d48:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001d4c:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	@ 0x1b8
 8001d50:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0

    /* Обработка сообщения по блокам */
    const uint8_t* end = data + len - (len % 8);
 8001d54:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8001d58:	f023 0207 	bic.w	r2, r3, #7
 8001d5c:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001d60:	4413      	add	r3, r2
 8001d62:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
    const int left = len & 7;
 8001d66:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
    uint64_t b = ((uint64_t)len) << 56;
 8001d72:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8001d76:	2200      	movs	r2, #0
 8001d78:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 8001d7c:	f8c7 22bc 	str.w	r2, [r7, #700]	@ 0x2bc
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	f04f 0300 	mov.w	r3, #0
 8001d88:	f8d7 12b8 	ldr.w	r1, [r7, #696]	@ 0x2b8
 8001d8c:	060b      	lsls	r3, r1, #24
 8001d8e:	2200      	movs	r2, #0
 8001d90:	e9c7 23f6 	strd	r2, r3, [r7, #984]	@ 0x3d8

    for (; data < end; data += 8) {
 8001d94:	e1f9      	b.n	800218a <SipHash_2_4+0x85a>
        uint64_t m = U8TO64_LE(data);
 8001d96:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 8001da4:	f8c7 22b4 	str.w	r2, [r7, #692]	@ 0x2b4
 8001da8:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001dac:	3301      	adds	r3, #1
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2200      	movs	r2, #0
 8001db4:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 8001db8:	f8c7 22ac 	str.w	r2, [r7, #684]	@ 0x2ac
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	f04f 0300 	mov.w	r3, #0
 8001dc4:	e9d7 45aa 	ldrd	r4, r5, [r7, #680]	@ 0x2a8
 8001dc8:	4629      	mov	r1, r5
 8001dca:	020b      	lsls	r3, r1, #8
 8001dcc:	4621      	mov	r1, r4
 8001dce:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8001dd2:	4621      	mov	r1, r4
 8001dd4:	020a      	lsls	r2, r1, #8
 8001dd6:	e9d7 45ac 	ldrd	r4, r5, [r7, #688]	@ 0x2b0
 8001dda:	4621      	mov	r1, r4
 8001ddc:	4311      	orrs	r1, r2
 8001dde:	f8c7 12a0 	str.w	r1, [r7, #672]	@ 0x2a0
 8001de2:	4629      	mov	r1, r5
 8001de4:	430b      	orrs	r3, r1
 8001de6:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 8001dea:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001dee:	3302      	adds	r3, #2
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2200      	movs	r2, #0
 8001df6:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 8001dfa:	f8c7 229c 	str.w	r2, [r7, #668]	@ 0x29c
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	e9d7 45a6 	ldrd	r4, r5, [r7, #664]	@ 0x298
 8001e0a:	4629      	mov	r1, r5
 8001e0c:	040b      	lsls	r3, r1, #16
 8001e0e:	4621      	mov	r1, r4
 8001e10:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8001e14:	4621      	mov	r1, r4
 8001e16:	040a      	lsls	r2, r1, #16
 8001e18:	e9d7 45a8 	ldrd	r4, r5, [r7, #672]	@ 0x2a0
 8001e1c:	4621      	mov	r1, r4
 8001e1e:	4311      	orrs	r1, r2
 8001e20:	f8c7 1290 	str.w	r1, [r7, #656]	@ 0x290
 8001e24:	4629      	mov	r1, r5
 8001e26:	430b      	orrs	r3, r1
 8001e28:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 8001e2c:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001e30:	3303      	adds	r3, #3
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2200      	movs	r2, #0
 8001e38:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 8001e3c:	f8c7 228c 	str.w	r2, [r7, #652]	@ 0x28c
 8001e40:	e9d7 12a2 	ldrd	r1, r2, [r7, #648]	@ 0x288
 8001e44:	460b      	mov	r3, r1
 8001e46:	0a1b      	lsrs	r3, r3, #8
 8001e48:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	061b      	lsls	r3, r3, #24
 8001e50:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
 8001e54:	e9d7 45a4 	ldrd	r4, r5, [r7, #656]	@ 0x290
 8001e58:	4623      	mov	r3, r4
 8001e5a:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 8001e5e:	4602      	mov	r2, r0
 8001e60:	4313      	orrs	r3, r2
 8001e62:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
 8001e66:	462b      	mov	r3, r5
 8001e68:	460a      	mov	r2, r1
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8001e70:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001e74:	3304      	adds	r3, #4
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 8001e80:	f8c7 2274 	str.w	r2, [r7, #628]	@ 0x274
 8001e84:	f04f 0200 	mov.w	r2, #0
 8001e88:	f04f 0300 	mov.w	r3, #0
 8001e8c:	f8d7 1270 	ldr.w	r1, [r7, #624]	@ 0x270
 8001e90:	000b      	movs	r3, r1
 8001e92:	2200      	movs	r2, #0
 8001e94:	e9d7 459e 	ldrd	r4, r5, [r7, #632]	@ 0x278
 8001e98:	4621      	mov	r1, r4
 8001e9a:	4311      	orrs	r1, r2
 8001e9c:	f8c7 1268 	str.w	r1, [r7, #616]	@ 0x268
 8001ea0:	4629      	mov	r1, r5
 8001ea2:	430b      	orrs	r3, r1
 8001ea4:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 8001ea8:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001eac:	3305      	adds	r3, #5
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
 8001eb8:	f8c7 2264 	str.w	r2, [r7, #612]	@ 0x264
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	f04f 0300 	mov.w	r3, #0
 8001ec4:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 8001ec8:	020b      	lsls	r3, r1, #8
 8001eca:	2200      	movs	r2, #0
 8001ecc:	e9d7 459a 	ldrd	r4, r5, [r7, #616]	@ 0x268
 8001ed0:	4621      	mov	r1, r4
 8001ed2:	4311      	orrs	r1, r2
 8001ed4:	f8c7 1258 	str.w	r1, [r7, #600]	@ 0x258
 8001ed8:	4629      	mov	r1, r5
 8001eda:	430b      	orrs	r3, r1
 8001edc:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 8001ee0:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001ee4:	3306      	adds	r3, #6
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2200      	movs	r2, #0
 8001eec:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 8001ef0:	f8c7 2254 	str.w	r2, [r7, #596]	@ 0x254
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	f04f 0300 	mov.w	r3, #0
 8001efc:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 8001f00:	040b      	lsls	r3, r1, #16
 8001f02:	2200      	movs	r2, #0
 8001f04:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	@ 0x258
 8001f08:	4621      	mov	r1, r4
 8001f0a:	4311      	orrs	r1, r2
 8001f0c:	f8c7 1248 	str.w	r1, [r7, #584]	@ 0x248
 8001f10:	4629      	mov	r1, r5
 8001f12:	430b      	orrs	r3, r1
 8001f14:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 8001f18:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001f1c:	3307      	adds	r3, #7
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2200      	movs	r2, #0
 8001f24:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 8001f28:	f8c7 2244 	str.w	r2, [r7, #580]	@ 0x244
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	f04f 0300 	mov.w	r3, #0
 8001f34:	f8d7 1240 	ldr.w	r1, [r7, #576]	@ 0x240
 8001f38:	060b      	lsls	r3, r1, #24
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	e9d7 4592 	ldrd	r4, r5, [r7, #584]	@ 0x248
 8001f40:	4621      	mov	r1, r4
 8001f42:	4311      	orrs	r1, r2
 8001f44:	f8c7 11b0 	str.w	r1, [r7, #432]	@ 0x1b0
 8001f48:	4629      	mov	r1, r5
 8001f4a:	430b      	orrs	r3, r1
 8001f4c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8001f50:	e9d7 346c 	ldrd	r3, r4, [r7, #432]	@ 0x1b0
 8001f54:	e9c7 34ea 	strd	r3, r4, [r7, #936]	@ 0x3a8
        v3 ^= m;
 8001f58:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	@ 0x3e0
 8001f5c:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	@ 0x3a8
 8001f60:	ea80 0402 	eor.w	r4, r0, r2
 8001f64:	f8c7 41a8 	str.w	r4, [r7, #424]	@ 0x1a8
 8001f68:	404b      	eors	r3, r1
 8001f6a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8001f6e:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	@ 0x1a8
 8001f72:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0

        /* Сжимающие раунды */
        for (int i = 0; i < SIPHASH_CROUND; i++) {
 8001f76:	2300      	movs	r3, #0
 8001f78:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
 8001f7c:	e0ec      	b.n	8002158 <SipHash_2_4+0x828>
            SIPROUND;
 8001f7e:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	@ 0x3f8
 8001f82:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	@ 0x3f0
 8001f86:	1884      	adds	r4, r0, r2
 8001f88:	f8c7 41a0 	str.w	r4, [r7, #416]	@ 0x1a0
 8001f8c:	eb41 0303 	adc.w	r3, r1, r3
 8001f90:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001f94:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	@ 0x1a0
 8001f98:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	@ 0x3f8
 8001f9c:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8001fa0:	0cda      	lsrs	r2, r3, #19
 8001fa2:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8001fa6:	035b      	lsls	r3, r3, #13
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001fae:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8001fb2:	0cda      	lsrs	r2, r3, #19
 8001fb4:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8001fb8:	035b      	lsls	r3, r3, #13
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8001fc0:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	@ 0x198
 8001fc4:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
 8001fc8:	e9d7 01fc 	ldrd	r0, r1, [r7, #1008]	@ 0x3f0
 8001fcc:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	@ 0x3f8
 8001fd0:	ea80 0402 	eor.w	r4, r0, r2
 8001fd4:	f8c7 4190 	str.w	r4, [r7, #400]	@ 0x190
 8001fd8:	404b      	eors	r3, r1
 8001fda:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8001fde:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	@ 0x190
 8001fe2:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
 8001fe6:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	@ 0x3fc
 8001fea:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001fee:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8001ff2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8001ff6:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	@ 0x188
 8001ffa:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	@ 0x3f8
 8001ffe:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	@ 0x3e8
 8002002:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	@ 0x3e0
 8002006:	1884      	adds	r4, r0, r2
 8002008:	f8c7 4180 	str.w	r4, [r7, #384]	@ 0x180
 800200c:	eb41 0303 	adc.w	r3, r1, r3
 8002010:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002014:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	@ 0x180
 8002018:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	@ 0x3e8
 800201c:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8002020:	0c1a      	lsrs	r2, r3, #16
 8002022:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8002026:	041b      	lsls	r3, r3, #16
 8002028:	4313      	orrs	r3, r2
 800202a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800202e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8002032:	0c1a      	lsrs	r2, r3, #16
 8002034:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8002038:	041b      	lsls	r3, r3, #16
 800203a:	4313      	orrs	r3, r2
 800203c:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8002040:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 8002044:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0
 8002048:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	@ 0x3e0
 800204c:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	@ 0x3e8
 8002050:	ea80 0402 	eor.w	r4, r0, r2
 8002054:	f8c7 4170 	str.w	r4, [r7, #368]	@ 0x170
 8002058:	404b      	eors	r3, r1
 800205a:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 800205e:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	@ 0x170
 8002062:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0
 8002066:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	@ 0x3f8
 800206a:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	@ 0x3e0
 800206e:	1884      	adds	r4, r0, r2
 8002070:	f8c7 4168 	str.w	r4, [r7, #360]	@ 0x168
 8002074:	eb41 0303 	adc.w	r3, r1, r3
 8002078:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 800207c:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	@ 0x168
 8002080:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	@ 0x3f8
 8002084:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8002088:	0ada      	lsrs	r2, r3, #11
 800208a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800208e:	055b      	lsls	r3, r3, #21
 8002090:	4313      	orrs	r3, r2
 8002092:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8002096:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800209a:	0ada      	lsrs	r2, r3, #11
 800209c:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 80020a0:	055b      	lsls	r3, r3, #21
 80020a2:	4313      	orrs	r3, r2
 80020a4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 80020a8:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	@ 0x160
 80020ac:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0
 80020b0:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	@ 0x3e0
 80020b4:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	@ 0x3f8
 80020b8:	ea80 0402 	eor.w	r4, r0, r2
 80020bc:	f8c7 4158 	str.w	r4, [r7, #344]	@ 0x158
 80020c0:	404b      	eors	r3, r1
 80020c2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80020c6:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	@ 0x158
 80020ca:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0
 80020ce:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	@ 0x3e8
 80020d2:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	@ 0x3f0
 80020d6:	1884      	adds	r4, r0, r2
 80020d8:	f8c7 4150 	str.w	r4, [r7, #336]	@ 0x150
 80020dc:	eb41 0303 	adc.w	r3, r1, r3
 80020e0:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80020e4:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 80020e8:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	@ 0x3e8
 80020ec:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 80020f0:	0bda      	lsrs	r2, r3, #15
 80020f2:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 80020f6:	045b      	lsls	r3, r3, #17
 80020f8:	4313      	orrs	r3, r2
 80020fa:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80020fe:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8002102:	0bda      	lsrs	r2, r3, #15
 8002104:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8002108:	045b      	lsls	r3, r3, #17
 800210a:	4313      	orrs	r3, r2
 800210c:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8002110:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	@ 0x148
 8002114:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
 8002118:	e9d7 01fc 	ldrd	r0, r1, [r7, #1008]	@ 0x3f0
 800211c:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	@ 0x3e8
 8002120:	ea80 0402 	eor.w	r4, r0, r2
 8002124:	f8c7 4140 	str.w	r4, [r7, #320]	@ 0x140
 8002128:	404b      	eors	r3, r1
 800212a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800212e:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 8002132:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
 8002136:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 800213a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800213e:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	@ 0x3e8
 8002142:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002146:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	@ 0x138
 800214a:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	@ 0x3e8
        for (int i = 0; i < SIPHASH_CROUND; i++) {
 800214e:	f8d7 33d4 	ldr.w	r3, [r7, #980]	@ 0x3d4
 8002152:	3301      	adds	r3, #1
 8002154:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
 8002158:	f8d7 33d4 	ldr.w	r3, [r7, #980]	@ 0x3d4
 800215c:	2b01      	cmp	r3, #1
 800215e:	f77f af0e 	ble.w	8001f7e <SipHash_2_4+0x64e>
        }

        v0 ^= m;
 8002162:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	@ 0x3f8
 8002166:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	@ 0x3a8
 800216a:	ea80 0402 	eor.w	r4, r0, r2
 800216e:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 8002172:	404b      	eors	r3, r1
 8002174:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8002178:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 800217c:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	@ 0x3f8
    for (; data < end; data += 8) {
 8002180:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8002184:	3308      	adds	r3, #8
 8002186:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
 800218a:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 800218e:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8002192:	429a      	cmp	r2, r3
 8002194:	f4ff adff 	bcc.w	8001d96 <SipHash_2_4+0x466>
    }

    /* Последний блок с дополнением */
    switch (left) {
 8002198:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 800219c:	2b07      	cmp	r3, #7
 800219e:	f200 80f6 	bhi.w	800238e <SipHash_2_4+0xa5e>
 80021a2:	a201      	add	r2, pc, #4	@ (adr r2, 80021a8 <SipHash_2_4+0x878>)
 80021a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a8:	0800238f 	.word	0x0800238f
 80021ac:	0800235b 	.word	0x0800235b
 80021b0:	08002313 	.word	0x08002313
 80021b4:	080022cb 	.word	0x080022cb
 80021b8:	08002283 	.word	0x08002283
 80021bc:	08002245 	.word	0x08002245
 80021c0:	08002207 	.word	0x08002207
 80021c4:	080021c9 	.word	0x080021c9
        case 7: b |= ((uint64_t)data[6]) << 48; /* fallthrough */
 80021c8:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 80021cc:	3306      	adds	r3, #6
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2200      	movs	r2, #0
 80021d4:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 80021d8:	f8c7 223c 	str.w	r2, [r7, #572]	@ 0x23c
 80021dc:	f04f 0000 	mov.w	r0, #0
 80021e0:	f04f 0100 	mov.w	r1, #0
 80021e4:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80021e8:	0419      	lsls	r1, r3, #16
 80021ea:	2000      	movs	r0, #0
 80021ec:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	@ 0x3d8
 80021f0:	ea42 0400 	orr.w	r4, r2, r0
 80021f4:	f8c7 4128 	str.w	r4, [r7, #296]	@ 0x128
 80021f8:	430b      	orrs	r3, r1
 80021fa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80021fe:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	@ 0x128
 8002202:	e9c7 34f6 	strd	r3, r4, [r7, #984]	@ 0x3d8
        case 6: b |= ((uint64_t)data[5]) << 40; /* fallthrough */
 8002206:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 800220a:	3305      	adds	r3, #5
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2200      	movs	r2, #0
 8002212:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
 8002216:	f8c7 2234 	str.w	r2, [r7, #564]	@ 0x234
 800221a:	f04f 0000 	mov.w	r0, #0
 800221e:	f04f 0100 	mov.w	r1, #0
 8002222:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8002226:	0219      	lsls	r1, r3, #8
 8002228:	2000      	movs	r0, #0
 800222a:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	@ 0x3d8
 800222e:	ea42 0400 	orr.w	r4, r2, r0
 8002232:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 8002236:	430b      	orrs	r3, r1
 8002238:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800223c:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 8002240:	e9c7 34f6 	strd	r3, r4, [r7, #984]	@ 0x3d8
        case 5: b |= ((uint64_t)data[4]) << 32; /* fallthrough */
 8002244:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8002248:	3304      	adds	r3, #4
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2200      	movs	r2, #0
 8002250:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 8002254:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 8002258:	f04f 0000 	mov.w	r0, #0
 800225c:	f04f 0100 	mov.w	r1, #0
 8002260:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8002264:	0019      	movs	r1, r3
 8002266:	2000      	movs	r0, #0
 8002268:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	@ 0x3d8
 800226c:	ea42 0400 	orr.w	r4, r2, r0
 8002270:	f8c7 4118 	str.w	r4, [r7, #280]	@ 0x118
 8002274:	430b      	orrs	r3, r1
 8002276:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800227a:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	@ 0x118
 800227e:	e9c7 34f6 	strd	r3, r4, [r7, #984]	@ 0x3d8
        case 4: b |= ((uint64_t)data[3]) << 24; /* fallthrough */
 8002282:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8002286:	3303      	adds	r3, #3
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2200      	movs	r2, #0
 800228e:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
 8002292:	f8c7 2224 	str.w	r2, [r7, #548]	@ 0x224
 8002296:	e9d7 1288 	ldrd	r1, r2, [r7, #544]	@ 0x220
 800229a:	460b      	mov	r3, r1
 800229c:	0a1b      	lsrs	r3, r3, #8
 800229e:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80022a2:	460b      	mov	r3, r1
 80022a4:	061b      	lsls	r3, r3, #24
 80022a6:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 80022aa:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	@ 0x3d8
 80022ae:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	@ 0x218
 80022b2:	4621      	mov	r1, r4
 80022b4:	4311      	orrs	r1, r2
 80022b6:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 80022ba:	4629      	mov	r1, r5
 80022bc:	4319      	orrs	r1, r3
 80022be:	f8c7 1114 	str.w	r1, [r7, #276]	@ 0x114
 80022c2:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 80022c6:	e9c7 34f6 	strd	r3, r4, [r7, #984]	@ 0x3d8
        case 3: b |= ((uint64_t)data[2]) << 16; /* fallthrough */
 80022ca:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 80022ce:	3302      	adds	r3, #2
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2200      	movs	r2, #0
 80022d6:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 80022da:	f8c7 2214 	str.w	r2, [r7, #532]	@ 0x214
 80022de:	f04f 0000 	mov.w	r0, #0
 80022e2:	f04f 0100 	mov.w	r1, #0
 80022e6:	e9d7 4584 	ldrd	r4, r5, [r7, #528]	@ 0x210
 80022ea:	462b      	mov	r3, r5
 80022ec:	0419      	lsls	r1, r3, #16
 80022ee:	4623      	mov	r3, r4
 80022f0:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 80022f4:	4623      	mov	r3, r4
 80022f6:	0418      	lsls	r0, r3, #16
 80022f8:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	@ 0x3d8
 80022fc:	ea42 0400 	orr.w	r4, r2, r0
 8002300:	f8c7 4108 	str.w	r4, [r7, #264]	@ 0x108
 8002304:	430b      	orrs	r3, r1
 8002306:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800230a:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 800230e:	e9c7 34f6 	strd	r3, r4, [r7, #984]	@ 0x3d8
        case 2: b |= ((uint64_t)data[1]) << 8;  /* fallthrough */
 8002312:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8002316:	3301      	adds	r3, #1
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2200      	movs	r2, #0
 800231e:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 8002322:	f8c7 220c 	str.w	r2, [r7, #524]	@ 0x20c
 8002326:	f04f 0000 	mov.w	r0, #0
 800232a:	f04f 0100 	mov.w	r1, #0
 800232e:	e9d7 4582 	ldrd	r4, r5, [r7, #520]	@ 0x208
 8002332:	462b      	mov	r3, r5
 8002334:	0219      	lsls	r1, r3, #8
 8002336:	4623      	mov	r3, r4
 8002338:	ea41 6113 	orr.w	r1, r1, r3, lsr #24
 800233c:	4623      	mov	r3, r4
 800233e:	0218      	lsls	r0, r3, #8
 8002340:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	@ 0x3d8
 8002344:	ea42 0400 	orr.w	r4, r2, r0
 8002348:	f8c7 4100 	str.w	r4, [r7, #256]	@ 0x100
 800234c:	430b      	orrs	r3, r1
 800234e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002352:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8002356:	e9c7 34f6 	strd	r3, r4, [r7, #984]	@ 0x3d8
        case 1: b |= ((uint64_t)data[0]);       /* fallthrough */
 800235a:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2200      	movs	r2, #0
 8002364:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 8002368:	f8c7 2204 	str.w	r2, [r7, #516]	@ 0x204
 800236c:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	@ 0x3d8
 8002370:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	@ 0x200
 8002374:	4621      	mov	r1, r4
 8002376:	4311      	orrs	r1, r2
 8002378:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 800237c:	4629      	mov	r1, r5
 800237e:	4319      	orrs	r1, r3
 8002380:	f8c7 10fc 	str.w	r1, [r7, #252]	@ 0xfc
 8002384:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 8002388:	e9c7 34f6 	strd	r3, r4, [r7, #984]	@ 0x3d8
        case 0: break;
 800238c:	bf00      	nop
    }

    v3 ^= b;
 800238e:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	@ 0x3e0
 8002392:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	@ 0x3d8
 8002396:	ea80 0402 	eor.w	r4, r0, r2
 800239a:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 800239e:	404b      	eors	r3, r1
 80023a0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80023a4:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 80023a8:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0

    /* Сжимающие раунды для последнего блока */
    for (int i = 0; i < SIPHASH_CROUND; i++) {
 80023ac:	2300      	movs	r3, #0
 80023ae:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
 80023b2:	e0ec      	b.n	800258e <SipHash_2_4+0xc5e>
        SIPROUND;
 80023b4:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	@ 0x3f8
 80023b8:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	@ 0x3f0
 80023bc:	1884      	adds	r4, r0, r2
 80023be:	f8c7 40e8 	str.w	r4, [r7, #232]	@ 0xe8
 80023c2:	eb41 0303 	adc.w	r3, r1, r3
 80023c6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80023ca:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	@ 0xe8
 80023ce:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	@ 0x3f8
 80023d2:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 80023d6:	0cda      	lsrs	r2, r3, #19
 80023d8:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 80023dc:	035b      	lsls	r3, r3, #13
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80023e4:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 80023e8:	0cda      	lsrs	r2, r3, #19
 80023ea:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 80023ee:	035b      	lsls	r3, r3, #13
 80023f0:	4313      	orrs	r3, r2
 80023f2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80023f6:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 80023fa:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
 80023fe:	e9d7 01fc 	ldrd	r0, r1, [r7, #1008]	@ 0x3f0
 8002402:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	@ 0x3f8
 8002406:	ea80 0402 	eor.w	r4, r0, r2
 800240a:	f8c7 40d8 	str.w	r4, [r7, #216]	@ 0xd8
 800240e:	404b      	eors	r3, r1
 8002410:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002414:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	@ 0xd8
 8002418:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
 800241c:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	@ 0x3fc
 8002420:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002424:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8002428:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800242c:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8002430:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	@ 0x3f8
 8002434:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	@ 0x3e8
 8002438:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	@ 0x3e0
 800243c:	1884      	adds	r4, r0, r2
 800243e:	f8c7 40c8 	str.w	r4, [r7, #200]	@ 0xc8
 8002442:	eb41 0303 	adc.w	r3, r1, r3
 8002446:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800244a:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 800244e:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	@ 0x3e8
 8002452:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8002456:	0c1a      	lsrs	r2, r3, #16
 8002458:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800245c:	041b      	lsls	r3, r3, #16
 800245e:	4313      	orrs	r3, r2
 8002460:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002464:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8002468:	0c1a      	lsrs	r2, r3, #16
 800246a:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 800246e:	041b      	lsls	r3, r3, #16
 8002470:	4313      	orrs	r3, r2
 8002472:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002476:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 800247a:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0
 800247e:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	@ 0x3e0
 8002482:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	@ 0x3e8
 8002486:	ea80 0402 	eor.w	r4, r0, r2
 800248a:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 800248e:	404b      	eors	r3, r1
 8002490:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002494:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 8002498:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0
 800249c:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	@ 0x3f8
 80024a0:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	@ 0x3e0
 80024a4:	1884      	adds	r4, r0, r2
 80024a6:	f8c7 40b0 	str.w	r4, [r7, #176]	@ 0xb0
 80024aa:	eb41 0303 	adc.w	r3, r1, r3
 80024ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024b2:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	@ 0xb0
 80024b6:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	@ 0x3f8
 80024ba:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 80024be:	0ada      	lsrs	r2, r3, #11
 80024c0:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80024c4:	055b      	lsls	r3, r3, #21
 80024c6:	4313      	orrs	r3, r2
 80024c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80024cc:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80024d0:	0ada      	lsrs	r2, r3, #11
 80024d2:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 80024d6:	055b      	lsls	r3, r3, #21
 80024d8:	4313      	orrs	r3, r2
 80024da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80024de:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 80024e2:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0
 80024e6:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	@ 0x3e0
 80024ea:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	@ 0x3f8
 80024ee:	ea80 0402 	eor.w	r4, r0, r2
 80024f2:	f8c7 40a0 	str.w	r4, [r7, #160]	@ 0xa0
 80024f6:	404b      	eors	r3, r1
 80024f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80024fc:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	@ 0xa0
 8002500:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0
 8002504:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	@ 0x3e8
 8002508:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	@ 0x3f0
 800250c:	1884      	adds	r4, r0, r2
 800250e:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 8002512:	eb41 0303 	adc.w	r3, r1, r3
 8002516:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800251a:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 800251e:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	@ 0x3e8
 8002522:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8002526:	0bda      	lsrs	r2, r3, #15
 8002528:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 800252c:	045b      	lsls	r3, r3, #17
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002534:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8002538:	0bda      	lsrs	r2, r3, #15
 800253a:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 800253e:	045b      	lsls	r3, r3, #17
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002546:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 800254a:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
 800254e:	e9d7 01fc 	ldrd	r0, r1, [r7, #1008]	@ 0x3f0
 8002552:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	@ 0x3e8
 8002556:	ea80 0402 	eor.w	r4, r0, r2
 800255a:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 800255e:	404b      	eors	r3, r1
 8002560:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002564:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 8002568:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
 800256c:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8002570:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002574:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	@ 0x3e8
 8002578:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800257c:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 8002580:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	@ 0x3e8
    for (int i = 0; i < SIPHASH_CROUND; i++) {
 8002584:	f8d7 33d0 	ldr.w	r3, [r7, #976]	@ 0x3d0
 8002588:	3301      	adds	r3, #1
 800258a:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
 800258e:	f8d7 33d0 	ldr.w	r3, [r7, #976]	@ 0x3d0
 8002592:	2b01      	cmp	r3, #1
 8002594:	f77f af0e 	ble.w	80023b4 <SipHash_2_4+0xa84>
    }

    v0 ^= b;
 8002598:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	@ 0x3f8
 800259c:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	@ 0x3d8
 80025a0:	ea80 0402 	eor.w	r4, r0, r2
 80025a4:	67bc      	str	r4, [r7, #120]	@ 0x78
 80025a6:	404b      	eors	r3, r1
 80025a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80025aa:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 80025ae:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	@ 0x3f8

    /* Финализирующие раунды */
    v2 ^= 0xff;
 80025b2:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	@ 0x3e8
 80025b6:	f082 01ff 	eor.w	r1, r2, #255	@ 0xff
 80025ba:	6739      	str	r1, [r7, #112]	@ 0x70
 80025bc:	677b      	str	r3, [r7, #116]	@ 0x74
 80025be:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	@ 0x70
 80025c2:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	@ 0x3e8
    for (int i = 0; i < SIPHASH_FROUND; i++) {
 80025c6:	2300      	movs	r3, #0
 80025c8:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 80025cc:	e0d0      	b.n	8002770 <SipHash_2_4+0xe40>
        SIPROUND;
 80025ce:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	@ 0x3f8
 80025d2:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	@ 0x3f0
 80025d6:	1884      	adds	r4, r0, r2
 80025d8:	66bc      	str	r4, [r7, #104]	@ 0x68
 80025da:	eb41 0303 	adc.w	r3, r1, r3
 80025de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80025e0:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 80025e4:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	@ 0x3f8
 80025e8:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 80025ec:	0cda      	lsrs	r2, r3, #19
 80025ee:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 80025f2:	035b      	lsls	r3, r3, #13
 80025f4:	4313      	orrs	r3, r2
 80025f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80025f8:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 80025fc:	0cda      	lsrs	r2, r3, #19
 80025fe:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8002602:	035b      	lsls	r3, r3, #13
 8002604:	4313      	orrs	r3, r2
 8002606:	663b      	str	r3, [r7, #96]	@ 0x60
 8002608:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	@ 0x60
 800260c:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
 8002610:	e9d7 01fc 	ldrd	r0, r1, [r7, #1008]	@ 0x3f0
 8002614:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	@ 0x3f8
 8002618:	ea80 0402 	eor.w	r4, r0, r2
 800261c:	65bc      	str	r4, [r7, #88]	@ 0x58
 800261e:	404b      	eors	r3, r1
 8002620:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002622:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 8002626:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
 800262a:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	@ 0x3fc
 800262e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002630:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8002634:	657b      	str	r3, [r7, #84]	@ 0x54
 8002636:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 800263a:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	@ 0x3f8
 800263e:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	@ 0x3e8
 8002642:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	@ 0x3e0
 8002646:	1884      	adds	r4, r0, r2
 8002648:	64bc      	str	r4, [r7, #72]	@ 0x48
 800264a:	eb41 0303 	adc.w	r3, r1, r3
 800264e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002650:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8002654:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	@ 0x3e8
 8002658:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 800265c:	0c1a      	lsrs	r2, r3, #16
 800265e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8002662:	041b      	lsls	r3, r3, #16
 8002664:	4313      	orrs	r3, r2
 8002666:	647b      	str	r3, [r7, #68]	@ 0x44
 8002668:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800266c:	0c1a      	lsrs	r2, r3, #16
 800266e:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8002672:	041b      	lsls	r3, r3, #16
 8002674:	4313      	orrs	r3, r2
 8002676:	643b      	str	r3, [r7, #64]	@ 0x40
 8002678:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800267c:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0
 8002680:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	@ 0x3e0
 8002684:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	@ 0x3e8
 8002688:	ea80 0402 	eor.w	r4, r0, r2
 800268c:	63bc      	str	r4, [r7, #56]	@ 0x38
 800268e:	404b      	eors	r3, r1
 8002690:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002692:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8002696:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0
 800269a:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	@ 0x3f8
 800269e:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	@ 0x3e0
 80026a2:	1884      	adds	r4, r0, r2
 80026a4:	633c      	str	r4, [r7, #48]	@ 0x30
 80026a6:	eb41 0303 	adc.w	r3, r1, r3
 80026aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80026ac:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80026b0:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	@ 0x3f8
 80026b4:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 80026b8:	0ada      	lsrs	r2, r3, #11
 80026ba:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80026be:	055b      	lsls	r3, r3, #21
 80026c0:	4313      	orrs	r3, r2
 80026c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026c4:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80026c8:	0ada      	lsrs	r2, r3, #11
 80026ca:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 80026ce:	055b      	lsls	r3, r3, #21
 80026d0:	4313      	orrs	r3, r2
 80026d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026d4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80026d8:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0
 80026dc:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	@ 0x3e0
 80026e0:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	@ 0x3f8
 80026e4:	ea80 0402 	eor.w	r4, r0, r2
 80026e8:	623c      	str	r4, [r7, #32]
 80026ea:	404b      	eors	r3, r1
 80026ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80026ee:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80026f2:	e9c7 34f8 	strd	r3, r4, [r7, #992]	@ 0x3e0
 80026f6:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	@ 0x3e8
 80026fa:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	@ 0x3f0
 80026fe:	1884      	adds	r4, r0, r2
 8002700:	61bc      	str	r4, [r7, #24]
 8002702:	eb41 0303 	adc.w	r3, r1, r3
 8002706:	61fb      	str	r3, [r7, #28]
 8002708:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800270c:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	@ 0x3e8
 8002710:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8002714:	0bda      	lsrs	r2, r3, #15
 8002716:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 800271a:	045b      	lsls	r3, r3, #17
 800271c:	4313      	orrs	r3, r2
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8002724:	0bda      	lsrs	r2, r3, #15
 8002726:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 800272a:	045b      	lsls	r3, r3, #17
 800272c:	4313      	orrs	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002734:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
 8002738:	e9d7 01fc 	ldrd	r0, r1, [r7, #1008]	@ 0x3f0
 800273c:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	@ 0x3e8
 8002740:	ea80 0402 	eor.w	r4, r0, r2
 8002744:	60bc      	str	r4, [r7, #8]
 8002746:	404b      	eors	r3, r1
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800274e:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	@ 0x3f0
 8002752:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8002756:	603b      	str	r3, [r7, #0]
 8002758:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	@ 0x3e8
 800275c:	607b      	str	r3, [r7, #4]
 800275e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002762:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	@ 0x3e8
    for (int i = 0; i < SIPHASH_FROUND; i++) {
 8002766:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 800276a:	3301      	adds	r3, #1
 800276c:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 8002770:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 8002774:	2b03      	cmp	r3, #3
 8002776:	f77f af2a 	ble.w	80025ce <SipHash_2_4+0xc9e>
    }

    /* Финальное XOR смешивание */
    return v0 ^ v1 ^ v2 ^ v3;
 800277a:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	@ 0x3f8
 800277e:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	@ 0x3f0
 8002782:	ea80 0402 	eor.w	r4, r0, r2
 8002786:	f8c7 41f8 	str.w	r4, [r7, #504]	@ 0x1f8
 800278a:	404b      	eors	r3, r1
 800278c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
 8002790:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	@ 0x3e8
 8002794:	e9d7 457e 	ldrd	r4, r5, [r7, #504]	@ 0x1f8
 8002798:	4621      	mov	r1, r4
 800279a:	4051      	eors	r1, r2
 800279c:	f8c7 11f0 	str.w	r1, [r7, #496]	@ 0x1f0
 80027a0:	4629      	mov	r1, r5
 80027a2:	4059      	eors	r1, r3
 80027a4:	f8c7 11f4 	str.w	r1, [r7, #500]	@ 0x1f4
 80027a8:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	@ 0x3e0
 80027ac:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 80027b0:	4621      	mov	r1, r4
 80027b2:	4051      	eors	r1, r2
 80027b4:	f8c7 11e8 	str.w	r1, [r7, #488]	@ 0x1e8
 80027b8:	4629      	mov	r1, r5
 80027ba:	4059      	eors	r1, r3
 80027bc:	f8c7 11ec 	str.w	r1, [r7, #492]	@ 0x1ec
 80027c0:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
}
 80027c4:	4610      	mov	r0, r2
 80027c6:	4619      	mov	r1, r3
 80027c8:	f207 4704 	addw	r7, r7, #1028	@ 0x404
 80027cc:	46bd      	mov	sp, r7
 80027ce:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80027d2:	4770      	bx	lr
 80027d4:	f3af 8000 	nop.w
 80027d8:	70736575 	.word	0x70736575
 80027dc:	736f6d65 	.word	0x736f6d65
 80027e0:	6e646f6d 	.word	0x6e646f6d
 80027e4:	646f7261 	.word	0x646f7261
 80027e8:	6e657261 	.word	0x6e657261
 80027ec:	6c796765 	.word	0x6c796765
 80027f0:	79746573 	.word	0x79746573
 80027f4:	74656462 	.word	0x74656462

080027f8 <SipHash_2_4_MAC>:

void SipHash_2_4_MAC(const uint8_t* key, const uint8_t* data, size_t len, uint8_t* out) {
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	603b      	str	r3, [r7, #0]
    uint64_t h = SipHash_2_4(key, data, len);
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	68b9      	ldr	r1, [r7, #8]
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f7ff f890 	bl	8001930 <SipHash_2_4>
 8002810:	e9c7 0104 	strd	r0, r1, [r7, #16]
    U64TO8_LE(out, h);
 8002814:	7c3a      	ldrb	r2, [r7, #16]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	701a      	strb	r2, [r3, #0]
 800281a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	f04f 0300 	mov.w	r3, #0
 8002826:	0a02      	lsrs	r2, r0, #8
 8002828:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800282c:	0a0b      	lsrs	r3, r1, #8
 800282e:	6839      	ldr	r1, [r7, #0]
 8002830:	3101      	adds	r1, #1
 8002832:	b2d3      	uxtb	r3, r2
 8002834:	700b      	strb	r3, [r1, #0]
 8002836:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800283a:	f04f 0200 	mov.w	r2, #0
 800283e:	f04f 0300 	mov.w	r3, #0
 8002842:	0c02      	lsrs	r2, r0, #16
 8002844:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002848:	0c0b      	lsrs	r3, r1, #16
 800284a:	6839      	ldr	r1, [r7, #0]
 800284c:	3102      	adds	r1, #2
 800284e:	b2d3      	uxtb	r3, r2
 8002850:	700b      	strb	r3, [r1, #0]
 8002852:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	f04f 0300 	mov.w	r3, #0
 800285e:	0e02      	lsrs	r2, r0, #24
 8002860:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002864:	0e0b      	lsrs	r3, r1, #24
 8002866:	6839      	ldr	r1, [r7, #0]
 8002868:	3103      	adds	r1, #3
 800286a:	b2d3      	uxtb	r3, r2
 800286c:	700b      	strb	r3, [r1, #0]
 800286e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	f04f 0300 	mov.w	r3, #0
 800287a:	000a      	movs	r2, r1
 800287c:	2300      	movs	r3, #0
 800287e:	6839      	ldr	r1, [r7, #0]
 8002880:	3104      	adds	r1, #4
 8002882:	b2d3      	uxtb	r3, r2
 8002884:	700b      	strb	r3, [r1, #0]
 8002886:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800288a:	f04f 0200 	mov.w	r2, #0
 800288e:	f04f 0300 	mov.w	r3, #0
 8002892:	0a0a      	lsrs	r2, r1, #8
 8002894:	2300      	movs	r3, #0
 8002896:	6839      	ldr	r1, [r7, #0]
 8002898:	3105      	adds	r1, #5
 800289a:	b2d3      	uxtb	r3, r2
 800289c:	700b      	strb	r3, [r1, #0]
 800289e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	0c0a      	lsrs	r2, r1, #16
 80028ac:	2300      	movs	r3, #0
 80028ae:	6839      	ldr	r1, [r7, #0]
 80028b0:	3106      	adds	r1, #6
 80028b2:	b2d3      	uxtb	r3, r2
 80028b4:	700b      	strb	r3, [r1, #0]
 80028b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80028ba:	f04f 0200 	mov.w	r2, #0
 80028be:	f04f 0300 	mov.w	r3, #0
 80028c2:	0e0a      	lsrs	r2, r1, #24
 80028c4:	2300      	movs	r3, #0
 80028c6:	6839      	ldr	r1, [r7, #0]
 80028c8:	3107      	adds	r1, #7
 80028ca:	b2d3      	uxtb	r3, r2
 80028cc:	700b      	strb	r3, [r1, #0]
}
 80028ce:	bf00      	nop
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <bytes_to_word>:
#define SPECK_BETA  3  // Параметр ротации

/**
 * @brief Преобразовать массив байтов в 32-битное слово (little-endian)
 */
static uint32_t bytes_to_word(const uint8_t* bytes) {
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
    return ((uint32_t)bytes[0]) |
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	461a      	mov	r2, r3
           ((uint32_t)bytes[1] << 8) |
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3301      	adds	r3, #1
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	021b      	lsls	r3, r3, #8
    return ((uint32_t)bytes[0]) |
 80028ec:	431a      	orrs	r2, r3
           ((uint32_t)bytes[2] << 16) |
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	3302      	adds	r3, #2
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	041b      	lsls	r3, r3, #16
           ((uint32_t)bytes[1] << 8) |
 80028f6:	431a      	orrs	r2, r3
           ((uint32_t)bytes[3] << 24);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3303      	adds	r3, #3
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	061b      	lsls	r3, r3, #24
           ((uint32_t)bytes[2] << 16) |
 8002900:	4313      	orrs	r3, r2
}
 8002902:	4618      	mov	r0, r3
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <word_to_bytes>:

/**
 * @brief Преобразовать 32-битное слово в массив байтов (little-endian)
 */
static void word_to_bytes(uint32_t word, uint8_t* bytes) {
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
 8002916:	6039      	str	r1, [r7, #0]
    bytes[0] = (uint8_t)(word);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	b2da      	uxtb	r2, r3
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	701a      	strb	r2, [r3, #0]
    bytes[1] = (uint8_t)(word >> 8);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	0a1a      	lsrs	r2, r3, #8
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	3301      	adds	r3, #1
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	701a      	strb	r2, [r3, #0]
    bytes[2] = (uint8_t)(word >> 16);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	0c1a      	lsrs	r2, r3, #16
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	3302      	adds	r3, #2
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	701a      	strb	r2, [r3, #0]
    bytes[3] = (uint8_t)(word >> 24);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	0e1a      	lsrs	r2, r3, #24
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	3303      	adds	r3, #3
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	701a      	strb	r2, [r3, #0]
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <Speck_Init>:

void Speck_Init(SpeckContext* ctx, const uint8_t* key) {
 8002950:	b590      	push	{r4, r7, lr}
 8002952:	b08b      	sub	sp, #44	@ 0x2c
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
    uint32_t k[4]; // Ключевые слова
    uint32_t l[3]; // Вспомогательные ключевые слова

    // Преобразуем ключ (16 байт) в слова
    k[0] = bytes_to_word(key);
 800295a:	6838      	ldr	r0, [r7, #0]
 800295c:	f7ff ffbb 	bl	80028d6 <bytes_to_word>
 8002960:	4603      	mov	r3, r0
 8002962:	617b      	str	r3, [r7, #20]
    l[0] = bytes_to_word(key + 4);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	3304      	adds	r3, #4
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff ffb4 	bl	80028d6 <bytes_to_word>
 800296e:	4603      	mov	r3, r0
 8002970:	60bb      	str	r3, [r7, #8]
    l[1] = bytes_to_word(key + 8);
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	3308      	adds	r3, #8
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff ffad 	bl	80028d6 <bytes_to_word>
 800297c:	4603      	mov	r3, r0
 800297e:	60fb      	str	r3, [r7, #12]
    l[2] = bytes_to_word(key + 12);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	330c      	adds	r3, #12
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff ffa6 	bl	80028d6 <bytes_to_word>
 800298a:	4603      	mov	r3, r0
 800298c:	613b      	str	r3, [r7, #16]

    // Генерация ключей раундов
    ctx->round_keys[0] = k[0];
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < SPECK_ROUNDS - 1; i++) {
 8002994:	2300      	movs	r3, #0
 8002996:	627b      	str	r3, [r7, #36]	@ 0x24
 8002998:	e075      	b.n	8002a86 <Speck_Init+0x136>
        l[i % 3] = (ROTR32(l[i % 3], SPECK_ALPHA) + k[(i + 1) % 4]) ^ i;
 800299a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800299c:	4b3e      	ldr	r3, [pc, #248]	@ (8002a98 <Speck_Init+0x148>)
 800299e:	fb83 3201 	smull	r3, r2, r3, r1
 80029a2:	17cb      	asrs	r3, r1, #31
 80029a4:	1ad2      	subs	r2, r2, r3
 80029a6:	4613      	mov	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	4413      	add	r3, r2
 80029ac:	1aca      	subs	r2, r1, r3
 80029ae:	0093      	lsls	r3, r2, #2
 80029b0:	3328      	adds	r3, #40	@ 0x28
 80029b2:	443b      	add	r3, r7
 80029b4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80029b8:	ea4f 2233 	mov.w	r2, r3, ror #8
 80029bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029be:	3301      	adds	r3, #1
 80029c0:	4259      	negs	r1, r3
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	f001 0103 	and.w	r1, r1, #3
 80029ca:	bf58      	it	pl
 80029cc:	424b      	negpl	r3, r1
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	3328      	adds	r3, #40	@ 0x28
 80029d2:	443b      	add	r3, r7
 80029d4:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80029d8:	18d4      	adds	r4, r2, r3
 80029da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80029dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029de:	4b2e      	ldr	r3, [pc, #184]	@ (8002a98 <Speck_Init+0x148>)
 80029e0:	fb83 3201 	smull	r3, r2, r3, r1
 80029e4:	17cb      	asrs	r3, r1, #31
 80029e6:	1ad2      	subs	r2, r2, r3
 80029e8:	4613      	mov	r3, r2
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	4413      	add	r3, r2
 80029ee:	1aca      	subs	r2, r1, r3
 80029f0:	ea84 0100 	eor.w	r1, r4, r0
 80029f4:	0093      	lsls	r3, r2, #2
 80029f6:	3328      	adds	r3, #40	@ 0x28
 80029f8:	443b      	add	r3, r7
 80029fa:	f843 1c20 	str.w	r1, [r3, #-32]
        k[(i + 1) % 4] = ROTL32(k[(i + 1) % 4], SPECK_BETA) ^ l[i % 3];
 80029fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a00:	3301      	adds	r3, #1
 8002a02:	425a      	negs	r2, r3
 8002a04:	f003 0303 	and.w	r3, r3, #3
 8002a08:	f002 0203 	and.w	r2, r2, #3
 8002a0c:	bf58      	it	pl
 8002a0e:	4253      	negpl	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	3328      	adds	r3, #40	@ 0x28
 8002a14:	443b      	add	r3, r7
 8002a16:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8002a1a:	ea4f 7073 	mov.w	r0, r3, ror #29
 8002a1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a20:	4b1d      	ldr	r3, [pc, #116]	@ (8002a98 <Speck_Init+0x148>)
 8002a22:	fb83 3201 	smull	r3, r2, r3, r1
 8002a26:	17cb      	asrs	r3, r1, #31
 8002a28:	1ad2      	subs	r2, r2, r3
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	4413      	add	r3, r2
 8002a30:	1aca      	subs	r2, r1, r3
 8002a32:	0093      	lsls	r3, r2, #2
 8002a34:	3328      	adds	r3, #40	@ 0x28
 8002a36:	443b      	add	r3, r7
 8002a38:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3e:	3301      	adds	r3, #1
 8002a40:	4259      	negs	r1, r3
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	f001 0103 	and.w	r1, r1, #3
 8002a4a:	bf58      	it	pl
 8002a4c:	424b      	negpl	r3, r1
 8002a4e:	4042      	eors	r2, r0
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	3328      	adds	r3, #40	@ 0x28
 8002a54:	443b      	add	r3, r7
 8002a56:	f843 2c14 	str.w	r2, [r3, #-20]
        ctx->round_keys[i + 1] = k[(i + 1) % 4];
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	425a      	negs	r2, r3
 8002a60:	f003 0303 	and.w	r3, r3, #3
 8002a64:	f002 0203 	and.w	r2, r2, #3
 8002a68:	bf58      	it	pl
 8002a6a:	4253      	negpl	r3, r2
 8002a6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a6e:	3201      	adds	r2, #1
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	3328      	adds	r3, #40	@ 0x28
 8002a74:	443b      	add	r3, r7
 8002a76:	f853 1c14 	ldr.w	r1, [r3, #-20]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < SPECK_ROUNDS - 1; i++) {
 8002a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a82:	3301      	adds	r3, #1
 8002a84:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a88:	2b19      	cmp	r3, #25
 8002a8a:	dd86      	ble.n	800299a <Speck_Init+0x4a>
    }
}
 8002a8c:	bf00      	nop
 8002a8e:	bf00      	nop
 8002a90:	372c      	adds	r7, #44	@ 0x2c
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd90      	pop	{r4, r7, pc}
 8002a96:	bf00      	nop
 8002a98:	55555556 	.word	0x55555556

08002a9c <Speck_Encrypt>:

void Speck_Encrypt(const SpeckContext* ctx, const uint8_t* plaintext, uint8_t* ciphertext) {
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b088      	sub	sp, #32
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
    uint32_t x, y;

    // Преобразуем блок в два 32-битных слова
    x = bytes_to_word(plaintext);
 8002aa8:	68b8      	ldr	r0, [r7, #8]
 8002aaa:	f7ff ff14 	bl	80028d6 <bytes_to_word>
 8002aae:	61f8      	str	r0, [r7, #28]
    y = bytes_to_word(plaintext + 4);
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	3304      	adds	r3, #4
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff ff0e 	bl	80028d6 <bytes_to_word>
 8002aba:	61b8      	str	r0, [r7, #24]

    // Раунды шифрования
    for (int i = 0; i < SPECK_ROUNDS; i++) {
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]
 8002ac0:	e013      	b.n	8002aea <Speck_Encrypt+0x4e>
        x = (ROTR32(x, SPECK_ALPHA) + y) ^ ctx->round_keys[i];
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	ea4f 2233 	mov.w	r2, r3, ror #8
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	441a      	add	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6979      	ldr	r1, [r7, #20]
 8002ad0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002ad4:	4053      	eors	r3, r2
 8002ad6:	61fb      	str	r3, [r7, #28]
        y = ROTL32(y, SPECK_BETA) ^ x;
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	ea4f 7373 	mov.w	r3, r3, ror #29
 8002ade:	69fa      	ldr	r2, [r7, #28]
 8002ae0:	4053      	eors	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < SPECK_ROUNDS; i++) {
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	617b      	str	r3, [r7, #20]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2b1a      	cmp	r3, #26
 8002aee:	dde8      	ble.n	8002ac2 <Speck_Encrypt+0x26>
    }

    // Преобразуем обратно в байты
    word_to_bytes(x, ciphertext);
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	69f8      	ldr	r0, [r7, #28]
 8002af4:	f7ff ff0b 	bl	800290e <word_to_bytes>
    word_to_bytes(y, ciphertext + 4);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3304      	adds	r3, #4
 8002afc:	4619      	mov	r1, r3
 8002afe:	69b8      	ldr	r0, [r7, #24]
 8002b00:	f7ff ff05 	bl	800290e <word_to_bytes>
}
 8002b04:	bf00      	nop
 8002b06:	3720      	adds	r7, #32
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <Speck_Decrypt>:

void Speck_Decrypt(const SpeckContext* ctx, const uint8_t* ciphertext, uint8_t* plaintext) {
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b088      	sub	sp, #32
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
    uint32_t x, y;

    // Преобразуем блок в два 32-битных слова
    x = bytes_to_word(ciphertext);
 8002b18:	68b8      	ldr	r0, [r7, #8]
 8002b1a:	f7ff fedc 	bl	80028d6 <bytes_to_word>
 8002b1e:	61f8      	str	r0, [r7, #28]
    y = bytes_to_word(ciphertext + 4);
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	3304      	adds	r3, #4
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff fed6 	bl	80028d6 <bytes_to_word>
 8002b2a:	61b8      	str	r0, [r7, #24]

    // Раунды расшифрования (в обратном порядке)
    for (int i = SPECK_ROUNDS - 1; i >= 0; i--) {
 8002b2c:	231a      	movs	r3, #26
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	e013      	b.n	8002b5a <Speck_Decrypt+0x4e>
        y = ROTR32(y ^ x, SPECK_BETA);
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	4053      	eors	r3, r2
 8002b38:	ea4f 03f3 	mov.w	r3, r3, ror #3
 8002b3c:	61bb      	str	r3, [r7, #24]
        x = ROTL32((x ^ ctx->round_keys[i]) - y, SPECK_ALPHA);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	405a      	eors	r2, r3
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	ea4f 6333 	mov.w	r3, r3, ror #24
 8002b52:	61fb      	str	r3, [r7, #28]
    for (int i = SPECK_ROUNDS - 1; i >= 0; i--) {
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	dae8      	bge.n	8002b32 <Speck_Decrypt+0x26>
    }

    // Преобразуем обратно в байты
    word_to_bytes(x, plaintext);
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	69f8      	ldr	r0, [r7, #28]
 8002b64:	f7ff fed3 	bl	800290e <word_to_bytes>
    word_to_bytes(y, plaintext + 4);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	69b8      	ldr	r0, [r7, #24]
 8002b70:	f7ff fecd 	bl	800290e <word_to_bytes>
}
 8002b74:	bf00      	nop
 8002b76:	3720      	adds	r7, #32
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <add_pkcs7_padding>:

/**
 * @brief Добавление дополнения PKCS#7 для блочного шифрования
 */
static void add_pkcs7_padding(uint8_t* data, size_t data_len, size_t block_size) {
 8002b7c:	b480      	push	{r7}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
    uint8_t padding_value = block_size - (data_len % block_size);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	fbb3 f1f1 	udiv	r1, r3, r1
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	fb00 f101 	mul.w	r1, r0, r1
 8002b9a:	1a5b      	subs	r3, r3, r1
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	74fb      	strb	r3, [r7, #19]
    for (size_t i = 0; i < padding_value; i++) {
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	617b      	str	r3, [r7, #20]
 8002ba6:	e009      	b.n	8002bbc <add_pkcs7_padding+0x40>
        data[data_len + i] = padding_value;
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	4413      	add	r3, r2
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	7cfa      	ldrb	r2, [r7, #19]
 8002bb4:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < padding_value; i++) {
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	7cfb      	ldrb	r3, [r7, #19]
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d3f1      	bcc.n	8002ba8 <add_pkcs7_padding+0x2c>
    }
}
 8002bc4:	bf00      	nop
 8002bc6:	bf00      	nop
 8002bc8:	371c      	adds	r7, #28
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <remove_pkcs7_padding>:

/**
 * @brief Удаление дополнения PKCS#7 после расшифрования
 */
static size_t remove_pkcs7_padding(uint8_t* data, size_t data_len) {
 8002bd2:	b480      	push	{r7}
 8002bd4:	b085      	sub	sp, #20
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
 8002bda:	6039      	str	r1, [r7, #0]
    if (data_len == 0) return 0;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <remove_pkcs7_padding+0x14>
 8002be2:	2300      	movs	r3, #0
 8002be4:	e026      	b.n	8002c34 <remove_pkcs7_padding+0x62>

    uint8_t padding_value = data[data_len - 1];
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	3b01      	subs	r3, #1
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	4413      	add	r3, r2
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	72fb      	strb	r3, [r7, #11]

    // Проверка корректности дополнения
    if (padding_value > SPECK_BLOCK_SIZE || padding_value == 0) {
 8002bf2:	7afb      	ldrb	r3, [r7, #11]
 8002bf4:	2b08      	cmp	r3, #8
 8002bf6:	d802      	bhi.n	8002bfe <remove_pkcs7_padding+0x2c>
 8002bf8:	7afb      	ldrb	r3, [r7, #11]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <remove_pkcs7_padding+0x30>
        return data_len; // Некорректное дополнение, возвращаем исходную длину
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	e018      	b.n	8002c34 <remove_pkcs7_padding+0x62>
    }

    for (size_t i = data_len - padding_value; i < data_len - 1; i++) {
 8002c02:	7afb      	ldrb	r3, [r7, #11]
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	e00b      	b.n	8002c24 <remove_pkcs7_padding+0x52>
        if (data[i] != padding_value) {
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4413      	add	r3, r2
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	7afa      	ldrb	r2, [r7, #11]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d001      	beq.n	8002c1e <remove_pkcs7_padding+0x4c>
            return data_len; // Некорректное дополнение, возвращаем исходную длину
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	e00a      	b.n	8002c34 <remove_pkcs7_padding+0x62>
    for (size_t i = data_len - padding_value; i < data_len - 1; i++) {
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	3301      	adds	r3, #1
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d3ee      	bcc.n	8002c0c <remove_pkcs7_padding+0x3a>
        }
    }

    return data_len - padding_value;
 8002c2e:	7afb      	ldrb	r3, [r7, #11]
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	1ad3      	subs	r3, r2, r3
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <Speck_GetPaddedLength>:

size_t Speck_GetPaddedLength(size_t length) {
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
    return length + (SPECK_BLOCK_SIZE - (length % SPECK_BLOCK_SIZE)) % SPECK_BLOCK_SIZE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	425b      	negs	r3, r3
 8002c4c:	f003 0207 	and.w	r2, r3, #7
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4413      	add	r3, r2
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <Speck_CBC_Encrypt>:

size_t Speck_CBC_Encrypt(const SpeckContext* ctx, const uint8_t* plaintext, size_t length,
                        const uint8_t* iv, uint8_t* ciphertext) {
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b092      	sub	sp, #72	@ 0x48
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	603b      	str	r3, [r7, #0]
    uint8_t block[SPECK_BLOCK_SIZE];
    uint8_t chain[SPECK_BLOCK_SIZE];
    size_t padded_length = Speck_GetPaddedLength(length);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff ffe6 	bl	8002c40 <Speck_GetPaddedLength>
 8002c74:	6378      	str	r0, [r7, #52]	@ 0x34

    // Копируем IV в цепочку
    memcpy(chain, iv, SPECK_BLOCK_SIZE);
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	f107 031c 	add.w	r3, r7, #28
 8002c7c:	6810      	ldr	r0, [r2, #0]
 8002c7e:	6851      	ldr	r1, [r2, #4]
 8002c80:	c303      	stmia	r3!, {r0, r1}

    // Шифруем полные блоки
    size_t num_blocks = length / SPECK_BLOCK_SIZE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	08db      	lsrs	r3, r3, #3
 8002c86:	633b      	str	r3, [r7, #48]	@ 0x30
    for (size_t i = 0; i < num_blocks; i++) {
 8002c88:	2300      	movs	r3, #0
 8002c8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c8c:	e032      	b.n	8002cf4 <Speck_CBC_Encrypt+0x94>
        // XOR с предыдущим зашифрованным блоком (или IV для первого блока)
        for (size_t j = 0; j < SPECK_BLOCK_SIZE; j++) {
 8002c8e:	2300      	movs	r3, #0
 8002c90:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c92:	e016      	b.n	8002cc2 <Speck_CBC_Encrypt+0x62>
            block[j] = plaintext[i * SPECK_BLOCK_SIZE + j] ^ chain[j];
 8002c94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c96:	00da      	lsls	r2, r3, #3
 8002c98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c9a:	4413      	add	r3, r2
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	781a      	ldrb	r2, [r3, #0]
 8002ca2:	f107 011c 	add.w	r1, r7, #28
 8002ca6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ca8:	440b      	add	r3, r1
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	4053      	eors	r3, r2
 8002cae:	b2d9      	uxtb	r1, r3
 8002cb0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002cb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cb6:	4413      	add	r3, r2
 8002cb8:	460a      	mov	r2, r1
 8002cba:	701a      	strb	r2, [r3, #0]
        for (size_t j = 0; j < SPECK_BLOCK_SIZE; j++) {
 8002cbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002cc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cc4:	2b07      	cmp	r3, #7
 8002cc6:	d9e5      	bls.n	8002c94 <Speck_CBC_Encrypt+0x34>
        }

        // Шифруем блок
        Speck_Encrypt(ctx, block, ciphertext + i * SPECK_BLOCK_SIZE);
 8002cc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002cce:	441a      	add	r2, r3
 8002cd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f7ff fee0 	bl	8002a9c <Speck_Encrypt>

        // Обновляем цепочку
        memcpy(chain, ciphertext + i * SPECK_BLOCK_SIZE, SPECK_BLOCK_SIZE);
 8002cdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002ce2:	441a      	add	r2, r3
 8002ce4:	f107 031c 	add.w	r3, r7, #28
 8002ce8:	6810      	ldr	r0, [r2, #0]
 8002cea:	6851      	ldr	r1, [r2, #4]
 8002cec:	c303      	stmia	r3!, {r0, r1}
    for (size_t i = 0; i < num_blocks; i++) {
 8002cee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cf4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d3c8      	bcc.n	8002c8e <Speck_CBC_Encrypt+0x2e>
    }

    // Обрабатываем последний неполный блок с дополнением
    if (length % SPECK_BLOCK_SIZE != 0) {
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d03a      	beq.n	8002d7c <Speck_CBC_Encrypt+0x11c>
        size_t remaining = length % SPECK_BLOCK_SIZE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        // Копируем оставшиеся данные
        memcpy(block, plaintext + num_blocks * SPECK_BLOCK_SIZE, remaining);
 8002d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	18d1      	adds	r1, r2, r3
 8002d16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f002 fece 	bl	8005abe <memcpy>

        // Добавляем дополнение PKCS#7
        add_pkcs7_padding(block, remaining, SPECK_BLOCK_SIZE);
 8002d22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d26:	2208      	movs	r2, #8
 8002d28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff ff26 	bl	8002b7c <add_pkcs7_padding>

        // XOR с предыдущим зашифрованным блоком
        for (size_t j = 0; j < SPECK_BLOCK_SIZE; j++) {
 8002d30:	2300      	movs	r3, #0
 8002d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d34:	e014      	b.n	8002d60 <Speck_CBC_Encrypt+0x100>
            block[j] ^= chain[j];
 8002d36:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002d3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d3c:	4413      	add	r3, r2
 8002d3e:	781a      	ldrb	r2, [r3, #0]
 8002d40:	f107 011c 	add.w	r1, r7, #28
 8002d44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d46:	440b      	add	r3, r1
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	4053      	eors	r3, r2
 8002d4c:	b2d9      	uxtb	r1, r3
 8002d4e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002d52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d54:	4413      	add	r3, r2
 8002d56:	460a      	mov	r2, r1
 8002d58:	701a      	strb	r2, [r3, #0]
        for (size_t j = 0; j < SPECK_BLOCK_SIZE; j++) {
 8002d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d62:	2b07      	cmp	r3, #7
 8002d64:	d9e7      	bls.n	8002d36 <Speck_CBC_Encrypt+0xd6>
        }

        // Шифруем последний блок
        Speck_Encrypt(ctx, block, ciphertext + num_blocks * SPECK_BLOCK_SIZE);
 8002d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002d6c:	441a      	add	r2, r3
 8002d6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d72:	4619      	mov	r1, r3
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f7ff fe91 	bl	8002a9c <Speck_Encrypt>
 8002d7a:	e02b      	b.n	8002dd4 <Speck_CBC_Encrypt+0x174>
    }
    // Если длина кратна размеру блока, добавляем дополнительный блок дополнения
    else {
        uint8_t padding_block[SPECK_BLOCK_SIZE];
        // Заполняем блок значением SPECK_BLOCK_SIZE
        memset(padding_block, SPECK_BLOCK_SIZE, SPECK_BLOCK_SIZE);
 8002d7c:	f107 0314 	add.w	r3, r7, #20
 8002d80:	2208      	movs	r2, #8
 8002d82:	2108      	movs	r1, #8
 8002d84:	4618      	mov	r0, r3
 8002d86:	f002 fe1f 	bl	80059c8 <memset>

        // XOR с предыдущим зашифрованным блоком
        for (size_t j = 0; j < SPECK_BLOCK_SIZE; j++) {
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d8e:	e014      	b.n	8002dba <Speck_CBC_Encrypt+0x15a>
            padding_block[j] ^= chain[j];
 8002d90:	f107 0214 	add.w	r2, r7, #20
 8002d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d96:	4413      	add	r3, r2
 8002d98:	781a      	ldrb	r2, [r3, #0]
 8002d9a:	f107 011c 	add.w	r1, r7, #28
 8002d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da0:	440b      	add	r3, r1
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	4053      	eors	r3, r2
 8002da6:	b2d9      	uxtb	r1, r3
 8002da8:	f107 0214 	add.w	r2, r7, #20
 8002dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dae:	4413      	add	r3, r2
 8002db0:	460a      	mov	r2, r1
 8002db2:	701a      	strb	r2, [r3, #0]
        for (size_t j = 0; j < SPECK_BLOCK_SIZE; j++) {
 8002db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db6:	3301      	adds	r3, #1
 8002db8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dbc:	2b07      	cmp	r3, #7
 8002dbe:	d9e7      	bls.n	8002d90 <Speck_CBC_Encrypt+0x130>
        }

        // Шифруем дополнительный блок
        Speck_Encrypt(ctx, padding_block, ciphertext + num_blocks * SPECK_BLOCK_SIZE);
 8002dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002dc6:	441a      	add	r2, r3
 8002dc8:	f107 0314 	add.w	r3, r7, #20
 8002dcc:	4619      	mov	r1, r3
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f7ff fe64 	bl	8002a9c <Speck_Encrypt>
    }

    return padded_length;
 8002dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3748      	adds	r7, #72	@ 0x48
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <Speck_CBC_Decrypt>:

size_t Speck_CBC_Decrypt(const SpeckContext* ctx, const uint8_t* ciphertext, size_t length,
                        const uint8_t* iv, uint8_t* plaintext) {
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b08c      	sub	sp, #48	@ 0x30
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	607a      	str	r2, [r7, #4]
 8002dea:	603b      	str	r3, [r7, #0]
    uint8_t block[SPECK_BLOCK_SIZE];
    uint8_t chain[SPECK_BLOCK_SIZE];

    // Проверяем, что длина кратна размеру блока
    if (length % SPECK_BLOCK_SIZE != 0 || length == 0) {
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d102      	bne.n	8002dfc <Speck_CBC_Decrypt+0x1e>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <Speck_CBC_Decrypt+0x22>
        return 0; // Ошибка - некорректная длина
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	e046      	b.n	8002e8e <Speck_CBC_Decrypt+0xb0>
    }

    // Копируем IV в цепочку
    memcpy(chain, iv, SPECK_BLOCK_SIZE);
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	f107 0314 	add.w	r3, r7, #20
 8002e06:	6810      	ldr	r0, [r2, #0]
 8002e08:	6851      	ldr	r1, [r2, #4]
 8002e0a:	c303      	stmia	r3!, {r0, r1}

    // Расшифровываем все блоки
    size_t num_blocks = length / SPECK_BLOCK_SIZE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	08db      	lsrs	r3, r3, #3
 8002e10:	627b      	str	r3, [r7, #36]	@ 0x24
    for (size_t i = 0; i < num_blocks; i++) {
 8002e12:	2300      	movs	r3, #0
 8002e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e16:	e031      	b.n	8002e7c <Speck_CBC_Decrypt+0x9e>
        // Расшифровываем блок
        Speck_Decrypt(ctx, ciphertext + i * SPECK_BLOCK_SIZE, block);
 8002e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	4413      	add	r3, r2
 8002e20:	f107 021c 	add.w	r2, r7, #28
 8002e24:	4619      	mov	r1, r3
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f7ff fe70 	bl	8002b0c <Speck_Decrypt>

        // XOR с предыдущим зашифрованным блоком (или IV для первого блока)
        for (size_t j = 0; j < SPECK_BLOCK_SIZE; j++) {
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e30:	e015      	b.n	8002e5e <Speck_CBC_Decrypt+0x80>
            plaintext[i * SPECK_BLOCK_SIZE + j] = block[j] ^ chain[j];
 8002e32:	f107 021c 	add.w	r2, r7, #28
 8002e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e38:	4413      	add	r3, r2
 8002e3a:	7819      	ldrb	r1, [r3, #0]
 8002e3c:	f107 0214 	add.w	r2, r7, #20
 8002e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e42:	4413      	add	r3, r2
 8002e44:	781a      	ldrb	r2, [r3, #0]
 8002e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e48:	00d8      	lsls	r0, r3, #3
 8002e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e4c:	4403      	add	r3, r0
 8002e4e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002e50:	4403      	add	r3, r0
 8002e52:	404a      	eors	r2, r1
 8002e54:	b2d2      	uxtb	r2, r2
 8002e56:	701a      	strb	r2, [r3, #0]
        for (size_t j = 0; j < SPECK_BLOCK_SIZE; j++) {
 8002e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e60:	2b07      	cmp	r3, #7
 8002e62:	d9e6      	bls.n	8002e32 <Speck_CBC_Decrypt+0x54>
        }

        // Обновляем цепочку
        memcpy(chain, ciphertext + i * SPECK_BLOCK_SIZE, SPECK_BLOCK_SIZE);
 8002e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	441a      	add	r2, r3
 8002e6c:	f107 0314 	add.w	r3, r7, #20
 8002e70:	6810      	ldr	r0, [r2, #0]
 8002e72:	6851      	ldr	r1, [r2, #4]
 8002e74:	c303      	stmia	r3!, {r0, r1}
    for (size_t i = 0; i < num_blocks; i++) {
 8002e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e78:	3301      	adds	r3, #1
 8002e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d3c9      	bcc.n	8002e18 <Speck_CBC_Decrypt+0x3a>
    }

    // Удаляем дополнение PKCS#7
    return remove_pkcs7_padding(plaintext, length);
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002e88:	f7ff fea3 	bl	8002bd2 <remove_pkcs7_padding>
 8002e8c:	4603      	mov	r3, r0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3730      	adds	r7, #48	@ 0x30
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
	...

08002e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	607b      	str	r3, [r7, #4]
 8002ea2:	4b10      	ldr	r3, [pc, #64]	@ (8002ee4 <HAL_MspInit+0x4c>)
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea6:	4a0f      	ldr	r2, [pc, #60]	@ (8002ee4 <HAL_MspInit+0x4c>)
 8002ea8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002eac:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eae:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee4 <HAL_MspInit+0x4c>)
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eb6:	607b      	str	r3, [r7, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	603b      	str	r3, [r7, #0]
 8002ebe:	4b09      	ldr	r3, [pc, #36]	@ (8002ee4 <HAL_MspInit+0x4c>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec2:	4a08      	ldr	r2, [pc, #32]	@ (8002ee4 <HAL_MspInit+0x4c>)
 8002ec4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ec8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eca:	4b06      	ldr	r3, [pc, #24]	@ (8002ee4 <HAL_MspInit+0x4c>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ed2:	603b      	str	r3, [r7, #0]
 8002ed4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002ed6:	2007      	movs	r0, #7
 8002ed8:	f000 fb58 	bl	800358c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002edc:	bf00      	nop
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40023800 	.word	0x40023800

08002ee8 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a0b      	ldr	r2, [pc, #44]	@ (8002f24 <HAL_CRC_MspInit+0x3c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d10d      	bne.n	8002f16 <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	4b0a      	ldr	r3, [pc, #40]	@ (8002f28 <HAL_CRC_MspInit+0x40>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f02:	4a09      	ldr	r2, [pc, #36]	@ (8002f28 <HAL_CRC_MspInit+0x40>)
 8002f04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f0a:	4b07      	ldr	r3, [pc, #28]	@ (8002f28 <HAL_CRC_MspInit+0x40>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8002f16:	bf00      	nop
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	40023000 	.word	0x40023000
 8002f28:	40023800 	.word	0x40023800

08002f2c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08e      	sub	sp, #56	@ 0x38
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	609a      	str	r2, [r3, #8]
 8002f40:	60da      	str	r2, [r3, #12]
 8002f42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a53      	ldr	r2, [pc, #332]	@ (8003098 <HAL_UART_MspInit+0x16c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d135      	bne.n	8002fba <HAL_UART_MspInit+0x8e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	623b      	str	r3, [r7, #32]
 8002f52:	4b52      	ldr	r3, [pc, #328]	@ (800309c <HAL_UART_MspInit+0x170>)
 8002f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f56:	4a51      	ldr	r2, [pc, #324]	@ (800309c <HAL_UART_MspInit+0x170>)
 8002f58:	f043 0310 	orr.w	r3, r3, #16
 8002f5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f5e:	4b4f      	ldr	r3, [pc, #316]	@ (800309c <HAL_UART_MspInit+0x170>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f62:	f003 0310 	and.w	r3, r3, #16
 8002f66:	623b      	str	r3, [r7, #32]
 8002f68:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61fb      	str	r3, [r7, #28]
 8002f6e:	4b4b      	ldr	r3, [pc, #300]	@ (800309c <HAL_UART_MspInit+0x170>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f72:	4a4a      	ldr	r2, [pc, #296]	@ (800309c <HAL_UART_MspInit+0x170>)
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f7a:	4b48      	ldr	r3, [pc, #288]	@ (800309c <HAL_UART_MspInit+0x170>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	61fb      	str	r3, [r7, #28]
 8002f84:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002f86:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002f8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f90:	2300      	movs	r3, #0
 8002f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f94:	2303      	movs	r3, #3
 8002f96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f98:	2307      	movs	r3, #7
 8002f9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	483f      	ldr	r0, [pc, #252]	@ (80030a0 <HAL_UART_MspInit+0x174>)
 8002fa4:	f000 fc40 	bl	8003828 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2100      	movs	r1, #0
 8002fac:	2025      	movs	r0, #37	@ 0x25
 8002fae:	f000 faf8 	bl	80035a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002fb2:	2025      	movs	r0, #37	@ 0x25
 8002fb4:	f000 fb11 	bl	80035da <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8002fb8:	e06a      	b.n	8003090 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART2)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a39      	ldr	r2, [pc, #228]	@ (80030a4 <HAL_UART_MspInit+0x178>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d12c      	bne.n	800301e <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	61bb      	str	r3, [r7, #24]
 8002fc8:	4b34      	ldr	r3, [pc, #208]	@ (800309c <HAL_UART_MspInit+0x170>)
 8002fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fcc:	4a33      	ldr	r2, [pc, #204]	@ (800309c <HAL_UART_MspInit+0x170>)
 8002fce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fd4:	4b31      	ldr	r3, [pc, #196]	@ (800309c <HAL_UART_MspInit+0x170>)
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fdc:	61bb      	str	r3, [r7, #24]
 8002fde:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	4b2d      	ldr	r3, [pc, #180]	@ (800309c <HAL_UART_MspInit+0x170>)
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe8:	4a2c      	ldr	r2, [pc, #176]	@ (800309c <HAL_UART_MspInit+0x170>)
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ff0:	4b2a      	ldr	r3, [pc, #168]	@ (800309c <HAL_UART_MspInit+0x170>)
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	617b      	str	r3, [r7, #20]
 8002ffa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002ffc:	230c      	movs	r3, #12
 8002ffe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003000:	2302      	movs	r3, #2
 8003002:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003004:	2300      	movs	r3, #0
 8003006:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003008:	2303      	movs	r3, #3
 800300a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800300c:	2307      	movs	r3, #7
 800300e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003010:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003014:	4619      	mov	r1, r3
 8003016:	4822      	ldr	r0, [pc, #136]	@ (80030a0 <HAL_UART_MspInit+0x174>)
 8003018:	f000 fc06 	bl	8003828 <HAL_GPIO_Init>
}
 800301c:	e038      	b.n	8003090 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART6)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a21      	ldr	r2, [pc, #132]	@ (80030a8 <HAL_UART_MspInit+0x17c>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d133      	bne.n	8003090 <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003028:	2300      	movs	r3, #0
 800302a:	613b      	str	r3, [r7, #16]
 800302c:	4b1b      	ldr	r3, [pc, #108]	@ (800309c <HAL_UART_MspInit+0x170>)
 800302e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003030:	4a1a      	ldr	r2, [pc, #104]	@ (800309c <HAL_UART_MspInit+0x170>)
 8003032:	f043 0320 	orr.w	r3, r3, #32
 8003036:	6453      	str	r3, [r2, #68]	@ 0x44
 8003038:	4b18      	ldr	r3, [pc, #96]	@ (800309c <HAL_UART_MspInit+0x170>)
 800303a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800303c:	f003 0320 	and.w	r3, r3, #32
 8003040:	613b      	str	r3, [r7, #16]
 8003042:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003044:	2300      	movs	r3, #0
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	4b14      	ldr	r3, [pc, #80]	@ (800309c <HAL_UART_MspInit+0x170>)
 800304a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304c:	4a13      	ldr	r2, [pc, #76]	@ (800309c <HAL_UART_MspInit+0x170>)
 800304e:	f043 0304 	orr.w	r3, r3, #4
 8003052:	6313      	str	r3, [r2, #48]	@ 0x30
 8003054:	4b11      	ldr	r3, [pc, #68]	@ (800309c <HAL_UART_MspInit+0x170>)
 8003056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003060:	23c0      	movs	r3, #192	@ 0xc0
 8003062:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003064:	2302      	movs	r3, #2
 8003066:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003068:	2300      	movs	r3, #0
 800306a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800306c:	2303      	movs	r3, #3
 800306e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003070:	2308      	movs	r3, #8
 8003072:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003074:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003078:	4619      	mov	r1, r3
 800307a:	480c      	ldr	r0, [pc, #48]	@ (80030ac <HAL_UART_MspInit+0x180>)
 800307c:	f000 fbd4 	bl	8003828 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003080:	2200      	movs	r2, #0
 8003082:	2100      	movs	r1, #0
 8003084:	2047      	movs	r0, #71	@ 0x47
 8003086:	f000 fa8c 	bl	80035a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800308a:	2047      	movs	r0, #71	@ 0x47
 800308c:	f000 faa5 	bl	80035da <HAL_NVIC_EnableIRQ>
}
 8003090:	bf00      	nop
 8003092:	3738      	adds	r7, #56	@ 0x38
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40011000 	.word	0x40011000
 800309c:	40023800 	.word	0x40023800
 80030a0:	40020000 	.word	0x40020000
 80030a4:	40004400 	.word	0x40004400
 80030a8:	40011400 	.word	0x40011400
 80030ac:	40020800 	.word	0x40020800

080030b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80030b4:	bf00      	nop
 80030b6:	e7fd      	b.n	80030b4 <NMI_Handler+0x4>

080030b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030bc:	bf00      	nop
 80030be:	e7fd      	b.n	80030bc <HardFault_Handler+0x4>

080030c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030c4:	bf00      	nop
 80030c6:	e7fd      	b.n	80030c4 <MemManage_Handler+0x4>

080030c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030cc:	bf00      	nop
 80030ce:	e7fd      	b.n	80030cc <BusFault_Handler+0x4>

080030d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030d4:	bf00      	nop
 80030d6:	e7fd      	b.n	80030d4 <UsageFault_Handler+0x4>

080030d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030dc:	bf00      	nop
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030e6:	b480      	push	{r7}
 80030e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030ea:	bf00      	nop
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030f8:	bf00      	nop
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003106:	f000 f92d 	bl	8003364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800310a:	bf00      	nop
 800310c:	bd80      	pop	{r7, pc}
	...

08003110 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003114:	4802      	ldr	r0, [pc, #8]	@ (8003120 <USART1_IRQHandler+0x10>)
 8003116:	f001 fabd 	bl	8004694 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800311a:	bf00      	nop
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	200000b4 	.word	0x200000b4

08003124 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003128:	4802      	ldr	r0, [pc, #8]	@ (8003134 <USART6_IRQHandler+0x10>)
 800312a:	f001 fab3 	bl	8004694 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800312e:	bf00      	nop
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	20000144 	.word	0x20000144

08003138 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]
 8003148:	e00a      	b.n	8003160 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800314a:	f3af 8000 	nop.w
 800314e:	4601      	mov	r1, r0
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	60ba      	str	r2, [r7, #8]
 8003156:	b2ca      	uxtb	r2, r1
 8003158:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	3301      	adds	r3, #1
 800315e:	617b      	str	r3, [r7, #20]
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	429a      	cmp	r2, r3
 8003166:	dbf0      	blt.n	800314a <_read+0x12>
  }

  return len;
 8003168:	687b      	ldr	r3, [r7, #4]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800317a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800317e:	4618      	mov	r0, r3
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
 8003192:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800319a:	605a      	str	r2, [r3, #4]
  return 0;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <_isatty>:

int _isatty(int file)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031b2:	2301      	movs	r3, #1
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
	...

080031dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031e4:	4a14      	ldr	r2, [pc, #80]	@ (8003238 <_sbrk+0x5c>)
 80031e6:	4b15      	ldr	r3, [pc, #84]	@ (800323c <_sbrk+0x60>)
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031f0:	4b13      	ldr	r3, [pc, #76]	@ (8003240 <_sbrk+0x64>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d102      	bne.n	80031fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031f8:	4b11      	ldr	r3, [pc, #68]	@ (8003240 <_sbrk+0x64>)
 80031fa:	4a12      	ldr	r2, [pc, #72]	@ (8003244 <_sbrk+0x68>)
 80031fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031fe:	4b10      	ldr	r3, [pc, #64]	@ (8003240 <_sbrk+0x64>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4413      	add	r3, r2
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	429a      	cmp	r2, r3
 800320a:	d207      	bcs.n	800321c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800320c:	f002 fc2a 	bl	8005a64 <__errno>
 8003210:	4603      	mov	r3, r0
 8003212:	220c      	movs	r2, #12
 8003214:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003216:	f04f 33ff 	mov.w	r3, #4294967295
 800321a:	e009      	b.n	8003230 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800321c:	4b08      	ldr	r3, [pc, #32]	@ (8003240 <_sbrk+0x64>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003222:	4b07      	ldr	r3, [pc, #28]	@ (8003240 <_sbrk+0x64>)
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4413      	add	r3, r2
 800322a:	4a05      	ldr	r2, [pc, #20]	@ (8003240 <_sbrk+0x64>)
 800322c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800322e:	68fb      	ldr	r3, [r7, #12]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3718      	adds	r7, #24
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	20020000 	.word	0x20020000
 800323c:	00000400 	.word	0x00000400
 8003240:	20000ad0 	.word	0x20000ad0
 8003244:	20000c28 	.word	0x20000c28

08003248 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800324c:	4b06      	ldr	r3, [pc, #24]	@ (8003268 <SystemInit+0x20>)
 800324e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003252:	4a05      	ldr	r2, [pc, #20]	@ (8003268 <SystemInit+0x20>)
 8003254:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003258:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800325c:	bf00      	nop
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	e000ed00 	.word	0xe000ed00

0800326c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800326c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80032a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003270:	f7ff ffea 	bl	8003248 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003274:	480c      	ldr	r0, [pc, #48]	@ (80032a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003276:	490d      	ldr	r1, [pc, #52]	@ (80032ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003278:	4a0d      	ldr	r2, [pc, #52]	@ (80032b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800327a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800327c:	e002      	b.n	8003284 <LoopCopyDataInit>

0800327e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800327e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003282:	3304      	adds	r3, #4

08003284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003288:	d3f9      	bcc.n	800327e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800328a:	4a0a      	ldr	r2, [pc, #40]	@ (80032b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800328c:	4c0a      	ldr	r4, [pc, #40]	@ (80032b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800328e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003290:	e001      	b.n	8003296 <LoopFillZerobss>

08003292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003294:	3204      	adds	r2, #4

08003296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003298:	d3fb      	bcc.n	8003292 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800329a:	f002 fbe9 	bl	8005a70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800329e:	f7fd f9cf 	bl	8000640 <main>
  bx  lr    
 80032a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80032a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80032a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032ac:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80032b0:	08006db8 	.word	0x08006db8
  ldr r2, =_sbss
 80032b4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80032b8:	20000c24 	.word	0x20000c24

080032bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032bc:	e7fe      	b.n	80032bc <ADC_IRQHandler>
	...

080032c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003300 <HAL_Init+0x40>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a0d      	ldr	r2, [pc, #52]	@ (8003300 <HAL_Init+0x40>)
 80032ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003300 <HAL_Init+0x40>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a0a      	ldr	r2, [pc, #40]	@ (8003300 <HAL_Init+0x40>)
 80032d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032dc:	4b08      	ldr	r3, [pc, #32]	@ (8003300 <HAL_Init+0x40>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a07      	ldr	r2, [pc, #28]	@ (8003300 <HAL_Init+0x40>)
 80032e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032e8:	2003      	movs	r0, #3
 80032ea:	f000 f94f 	bl	800358c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032ee:	2000      	movs	r0, #0
 80032f0:	f000 f808 	bl	8003304 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032f4:	f7ff fdd0 	bl	8002e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40023c00 	.word	0x40023c00

08003304 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800330c:	4b12      	ldr	r3, [pc, #72]	@ (8003358 <HAL_InitTick+0x54>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	4b12      	ldr	r3, [pc, #72]	@ (800335c <HAL_InitTick+0x58>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	4619      	mov	r1, r3
 8003316:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800331a:	fbb3 f3f1 	udiv	r3, r3, r1
 800331e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003322:	4618      	mov	r0, r3
 8003324:	f000 f967 	bl	80035f6 <HAL_SYSTICK_Config>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e00e      	b.n	8003350 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b0f      	cmp	r3, #15
 8003336:	d80a      	bhi.n	800334e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003338:	2200      	movs	r2, #0
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	f04f 30ff 	mov.w	r0, #4294967295
 8003340:	f000 f92f 	bl	80035a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003344:	4a06      	ldr	r2, [pc, #24]	@ (8003360 <HAL_InitTick+0x5c>)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	e000      	b.n	8003350 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
}
 8003350:	4618      	mov	r0, r3
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	20000028 	.word	0x20000028
 800335c:	20000030 	.word	0x20000030
 8003360:	2000002c 	.word	0x2000002c

08003364 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003368:	4b06      	ldr	r3, [pc, #24]	@ (8003384 <HAL_IncTick+0x20>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	461a      	mov	r2, r3
 800336e:	4b06      	ldr	r3, [pc, #24]	@ (8003388 <HAL_IncTick+0x24>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4413      	add	r3, r2
 8003374:	4a04      	ldr	r2, [pc, #16]	@ (8003388 <HAL_IncTick+0x24>)
 8003376:	6013      	str	r3, [r2, #0]
}
 8003378:	bf00      	nop
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	20000030 	.word	0x20000030
 8003388:	20000ad4 	.word	0x20000ad4

0800338c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  return uwTick;
 8003390:	4b03      	ldr	r3, [pc, #12]	@ (80033a0 <HAL_GetTick+0x14>)
 8003392:	681b      	ldr	r3, [r3, #0]
}
 8003394:	4618      	mov	r0, r3
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	20000ad4 	.word	0x20000ad4

080033a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033ac:	f7ff ffee 	bl	800338c <HAL_GetTick>
 80033b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033bc:	d005      	beq.n	80033ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033be:	4b0a      	ldr	r3, [pc, #40]	@ (80033e8 <HAL_Delay+0x44>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	461a      	mov	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4413      	add	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033ca:	bf00      	nop
 80033cc:	f7ff ffde 	bl	800338c <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d8f7      	bhi.n	80033cc <HAL_Delay+0x28>
  {
  }
}
 80033dc:	bf00      	nop
 80033de:	bf00      	nop
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	20000030 	.word	0x20000030

080033ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003430 <__NVIC_SetPriorityGrouping+0x44>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003408:	4013      	ands	r3, r2
 800340a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003414:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003418:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800341c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800341e:	4a04      	ldr	r2, [pc, #16]	@ (8003430 <__NVIC_SetPriorityGrouping+0x44>)
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	60d3      	str	r3, [r2, #12]
}
 8003424:	bf00      	nop
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	e000ed00 	.word	0xe000ed00

08003434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003438:	4b04      	ldr	r3, [pc, #16]	@ (800344c <__NVIC_GetPriorityGrouping+0x18>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	0a1b      	lsrs	r3, r3, #8
 800343e:	f003 0307 	and.w	r3, r3, #7
}
 8003442:	4618      	mov	r0, r3
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	e000ed00 	.word	0xe000ed00

08003450 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800345a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345e:	2b00      	cmp	r3, #0
 8003460:	db0b      	blt.n	800347a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	f003 021f 	and.w	r2, r3, #31
 8003468:	4907      	ldr	r1, [pc, #28]	@ (8003488 <__NVIC_EnableIRQ+0x38>)
 800346a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346e:	095b      	lsrs	r3, r3, #5
 8003470:	2001      	movs	r0, #1
 8003472:	fa00 f202 	lsl.w	r2, r0, r2
 8003476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	e000e100 	.word	0xe000e100

0800348c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	4603      	mov	r3, r0
 8003494:	6039      	str	r1, [r7, #0]
 8003496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349c:	2b00      	cmp	r3, #0
 800349e:	db0a      	blt.n	80034b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	b2da      	uxtb	r2, r3
 80034a4:	490c      	ldr	r1, [pc, #48]	@ (80034d8 <__NVIC_SetPriority+0x4c>)
 80034a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034aa:	0112      	lsls	r2, r2, #4
 80034ac:	b2d2      	uxtb	r2, r2
 80034ae:	440b      	add	r3, r1
 80034b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034b4:	e00a      	b.n	80034cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	4908      	ldr	r1, [pc, #32]	@ (80034dc <__NVIC_SetPriority+0x50>)
 80034bc:	79fb      	ldrb	r3, [r7, #7]
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	3b04      	subs	r3, #4
 80034c4:	0112      	lsls	r2, r2, #4
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	440b      	add	r3, r1
 80034ca:	761a      	strb	r2, [r3, #24]
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	e000e100 	.word	0xe000e100
 80034dc:	e000ed00 	.word	0xe000ed00

080034e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b089      	sub	sp, #36	@ 0x24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f1c3 0307 	rsb	r3, r3, #7
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	bf28      	it	cs
 80034fe:	2304      	movcs	r3, #4
 8003500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	3304      	adds	r3, #4
 8003506:	2b06      	cmp	r3, #6
 8003508:	d902      	bls.n	8003510 <NVIC_EncodePriority+0x30>
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	3b03      	subs	r3, #3
 800350e:	e000      	b.n	8003512 <NVIC_EncodePriority+0x32>
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003514:	f04f 32ff 	mov.w	r2, #4294967295
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43da      	mvns	r2, r3
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	401a      	ands	r2, r3
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003528:	f04f 31ff 	mov.w	r1, #4294967295
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	fa01 f303 	lsl.w	r3, r1, r3
 8003532:	43d9      	mvns	r1, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003538:	4313      	orrs	r3, r2
         );
}
 800353a:	4618      	mov	r0, r3
 800353c:	3724      	adds	r7, #36	@ 0x24
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
	...

08003548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3b01      	subs	r3, #1
 8003554:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003558:	d301      	bcc.n	800355e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800355a:	2301      	movs	r3, #1
 800355c:	e00f      	b.n	800357e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800355e:	4a0a      	ldr	r2, [pc, #40]	@ (8003588 <SysTick_Config+0x40>)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3b01      	subs	r3, #1
 8003564:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003566:	210f      	movs	r1, #15
 8003568:	f04f 30ff 	mov.w	r0, #4294967295
 800356c:	f7ff ff8e 	bl	800348c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003570:	4b05      	ldr	r3, [pc, #20]	@ (8003588 <SysTick_Config+0x40>)
 8003572:	2200      	movs	r2, #0
 8003574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003576:	4b04      	ldr	r3, [pc, #16]	@ (8003588 <SysTick_Config+0x40>)
 8003578:	2207      	movs	r2, #7
 800357a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	e000e010 	.word	0xe000e010

0800358c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7ff ff29 	bl	80033ec <__NVIC_SetPriorityGrouping>
}
 800359a:	bf00      	nop
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b086      	sub	sp, #24
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	4603      	mov	r3, r0
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	607a      	str	r2, [r7, #4]
 80035ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035b4:	f7ff ff3e 	bl	8003434 <__NVIC_GetPriorityGrouping>
 80035b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	68b9      	ldr	r1, [r7, #8]
 80035be:	6978      	ldr	r0, [r7, #20]
 80035c0:	f7ff ff8e 	bl	80034e0 <NVIC_EncodePriority>
 80035c4:	4602      	mov	r2, r0
 80035c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ca:	4611      	mov	r1, r2
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff ff5d 	bl	800348c <__NVIC_SetPriority>
}
 80035d2:	bf00      	nop
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b082      	sub	sp, #8
 80035de:	af00      	add	r7, sp, #0
 80035e0:	4603      	mov	r3, r0
 80035e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff ff31 	bl	8003450 <__NVIC_EnableIRQ>
}
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b082      	sub	sp, #8
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7ff ffa2 	bl	8003548 <SysTick_Config>
 8003604:	4603      	mov	r3, r0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e00e      	b.n	800363e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	795b      	ldrb	r3, [r3, #5]
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d105      	bne.n	8003636 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7ff fc59 	bl	8002ee8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8003646:	b480      	push	{r7}
 8003648:	b087      	sub	sp, #28
 800364a:	af00      	add	r7, sp, #0
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8003652:	2300      	movs	r3, #0
 8003654:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2202      	movs	r2, #2
 800365a:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800365c:	2300      	movs	r3, #0
 800365e:	617b      	str	r3, [r7, #20]
 8003660:	e00a      	b.n	8003678 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	441a      	add	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6812      	ldr	r2, [r2, #0]
 8003670:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	3301      	adds	r3, #1
 8003676:	617b      	str	r3, [r7, #20]
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	429a      	cmp	r2, r3
 800367e:	d3f0      	bcc.n	8003662 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2201      	movs	r2, #1
 800368c:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800368e:	693b      	ldr	r3, [r7, #16]
}
 8003690:	4618      	mov	r0, r3
 8003692:	371c      	adds	r7, #28
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800369c:	b480      	push	{r7}
 800369e:	b087      	sub	sp, #28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80036a8:	2300      	movs	r3, #0
 80036aa:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2202      	movs	r2, #2
 80036b0:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f042 0201 	orr.w	r2, r2, #1
 80036c0:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	e00a      	b.n	80036de <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	441a      	add	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6812      	ldr	r2, [r2, #0]
 80036d6:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	3301      	adds	r3, #1
 80036dc:	617b      	str	r3, [r7, #20]
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d3f0      	bcc.n	80036c8 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2201      	movs	r2, #1
 80036f2:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80036f4:	693b      	ldr	r3, [r7, #16]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	371c      	adds	r7, #28
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b084      	sub	sp, #16
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800370e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003710:	f7ff fe3c 	bl	800338c <HAL_GetTick>
 8003714:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d008      	beq.n	8003734 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2280      	movs	r2, #128	@ 0x80
 8003726:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e052      	b.n	80037da <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0216 	bic.w	r2, r2, #22
 8003742:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	695a      	ldr	r2, [r3, #20]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003752:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003758:	2b00      	cmp	r3, #0
 800375a:	d103      	bne.n	8003764 <HAL_DMA_Abort+0x62>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003760:	2b00      	cmp	r3, #0
 8003762:	d007      	beq.n	8003774 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0208 	bic.w	r2, r2, #8
 8003772:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0201 	bic.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003784:	e013      	b.n	80037ae <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003786:	f7ff fe01 	bl	800338c <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b05      	cmp	r3, #5
 8003792:	d90c      	bls.n	80037ae <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2220      	movs	r2, #32
 8003798:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2203      	movs	r2, #3
 800379e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e015      	b.n	80037da <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1e4      	bne.n	8003786 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c0:	223f      	movs	r2, #63	@ 0x3f
 80037c2:	409a      	lsls	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d004      	beq.n	8003800 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2280      	movs	r2, #128	@ 0x80
 80037fa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e00c      	b.n	800381a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2205      	movs	r2, #5
 8003804:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0201 	bic.w	r2, r2, #1
 8003816:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
	...

08003828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003828:	b480      	push	{r7}
 800382a:	b089      	sub	sp, #36	@ 0x24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003832:	2300      	movs	r3, #0
 8003834:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003836:	2300      	movs	r3, #0
 8003838:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800383a:	2300      	movs	r3, #0
 800383c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800383e:	2300      	movs	r3, #0
 8003840:	61fb      	str	r3, [r7, #28]
 8003842:	e159      	b.n	8003af8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003844:	2201      	movs	r2, #1
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	4013      	ands	r3, r2
 8003856:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	429a      	cmp	r2, r3
 800385e:	f040 8148 	bne.w	8003af2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	2b01      	cmp	r3, #1
 800386c:	d005      	beq.n	800387a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003876:	2b02      	cmp	r3, #2
 8003878:	d130      	bne.n	80038dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	2203      	movs	r2, #3
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	43db      	mvns	r3, r3
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	4013      	ands	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038b0:	2201      	movs	r2, #1
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	43db      	mvns	r3, r3
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4013      	ands	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	091b      	lsrs	r3, r3, #4
 80038c6:	f003 0201 	and.w	r2, r3, #1
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f003 0303 	and.w	r3, r3, #3
 80038e4:	2b03      	cmp	r3, #3
 80038e6:	d017      	beq.n	8003918 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	2203      	movs	r2, #3
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	43db      	mvns	r3, r3
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	4013      	ands	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	4313      	orrs	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f003 0303 	and.w	r3, r3, #3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d123      	bne.n	800396c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	08da      	lsrs	r2, r3, #3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3208      	adds	r2, #8
 800392c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003930:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	220f      	movs	r2, #15
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	43db      	mvns	r3, r3
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4013      	ands	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	691a      	ldr	r2, [r3, #16]
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	f003 0307 	and.w	r3, r3, #7
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	4313      	orrs	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	08da      	lsrs	r2, r3, #3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	3208      	adds	r2, #8
 8003966:	69b9      	ldr	r1, [r7, #24]
 8003968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	2203      	movs	r2, #3
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	43db      	mvns	r3, r3
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	4013      	ands	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f003 0203 	and.w	r2, r3, #3
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	4313      	orrs	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 80a2 	beq.w	8003af2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ae:	2300      	movs	r3, #0
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	4b57      	ldr	r3, [pc, #348]	@ (8003b10 <HAL_GPIO_Init+0x2e8>)
 80039b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b6:	4a56      	ldr	r2, [pc, #344]	@ (8003b10 <HAL_GPIO_Init+0x2e8>)
 80039b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80039be:	4b54      	ldr	r3, [pc, #336]	@ (8003b10 <HAL_GPIO_Init+0x2e8>)
 80039c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039ca:	4a52      	ldr	r2, [pc, #328]	@ (8003b14 <HAL_GPIO_Init+0x2ec>)
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	089b      	lsrs	r3, r3, #2
 80039d0:	3302      	adds	r3, #2
 80039d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	220f      	movs	r2, #15
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	43db      	mvns	r3, r3
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	4013      	ands	r3, r2
 80039ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a49      	ldr	r2, [pc, #292]	@ (8003b18 <HAL_GPIO_Init+0x2f0>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d019      	beq.n	8003a2a <HAL_GPIO_Init+0x202>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a48      	ldr	r2, [pc, #288]	@ (8003b1c <HAL_GPIO_Init+0x2f4>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d013      	beq.n	8003a26 <HAL_GPIO_Init+0x1fe>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a47      	ldr	r2, [pc, #284]	@ (8003b20 <HAL_GPIO_Init+0x2f8>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d00d      	beq.n	8003a22 <HAL_GPIO_Init+0x1fa>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a46      	ldr	r2, [pc, #280]	@ (8003b24 <HAL_GPIO_Init+0x2fc>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d007      	beq.n	8003a1e <HAL_GPIO_Init+0x1f6>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a45      	ldr	r2, [pc, #276]	@ (8003b28 <HAL_GPIO_Init+0x300>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d101      	bne.n	8003a1a <HAL_GPIO_Init+0x1f2>
 8003a16:	2304      	movs	r3, #4
 8003a18:	e008      	b.n	8003a2c <HAL_GPIO_Init+0x204>
 8003a1a:	2307      	movs	r3, #7
 8003a1c:	e006      	b.n	8003a2c <HAL_GPIO_Init+0x204>
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e004      	b.n	8003a2c <HAL_GPIO_Init+0x204>
 8003a22:	2302      	movs	r3, #2
 8003a24:	e002      	b.n	8003a2c <HAL_GPIO_Init+0x204>
 8003a26:	2301      	movs	r3, #1
 8003a28:	e000      	b.n	8003a2c <HAL_GPIO_Init+0x204>
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	69fa      	ldr	r2, [r7, #28]
 8003a2e:	f002 0203 	and.w	r2, r2, #3
 8003a32:	0092      	lsls	r2, r2, #2
 8003a34:	4093      	lsls	r3, r2
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a3c:	4935      	ldr	r1, [pc, #212]	@ (8003b14 <HAL_GPIO_Init+0x2ec>)
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	089b      	lsrs	r3, r3, #2
 8003a42:	3302      	adds	r3, #2
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a4a:	4b38      	ldr	r3, [pc, #224]	@ (8003b2c <HAL_GPIO_Init+0x304>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	43db      	mvns	r3, r3
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	4013      	ands	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a6e:	4a2f      	ldr	r2, [pc, #188]	@ (8003b2c <HAL_GPIO_Init+0x304>)
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a74:	4b2d      	ldr	r3, [pc, #180]	@ (8003b2c <HAL_GPIO_Init+0x304>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	4013      	ands	r3, r2
 8003a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a98:	4a24      	ldr	r2, [pc, #144]	@ (8003b2c <HAL_GPIO_Init+0x304>)
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a9e:	4b23      	ldr	r3, [pc, #140]	@ (8003b2c <HAL_GPIO_Init+0x304>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ac2:	4a1a      	ldr	r2, [pc, #104]	@ (8003b2c <HAL_GPIO_Init+0x304>)
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ac8:	4b18      	ldr	r3, [pc, #96]	@ (8003b2c <HAL_GPIO_Init+0x304>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003aec:	4a0f      	ldr	r2, [pc, #60]	@ (8003b2c <HAL_GPIO_Init+0x304>)
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	3301      	adds	r3, #1
 8003af6:	61fb      	str	r3, [r7, #28]
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	2b0f      	cmp	r3, #15
 8003afc:	f67f aea2 	bls.w	8003844 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b00:	bf00      	nop
 8003b02:	bf00      	nop
 8003b04:	3724      	adds	r7, #36	@ 0x24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	40023800 	.word	0x40023800
 8003b14:	40013800 	.word	0x40013800
 8003b18:	40020000 	.word	0x40020000
 8003b1c:	40020400 	.word	0x40020400
 8003b20:	40020800 	.word	0x40020800
 8003b24:	40020c00 	.word	0x40020c00
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	40013c00 	.word	0x40013c00

08003b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	807b      	strh	r3, [r7, #2]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b40:	787b      	ldrb	r3, [r7, #1]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b46:	887a      	ldrh	r2, [r7, #2]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b4c:	e003      	b.n	8003b56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b4e:	887b      	ldrh	r3, [r7, #2]
 8003b50:	041a      	lsls	r2, r3, #16
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	619a      	str	r2, [r3, #24]
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
	...

08003b64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e267      	b.n	8004046 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d075      	beq.n	8003c6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b82:	4b88      	ldr	r3, [pc, #544]	@ (8003da4 <HAL_RCC_OscConfig+0x240>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 030c 	and.w	r3, r3, #12
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	d00c      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b8e:	4b85      	ldr	r3, [pc, #532]	@ (8003da4 <HAL_RCC_OscConfig+0x240>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b96:	2b08      	cmp	r3, #8
 8003b98:	d112      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b9a:	4b82      	ldr	r3, [pc, #520]	@ (8003da4 <HAL_RCC_OscConfig+0x240>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ba2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ba6:	d10b      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba8:	4b7e      	ldr	r3, [pc, #504]	@ (8003da4 <HAL_RCC_OscConfig+0x240>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d05b      	beq.n	8003c6c <HAL_RCC_OscConfig+0x108>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d157      	bne.n	8003c6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e242      	b.n	8004046 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bc8:	d106      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x74>
 8003bca:	4b76      	ldr	r3, [pc, #472]	@ (8003da4 <HAL_RCC_OscConfig+0x240>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a75      	ldr	r2, [pc, #468]	@ (8003da4 <HAL_RCC_OscConfig+0x240>)
 8003bd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	e01d      	b.n	8003c14 <HAL_RCC_OscConfig+0xb0>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003be0:	d10c      	bne.n	8003bfc <HAL_RCC_OscConfig+0x98>
 8003be2:	4b70      	ldr	r3, [pc, #448]	@ (8003da4 <HAL_RCC_OscConfig+0x240>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a6f      	ldr	r2, [pc, #444]	@ (8003da4 <HAL_RCC_OscConfig+0x240>)
 8003be8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	4b6d      	ldr	r3, [pc, #436]	@ (8003da4 <HAL_RCC_OscConfig+0x240>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a6c      	ldr	r2, [pc, #432]	@ (8003da4 <HAL_RCC_OscConfig+0x240>)
 8003bf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bf8:	6013      	str	r3, [r2, #0]
 8003bfa:	e00b      	b.n	8003c14 <HAL_RCC_OscConfig+0xb0>
 8003bfc:	4b69      	ldr	r3, [pc, #420]	@ (8003da4 <HAL_RCC_OscConfig+0x240>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a68      	ldr	r2, [pc, #416]	@ (8003da4 <HAL_RCC_OscConfig+0x240>)
 8003c02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c06:	6013      	str	r3, [r2, #0]
 8003c08:	4b66      	ldr	r3, [pc, #408]	@ (8003da4 <HAL_RCC_OscConfig+0x240>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a65      	ldr	r2, [pc, #404]	@ (8003da4 <HAL_RCC_OscConfig+0x240>)
 8003c0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d013      	beq.n	8003c44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1c:	f7ff fbb6 	bl	800338c <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c24:	f7ff fbb2 	bl	800338c <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b64      	cmp	r3, #100	@ 0x64
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e207      	b.n	8004046 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c36:	4b5b      	ldr	r3, [pc, #364]	@ (8003da4 <HAL_RCC_OscConfig+0x240>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0f0      	beq.n	8003c24 <HAL_RCC_OscConfig+0xc0>
 8003c42:	e014      	b.n	8003c6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c44:	f7ff fba2 	bl	800338c <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c4c:	f7ff fb9e 	bl	800338c <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b64      	cmp	r3, #100	@ 0x64
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e1f3      	b.n	8004046 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c5e:	4b51      	ldr	r3, [pc, #324]	@ (8003da4 <HAL_RCC_OscConfig+0x240>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1f0      	bne.n	8003c4c <HAL_RCC_OscConfig+0xe8>
 8003c6a:	e000      	b.n	8003c6e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d063      	beq.n	8003d42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c7a:	4b4a      	ldr	r3, [pc, #296]	@ (8003da4 <HAL_RCC_OscConfig+0x240>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 030c 	and.w	r3, r3, #12
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00b      	beq.n	8003c9e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c86:	4b47      	ldr	r3, [pc, #284]	@ (8003da4 <HAL_RCC_OscConfig+0x240>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c8e:	2b08      	cmp	r3, #8
 8003c90:	d11c      	bne.n	8003ccc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c92:	4b44      	ldr	r3, [pc, #272]	@ (8003da4 <HAL_RCC_OscConfig+0x240>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d116      	bne.n	8003ccc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c9e:	4b41      	ldr	r3, [pc, #260]	@ (8003da4 <HAL_RCC_OscConfig+0x240>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d005      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x152>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d001      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e1c7      	b.n	8004046 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb6:	4b3b      	ldr	r3, [pc, #236]	@ (8003da4 <HAL_RCC_OscConfig+0x240>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	4937      	ldr	r1, [pc, #220]	@ (8003da4 <HAL_RCC_OscConfig+0x240>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cca:	e03a      	b.n	8003d42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d020      	beq.n	8003d16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cd4:	4b34      	ldr	r3, [pc, #208]	@ (8003da8 <HAL_RCC_OscConfig+0x244>)
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cda:	f7ff fb57 	bl	800338c <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ce2:	f7ff fb53 	bl	800338c <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e1a8      	b.n	8004046 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8003da4 <HAL_RCC_OscConfig+0x240>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0f0      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d00:	4b28      	ldr	r3, [pc, #160]	@ (8003da4 <HAL_RCC_OscConfig+0x240>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	4925      	ldr	r1, [pc, #148]	@ (8003da4 <HAL_RCC_OscConfig+0x240>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	600b      	str	r3, [r1, #0]
 8003d14:	e015      	b.n	8003d42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d16:	4b24      	ldr	r3, [pc, #144]	@ (8003da8 <HAL_RCC_OscConfig+0x244>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1c:	f7ff fb36 	bl	800338c <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d24:	f7ff fb32 	bl	800338c <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e187      	b.n	8004046 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d36:	4b1b      	ldr	r3, [pc, #108]	@ (8003da4 <HAL_RCC_OscConfig+0x240>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1f0      	bne.n	8003d24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0308 	and.w	r3, r3, #8
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d036      	beq.n	8003dbc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d016      	beq.n	8003d84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d56:	4b15      	ldr	r3, [pc, #84]	@ (8003dac <HAL_RCC_OscConfig+0x248>)
 8003d58:	2201      	movs	r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d5c:	f7ff fb16 	bl	800338c <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d64:	f7ff fb12 	bl	800338c <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e167      	b.n	8004046 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d76:	4b0b      	ldr	r3, [pc, #44]	@ (8003da4 <HAL_RCC_OscConfig+0x240>)
 8003d78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0f0      	beq.n	8003d64 <HAL_RCC_OscConfig+0x200>
 8003d82:	e01b      	b.n	8003dbc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d84:	4b09      	ldr	r3, [pc, #36]	@ (8003dac <HAL_RCC_OscConfig+0x248>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d8a:	f7ff faff 	bl	800338c <HAL_GetTick>
 8003d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d90:	e00e      	b.n	8003db0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d92:	f7ff fafb 	bl	800338c <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d907      	bls.n	8003db0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e150      	b.n	8004046 <HAL_RCC_OscConfig+0x4e2>
 8003da4:	40023800 	.word	0x40023800
 8003da8:	42470000 	.word	0x42470000
 8003dac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003db0:	4b88      	ldr	r3, [pc, #544]	@ (8003fd4 <HAL_RCC_OscConfig+0x470>)
 8003db2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1ea      	bne.n	8003d92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 8097 	beq.w	8003ef8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dce:	4b81      	ldr	r3, [pc, #516]	@ (8003fd4 <HAL_RCC_OscConfig+0x470>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10f      	bne.n	8003dfa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60bb      	str	r3, [r7, #8]
 8003dde:	4b7d      	ldr	r3, [pc, #500]	@ (8003fd4 <HAL_RCC_OscConfig+0x470>)
 8003de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de2:	4a7c      	ldr	r2, [pc, #496]	@ (8003fd4 <HAL_RCC_OscConfig+0x470>)
 8003de4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003de8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dea:	4b7a      	ldr	r3, [pc, #488]	@ (8003fd4 <HAL_RCC_OscConfig+0x470>)
 8003dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003df2:	60bb      	str	r3, [r7, #8]
 8003df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003df6:	2301      	movs	r3, #1
 8003df8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dfa:	4b77      	ldr	r3, [pc, #476]	@ (8003fd8 <HAL_RCC_OscConfig+0x474>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d118      	bne.n	8003e38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e06:	4b74      	ldr	r3, [pc, #464]	@ (8003fd8 <HAL_RCC_OscConfig+0x474>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a73      	ldr	r2, [pc, #460]	@ (8003fd8 <HAL_RCC_OscConfig+0x474>)
 8003e0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e12:	f7ff fabb 	bl	800338c <HAL_GetTick>
 8003e16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e18:	e008      	b.n	8003e2c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e1a:	f7ff fab7 	bl	800338c <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e10c      	b.n	8004046 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2c:	4b6a      	ldr	r3, [pc, #424]	@ (8003fd8 <HAL_RCC_OscConfig+0x474>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0f0      	beq.n	8003e1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d106      	bne.n	8003e4e <HAL_RCC_OscConfig+0x2ea>
 8003e40:	4b64      	ldr	r3, [pc, #400]	@ (8003fd4 <HAL_RCC_OscConfig+0x470>)
 8003e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e44:	4a63      	ldr	r2, [pc, #396]	@ (8003fd4 <HAL_RCC_OscConfig+0x470>)
 8003e46:	f043 0301 	orr.w	r3, r3, #1
 8003e4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e4c:	e01c      	b.n	8003e88 <HAL_RCC_OscConfig+0x324>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	2b05      	cmp	r3, #5
 8003e54:	d10c      	bne.n	8003e70 <HAL_RCC_OscConfig+0x30c>
 8003e56:	4b5f      	ldr	r3, [pc, #380]	@ (8003fd4 <HAL_RCC_OscConfig+0x470>)
 8003e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e5a:	4a5e      	ldr	r2, [pc, #376]	@ (8003fd4 <HAL_RCC_OscConfig+0x470>)
 8003e5c:	f043 0304 	orr.w	r3, r3, #4
 8003e60:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e62:	4b5c      	ldr	r3, [pc, #368]	@ (8003fd4 <HAL_RCC_OscConfig+0x470>)
 8003e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e66:	4a5b      	ldr	r2, [pc, #364]	@ (8003fd4 <HAL_RCC_OscConfig+0x470>)
 8003e68:	f043 0301 	orr.w	r3, r3, #1
 8003e6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e6e:	e00b      	b.n	8003e88 <HAL_RCC_OscConfig+0x324>
 8003e70:	4b58      	ldr	r3, [pc, #352]	@ (8003fd4 <HAL_RCC_OscConfig+0x470>)
 8003e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e74:	4a57      	ldr	r2, [pc, #348]	@ (8003fd4 <HAL_RCC_OscConfig+0x470>)
 8003e76:	f023 0301 	bic.w	r3, r3, #1
 8003e7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e7c:	4b55      	ldr	r3, [pc, #340]	@ (8003fd4 <HAL_RCC_OscConfig+0x470>)
 8003e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e80:	4a54      	ldr	r2, [pc, #336]	@ (8003fd4 <HAL_RCC_OscConfig+0x470>)
 8003e82:	f023 0304 	bic.w	r3, r3, #4
 8003e86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d015      	beq.n	8003ebc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e90:	f7ff fa7c 	bl	800338c <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e96:	e00a      	b.n	8003eae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e98:	f7ff fa78 	bl	800338c <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e0cb      	b.n	8004046 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eae:	4b49      	ldr	r3, [pc, #292]	@ (8003fd4 <HAL_RCC_OscConfig+0x470>)
 8003eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0ee      	beq.n	8003e98 <HAL_RCC_OscConfig+0x334>
 8003eba:	e014      	b.n	8003ee6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ebc:	f7ff fa66 	bl	800338c <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ec2:	e00a      	b.n	8003eda <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec4:	f7ff fa62 	bl	800338c <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e0b5      	b.n	8004046 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eda:	4b3e      	ldr	r3, [pc, #248]	@ (8003fd4 <HAL_RCC_OscConfig+0x470>)
 8003edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1ee      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ee6:	7dfb      	ldrb	r3, [r7, #23]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d105      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eec:	4b39      	ldr	r3, [pc, #228]	@ (8003fd4 <HAL_RCC_OscConfig+0x470>)
 8003eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef0:	4a38      	ldr	r2, [pc, #224]	@ (8003fd4 <HAL_RCC_OscConfig+0x470>)
 8003ef2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ef6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 80a1 	beq.w	8004044 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f02:	4b34      	ldr	r3, [pc, #208]	@ (8003fd4 <HAL_RCC_OscConfig+0x470>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 030c 	and.w	r3, r3, #12
 8003f0a:	2b08      	cmp	r3, #8
 8003f0c:	d05c      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d141      	bne.n	8003f9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f16:	4b31      	ldr	r3, [pc, #196]	@ (8003fdc <HAL_RCC_OscConfig+0x478>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f1c:	f7ff fa36 	bl	800338c <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f24:	f7ff fa32 	bl	800338c <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e087      	b.n	8004046 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f36:	4b27      	ldr	r3, [pc, #156]	@ (8003fd4 <HAL_RCC_OscConfig+0x470>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1f0      	bne.n	8003f24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69da      	ldr	r2, [r3, #28]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f50:	019b      	lsls	r3, r3, #6
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f58:	085b      	lsrs	r3, r3, #1
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	041b      	lsls	r3, r3, #16
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f64:	061b      	lsls	r3, r3, #24
 8003f66:	491b      	ldr	r1, [pc, #108]	@ (8003fd4 <HAL_RCC_OscConfig+0x470>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8003fdc <HAL_RCC_OscConfig+0x478>)
 8003f6e:	2201      	movs	r2, #1
 8003f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f72:	f7ff fa0b 	bl	800338c <HAL_GetTick>
 8003f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f78:	e008      	b.n	8003f8c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f7a:	f7ff fa07 	bl	800338c <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e05c      	b.n	8004046 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f8c:	4b11      	ldr	r3, [pc, #68]	@ (8003fd4 <HAL_RCC_OscConfig+0x470>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d0f0      	beq.n	8003f7a <HAL_RCC_OscConfig+0x416>
 8003f98:	e054      	b.n	8004044 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f9a:	4b10      	ldr	r3, [pc, #64]	@ (8003fdc <HAL_RCC_OscConfig+0x478>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa0:	f7ff f9f4 	bl	800338c <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa8:	f7ff f9f0 	bl	800338c <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e045      	b.n	8004046 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fba:	4b06      	ldr	r3, [pc, #24]	@ (8003fd4 <HAL_RCC_OscConfig+0x470>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1f0      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x444>
 8003fc6:	e03d      	b.n	8004044 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d107      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e038      	b.n	8004046 <HAL_RCC_OscConfig+0x4e2>
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	40007000 	.word	0x40007000
 8003fdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8004050 <HAL_RCC_OscConfig+0x4ec>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d028      	beq.n	8004040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d121      	bne.n	8004040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004006:	429a      	cmp	r2, r3
 8004008:	d11a      	bne.n	8004040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004010:	4013      	ands	r3, r2
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004016:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004018:	4293      	cmp	r3, r2
 800401a:	d111      	bne.n	8004040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004026:	085b      	lsrs	r3, r3, #1
 8004028:	3b01      	subs	r3, #1
 800402a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800402c:	429a      	cmp	r2, r3
 800402e:	d107      	bne.n	8004040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800403a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800403c:	429a      	cmp	r2, r3
 800403e:	d001      	beq.n	8004044 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e000      	b.n	8004046 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40023800 	.word	0x40023800

08004054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e0cc      	b.n	8004202 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004068:	4b68      	ldr	r3, [pc, #416]	@ (800420c <HAL_RCC_ClockConfig+0x1b8>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	429a      	cmp	r2, r3
 8004074:	d90c      	bls.n	8004090 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004076:	4b65      	ldr	r3, [pc, #404]	@ (800420c <HAL_RCC_ClockConfig+0x1b8>)
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	b2d2      	uxtb	r2, r2
 800407c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800407e:	4b63      	ldr	r3, [pc, #396]	@ (800420c <HAL_RCC_ClockConfig+0x1b8>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	429a      	cmp	r2, r3
 800408a:	d001      	beq.n	8004090 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e0b8      	b.n	8004202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d020      	beq.n	80040de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d005      	beq.n	80040b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040a8:	4b59      	ldr	r3, [pc, #356]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	4a58      	ldr	r2, [pc, #352]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80040ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80040b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0308 	and.w	r3, r3, #8
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040c0:	4b53      	ldr	r3, [pc, #332]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	4a52      	ldr	r2, [pc, #328]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80040c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80040ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040cc:	4b50      	ldr	r3, [pc, #320]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	494d      	ldr	r1, [pc, #308]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d044      	beq.n	8004174 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d107      	bne.n	8004102 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040f2:	4b47      	ldr	r3, [pc, #284]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d119      	bne.n	8004132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e07f      	b.n	8004202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2b02      	cmp	r3, #2
 8004108:	d003      	beq.n	8004112 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800410e:	2b03      	cmp	r3, #3
 8004110:	d107      	bne.n	8004122 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004112:	4b3f      	ldr	r3, [pc, #252]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d109      	bne.n	8004132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e06f      	b.n	8004202 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004122:	4b3b      	ldr	r3, [pc, #236]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e067      	b.n	8004202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004132:	4b37      	ldr	r3, [pc, #220]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f023 0203 	bic.w	r2, r3, #3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	4934      	ldr	r1, [pc, #208]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 8004140:	4313      	orrs	r3, r2
 8004142:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004144:	f7ff f922 	bl	800338c <HAL_GetTick>
 8004148:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800414a:	e00a      	b.n	8004162 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800414c:	f7ff f91e 	bl	800338c <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	f241 3288 	movw	r2, #5000	@ 0x1388
 800415a:	4293      	cmp	r3, r2
 800415c:	d901      	bls.n	8004162 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e04f      	b.n	8004202 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004162:	4b2b      	ldr	r3, [pc, #172]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 020c 	and.w	r2, r3, #12
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	429a      	cmp	r2, r3
 8004172:	d1eb      	bne.n	800414c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004174:	4b25      	ldr	r3, [pc, #148]	@ (800420c <HAL_RCC_ClockConfig+0x1b8>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0307 	and.w	r3, r3, #7
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	429a      	cmp	r2, r3
 8004180:	d20c      	bcs.n	800419c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004182:	4b22      	ldr	r3, [pc, #136]	@ (800420c <HAL_RCC_ClockConfig+0x1b8>)
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800418a:	4b20      	ldr	r3, [pc, #128]	@ (800420c <HAL_RCC_ClockConfig+0x1b8>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	429a      	cmp	r2, r3
 8004196:	d001      	beq.n	800419c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e032      	b.n	8004202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0304 	and.w	r3, r3, #4
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d008      	beq.n	80041ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041a8:	4b19      	ldr	r3, [pc, #100]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	4916      	ldr	r1, [pc, #88]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0308 	and.w	r3, r3, #8
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d009      	beq.n	80041da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041c6:	4b12      	ldr	r3, [pc, #72]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	490e      	ldr	r1, [pc, #56]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041da:	f000 f821 	bl	8004220 <HAL_RCC_GetSysClockFreq>
 80041de:	4602      	mov	r2, r0
 80041e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	091b      	lsrs	r3, r3, #4
 80041e6:	f003 030f 	and.w	r3, r3, #15
 80041ea:	490a      	ldr	r1, [pc, #40]	@ (8004214 <HAL_RCC_ClockConfig+0x1c0>)
 80041ec:	5ccb      	ldrb	r3, [r1, r3]
 80041ee:	fa22 f303 	lsr.w	r3, r2, r3
 80041f2:	4a09      	ldr	r2, [pc, #36]	@ (8004218 <HAL_RCC_ClockConfig+0x1c4>)
 80041f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80041f6:	4b09      	ldr	r3, [pc, #36]	@ (800421c <HAL_RCC_ClockConfig+0x1c8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff f882 	bl	8003304 <HAL_InitTick>

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	40023c00 	.word	0x40023c00
 8004210:	40023800 	.word	0x40023800
 8004214:	08006d5c 	.word	0x08006d5c
 8004218:	20000028 	.word	0x20000028
 800421c:	2000002c 	.word	0x2000002c

08004220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004224:	b094      	sub	sp, #80	@ 0x50
 8004226:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004228:	2300      	movs	r3, #0
 800422a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004230:	2300      	movs	r3, #0
 8004232:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004234:	2300      	movs	r3, #0
 8004236:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004238:	4b79      	ldr	r3, [pc, #484]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x200>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f003 030c 	and.w	r3, r3, #12
 8004240:	2b08      	cmp	r3, #8
 8004242:	d00d      	beq.n	8004260 <HAL_RCC_GetSysClockFreq+0x40>
 8004244:	2b08      	cmp	r3, #8
 8004246:	f200 80e1 	bhi.w	800440c <HAL_RCC_GetSysClockFreq+0x1ec>
 800424a:	2b00      	cmp	r3, #0
 800424c:	d002      	beq.n	8004254 <HAL_RCC_GetSysClockFreq+0x34>
 800424e:	2b04      	cmp	r3, #4
 8004250:	d003      	beq.n	800425a <HAL_RCC_GetSysClockFreq+0x3a>
 8004252:	e0db      	b.n	800440c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004254:	4b73      	ldr	r3, [pc, #460]	@ (8004424 <HAL_RCC_GetSysClockFreq+0x204>)
 8004256:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004258:	e0db      	b.n	8004412 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800425a:	4b73      	ldr	r3, [pc, #460]	@ (8004428 <HAL_RCC_GetSysClockFreq+0x208>)
 800425c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800425e:	e0d8      	b.n	8004412 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004260:	4b6f      	ldr	r3, [pc, #444]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x200>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004268:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800426a:	4b6d      	ldr	r3, [pc, #436]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x200>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d063      	beq.n	800433e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004276:	4b6a      	ldr	r3, [pc, #424]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x200>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	099b      	lsrs	r3, r3, #6
 800427c:	2200      	movs	r2, #0
 800427e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004280:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004288:	633b      	str	r3, [r7, #48]	@ 0x30
 800428a:	2300      	movs	r3, #0
 800428c:	637b      	str	r3, [r7, #52]	@ 0x34
 800428e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004292:	4622      	mov	r2, r4
 8004294:	462b      	mov	r3, r5
 8004296:	f04f 0000 	mov.w	r0, #0
 800429a:	f04f 0100 	mov.w	r1, #0
 800429e:	0159      	lsls	r1, r3, #5
 80042a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042a4:	0150      	lsls	r0, r2, #5
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	4621      	mov	r1, r4
 80042ac:	1a51      	subs	r1, r2, r1
 80042ae:	6139      	str	r1, [r7, #16]
 80042b0:	4629      	mov	r1, r5
 80042b2:	eb63 0301 	sbc.w	r3, r3, r1
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	f04f 0200 	mov.w	r2, #0
 80042bc:	f04f 0300 	mov.w	r3, #0
 80042c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042c4:	4659      	mov	r1, fp
 80042c6:	018b      	lsls	r3, r1, #6
 80042c8:	4651      	mov	r1, sl
 80042ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042ce:	4651      	mov	r1, sl
 80042d0:	018a      	lsls	r2, r1, #6
 80042d2:	4651      	mov	r1, sl
 80042d4:	ebb2 0801 	subs.w	r8, r2, r1
 80042d8:	4659      	mov	r1, fp
 80042da:	eb63 0901 	sbc.w	r9, r3, r1
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	f04f 0300 	mov.w	r3, #0
 80042e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042f2:	4690      	mov	r8, r2
 80042f4:	4699      	mov	r9, r3
 80042f6:	4623      	mov	r3, r4
 80042f8:	eb18 0303 	adds.w	r3, r8, r3
 80042fc:	60bb      	str	r3, [r7, #8]
 80042fe:	462b      	mov	r3, r5
 8004300:	eb49 0303 	adc.w	r3, r9, r3
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	f04f 0200 	mov.w	r2, #0
 800430a:	f04f 0300 	mov.w	r3, #0
 800430e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004312:	4629      	mov	r1, r5
 8004314:	024b      	lsls	r3, r1, #9
 8004316:	4621      	mov	r1, r4
 8004318:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800431c:	4621      	mov	r1, r4
 800431e:	024a      	lsls	r2, r1, #9
 8004320:	4610      	mov	r0, r2
 8004322:	4619      	mov	r1, r3
 8004324:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004326:	2200      	movs	r2, #0
 8004328:	62bb      	str	r3, [r7, #40]	@ 0x28
 800432a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800432c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004330:	f7fb ffae 	bl	8000290 <__aeabi_uldivmod>
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	4613      	mov	r3, r2
 800433a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800433c:	e058      	b.n	80043f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800433e:	4b38      	ldr	r3, [pc, #224]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x200>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	099b      	lsrs	r3, r3, #6
 8004344:	2200      	movs	r2, #0
 8004346:	4618      	mov	r0, r3
 8004348:	4611      	mov	r1, r2
 800434a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800434e:	623b      	str	r3, [r7, #32]
 8004350:	2300      	movs	r3, #0
 8004352:	627b      	str	r3, [r7, #36]	@ 0x24
 8004354:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004358:	4642      	mov	r2, r8
 800435a:	464b      	mov	r3, r9
 800435c:	f04f 0000 	mov.w	r0, #0
 8004360:	f04f 0100 	mov.w	r1, #0
 8004364:	0159      	lsls	r1, r3, #5
 8004366:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800436a:	0150      	lsls	r0, r2, #5
 800436c:	4602      	mov	r2, r0
 800436e:	460b      	mov	r3, r1
 8004370:	4641      	mov	r1, r8
 8004372:	ebb2 0a01 	subs.w	sl, r2, r1
 8004376:	4649      	mov	r1, r9
 8004378:	eb63 0b01 	sbc.w	fp, r3, r1
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	f04f 0300 	mov.w	r3, #0
 8004384:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004388:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800438c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004390:	ebb2 040a 	subs.w	r4, r2, sl
 8004394:	eb63 050b 	sbc.w	r5, r3, fp
 8004398:	f04f 0200 	mov.w	r2, #0
 800439c:	f04f 0300 	mov.w	r3, #0
 80043a0:	00eb      	lsls	r3, r5, #3
 80043a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043a6:	00e2      	lsls	r2, r4, #3
 80043a8:	4614      	mov	r4, r2
 80043aa:	461d      	mov	r5, r3
 80043ac:	4643      	mov	r3, r8
 80043ae:	18e3      	adds	r3, r4, r3
 80043b0:	603b      	str	r3, [r7, #0]
 80043b2:	464b      	mov	r3, r9
 80043b4:	eb45 0303 	adc.w	r3, r5, r3
 80043b8:	607b      	str	r3, [r7, #4]
 80043ba:	f04f 0200 	mov.w	r2, #0
 80043be:	f04f 0300 	mov.w	r3, #0
 80043c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043c6:	4629      	mov	r1, r5
 80043c8:	028b      	lsls	r3, r1, #10
 80043ca:	4621      	mov	r1, r4
 80043cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043d0:	4621      	mov	r1, r4
 80043d2:	028a      	lsls	r2, r1, #10
 80043d4:	4610      	mov	r0, r2
 80043d6:	4619      	mov	r1, r3
 80043d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043da:	2200      	movs	r2, #0
 80043dc:	61bb      	str	r3, [r7, #24]
 80043de:	61fa      	str	r2, [r7, #28]
 80043e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043e4:	f7fb ff54 	bl	8000290 <__aeabi_uldivmod>
 80043e8:	4602      	mov	r2, r0
 80043ea:	460b      	mov	r3, r1
 80043ec:	4613      	mov	r3, r2
 80043ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80043f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x200>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	0c1b      	lsrs	r3, r3, #16
 80043f6:	f003 0303 	and.w	r3, r3, #3
 80043fa:	3301      	adds	r3, #1
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004400:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004402:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004404:	fbb2 f3f3 	udiv	r3, r2, r3
 8004408:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800440a:	e002      	b.n	8004412 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800440c:	4b05      	ldr	r3, [pc, #20]	@ (8004424 <HAL_RCC_GetSysClockFreq+0x204>)
 800440e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004410:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004412:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004414:	4618      	mov	r0, r3
 8004416:	3750      	adds	r7, #80	@ 0x50
 8004418:	46bd      	mov	sp, r7
 800441a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800441e:	bf00      	nop
 8004420:	40023800 	.word	0x40023800
 8004424:	00f42400 	.word	0x00f42400
 8004428:	007a1200 	.word	0x007a1200

0800442c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004430:	4b03      	ldr	r3, [pc, #12]	@ (8004440 <HAL_RCC_GetHCLKFreq+0x14>)
 8004432:	681b      	ldr	r3, [r3, #0]
}
 8004434:	4618      	mov	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	20000028 	.word	0x20000028

08004444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004448:	f7ff fff0 	bl	800442c <HAL_RCC_GetHCLKFreq>
 800444c:	4602      	mov	r2, r0
 800444e:	4b05      	ldr	r3, [pc, #20]	@ (8004464 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	0a9b      	lsrs	r3, r3, #10
 8004454:	f003 0307 	and.w	r3, r3, #7
 8004458:	4903      	ldr	r1, [pc, #12]	@ (8004468 <HAL_RCC_GetPCLK1Freq+0x24>)
 800445a:	5ccb      	ldrb	r3, [r1, r3]
 800445c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004460:	4618      	mov	r0, r3
 8004462:	bd80      	pop	{r7, pc}
 8004464:	40023800 	.word	0x40023800
 8004468:	08006d6c 	.word	0x08006d6c

0800446c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004470:	f7ff ffdc 	bl	800442c <HAL_RCC_GetHCLKFreq>
 8004474:	4602      	mov	r2, r0
 8004476:	4b05      	ldr	r3, [pc, #20]	@ (800448c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	0b5b      	lsrs	r3, r3, #13
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	4903      	ldr	r1, [pc, #12]	@ (8004490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004482:	5ccb      	ldrb	r3, [r1, r3]
 8004484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004488:	4618      	mov	r0, r3
 800448a:	bd80      	pop	{r7, pc}
 800448c:	40023800 	.word	0x40023800
 8004490:	08006d6c 	.word	0x08006d6c

08004494 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e042      	b.n	800452c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d106      	bne.n	80044c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7fe fd36 	bl	8002f2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2224      	movs	r2, #36	@ 0x24
 80044c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68da      	ldr	r2, [r3, #12]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 fdbd 	bl	8005058 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	691a      	ldr	r2, [r3, #16]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695a      	ldr	r2, [r3, #20]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68da      	ldr	r2, [r3, #12]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800450c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2220      	movs	r2, #32
 8004518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2220      	movs	r2, #32
 8004520:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b08a      	sub	sp, #40	@ 0x28
 8004538:	af02      	add	r7, sp, #8
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	603b      	str	r3, [r7, #0]
 8004540:	4613      	mov	r3, r2
 8004542:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b20      	cmp	r3, #32
 8004552:	d175      	bne.n	8004640 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d002      	beq.n	8004560 <HAL_UART_Transmit+0x2c>
 800455a:	88fb      	ldrh	r3, [r7, #6]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e06e      	b.n	8004642 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2221      	movs	r2, #33	@ 0x21
 800456e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004572:	f7fe ff0b 	bl	800338c <HAL_GetTick>
 8004576:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	88fa      	ldrh	r2, [r7, #6]
 800457c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	88fa      	ldrh	r2, [r7, #6]
 8004582:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800458c:	d108      	bne.n	80045a0 <HAL_UART_Transmit+0x6c>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d104      	bne.n	80045a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004596:	2300      	movs	r3, #0
 8004598:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	61bb      	str	r3, [r7, #24]
 800459e:	e003      	b.n	80045a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045a4:	2300      	movs	r3, #0
 80045a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045a8:	e02e      	b.n	8004608 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2200      	movs	r2, #0
 80045b2:	2180      	movs	r1, #128	@ 0x80
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 fb1f 	bl	8004bf8 <UART_WaitOnFlagUntilTimeout>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d005      	beq.n	80045cc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e03a      	b.n	8004642 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10b      	bne.n	80045ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	881b      	ldrh	r3, [r3, #0]
 80045d6:	461a      	mov	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	3302      	adds	r3, #2
 80045e6:	61bb      	str	r3, [r7, #24]
 80045e8:	e007      	b.n	80045fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	781a      	ldrb	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	3301      	adds	r3, #1
 80045f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045fe:	b29b      	uxth	r3, r3
 8004600:	3b01      	subs	r3, #1
 8004602:	b29a      	uxth	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800460c:	b29b      	uxth	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1cb      	bne.n	80045aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2200      	movs	r2, #0
 800461a:	2140      	movs	r1, #64	@ 0x40
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 faeb 	bl	8004bf8 <UART_WaitOnFlagUntilTimeout>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d005      	beq.n	8004634 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2220      	movs	r2, #32
 800462c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e006      	b.n	8004642 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800463c:	2300      	movs	r3, #0
 800463e:	e000      	b.n	8004642 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004640:	2302      	movs	r3, #2
  }
}
 8004642:	4618      	mov	r0, r3
 8004644:	3720      	adds	r7, #32
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b084      	sub	sp, #16
 800464e:	af00      	add	r7, sp, #0
 8004650:	60f8      	str	r0, [r7, #12]
 8004652:	60b9      	str	r1, [r7, #8]
 8004654:	4613      	mov	r3, r2
 8004656:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b20      	cmp	r3, #32
 8004662:	d112      	bne.n	800468a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d002      	beq.n	8004670 <HAL_UART_Receive_IT+0x26>
 800466a:	88fb      	ldrh	r3, [r7, #6]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e00b      	b.n	800468c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800467a:	88fb      	ldrh	r3, [r7, #6]
 800467c:	461a      	mov	r2, r3
 800467e:	68b9      	ldr	r1, [r7, #8]
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f000 fb12 	bl	8004caa <UART_Start_Receive_IT>
 8004686:	4603      	mov	r3, r0
 8004688:	e000      	b.n	800468c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800468a:	2302      	movs	r3, #2
  }
}
 800468c:	4618      	mov	r0, r3
 800468e:	3710      	adds	r7, #16
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b0ba      	sub	sp, #232	@ 0xe8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046ca:	f003 030f 	and.w	r3, r3, #15
 80046ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80046d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10f      	bne.n	80046fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046de:	f003 0320 	and.w	r3, r3, #32
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d009      	beq.n	80046fa <HAL_UART_IRQHandler+0x66>
 80046e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046ea:	f003 0320 	and.w	r3, r3, #32
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 fbf2 	bl	8004edc <UART_Receive_IT>
      return;
 80046f8:	e25b      	b.n	8004bb2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80046fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f000 80de 	beq.w	80048c0 <HAL_UART_IRQHandler+0x22c>
 8004704:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	d106      	bne.n	800471e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004714:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 80d1 	beq.w	80048c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800471e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00b      	beq.n	8004742 <HAL_UART_IRQHandler+0xae>
 800472a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800472e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004732:	2b00      	cmp	r3, #0
 8004734:	d005      	beq.n	8004742 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800473a:	f043 0201 	orr.w	r2, r3, #1
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004746:	f003 0304 	and.w	r3, r3, #4
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00b      	beq.n	8004766 <HAL_UART_IRQHandler+0xd2>
 800474e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d005      	beq.n	8004766 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800475e:	f043 0202 	orr.w	r2, r3, #2
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00b      	beq.n	800478a <HAL_UART_IRQHandler+0xf6>
 8004772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b00      	cmp	r3, #0
 800477c:	d005      	beq.n	800478a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004782:	f043 0204 	orr.w	r2, r3, #4
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800478a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800478e:	f003 0308 	and.w	r3, r3, #8
 8004792:	2b00      	cmp	r3, #0
 8004794:	d011      	beq.n	80047ba <HAL_UART_IRQHandler+0x126>
 8004796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800479a:	f003 0320 	and.w	r3, r3, #32
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d105      	bne.n	80047ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80047a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d005      	beq.n	80047ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047b2:	f043 0208 	orr.w	r2, r3, #8
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f000 81f2 	beq.w	8004ba8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047c8:	f003 0320 	and.w	r3, r3, #32
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d008      	beq.n	80047e2 <HAL_UART_IRQHandler+0x14e>
 80047d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047d4:	f003 0320 	and.w	r3, r3, #32
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d002      	beq.n	80047e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 fb7d 	bl	8004edc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ec:	2b40      	cmp	r3, #64	@ 0x40
 80047ee:	bf0c      	ite	eq
 80047f0:	2301      	moveq	r3, #1
 80047f2:	2300      	movne	r3, #0
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047fe:	f003 0308 	and.w	r3, r3, #8
 8004802:	2b00      	cmp	r3, #0
 8004804:	d103      	bne.n	800480e <HAL_UART_IRQHandler+0x17a>
 8004806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800480a:	2b00      	cmp	r3, #0
 800480c:	d04f      	beq.n	80048ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fa85 	bl	8004d1e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800481e:	2b40      	cmp	r3, #64	@ 0x40
 8004820:	d141      	bne.n	80048a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	3314      	adds	r3, #20
 8004828:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004830:	e853 3f00 	ldrex	r3, [r3]
 8004834:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004838:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800483c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004840:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	3314      	adds	r3, #20
 800484a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800484e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004852:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004856:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800485a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800485e:	e841 2300 	strex	r3, r2, [r1]
 8004862:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004866:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1d9      	bne.n	8004822 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004872:	2b00      	cmp	r3, #0
 8004874:	d013      	beq.n	800489e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800487a:	4a7e      	ldr	r2, [pc, #504]	@ (8004a74 <HAL_UART_IRQHandler+0x3e0>)
 800487c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004882:	4618      	mov	r0, r3
 8004884:	f7fe ffad 	bl	80037e2 <HAL_DMA_Abort_IT>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d016      	beq.n	80048bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004898:	4610      	mov	r0, r2
 800489a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800489c:	e00e      	b.n	80048bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f994 	bl	8004bcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a4:	e00a      	b.n	80048bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f990 	bl	8004bcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ac:	e006      	b.n	80048bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f98c 	bl	8004bcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80048ba:	e175      	b.n	8004ba8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048bc:	bf00      	nop
    return;
 80048be:	e173      	b.n	8004ba8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	f040 814f 	bne.w	8004b68 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80048ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048ce:	f003 0310 	and.w	r3, r3, #16
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 8148 	beq.w	8004b68 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80048d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048dc:	f003 0310 	and.w	r3, r3, #16
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 8141 	beq.w	8004b68 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048e6:	2300      	movs	r3, #0
 80048e8:	60bb      	str	r3, [r7, #8]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	60bb      	str	r3, [r7, #8]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	60bb      	str	r3, [r7, #8]
 80048fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004906:	2b40      	cmp	r3, #64	@ 0x40
 8004908:	f040 80b6 	bne.w	8004a78 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004918:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 8145 	beq.w	8004bac <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004926:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800492a:	429a      	cmp	r2, r3
 800492c:	f080 813e 	bcs.w	8004bac <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004936:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004942:	f000 8088 	beq.w	8004a56 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	330c      	adds	r3, #12
 800494c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004950:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004954:	e853 3f00 	ldrex	r3, [r3]
 8004958:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800495c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004960:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004964:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	330c      	adds	r3, #12
 800496e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004972:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004976:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800497e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004982:	e841 2300 	strex	r3, r2, [r1]
 8004986:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800498a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1d9      	bne.n	8004946 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	3314      	adds	r3, #20
 8004998:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800499c:	e853 3f00 	ldrex	r3, [r3]
 80049a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80049a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049a4:	f023 0301 	bic.w	r3, r3, #1
 80049a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	3314      	adds	r3, #20
 80049b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80049b6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80049ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80049be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80049c2:	e841 2300 	strex	r3, r2, [r1]
 80049c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80049c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1e1      	bne.n	8004992 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	3314      	adds	r3, #20
 80049d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049d8:	e853 3f00 	ldrex	r3, [r3]
 80049dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80049de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3314      	adds	r3, #20
 80049ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80049f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80049f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80049f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80049fa:	e841 2300 	strex	r3, r2, [r1]
 80049fe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004a00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1e3      	bne.n	80049ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	330c      	adds	r3, #12
 8004a1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a1e:	e853 3f00 	ldrex	r3, [r3]
 8004a22:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004a24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a26:	f023 0310 	bic.w	r3, r3, #16
 8004a2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	330c      	adds	r3, #12
 8004a34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004a38:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004a3a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a3e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a40:	e841 2300 	strex	r3, r2, [r1]
 8004a44:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004a46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1e3      	bne.n	8004a14 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7fe fe56 	bl	8003702 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2202      	movs	r2, #2
 8004a5a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f8b7 	bl	8004be0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a72:	e09b      	b.n	8004bac <HAL_UART_IRQHandler+0x518>
 8004a74:	08004de5 	.word	0x08004de5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f000 808e 	beq.w	8004bb0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004a94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 8089 	beq.w	8004bb0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	330c      	adds	r3, #12
 8004aa4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aa8:	e853 3f00 	ldrex	r3, [r3]
 8004aac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ab0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ab4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	330c      	adds	r3, #12
 8004abe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004ac2:	647a      	str	r2, [r7, #68]	@ 0x44
 8004ac4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ac8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004aca:	e841 2300 	strex	r3, r2, [r1]
 8004ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1e3      	bne.n	8004a9e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	3314      	adds	r3, #20
 8004adc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae0:	e853 3f00 	ldrex	r3, [r3]
 8004ae4:	623b      	str	r3, [r7, #32]
   return(result);
 8004ae6:	6a3b      	ldr	r3, [r7, #32]
 8004ae8:	f023 0301 	bic.w	r3, r3, #1
 8004aec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	3314      	adds	r3, #20
 8004af6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004afa:	633a      	str	r2, [r7, #48]	@ 0x30
 8004afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b02:	e841 2300 	strex	r3, r2, [r1]
 8004b06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1e3      	bne.n	8004ad6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2220      	movs	r2, #32
 8004b12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	330c      	adds	r3, #12
 8004b22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	e853 3f00 	ldrex	r3, [r3]
 8004b2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f023 0310 	bic.w	r3, r3, #16
 8004b32:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	330c      	adds	r3, #12
 8004b3c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004b40:	61fa      	str	r2, [r7, #28]
 8004b42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b44:	69b9      	ldr	r1, [r7, #24]
 8004b46:	69fa      	ldr	r2, [r7, #28]
 8004b48:	e841 2300 	strex	r3, r2, [r1]
 8004b4c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1e3      	bne.n	8004b1c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2202      	movs	r2, #2
 8004b58:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b5a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b5e:	4619      	mov	r1, r3
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f83d 	bl	8004be0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b66:	e023      	b.n	8004bb0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d009      	beq.n	8004b88 <HAL_UART_IRQHandler+0x4f4>
 8004b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d003      	beq.n	8004b88 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f943 	bl	8004e0c <UART_Transmit_IT>
    return;
 8004b86:	e014      	b.n	8004bb2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00e      	beq.n	8004bb2 <HAL_UART_IRQHandler+0x51e>
 8004b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d008      	beq.n	8004bb2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 f983 	bl	8004eac <UART_EndTransmit_IT>
    return;
 8004ba6:	e004      	b.n	8004bb2 <HAL_UART_IRQHandler+0x51e>
    return;
 8004ba8:	bf00      	nop
 8004baa:	e002      	b.n	8004bb2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004bac:	bf00      	nop
 8004bae:	e000      	b.n	8004bb2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004bb0:	bf00      	nop
  }
}
 8004bb2:	37e8      	adds	r7, #232	@ 0xe8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	460b      	mov	r3, r1
 8004bea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	603b      	str	r3, [r7, #0]
 8004c04:	4613      	mov	r3, r2
 8004c06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c08:	e03b      	b.n	8004c82 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c10:	d037      	beq.n	8004c82 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c12:	f7fe fbbb 	bl	800338c <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	6a3a      	ldr	r2, [r7, #32]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d302      	bcc.n	8004c28 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e03a      	b.n	8004ca2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f003 0304 	and.w	r3, r3, #4
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d023      	beq.n	8004c82 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	2b80      	cmp	r3, #128	@ 0x80
 8004c3e:	d020      	beq.n	8004c82 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	2b40      	cmp	r3, #64	@ 0x40
 8004c44:	d01d      	beq.n	8004c82 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0308 	and.w	r3, r3, #8
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	d116      	bne.n	8004c82 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004c54:	2300      	movs	r3, #0
 8004c56:	617b      	str	r3, [r7, #20]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	617b      	str	r3, [r7, #20]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	617b      	str	r3, [r7, #20]
 8004c68:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f000 f857 	bl	8004d1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2208      	movs	r2, #8
 8004c74:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e00f      	b.n	8004ca2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	bf0c      	ite	eq
 8004c92:	2301      	moveq	r3, #1
 8004c94:	2300      	movne	r3, #0
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	461a      	mov	r2, r3
 8004c9a:	79fb      	ldrb	r3, [r7, #7]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d0b4      	beq.n	8004c0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3718      	adds	r7, #24
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b085      	sub	sp, #20
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	60f8      	str	r0, [r7, #12]
 8004cb2:	60b9      	str	r1, [r7, #8]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	88fa      	ldrh	r2, [r7, #6]
 8004cc2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	88fa      	ldrh	r2, [r7, #6]
 8004cc8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2222      	movs	r2, #34	@ 0x22
 8004cd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d007      	beq.n	8004cf0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68da      	ldr	r2, [r3, #12]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cee:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	695a      	ldr	r2, [r3, #20]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 0201 	orr.w	r2, r2, #1
 8004cfe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0220 	orr.w	r2, r2, #32
 8004d0e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b095      	sub	sp, #84	@ 0x54
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	330c      	adds	r3, #12
 8004d2c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d30:	e853 3f00 	ldrex	r3, [r3]
 8004d34:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	330c      	adds	r3, #12
 8004d44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d46:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d4c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d4e:	e841 2300 	strex	r3, r2, [r1]
 8004d52:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1e5      	bne.n	8004d26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	3314      	adds	r3, #20
 8004d60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	e853 3f00 	ldrex	r3, [r3]
 8004d68:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	f023 0301 	bic.w	r3, r3, #1
 8004d70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	3314      	adds	r3, #20
 8004d78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d82:	e841 2300 	strex	r3, r2, [r1]
 8004d86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1e5      	bne.n	8004d5a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d119      	bne.n	8004dca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	330c      	adds	r3, #12
 8004d9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	e853 3f00 	ldrex	r3, [r3]
 8004da4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	f023 0310 	bic.w	r3, r3, #16
 8004dac:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	330c      	adds	r3, #12
 8004db4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004db6:	61ba      	str	r2, [r7, #24]
 8004db8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dba:	6979      	ldr	r1, [r7, #20]
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	e841 2300 	strex	r3, r2, [r1]
 8004dc2:	613b      	str	r3, [r7, #16]
   return(result);
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1e5      	bne.n	8004d96 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2220      	movs	r2, #32
 8004dce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004dd8:	bf00      	nop
 8004dda:	3754      	adds	r7, #84	@ 0x54
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f7ff fee4 	bl	8004bcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e04:	bf00      	nop
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b21      	cmp	r3, #33	@ 0x21
 8004e1e:	d13e      	bne.n	8004e9e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e28:	d114      	bne.n	8004e54 <UART_Transmit_IT+0x48>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d110      	bne.n	8004e54 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	881b      	ldrh	r3, [r3, #0]
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e46:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	1c9a      	adds	r2, r3, #2
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	621a      	str	r2, [r3, #32]
 8004e52:	e008      	b.n	8004e66 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	1c59      	adds	r1, r3, #1
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	6211      	str	r1, [r2, #32]
 8004e5e:	781a      	ldrb	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	4619      	mov	r1, r3
 8004e74:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10f      	bne.n	8004e9a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68da      	ldr	r2, [r3, #12]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e88:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68da      	ldr	r2, [r3, #12]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e98:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	e000      	b.n	8004ea0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e9e:	2302      	movs	r3, #2
  }
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3714      	adds	r7, #20
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ec2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7ff fe73 	bl	8004bb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3708      	adds	r7, #8
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08c      	sub	sp, #48	@ 0x30
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b22      	cmp	r3, #34	@ 0x22
 8004eee:	f040 80ae 	bne.w	800504e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004efa:	d117      	bne.n	8004f2c <UART_Receive_IT+0x50>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d113      	bne.n	8004f2c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f04:	2300      	movs	r3, #0
 8004f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f1e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f24:	1c9a      	adds	r2, r3, #2
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f2a:	e026      	b.n	8004f7a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004f32:	2300      	movs	r3, #0
 8004f34:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f3e:	d007      	beq.n	8004f50 <UART_Receive_IT+0x74>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10a      	bne.n	8004f5e <UART_Receive_IT+0x82>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d106      	bne.n	8004f5e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f5a:	701a      	strb	r2, [r3, #0]
 8004f5c:	e008      	b.n	8004f70 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f6a:	b2da      	uxtb	r2, r3
 8004f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f6e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f74:	1c5a      	adds	r2, r3, #1
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	3b01      	subs	r3, #1
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	4619      	mov	r1, r3
 8004f88:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d15d      	bne.n	800504a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68da      	ldr	r2, [r3, #12]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 0220 	bic.w	r2, r2, #32
 8004f9c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68da      	ldr	r2, [r3, #12]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004fac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	695a      	ldr	r2, [r3, #20]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 0201 	bic.w	r2, r2, #1
 8004fbc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d135      	bne.n	8005040 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	330c      	adds	r3, #12
 8004fe0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	e853 3f00 	ldrex	r3, [r3]
 8004fe8:	613b      	str	r3, [r7, #16]
   return(result);
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f023 0310 	bic.w	r3, r3, #16
 8004ff0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	330c      	adds	r3, #12
 8004ff8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ffa:	623a      	str	r2, [r7, #32]
 8004ffc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffe:	69f9      	ldr	r1, [r7, #28]
 8005000:	6a3a      	ldr	r2, [r7, #32]
 8005002:	e841 2300 	strex	r3, r2, [r1]
 8005006:	61bb      	str	r3, [r7, #24]
   return(result);
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1e5      	bne.n	8004fda <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0310 	and.w	r3, r3, #16
 8005018:	2b10      	cmp	r3, #16
 800501a:	d10a      	bne.n	8005032 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800501c:	2300      	movs	r3, #0
 800501e:	60fb      	str	r3, [r7, #12]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	60fb      	str	r3, [r7, #12]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	60fb      	str	r3, [r7, #12]
 8005030:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005036:	4619      	mov	r1, r3
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f7ff fdd1 	bl	8004be0 <HAL_UARTEx_RxEventCallback>
 800503e:	e002      	b.n	8005046 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f7fb fad1 	bl	80005e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	e002      	b.n	8005050 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800504a:	2300      	movs	r3, #0
 800504c:	e000      	b.n	8005050 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800504e:	2302      	movs	r3, #2
  }
}
 8005050:	4618      	mov	r0, r3
 8005052:	3730      	adds	r7, #48	@ 0x30
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800505c:	b0c0      	sub	sp, #256	@ 0x100
 800505e:	af00      	add	r7, sp, #0
 8005060:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005074:	68d9      	ldr	r1, [r3, #12]
 8005076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	ea40 0301 	orr.w	r3, r0, r1
 8005080:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	431a      	orrs	r2, r3
 8005090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	431a      	orrs	r2, r3
 8005098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	4313      	orrs	r3, r2
 80050a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80050a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80050b0:	f021 010c 	bic.w	r1, r1, #12
 80050b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80050be:	430b      	orrs	r3, r1
 80050c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80050ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050d2:	6999      	ldr	r1, [r3, #24]
 80050d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	ea40 0301 	orr.w	r3, r0, r1
 80050de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	4b8f      	ldr	r3, [pc, #572]	@ (8005324 <UART_SetConfig+0x2cc>)
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d005      	beq.n	80050f8 <UART_SetConfig+0xa0>
 80050ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	4b8d      	ldr	r3, [pc, #564]	@ (8005328 <UART_SetConfig+0x2d0>)
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d104      	bne.n	8005102 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050f8:	f7ff f9b8 	bl	800446c <HAL_RCC_GetPCLK2Freq>
 80050fc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005100:	e003      	b.n	800510a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005102:	f7ff f99f 	bl	8004444 <HAL_RCC_GetPCLK1Freq>
 8005106:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800510a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800510e:	69db      	ldr	r3, [r3, #28]
 8005110:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005114:	f040 810c 	bne.w	8005330 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005118:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800511c:	2200      	movs	r2, #0
 800511e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005122:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005126:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800512a:	4622      	mov	r2, r4
 800512c:	462b      	mov	r3, r5
 800512e:	1891      	adds	r1, r2, r2
 8005130:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005132:	415b      	adcs	r3, r3
 8005134:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005136:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800513a:	4621      	mov	r1, r4
 800513c:	eb12 0801 	adds.w	r8, r2, r1
 8005140:	4629      	mov	r1, r5
 8005142:	eb43 0901 	adc.w	r9, r3, r1
 8005146:	f04f 0200 	mov.w	r2, #0
 800514a:	f04f 0300 	mov.w	r3, #0
 800514e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005152:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005156:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800515a:	4690      	mov	r8, r2
 800515c:	4699      	mov	r9, r3
 800515e:	4623      	mov	r3, r4
 8005160:	eb18 0303 	adds.w	r3, r8, r3
 8005164:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005168:	462b      	mov	r3, r5
 800516a:	eb49 0303 	adc.w	r3, r9, r3
 800516e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800517e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005182:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005186:	460b      	mov	r3, r1
 8005188:	18db      	adds	r3, r3, r3
 800518a:	653b      	str	r3, [r7, #80]	@ 0x50
 800518c:	4613      	mov	r3, r2
 800518e:	eb42 0303 	adc.w	r3, r2, r3
 8005192:	657b      	str	r3, [r7, #84]	@ 0x54
 8005194:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005198:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800519c:	f7fb f878 	bl	8000290 <__aeabi_uldivmod>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	4b61      	ldr	r3, [pc, #388]	@ (800532c <UART_SetConfig+0x2d4>)
 80051a6:	fba3 2302 	umull	r2, r3, r3, r2
 80051aa:	095b      	lsrs	r3, r3, #5
 80051ac:	011c      	lsls	r4, r3, #4
 80051ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051b2:	2200      	movs	r2, #0
 80051b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80051b8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80051bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80051c0:	4642      	mov	r2, r8
 80051c2:	464b      	mov	r3, r9
 80051c4:	1891      	adds	r1, r2, r2
 80051c6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80051c8:	415b      	adcs	r3, r3
 80051ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80051d0:	4641      	mov	r1, r8
 80051d2:	eb12 0a01 	adds.w	sl, r2, r1
 80051d6:	4649      	mov	r1, r9
 80051d8:	eb43 0b01 	adc.w	fp, r3, r1
 80051dc:	f04f 0200 	mov.w	r2, #0
 80051e0:	f04f 0300 	mov.w	r3, #0
 80051e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051f0:	4692      	mov	sl, r2
 80051f2:	469b      	mov	fp, r3
 80051f4:	4643      	mov	r3, r8
 80051f6:	eb1a 0303 	adds.w	r3, sl, r3
 80051fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051fe:	464b      	mov	r3, r9
 8005200:	eb4b 0303 	adc.w	r3, fp, r3
 8005204:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005214:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005218:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800521c:	460b      	mov	r3, r1
 800521e:	18db      	adds	r3, r3, r3
 8005220:	643b      	str	r3, [r7, #64]	@ 0x40
 8005222:	4613      	mov	r3, r2
 8005224:	eb42 0303 	adc.w	r3, r2, r3
 8005228:	647b      	str	r3, [r7, #68]	@ 0x44
 800522a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800522e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005232:	f7fb f82d 	bl	8000290 <__aeabi_uldivmod>
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	4611      	mov	r1, r2
 800523c:	4b3b      	ldr	r3, [pc, #236]	@ (800532c <UART_SetConfig+0x2d4>)
 800523e:	fba3 2301 	umull	r2, r3, r3, r1
 8005242:	095b      	lsrs	r3, r3, #5
 8005244:	2264      	movs	r2, #100	@ 0x64
 8005246:	fb02 f303 	mul.w	r3, r2, r3
 800524a:	1acb      	subs	r3, r1, r3
 800524c:	00db      	lsls	r3, r3, #3
 800524e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005252:	4b36      	ldr	r3, [pc, #216]	@ (800532c <UART_SetConfig+0x2d4>)
 8005254:	fba3 2302 	umull	r2, r3, r3, r2
 8005258:	095b      	lsrs	r3, r3, #5
 800525a:	005b      	lsls	r3, r3, #1
 800525c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005260:	441c      	add	r4, r3
 8005262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005266:	2200      	movs	r2, #0
 8005268:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800526c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005270:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005274:	4642      	mov	r2, r8
 8005276:	464b      	mov	r3, r9
 8005278:	1891      	adds	r1, r2, r2
 800527a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800527c:	415b      	adcs	r3, r3
 800527e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005280:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005284:	4641      	mov	r1, r8
 8005286:	1851      	adds	r1, r2, r1
 8005288:	6339      	str	r1, [r7, #48]	@ 0x30
 800528a:	4649      	mov	r1, r9
 800528c:	414b      	adcs	r3, r1
 800528e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005290:	f04f 0200 	mov.w	r2, #0
 8005294:	f04f 0300 	mov.w	r3, #0
 8005298:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800529c:	4659      	mov	r1, fp
 800529e:	00cb      	lsls	r3, r1, #3
 80052a0:	4651      	mov	r1, sl
 80052a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052a6:	4651      	mov	r1, sl
 80052a8:	00ca      	lsls	r2, r1, #3
 80052aa:	4610      	mov	r0, r2
 80052ac:	4619      	mov	r1, r3
 80052ae:	4603      	mov	r3, r0
 80052b0:	4642      	mov	r2, r8
 80052b2:	189b      	adds	r3, r3, r2
 80052b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052b8:	464b      	mov	r3, r9
 80052ba:	460a      	mov	r2, r1
 80052bc:	eb42 0303 	adc.w	r3, r2, r3
 80052c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80052d0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80052d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80052d8:	460b      	mov	r3, r1
 80052da:	18db      	adds	r3, r3, r3
 80052dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052de:	4613      	mov	r3, r2
 80052e0:	eb42 0303 	adc.w	r3, r2, r3
 80052e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80052ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80052ee:	f7fa ffcf 	bl	8000290 <__aeabi_uldivmod>
 80052f2:	4602      	mov	r2, r0
 80052f4:	460b      	mov	r3, r1
 80052f6:	4b0d      	ldr	r3, [pc, #52]	@ (800532c <UART_SetConfig+0x2d4>)
 80052f8:	fba3 1302 	umull	r1, r3, r3, r2
 80052fc:	095b      	lsrs	r3, r3, #5
 80052fe:	2164      	movs	r1, #100	@ 0x64
 8005300:	fb01 f303 	mul.w	r3, r1, r3
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	3332      	adds	r3, #50	@ 0x32
 800530a:	4a08      	ldr	r2, [pc, #32]	@ (800532c <UART_SetConfig+0x2d4>)
 800530c:	fba2 2303 	umull	r2, r3, r2, r3
 8005310:	095b      	lsrs	r3, r3, #5
 8005312:	f003 0207 	and.w	r2, r3, #7
 8005316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4422      	add	r2, r4
 800531e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005320:	e106      	b.n	8005530 <UART_SetConfig+0x4d8>
 8005322:	bf00      	nop
 8005324:	40011000 	.word	0x40011000
 8005328:	40011400 	.word	0x40011400
 800532c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005330:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005334:	2200      	movs	r2, #0
 8005336:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800533a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800533e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005342:	4642      	mov	r2, r8
 8005344:	464b      	mov	r3, r9
 8005346:	1891      	adds	r1, r2, r2
 8005348:	6239      	str	r1, [r7, #32]
 800534a:	415b      	adcs	r3, r3
 800534c:	627b      	str	r3, [r7, #36]	@ 0x24
 800534e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005352:	4641      	mov	r1, r8
 8005354:	1854      	adds	r4, r2, r1
 8005356:	4649      	mov	r1, r9
 8005358:	eb43 0501 	adc.w	r5, r3, r1
 800535c:	f04f 0200 	mov.w	r2, #0
 8005360:	f04f 0300 	mov.w	r3, #0
 8005364:	00eb      	lsls	r3, r5, #3
 8005366:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800536a:	00e2      	lsls	r2, r4, #3
 800536c:	4614      	mov	r4, r2
 800536e:	461d      	mov	r5, r3
 8005370:	4643      	mov	r3, r8
 8005372:	18e3      	adds	r3, r4, r3
 8005374:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005378:	464b      	mov	r3, r9
 800537a:	eb45 0303 	adc.w	r3, r5, r3
 800537e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800538e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005392:	f04f 0200 	mov.w	r2, #0
 8005396:	f04f 0300 	mov.w	r3, #0
 800539a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800539e:	4629      	mov	r1, r5
 80053a0:	008b      	lsls	r3, r1, #2
 80053a2:	4621      	mov	r1, r4
 80053a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053a8:	4621      	mov	r1, r4
 80053aa:	008a      	lsls	r2, r1, #2
 80053ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80053b0:	f7fa ff6e 	bl	8000290 <__aeabi_uldivmod>
 80053b4:	4602      	mov	r2, r0
 80053b6:	460b      	mov	r3, r1
 80053b8:	4b60      	ldr	r3, [pc, #384]	@ (800553c <UART_SetConfig+0x4e4>)
 80053ba:	fba3 2302 	umull	r2, r3, r3, r2
 80053be:	095b      	lsrs	r3, r3, #5
 80053c0:	011c      	lsls	r4, r3, #4
 80053c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053c6:	2200      	movs	r2, #0
 80053c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80053cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80053d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80053d4:	4642      	mov	r2, r8
 80053d6:	464b      	mov	r3, r9
 80053d8:	1891      	adds	r1, r2, r2
 80053da:	61b9      	str	r1, [r7, #24]
 80053dc:	415b      	adcs	r3, r3
 80053de:	61fb      	str	r3, [r7, #28]
 80053e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053e4:	4641      	mov	r1, r8
 80053e6:	1851      	adds	r1, r2, r1
 80053e8:	6139      	str	r1, [r7, #16]
 80053ea:	4649      	mov	r1, r9
 80053ec:	414b      	adcs	r3, r1
 80053ee:	617b      	str	r3, [r7, #20]
 80053f0:	f04f 0200 	mov.w	r2, #0
 80053f4:	f04f 0300 	mov.w	r3, #0
 80053f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053fc:	4659      	mov	r1, fp
 80053fe:	00cb      	lsls	r3, r1, #3
 8005400:	4651      	mov	r1, sl
 8005402:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005406:	4651      	mov	r1, sl
 8005408:	00ca      	lsls	r2, r1, #3
 800540a:	4610      	mov	r0, r2
 800540c:	4619      	mov	r1, r3
 800540e:	4603      	mov	r3, r0
 8005410:	4642      	mov	r2, r8
 8005412:	189b      	adds	r3, r3, r2
 8005414:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005418:	464b      	mov	r3, r9
 800541a:	460a      	mov	r2, r1
 800541c:	eb42 0303 	adc.w	r3, r2, r3
 8005420:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800542e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005430:	f04f 0200 	mov.w	r2, #0
 8005434:	f04f 0300 	mov.w	r3, #0
 8005438:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800543c:	4649      	mov	r1, r9
 800543e:	008b      	lsls	r3, r1, #2
 8005440:	4641      	mov	r1, r8
 8005442:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005446:	4641      	mov	r1, r8
 8005448:	008a      	lsls	r2, r1, #2
 800544a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800544e:	f7fa ff1f 	bl	8000290 <__aeabi_uldivmod>
 8005452:	4602      	mov	r2, r0
 8005454:	460b      	mov	r3, r1
 8005456:	4611      	mov	r1, r2
 8005458:	4b38      	ldr	r3, [pc, #224]	@ (800553c <UART_SetConfig+0x4e4>)
 800545a:	fba3 2301 	umull	r2, r3, r3, r1
 800545e:	095b      	lsrs	r3, r3, #5
 8005460:	2264      	movs	r2, #100	@ 0x64
 8005462:	fb02 f303 	mul.w	r3, r2, r3
 8005466:	1acb      	subs	r3, r1, r3
 8005468:	011b      	lsls	r3, r3, #4
 800546a:	3332      	adds	r3, #50	@ 0x32
 800546c:	4a33      	ldr	r2, [pc, #204]	@ (800553c <UART_SetConfig+0x4e4>)
 800546e:	fba2 2303 	umull	r2, r3, r2, r3
 8005472:	095b      	lsrs	r3, r3, #5
 8005474:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005478:	441c      	add	r4, r3
 800547a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800547e:	2200      	movs	r2, #0
 8005480:	673b      	str	r3, [r7, #112]	@ 0x70
 8005482:	677a      	str	r2, [r7, #116]	@ 0x74
 8005484:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005488:	4642      	mov	r2, r8
 800548a:	464b      	mov	r3, r9
 800548c:	1891      	adds	r1, r2, r2
 800548e:	60b9      	str	r1, [r7, #8]
 8005490:	415b      	adcs	r3, r3
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005498:	4641      	mov	r1, r8
 800549a:	1851      	adds	r1, r2, r1
 800549c:	6039      	str	r1, [r7, #0]
 800549e:	4649      	mov	r1, r9
 80054a0:	414b      	adcs	r3, r1
 80054a2:	607b      	str	r3, [r7, #4]
 80054a4:	f04f 0200 	mov.w	r2, #0
 80054a8:	f04f 0300 	mov.w	r3, #0
 80054ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80054b0:	4659      	mov	r1, fp
 80054b2:	00cb      	lsls	r3, r1, #3
 80054b4:	4651      	mov	r1, sl
 80054b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054ba:	4651      	mov	r1, sl
 80054bc:	00ca      	lsls	r2, r1, #3
 80054be:	4610      	mov	r0, r2
 80054c0:	4619      	mov	r1, r3
 80054c2:	4603      	mov	r3, r0
 80054c4:	4642      	mov	r2, r8
 80054c6:	189b      	adds	r3, r3, r2
 80054c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054ca:	464b      	mov	r3, r9
 80054cc:	460a      	mov	r2, r1
 80054ce:	eb42 0303 	adc.w	r3, r2, r3
 80054d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80054d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80054de:	667a      	str	r2, [r7, #100]	@ 0x64
 80054e0:	f04f 0200 	mov.w	r2, #0
 80054e4:	f04f 0300 	mov.w	r3, #0
 80054e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80054ec:	4649      	mov	r1, r9
 80054ee:	008b      	lsls	r3, r1, #2
 80054f0:	4641      	mov	r1, r8
 80054f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054f6:	4641      	mov	r1, r8
 80054f8:	008a      	lsls	r2, r1, #2
 80054fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80054fe:	f7fa fec7 	bl	8000290 <__aeabi_uldivmod>
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	4b0d      	ldr	r3, [pc, #52]	@ (800553c <UART_SetConfig+0x4e4>)
 8005508:	fba3 1302 	umull	r1, r3, r3, r2
 800550c:	095b      	lsrs	r3, r3, #5
 800550e:	2164      	movs	r1, #100	@ 0x64
 8005510:	fb01 f303 	mul.w	r3, r1, r3
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	011b      	lsls	r3, r3, #4
 8005518:	3332      	adds	r3, #50	@ 0x32
 800551a:	4a08      	ldr	r2, [pc, #32]	@ (800553c <UART_SetConfig+0x4e4>)
 800551c:	fba2 2303 	umull	r2, r3, r2, r3
 8005520:	095b      	lsrs	r3, r3, #5
 8005522:	f003 020f 	and.w	r2, r3, #15
 8005526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4422      	add	r2, r4
 800552e:	609a      	str	r2, [r3, #8]
}
 8005530:	bf00      	nop
 8005532:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005536:	46bd      	mov	sp, r7
 8005538:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800553c:	51eb851f 	.word	0x51eb851f

08005540 <std>:
 8005540:	2300      	movs	r3, #0
 8005542:	b510      	push	{r4, lr}
 8005544:	4604      	mov	r4, r0
 8005546:	e9c0 3300 	strd	r3, r3, [r0]
 800554a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800554e:	6083      	str	r3, [r0, #8]
 8005550:	8181      	strh	r1, [r0, #12]
 8005552:	6643      	str	r3, [r0, #100]	@ 0x64
 8005554:	81c2      	strh	r2, [r0, #14]
 8005556:	6183      	str	r3, [r0, #24]
 8005558:	4619      	mov	r1, r3
 800555a:	2208      	movs	r2, #8
 800555c:	305c      	adds	r0, #92	@ 0x5c
 800555e:	f000 fa33 	bl	80059c8 <memset>
 8005562:	4b0d      	ldr	r3, [pc, #52]	@ (8005598 <std+0x58>)
 8005564:	6263      	str	r3, [r4, #36]	@ 0x24
 8005566:	4b0d      	ldr	r3, [pc, #52]	@ (800559c <std+0x5c>)
 8005568:	62a3      	str	r3, [r4, #40]	@ 0x28
 800556a:	4b0d      	ldr	r3, [pc, #52]	@ (80055a0 <std+0x60>)
 800556c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800556e:	4b0d      	ldr	r3, [pc, #52]	@ (80055a4 <std+0x64>)
 8005570:	6323      	str	r3, [r4, #48]	@ 0x30
 8005572:	4b0d      	ldr	r3, [pc, #52]	@ (80055a8 <std+0x68>)
 8005574:	6224      	str	r4, [r4, #32]
 8005576:	429c      	cmp	r4, r3
 8005578:	d006      	beq.n	8005588 <std+0x48>
 800557a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800557e:	4294      	cmp	r4, r2
 8005580:	d002      	beq.n	8005588 <std+0x48>
 8005582:	33d0      	adds	r3, #208	@ 0xd0
 8005584:	429c      	cmp	r4, r3
 8005586:	d105      	bne.n	8005594 <std+0x54>
 8005588:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800558c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005590:	f000 ba92 	b.w	8005ab8 <__retarget_lock_init_recursive>
 8005594:	bd10      	pop	{r4, pc}
 8005596:	bf00      	nop
 8005598:	08005781 	.word	0x08005781
 800559c:	080057a3 	.word	0x080057a3
 80055a0:	080057db 	.word	0x080057db
 80055a4:	080057ff 	.word	0x080057ff
 80055a8:	20000ad8 	.word	0x20000ad8

080055ac <stdio_exit_handler>:
 80055ac:	4a02      	ldr	r2, [pc, #8]	@ (80055b8 <stdio_exit_handler+0xc>)
 80055ae:	4903      	ldr	r1, [pc, #12]	@ (80055bc <stdio_exit_handler+0x10>)
 80055b0:	4803      	ldr	r0, [pc, #12]	@ (80055c0 <stdio_exit_handler+0x14>)
 80055b2:	f000 b869 	b.w	8005688 <_fwalk_sglue>
 80055b6:	bf00      	nop
 80055b8:	20000034 	.word	0x20000034
 80055bc:	0800639d 	.word	0x0800639d
 80055c0:	20000044 	.word	0x20000044

080055c4 <cleanup_stdio>:
 80055c4:	6841      	ldr	r1, [r0, #4]
 80055c6:	4b0c      	ldr	r3, [pc, #48]	@ (80055f8 <cleanup_stdio+0x34>)
 80055c8:	4299      	cmp	r1, r3
 80055ca:	b510      	push	{r4, lr}
 80055cc:	4604      	mov	r4, r0
 80055ce:	d001      	beq.n	80055d4 <cleanup_stdio+0x10>
 80055d0:	f000 fee4 	bl	800639c <_fflush_r>
 80055d4:	68a1      	ldr	r1, [r4, #8]
 80055d6:	4b09      	ldr	r3, [pc, #36]	@ (80055fc <cleanup_stdio+0x38>)
 80055d8:	4299      	cmp	r1, r3
 80055da:	d002      	beq.n	80055e2 <cleanup_stdio+0x1e>
 80055dc:	4620      	mov	r0, r4
 80055de:	f000 fedd 	bl	800639c <_fflush_r>
 80055e2:	68e1      	ldr	r1, [r4, #12]
 80055e4:	4b06      	ldr	r3, [pc, #24]	@ (8005600 <cleanup_stdio+0x3c>)
 80055e6:	4299      	cmp	r1, r3
 80055e8:	d004      	beq.n	80055f4 <cleanup_stdio+0x30>
 80055ea:	4620      	mov	r0, r4
 80055ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055f0:	f000 bed4 	b.w	800639c <_fflush_r>
 80055f4:	bd10      	pop	{r4, pc}
 80055f6:	bf00      	nop
 80055f8:	20000ad8 	.word	0x20000ad8
 80055fc:	20000b40 	.word	0x20000b40
 8005600:	20000ba8 	.word	0x20000ba8

08005604 <global_stdio_init.part.0>:
 8005604:	b510      	push	{r4, lr}
 8005606:	4b0b      	ldr	r3, [pc, #44]	@ (8005634 <global_stdio_init.part.0+0x30>)
 8005608:	4c0b      	ldr	r4, [pc, #44]	@ (8005638 <global_stdio_init.part.0+0x34>)
 800560a:	4a0c      	ldr	r2, [pc, #48]	@ (800563c <global_stdio_init.part.0+0x38>)
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	4620      	mov	r0, r4
 8005610:	2200      	movs	r2, #0
 8005612:	2104      	movs	r1, #4
 8005614:	f7ff ff94 	bl	8005540 <std>
 8005618:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800561c:	2201      	movs	r2, #1
 800561e:	2109      	movs	r1, #9
 8005620:	f7ff ff8e 	bl	8005540 <std>
 8005624:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005628:	2202      	movs	r2, #2
 800562a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800562e:	2112      	movs	r1, #18
 8005630:	f7ff bf86 	b.w	8005540 <std>
 8005634:	20000c10 	.word	0x20000c10
 8005638:	20000ad8 	.word	0x20000ad8
 800563c:	080055ad 	.word	0x080055ad

08005640 <__sfp_lock_acquire>:
 8005640:	4801      	ldr	r0, [pc, #4]	@ (8005648 <__sfp_lock_acquire+0x8>)
 8005642:	f000 ba3a 	b.w	8005aba <__retarget_lock_acquire_recursive>
 8005646:	bf00      	nop
 8005648:	20000c19 	.word	0x20000c19

0800564c <__sfp_lock_release>:
 800564c:	4801      	ldr	r0, [pc, #4]	@ (8005654 <__sfp_lock_release+0x8>)
 800564e:	f000 ba35 	b.w	8005abc <__retarget_lock_release_recursive>
 8005652:	bf00      	nop
 8005654:	20000c19 	.word	0x20000c19

08005658 <__sinit>:
 8005658:	b510      	push	{r4, lr}
 800565a:	4604      	mov	r4, r0
 800565c:	f7ff fff0 	bl	8005640 <__sfp_lock_acquire>
 8005660:	6a23      	ldr	r3, [r4, #32]
 8005662:	b11b      	cbz	r3, 800566c <__sinit+0x14>
 8005664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005668:	f7ff bff0 	b.w	800564c <__sfp_lock_release>
 800566c:	4b04      	ldr	r3, [pc, #16]	@ (8005680 <__sinit+0x28>)
 800566e:	6223      	str	r3, [r4, #32]
 8005670:	4b04      	ldr	r3, [pc, #16]	@ (8005684 <__sinit+0x2c>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1f5      	bne.n	8005664 <__sinit+0xc>
 8005678:	f7ff ffc4 	bl	8005604 <global_stdio_init.part.0>
 800567c:	e7f2      	b.n	8005664 <__sinit+0xc>
 800567e:	bf00      	nop
 8005680:	080055c5 	.word	0x080055c5
 8005684:	20000c10 	.word	0x20000c10

08005688 <_fwalk_sglue>:
 8005688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800568c:	4607      	mov	r7, r0
 800568e:	4688      	mov	r8, r1
 8005690:	4614      	mov	r4, r2
 8005692:	2600      	movs	r6, #0
 8005694:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005698:	f1b9 0901 	subs.w	r9, r9, #1
 800569c:	d505      	bpl.n	80056aa <_fwalk_sglue+0x22>
 800569e:	6824      	ldr	r4, [r4, #0]
 80056a0:	2c00      	cmp	r4, #0
 80056a2:	d1f7      	bne.n	8005694 <_fwalk_sglue+0xc>
 80056a4:	4630      	mov	r0, r6
 80056a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056aa:	89ab      	ldrh	r3, [r5, #12]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d907      	bls.n	80056c0 <_fwalk_sglue+0x38>
 80056b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056b4:	3301      	adds	r3, #1
 80056b6:	d003      	beq.n	80056c0 <_fwalk_sglue+0x38>
 80056b8:	4629      	mov	r1, r5
 80056ba:	4638      	mov	r0, r7
 80056bc:	47c0      	blx	r8
 80056be:	4306      	orrs	r6, r0
 80056c0:	3568      	adds	r5, #104	@ 0x68
 80056c2:	e7e9      	b.n	8005698 <_fwalk_sglue+0x10>

080056c4 <_puts_r>:
 80056c4:	6a03      	ldr	r3, [r0, #32]
 80056c6:	b570      	push	{r4, r5, r6, lr}
 80056c8:	6884      	ldr	r4, [r0, #8]
 80056ca:	4605      	mov	r5, r0
 80056cc:	460e      	mov	r6, r1
 80056ce:	b90b      	cbnz	r3, 80056d4 <_puts_r+0x10>
 80056d0:	f7ff ffc2 	bl	8005658 <__sinit>
 80056d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80056d6:	07db      	lsls	r3, r3, #31
 80056d8:	d405      	bmi.n	80056e6 <_puts_r+0x22>
 80056da:	89a3      	ldrh	r3, [r4, #12]
 80056dc:	0598      	lsls	r0, r3, #22
 80056de:	d402      	bmi.n	80056e6 <_puts_r+0x22>
 80056e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056e2:	f000 f9ea 	bl	8005aba <__retarget_lock_acquire_recursive>
 80056e6:	89a3      	ldrh	r3, [r4, #12]
 80056e8:	0719      	lsls	r1, r3, #28
 80056ea:	d502      	bpl.n	80056f2 <_puts_r+0x2e>
 80056ec:	6923      	ldr	r3, [r4, #16]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d135      	bne.n	800575e <_puts_r+0x9a>
 80056f2:	4621      	mov	r1, r4
 80056f4:	4628      	mov	r0, r5
 80056f6:	f000 f901 	bl	80058fc <__swsetup_r>
 80056fa:	b380      	cbz	r0, 800575e <_puts_r+0x9a>
 80056fc:	f04f 35ff 	mov.w	r5, #4294967295
 8005700:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005702:	07da      	lsls	r2, r3, #31
 8005704:	d405      	bmi.n	8005712 <_puts_r+0x4e>
 8005706:	89a3      	ldrh	r3, [r4, #12]
 8005708:	059b      	lsls	r3, r3, #22
 800570a:	d402      	bmi.n	8005712 <_puts_r+0x4e>
 800570c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800570e:	f000 f9d5 	bl	8005abc <__retarget_lock_release_recursive>
 8005712:	4628      	mov	r0, r5
 8005714:	bd70      	pop	{r4, r5, r6, pc}
 8005716:	2b00      	cmp	r3, #0
 8005718:	da04      	bge.n	8005724 <_puts_r+0x60>
 800571a:	69a2      	ldr	r2, [r4, #24]
 800571c:	429a      	cmp	r2, r3
 800571e:	dc17      	bgt.n	8005750 <_puts_r+0x8c>
 8005720:	290a      	cmp	r1, #10
 8005722:	d015      	beq.n	8005750 <_puts_r+0x8c>
 8005724:	6823      	ldr	r3, [r4, #0]
 8005726:	1c5a      	adds	r2, r3, #1
 8005728:	6022      	str	r2, [r4, #0]
 800572a:	7019      	strb	r1, [r3, #0]
 800572c:	68a3      	ldr	r3, [r4, #8]
 800572e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005732:	3b01      	subs	r3, #1
 8005734:	60a3      	str	r3, [r4, #8]
 8005736:	2900      	cmp	r1, #0
 8005738:	d1ed      	bne.n	8005716 <_puts_r+0x52>
 800573a:	2b00      	cmp	r3, #0
 800573c:	da11      	bge.n	8005762 <_puts_r+0x9e>
 800573e:	4622      	mov	r2, r4
 8005740:	210a      	movs	r1, #10
 8005742:	4628      	mov	r0, r5
 8005744:	f000 f89c 	bl	8005880 <__swbuf_r>
 8005748:	3001      	adds	r0, #1
 800574a:	d0d7      	beq.n	80056fc <_puts_r+0x38>
 800574c:	250a      	movs	r5, #10
 800574e:	e7d7      	b.n	8005700 <_puts_r+0x3c>
 8005750:	4622      	mov	r2, r4
 8005752:	4628      	mov	r0, r5
 8005754:	f000 f894 	bl	8005880 <__swbuf_r>
 8005758:	3001      	adds	r0, #1
 800575a:	d1e7      	bne.n	800572c <_puts_r+0x68>
 800575c:	e7ce      	b.n	80056fc <_puts_r+0x38>
 800575e:	3e01      	subs	r6, #1
 8005760:	e7e4      	b.n	800572c <_puts_r+0x68>
 8005762:	6823      	ldr	r3, [r4, #0]
 8005764:	1c5a      	adds	r2, r3, #1
 8005766:	6022      	str	r2, [r4, #0]
 8005768:	220a      	movs	r2, #10
 800576a:	701a      	strb	r2, [r3, #0]
 800576c:	e7ee      	b.n	800574c <_puts_r+0x88>
	...

08005770 <puts>:
 8005770:	4b02      	ldr	r3, [pc, #8]	@ (800577c <puts+0xc>)
 8005772:	4601      	mov	r1, r0
 8005774:	6818      	ldr	r0, [r3, #0]
 8005776:	f7ff bfa5 	b.w	80056c4 <_puts_r>
 800577a:	bf00      	nop
 800577c:	20000040 	.word	0x20000040

08005780 <__sread>:
 8005780:	b510      	push	{r4, lr}
 8005782:	460c      	mov	r4, r1
 8005784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005788:	f000 f948 	bl	8005a1c <_read_r>
 800578c:	2800      	cmp	r0, #0
 800578e:	bfab      	itete	ge
 8005790:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005792:	89a3      	ldrhlt	r3, [r4, #12]
 8005794:	181b      	addge	r3, r3, r0
 8005796:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800579a:	bfac      	ite	ge
 800579c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800579e:	81a3      	strhlt	r3, [r4, #12]
 80057a0:	bd10      	pop	{r4, pc}

080057a2 <__swrite>:
 80057a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057a6:	461f      	mov	r7, r3
 80057a8:	898b      	ldrh	r3, [r1, #12]
 80057aa:	05db      	lsls	r3, r3, #23
 80057ac:	4605      	mov	r5, r0
 80057ae:	460c      	mov	r4, r1
 80057b0:	4616      	mov	r6, r2
 80057b2:	d505      	bpl.n	80057c0 <__swrite+0x1e>
 80057b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057b8:	2302      	movs	r3, #2
 80057ba:	2200      	movs	r2, #0
 80057bc:	f000 f91c 	bl	80059f8 <_lseek_r>
 80057c0:	89a3      	ldrh	r3, [r4, #12]
 80057c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057ca:	81a3      	strh	r3, [r4, #12]
 80057cc:	4632      	mov	r2, r6
 80057ce:	463b      	mov	r3, r7
 80057d0:	4628      	mov	r0, r5
 80057d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057d6:	f000 b933 	b.w	8005a40 <_write_r>

080057da <__sseek>:
 80057da:	b510      	push	{r4, lr}
 80057dc:	460c      	mov	r4, r1
 80057de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057e2:	f000 f909 	bl	80059f8 <_lseek_r>
 80057e6:	1c43      	adds	r3, r0, #1
 80057e8:	89a3      	ldrh	r3, [r4, #12]
 80057ea:	bf15      	itete	ne
 80057ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80057ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80057f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80057f6:	81a3      	strheq	r3, [r4, #12]
 80057f8:	bf18      	it	ne
 80057fa:	81a3      	strhne	r3, [r4, #12]
 80057fc:	bd10      	pop	{r4, pc}

080057fe <__sclose>:
 80057fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005802:	f000 b8e9 	b.w	80059d8 <_close_r>

08005806 <_vsniprintf_r>:
 8005806:	b530      	push	{r4, r5, lr}
 8005808:	4614      	mov	r4, r2
 800580a:	2c00      	cmp	r4, #0
 800580c:	b09b      	sub	sp, #108	@ 0x6c
 800580e:	4605      	mov	r5, r0
 8005810:	461a      	mov	r2, r3
 8005812:	da05      	bge.n	8005820 <_vsniprintf_r+0x1a>
 8005814:	238b      	movs	r3, #139	@ 0x8b
 8005816:	6003      	str	r3, [r0, #0]
 8005818:	f04f 30ff 	mov.w	r0, #4294967295
 800581c:	b01b      	add	sp, #108	@ 0x6c
 800581e:	bd30      	pop	{r4, r5, pc}
 8005820:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005824:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005828:	f04f 0300 	mov.w	r3, #0
 800582c:	9319      	str	r3, [sp, #100]	@ 0x64
 800582e:	bf14      	ite	ne
 8005830:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005834:	4623      	moveq	r3, r4
 8005836:	9302      	str	r3, [sp, #8]
 8005838:	9305      	str	r3, [sp, #20]
 800583a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800583e:	9100      	str	r1, [sp, #0]
 8005840:	9104      	str	r1, [sp, #16]
 8005842:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005846:	4669      	mov	r1, sp
 8005848:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800584a:	f000 fa9b 	bl	8005d84 <_svfiprintf_r>
 800584e:	1c43      	adds	r3, r0, #1
 8005850:	bfbc      	itt	lt
 8005852:	238b      	movlt	r3, #139	@ 0x8b
 8005854:	602b      	strlt	r3, [r5, #0]
 8005856:	2c00      	cmp	r4, #0
 8005858:	d0e0      	beq.n	800581c <_vsniprintf_r+0x16>
 800585a:	9b00      	ldr	r3, [sp, #0]
 800585c:	2200      	movs	r2, #0
 800585e:	701a      	strb	r2, [r3, #0]
 8005860:	e7dc      	b.n	800581c <_vsniprintf_r+0x16>
	...

08005864 <vsniprintf>:
 8005864:	b507      	push	{r0, r1, r2, lr}
 8005866:	9300      	str	r3, [sp, #0]
 8005868:	4613      	mov	r3, r2
 800586a:	460a      	mov	r2, r1
 800586c:	4601      	mov	r1, r0
 800586e:	4803      	ldr	r0, [pc, #12]	@ (800587c <vsniprintf+0x18>)
 8005870:	6800      	ldr	r0, [r0, #0]
 8005872:	f7ff ffc8 	bl	8005806 <_vsniprintf_r>
 8005876:	b003      	add	sp, #12
 8005878:	f85d fb04 	ldr.w	pc, [sp], #4
 800587c:	20000040 	.word	0x20000040

08005880 <__swbuf_r>:
 8005880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005882:	460e      	mov	r6, r1
 8005884:	4614      	mov	r4, r2
 8005886:	4605      	mov	r5, r0
 8005888:	b118      	cbz	r0, 8005892 <__swbuf_r+0x12>
 800588a:	6a03      	ldr	r3, [r0, #32]
 800588c:	b90b      	cbnz	r3, 8005892 <__swbuf_r+0x12>
 800588e:	f7ff fee3 	bl	8005658 <__sinit>
 8005892:	69a3      	ldr	r3, [r4, #24]
 8005894:	60a3      	str	r3, [r4, #8]
 8005896:	89a3      	ldrh	r3, [r4, #12]
 8005898:	071a      	lsls	r2, r3, #28
 800589a:	d501      	bpl.n	80058a0 <__swbuf_r+0x20>
 800589c:	6923      	ldr	r3, [r4, #16]
 800589e:	b943      	cbnz	r3, 80058b2 <__swbuf_r+0x32>
 80058a0:	4621      	mov	r1, r4
 80058a2:	4628      	mov	r0, r5
 80058a4:	f000 f82a 	bl	80058fc <__swsetup_r>
 80058a8:	b118      	cbz	r0, 80058b2 <__swbuf_r+0x32>
 80058aa:	f04f 37ff 	mov.w	r7, #4294967295
 80058ae:	4638      	mov	r0, r7
 80058b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058b2:	6823      	ldr	r3, [r4, #0]
 80058b4:	6922      	ldr	r2, [r4, #16]
 80058b6:	1a98      	subs	r0, r3, r2
 80058b8:	6963      	ldr	r3, [r4, #20]
 80058ba:	b2f6      	uxtb	r6, r6
 80058bc:	4283      	cmp	r3, r0
 80058be:	4637      	mov	r7, r6
 80058c0:	dc05      	bgt.n	80058ce <__swbuf_r+0x4e>
 80058c2:	4621      	mov	r1, r4
 80058c4:	4628      	mov	r0, r5
 80058c6:	f000 fd69 	bl	800639c <_fflush_r>
 80058ca:	2800      	cmp	r0, #0
 80058cc:	d1ed      	bne.n	80058aa <__swbuf_r+0x2a>
 80058ce:	68a3      	ldr	r3, [r4, #8]
 80058d0:	3b01      	subs	r3, #1
 80058d2:	60a3      	str	r3, [r4, #8]
 80058d4:	6823      	ldr	r3, [r4, #0]
 80058d6:	1c5a      	adds	r2, r3, #1
 80058d8:	6022      	str	r2, [r4, #0]
 80058da:	701e      	strb	r6, [r3, #0]
 80058dc:	6962      	ldr	r2, [r4, #20]
 80058de:	1c43      	adds	r3, r0, #1
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d004      	beq.n	80058ee <__swbuf_r+0x6e>
 80058e4:	89a3      	ldrh	r3, [r4, #12]
 80058e6:	07db      	lsls	r3, r3, #31
 80058e8:	d5e1      	bpl.n	80058ae <__swbuf_r+0x2e>
 80058ea:	2e0a      	cmp	r6, #10
 80058ec:	d1df      	bne.n	80058ae <__swbuf_r+0x2e>
 80058ee:	4621      	mov	r1, r4
 80058f0:	4628      	mov	r0, r5
 80058f2:	f000 fd53 	bl	800639c <_fflush_r>
 80058f6:	2800      	cmp	r0, #0
 80058f8:	d0d9      	beq.n	80058ae <__swbuf_r+0x2e>
 80058fa:	e7d6      	b.n	80058aa <__swbuf_r+0x2a>

080058fc <__swsetup_r>:
 80058fc:	b538      	push	{r3, r4, r5, lr}
 80058fe:	4b29      	ldr	r3, [pc, #164]	@ (80059a4 <__swsetup_r+0xa8>)
 8005900:	4605      	mov	r5, r0
 8005902:	6818      	ldr	r0, [r3, #0]
 8005904:	460c      	mov	r4, r1
 8005906:	b118      	cbz	r0, 8005910 <__swsetup_r+0x14>
 8005908:	6a03      	ldr	r3, [r0, #32]
 800590a:	b90b      	cbnz	r3, 8005910 <__swsetup_r+0x14>
 800590c:	f7ff fea4 	bl	8005658 <__sinit>
 8005910:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005914:	0719      	lsls	r1, r3, #28
 8005916:	d422      	bmi.n	800595e <__swsetup_r+0x62>
 8005918:	06da      	lsls	r2, r3, #27
 800591a:	d407      	bmi.n	800592c <__swsetup_r+0x30>
 800591c:	2209      	movs	r2, #9
 800591e:	602a      	str	r2, [r5, #0]
 8005920:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005924:	81a3      	strh	r3, [r4, #12]
 8005926:	f04f 30ff 	mov.w	r0, #4294967295
 800592a:	e033      	b.n	8005994 <__swsetup_r+0x98>
 800592c:	0758      	lsls	r0, r3, #29
 800592e:	d512      	bpl.n	8005956 <__swsetup_r+0x5a>
 8005930:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005932:	b141      	cbz	r1, 8005946 <__swsetup_r+0x4a>
 8005934:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005938:	4299      	cmp	r1, r3
 800593a:	d002      	beq.n	8005942 <__swsetup_r+0x46>
 800593c:	4628      	mov	r0, r5
 800593e:	f000 f8cd 	bl	8005adc <_free_r>
 8005942:	2300      	movs	r3, #0
 8005944:	6363      	str	r3, [r4, #52]	@ 0x34
 8005946:	89a3      	ldrh	r3, [r4, #12]
 8005948:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800594c:	81a3      	strh	r3, [r4, #12]
 800594e:	2300      	movs	r3, #0
 8005950:	6063      	str	r3, [r4, #4]
 8005952:	6923      	ldr	r3, [r4, #16]
 8005954:	6023      	str	r3, [r4, #0]
 8005956:	89a3      	ldrh	r3, [r4, #12]
 8005958:	f043 0308 	orr.w	r3, r3, #8
 800595c:	81a3      	strh	r3, [r4, #12]
 800595e:	6923      	ldr	r3, [r4, #16]
 8005960:	b94b      	cbnz	r3, 8005976 <__swsetup_r+0x7a>
 8005962:	89a3      	ldrh	r3, [r4, #12]
 8005964:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005968:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800596c:	d003      	beq.n	8005976 <__swsetup_r+0x7a>
 800596e:	4621      	mov	r1, r4
 8005970:	4628      	mov	r0, r5
 8005972:	f000 fd61 	bl	8006438 <__smakebuf_r>
 8005976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800597a:	f013 0201 	ands.w	r2, r3, #1
 800597e:	d00a      	beq.n	8005996 <__swsetup_r+0x9a>
 8005980:	2200      	movs	r2, #0
 8005982:	60a2      	str	r2, [r4, #8]
 8005984:	6962      	ldr	r2, [r4, #20]
 8005986:	4252      	negs	r2, r2
 8005988:	61a2      	str	r2, [r4, #24]
 800598a:	6922      	ldr	r2, [r4, #16]
 800598c:	b942      	cbnz	r2, 80059a0 <__swsetup_r+0xa4>
 800598e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005992:	d1c5      	bne.n	8005920 <__swsetup_r+0x24>
 8005994:	bd38      	pop	{r3, r4, r5, pc}
 8005996:	0799      	lsls	r1, r3, #30
 8005998:	bf58      	it	pl
 800599a:	6962      	ldrpl	r2, [r4, #20]
 800599c:	60a2      	str	r2, [r4, #8]
 800599e:	e7f4      	b.n	800598a <__swsetup_r+0x8e>
 80059a0:	2000      	movs	r0, #0
 80059a2:	e7f7      	b.n	8005994 <__swsetup_r+0x98>
 80059a4:	20000040 	.word	0x20000040

080059a8 <memcmp>:
 80059a8:	b510      	push	{r4, lr}
 80059aa:	3901      	subs	r1, #1
 80059ac:	4402      	add	r2, r0
 80059ae:	4290      	cmp	r0, r2
 80059b0:	d101      	bne.n	80059b6 <memcmp+0xe>
 80059b2:	2000      	movs	r0, #0
 80059b4:	e005      	b.n	80059c2 <memcmp+0x1a>
 80059b6:	7803      	ldrb	r3, [r0, #0]
 80059b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80059bc:	42a3      	cmp	r3, r4
 80059be:	d001      	beq.n	80059c4 <memcmp+0x1c>
 80059c0:	1b18      	subs	r0, r3, r4
 80059c2:	bd10      	pop	{r4, pc}
 80059c4:	3001      	adds	r0, #1
 80059c6:	e7f2      	b.n	80059ae <memcmp+0x6>

080059c8 <memset>:
 80059c8:	4402      	add	r2, r0
 80059ca:	4603      	mov	r3, r0
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d100      	bne.n	80059d2 <memset+0xa>
 80059d0:	4770      	bx	lr
 80059d2:	f803 1b01 	strb.w	r1, [r3], #1
 80059d6:	e7f9      	b.n	80059cc <memset+0x4>

080059d8 <_close_r>:
 80059d8:	b538      	push	{r3, r4, r5, lr}
 80059da:	4d06      	ldr	r5, [pc, #24]	@ (80059f4 <_close_r+0x1c>)
 80059dc:	2300      	movs	r3, #0
 80059de:	4604      	mov	r4, r0
 80059e0:	4608      	mov	r0, r1
 80059e2:	602b      	str	r3, [r5, #0]
 80059e4:	f7fd fbc5 	bl	8003172 <_close>
 80059e8:	1c43      	adds	r3, r0, #1
 80059ea:	d102      	bne.n	80059f2 <_close_r+0x1a>
 80059ec:	682b      	ldr	r3, [r5, #0]
 80059ee:	b103      	cbz	r3, 80059f2 <_close_r+0x1a>
 80059f0:	6023      	str	r3, [r4, #0]
 80059f2:	bd38      	pop	{r3, r4, r5, pc}
 80059f4:	20000c14 	.word	0x20000c14

080059f8 <_lseek_r>:
 80059f8:	b538      	push	{r3, r4, r5, lr}
 80059fa:	4d07      	ldr	r5, [pc, #28]	@ (8005a18 <_lseek_r+0x20>)
 80059fc:	4604      	mov	r4, r0
 80059fe:	4608      	mov	r0, r1
 8005a00:	4611      	mov	r1, r2
 8005a02:	2200      	movs	r2, #0
 8005a04:	602a      	str	r2, [r5, #0]
 8005a06:	461a      	mov	r2, r3
 8005a08:	f7fd fbda 	bl	80031c0 <_lseek>
 8005a0c:	1c43      	adds	r3, r0, #1
 8005a0e:	d102      	bne.n	8005a16 <_lseek_r+0x1e>
 8005a10:	682b      	ldr	r3, [r5, #0]
 8005a12:	b103      	cbz	r3, 8005a16 <_lseek_r+0x1e>
 8005a14:	6023      	str	r3, [r4, #0]
 8005a16:	bd38      	pop	{r3, r4, r5, pc}
 8005a18:	20000c14 	.word	0x20000c14

08005a1c <_read_r>:
 8005a1c:	b538      	push	{r3, r4, r5, lr}
 8005a1e:	4d07      	ldr	r5, [pc, #28]	@ (8005a3c <_read_r+0x20>)
 8005a20:	4604      	mov	r4, r0
 8005a22:	4608      	mov	r0, r1
 8005a24:	4611      	mov	r1, r2
 8005a26:	2200      	movs	r2, #0
 8005a28:	602a      	str	r2, [r5, #0]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	f7fd fb84 	bl	8003138 <_read>
 8005a30:	1c43      	adds	r3, r0, #1
 8005a32:	d102      	bne.n	8005a3a <_read_r+0x1e>
 8005a34:	682b      	ldr	r3, [r5, #0]
 8005a36:	b103      	cbz	r3, 8005a3a <_read_r+0x1e>
 8005a38:	6023      	str	r3, [r4, #0]
 8005a3a:	bd38      	pop	{r3, r4, r5, pc}
 8005a3c:	20000c14 	.word	0x20000c14

08005a40 <_write_r>:
 8005a40:	b538      	push	{r3, r4, r5, lr}
 8005a42:	4d07      	ldr	r5, [pc, #28]	@ (8005a60 <_write_r+0x20>)
 8005a44:	4604      	mov	r4, r0
 8005a46:	4608      	mov	r0, r1
 8005a48:	4611      	mov	r1, r2
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	602a      	str	r2, [r5, #0]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	f7fa fdb4 	bl	80005bc <_write>
 8005a54:	1c43      	adds	r3, r0, #1
 8005a56:	d102      	bne.n	8005a5e <_write_r+0x1e>
 8005a58:	682b      	ldr	r3, [r5, #0]
 8005a5a:	b103      	cbz	r3, 8005a5e <_write_r+0x1e>
 8005a5c:	6023      	str	r3, [r4, #0]
 8005a5e:	bd38      	pop	{r3, r4, r5, pc}
 8005a60:	20000c14 	.word	0x20000c14

08005a64 <__errno>:
 8005a64:	4b01      	ldr	r3, [pc, #4]	@ (8005a6c <__errno+0x8>)
 8005a66:	6818      	ldr	r0, [r3, #0]
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	20000040 	.word	0x20000040

08005a70 <__libc_init_array>:
 8005a70:	b570      	push	{r4, r5, r6, lr}
 8005a72:	4d0d      	ldr	r5, [pc, #52]	@ (8005aa8 <__libc_init_array+0x38>)
 8005a74:	4c0d      	ldr	r4, [pc, #52]	@ (8005aac <__libc_init_array+0x3c>)
 8005a76:	1b64      	subs	r4, r4, r5
 8005a78:	10a4      	asrs	r4, r4, #2
 8005a7a:	2600      	movs	r6, #0
 8005a7c:	42a6      	cmp	r6, r4
 8005a7e:	d109      	bne.n	8005a94 <__libc_init_array+0x24>
 8005a80:	4d0b      	ldr	r5, [pc, #44]	@ (8005ab0 <__libc_init_array+0x40>)
 8005a82:	4c0c      	ldr	r4, [pc, #48]	@ (8005ab4 <__libc_init_array+0x44>)
 8005a84:	f000 fd96 	bl	80065b4 <_init>
 8005a88:	1b64      	subs	r4, r4, r5
 8005a8a:	10a4      	asrs	r4, r4, #2
 8005a8c:	2600      	movs	r6, #0
 8005a8e:	42a6      	cmp	r6, r4
 8005a90:	d105      	bne.n	8005a9e <__libc_init_array+0x2e>
 8005a92:	bd70      	pop	{r4, r5, r6, pc}
 8005a94:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a98:	4798      	blx	r3
 8005a9a:	3601      	adds	r6, #1
 8005a9c:	e7ee      	b.n	8005a7c <__libc_init_array+0xc>
 8005a9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aa2:	4798      	blx	r3
 8005aa4:	3601      	adds	r6, #1
 8005aa6:	e7f2      	b.n	8005a8e <__libc_init_array+0x1e>
 8005aa8:	08006db0 	.word	0x08006db0
 8005aac:	08006db0 	.word	0x08006db0
 8005ab0:	08006db0 	.word	0x08006db0
 8005ab4:	08006db4 	.word	0x08006db4

08005ab8 <__retarget_lock_init_recursive>:
 8005ab8:	4770      	bx	lr

08005aba <__retarget_lock_acquire_recursive>:
 8005aba:	4770      	bx	lr

08005abc <__retarget_lock_release_recursive>:
 8005abc:	4770      	bx	lr

08005abe <memcpy>:
 8005abe:	440a      	add	r2, r1
 8005ac0:	4291      	cmp	r1, r2
 8005ac2:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ac6:	d100      	bne.n	8005aca <memcpy+0xc>
 8005ac8:	4770      	bx	lr
 8005aca:	b510      	push	{r4, lr}
 8005acc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ad0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ad4:	4291      	cmp	r1, r2
 8005ad6:	d1f9      	bne.n	8005acc <memcpy+0xe>
 8005ad8:	bd10      	pop	{r4, pc}
	...

08005adc <_free_r>:
 8005adc:	b538      	push	{r3, r4, r5, lr}
 8005ade:	4605      	mov	r5, r0
 8005ae0:	2900      	cmp	r1, #0
 8005ae2:	d041      	beq.n	8005b68 <_free_r+0x8c>
 8005ae4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ae8:	1f0c      	subs	r4, r1, #4
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	bfb8      	it	lt
 8005aee:	18e4      	addlt	r4, r4, r3
 8005af0:	f000 f8e0 	bl	8005cb4 <__malloc_lock>
 8005af4:	4a1d      	ldr	r2, [pc, #116]	@ (8005b6c <_free_r+0x90>)
 8005af6:	6813      	ldr	r3, [r2, #0]
 8005af8:	b933      	cbnz	r3, 8005b08 <_free_r+0x2c>
 8005afa:	6063      	str	r3, [r4, #4]
 8005afc:	6014      	str	r4, [r2, #0]
 8005afe:	4628      	mov	r0, r5
 8005b00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b04:	f000 b8dc 	b.w	8005cc0 <__malloc_unlock>
 8005b08:	42a3      	cmp	r3, r4
 8005b0a:	d908      	bls.n	8005b1e <_free_r+0x42>
 8005b0c:	6820      	ldr	r0, [r4, #0]
 8005b0e:	1821      	adds	r1, r4, r0
 8005b10:	428b      	cmp	r3, r1
 8005b12:	bf01      	itttt	eq
 8005b14:	6819      	ldreq	r1, [r3, #0]
 8005b16:	685b      	ldreq	r3, [r3, #4]
 8005b18:	1809      	addeq	r1, r1, r0
 8005b1a:	6021      	streq	r1, [r4, #0]
 8005b1c:	e7ed      	b.n	8005afa <_free_r+0x1e>
 8005b1e:	461a      	mov	r2, r3
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	b10b      	cbz	r3, 8005b28 <_free_r+0x4c>
 8005b24:	42a3      	cmp	r3, r4
 8005b26:	d9fa      	bls.n	8005b1e <_free_r+0x42>
 8005b28:	6811      	ldr	r1, [r2, #0]
 8005b2a:	1850      	adds	r0, r2, r1
 8005b2c:	42a0      	cmp	r0, r4
 8005b2e:	d10b      	bne.n	8005b48 <_free_r+0x6c>
 8005b30:	6820      	ldr	r0, [r4, #0]
 8005b32:	4401      	add	r1, r0
 8005b34:	1850      	adds	r0, r2, r1
 8005b36:	4283      	cmp	r3, r0
 8005b38:	6011      	str	r1, [r2, #0]
 8005b3a:	d1e0      	bne.n	8005afe <_free_r+0x22>
 8005b3c:	6818      	ldr	r0, [r3, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	6053      	str	r3, [r2, #4]
 8005b42:	4408      	add	r0, r1
 8005b44:	6010      	str	r0, [r2, #0]
 8005b46:	e7da      	b.n	8005afe <_free_r+0x22>
 8005b48:	d902      	bls.n	8005b50 <_free_r+0x74>
 8005b4a:	230c      	movs	r3, #12
 8005b4c:	602b      	str	r3, [r5, #0]
 8005b4e:	e7d6      	b.n	8005afe <_free_r+0x22>
 8005b50:	6820      	ldr	r0, [r4, #0]
 8005b52:	1821      	adds	r1, r4, r0
 8005b54:	428b      	cmp	r3, r1
 8005b56:	bf04      	itt	eq
 8005b58:	6819      	ldreq	r1, [r3, #0]
 8005b5a:	685b      	ldreq	r3, [r3, #4]
 8005b5c:	6063      	str	r3, [r4, #4]
 8005b5e:	bf04      	itt	eq
 8005b60:	1809      	addeq	r1, r1, r0
 8005b62:	6021      	streq	r1, [r4, #0]
 8005b64:	6054      	str	r4, [r2, #4]
 8005b66:	e7ca      	b.n	8005afe <_free_r+0x22>
 8005b68:	bd38      	pop	{r3, r4, r5, pc}
 8005b6a:	bf00      	nop
 8005b6c:	20000c20 	.word	0x20000c20

08005b70 <sbrk_aligned>:
 8005b70:	b570      	push	{r4, r5, r6, lr}
 8005b72:	4e0f      	ldr	r6, [pc, #60]	@ (8005bb0 <sbrk_aligned+0x40>)
 8005b74:	460c      	mov	r4, r1
 8005b76:	6831      	ldr	r1, [r6, #0]
 8005b78:	4605      	mov	r5, r0
 8005b7a:	b911      	cbnz	r1, 8005b82 <sbrk_aligned+0x12>
 8005b7c:	f000 fcd4 	bl	8006528 <_sbrk_r>
 8005b80:	6030      	str	r0, [r6, #0]
 8005b82:	4621      	mov	r1, r4
 8005b84:	4628      	mov	r0, r5
 8005b86:	f000 fccf 	bl	8006528 <_sbrk_r>
 8005b8a:	1c43      	adds	r3, r0, #1
 8005b8c:	d103      	bne.n	8005b96 <sbrk_aligned+0x26>
 8005b8e:	f04f 34ff 	mov.w	r4, #4294967295
 8005b92:	4620      	mov	r0, r4
 8005b94:	bd70      	pop	{r4, r5, r6, pc}
 8005b96:	1cc4      	adds	r4, r0, #3
 8005b98:	f024 0403 	bic.w	r4, r4, #3
 8005b9c:	42a0      	cmp	r0, r4
 8005b9e:	d0f8      	beq.n	8005b92 <sbrk_aligned+0x22>
 8005ba0:	1a21      	subs	r1, r4, r0
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	f000 fcc0 	bl	8006528 <_sbrk_r>
 8005ba8:	3001      	adds	r0, #1
 8005baa:	d1f2      	bne.n	8005b92 <sbrk_aligned+0x22>
 8005bac:	e7ef      	b.n	8005b8e <sbrk_aligned+0x1e>
 8005bae:	bf00      	nop
 8005bb0:	20000c1c 	.word	0x20000c1c

08005bb4 <_malloc_r>:
 8005bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bb8:	1ccd      	adds	r5, r1, #3
 8005bba:	f025 0503 	bic.w	r5, r5, #3
 8005bbe:	3508      	adds	r5, #8
 8005bc0:	2d0c      	cmp	r5, #12
 8005bc2:	bf38      	it	cc
 8005bc4:	250c      	movcc	r5, #12
 8005bc6:	2d00      	cmp	r5, #0
 8005bc8:	4606      	mov	r6, r0
 8005bca:	db01      	blt.n	8005bd0 <_malloc_r+0x1c>
 8005bcc:	42a9      	cmp	r1, r5
 8005bce:	d904      	bls.n	8005bda <_malloc_r+0x26>
 8005bd0:	230c      	movs	r3, #12
 8005bd2:	6033      	str	r3, [r6, #0]
 8005bd4:	2000      	movs	r0, #0
 8005bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005cb0 <_malloc_r+0xfc>
 8005bde:	f000 f869 	bl	8005cb4 <__malloc_lock>
 8005be2:	f8d8 3000 	ldr.w	r3, [r8]
 8005be6:	461c      	mov	r4, r3
 8005be8:	bb44      	cbnz	r4, 8005c3c <_malloc_r+0x88>
 8005bea:	4629      	mov	r1, r5
 8005bec:	4630      	mov	r0, r6
 8005bee:	f7ff ffbf 	bl	8005b70 <sbrk_aligned>
 8005bf2:	1c43      	adds	r3, r0, #1
 8005bf4:	4604      	mov	r4, r0
 8005bf6:	d158      	bne.n	8005caa <_malloc_r+0xf6>
 8005bf8:	f8d8 4000 	ldr.w	r4, [r8]
 8005bfc:	4627      	mov	r7, r4
 8005bfe:	2f00      	cmp	r7, #0
 8005c00:	d143      	bne.n	8005c8a <_malloc_r+0xd6>
 8005c02:	2c00      	cmp	r4, #0
 8005c04:	d04b      	beq.n	8005c9e <_malloc_r+0xea>
 8005c06:	6823      	ldr	r3, [r4, #0]
 8005c08:	4639      	mov	r1, r7
 8005c0a:	4630      	mov	r0, r6
 8005c0c:	eb04 0903 	add.w	r9, r4, r3
 8005c10:	f000 fc8a 	bl	8006528 <_sbrk_r>
 8005c14:	4581      	cmp	r9, r0
 8005c16:	d142      	bne.n	8005c9e <_malloc_r+0xea>
 8005c18:	6821      	ldr	r1, [r4, #0]
 8005c1a:	1a6d      	subs	r5, r5, r1
 8005c1c:	4629      	mov	r1, r5
 8005c1e:	4630      	mov	r0, r6
 8005c20:	f7ff ffa6 	bl	8005b70 <sbrk_aligned>
 8005c24:	3001      	adds	r0, #1
 8005c26:	d03a      	beq.n	8005c9e <_malloc_r+0xea>
 8005c28:	6823      	ldr	r3, [r4, #0]
 8005c2a:	442b      	add	r3, r5
 8005c2c:	6023      	str	r3, [r4, #0]
 8005c2e:	f8d8 3000 	ldr.w	r3, [r8]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	bb62      	cbnz	r2, 8005c90 <_malloc_r+0xdc>
 8005c36:	f8c8 7000 	str.w	r7, [r8]
 8005c3a:	e00f      	b.n	8005c5c <_malloc_r+0xa8>
 8005c3c:	6822      	ldr	r2, [r4, #0]
 8005c3e:	1b52      	subs	r2, r2, r5
 8005c40:	d420      	bmi.n	8005c84 <_malloc_r+0xd0>
 8005c42:	2a0b      	cmp	r2, #11
 8005c44:	d917      	bls.n	8005c76 <_malloc_r+0xc2>
 8005c46:	1961      	adds	r1, r4, r5
 8005c48:	42a3      	cmp	r3, r4
 8005c4a:	6025      	str	r5, [r4, #0]
 8005c4c:	bf18      	it	ne
 8005c4e:	6059      	strne	r1, [r3, #4]
 8005c50:	6863      	ldr	r3, [r4, #4]
 8005c52:	bf08      	it	eq
 8005c54:	f8c8 1000 	streq.w	r1, [r8]
 8005c58:	5162      	str	r2, [r4, r5]
 8005c5a:	604b      	str	r3, [r1, #4]
 8005c5c:	4630      	mov	r0, r6
 8005c5e:	f000 f82f 	bl	8005cc0 <__malloc_unlock>
 8005c62:	f104 000b 	add.w	r0, r4, #11
 8005c66:	1d23      	adds	r3, r4, #4
 8005c68:	f020 0007 	bic.w	r0, r0, #7
 8005c6c:	1ac2      	subs	r2, r0, r3
 8005c6e:	bf1c      	itt	ne
 8005c70:	1a1b      	subne	r3, r3, r0
 8005c72:	50a3      	strne	r3, [r4, r2]
 8005c74:	e7af      	b.n	8005bd6 <_malloc_r+0x22>
 8005c76:	6862      	ldr	r2, [r4, #4]
 8005c78:	42a3      	cmp	r3, r4
 8005c7a:	bf0c      	ite	eq
 8005c7c:	f8c8 2000 	streq.w	r2, [r8]
 8005c80:	605a      	strne	r2, [r3, #4]
 8005c82:	e7eb      	b.n	8005c5c <_malloc_r+0xa8>
 8005c84:	4623      	mov	r3, r4
 8005c86:	6864      	ldr	r4, [r4, #4]
 8005c88:	e7ae      	b.n	8005be8 <_malloc_r+0x34>
 8005c8a:	463c      	mov	r4, r7
 8005c8c:	687f      	ldr	r7, [r7, #4]
 8005c8e:	e7b6      	b.n	8005bfe <_malloc_r+0x4a>
 8005c90:	461a      	mov	r2, r3
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	42a3      	cmp	r3, r4
 8005c96:	d1fb      	bne.n	8005c90 <_malloc_r+0xdc>
 8005c98:	2300      	movs	r3, #0
 8005c9a:	6053      	str	r3, [r2, #4]
 8005c9c:	e7de      	b.n	8005c5c <_malloc_r+0xa8>
 8005c9e:	230c      	movs	r3, #12
 8005ca0:	6033      	str	r3, [r6, #0]
 8005ca2:	4630      	mov	r0, r6
 8005ca4:	f000 f80c 	bl	8005cc0 <__malloc_unlock>
 8005ca8:	e794      	b.n	8005bd4 <_malloc_r+0x20>
 8005caa:	6005      	str	r5, [r0, #0]
 8005cac:	e7d6      	b.n	8005c5c <_malloc_r+0xa8>
 8005cae:	bf00      	nop
 8005cb0:	20000c20 	.word	0x20000c20

08005cb4 <__malloc_lock>:
 8005cb4:	4801      	ldr	r0, [pc, #4]	@ (8005cbc <__malloc_lock+0x8>)
 8005cb6:	f7ff bf00 	b.w	8005aba <__retarget_lock_acquire_recursive>
 8005cba:	bf00      	nop
 8005cbc:	20000c18 	.word	0x20000c18

08005cc0 <__malloc_unlock>:
 8005cc0:	4801      	ldr	r0, [pc, #4]	@ (8005cc8 <__malloc_unlock+0x8>)
 8005cc2:	f7ff befb 	b.w	8005abc <__retarget_lock_release_recursive>
 8005cc6:	bf00      	nop
 8005cc8:	20000c18 	.word	0x20000c18

08005ccc <__ssputs_r>:
 8005ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cd0:	688e      	ldr	r6, [r1, #8]
 8005cd2:	461f      	mov	r7, r3
 8005cd4:	42be      	cmp	r6, r7
 8005cd6:	680b      	ldr	r3, [r1, #0]
 8005cd8:	4682      	mov	sl, r0
 8005cda:	460c      	mov	r4, r1
 8005cdc:	4690      	mov	r8, r2
 8005cde:	d82d      	bhi.n	8005d3c <__ssputs_r+0x70>
 8005ce0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ce4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005ce8:	d026      	beq.n	8005d38 <__ssputs_r+0x6c>
 8005cea:	6965      	ldr	r5, [r4, #20]
 8005cec:	6909      	ldr	r1, [r1, #16]
 8005cee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005cf2:	eba3 0901 	sub.w	r9, r3, r1
 8005cf6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005cfa:	1c7b      	adds	r3, r7, #1
 8005cfc:	444b      	add	r3, r9
 8005cfe:	106d      	asrs	r5, r5, #1
 8005d00:	429d      	cmp	r5, r3
 8005d02:	bf38      	it	cc
 8005d04:	461d      	movcc	r5, r3
 8005d06:	0553      	lsls	r3, r2, #21
 8005d08:	d527      	bpl.n	8005d5a <__ssputs_r+0x8e>
 8005d0a:	4629      	mov	r1, r5
 8005d0c:	f7ff ff52 	bl	8005bb4 <_malloc_r>
 8005d10:	4606      	mov	r6, r0
 8005d12:	b360      	cbz	r0, 8005d6e <__ssputs_r+0xa2>
 8005d14:	6921      	ldr	r1, [r4, #16]
 8005d16:	464a      	mov	r2, r9
 8005d18:	f7ff fed1 	bl	8005abe <memcpy>
 8005d1c:	89a3      	ldrh	r3, [r4, #12]
 8005d1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005d22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d26:	81a3      	strh	r3, [r4, #12]
 8005d28:	6126      	str	r6, [r4, #16]
 8005d2a:	6165      	str	r5, [r4, #20]
 8005d2c:	444e      	add	r6, r9
 8005d2e:	eba5 0509 	sub.w	r5, r5, r9
 8005d32:	6026      	str	r6, [r4, #0]
 8005d34:	60a5      	str	r5, [r4, #8]
 8005d36:	463e      	mov	r6, r7
 8005d38:	42be      	cmp	r6, r7
 8005d3a:	d900      	bls.n	8005d3e <__ssputs_r+0x72>
 8005d3c:	463e      	mov	r6, r7
 8005d3e:	6820      	ldr	r0, [r4, #0]
 8005d40:	4632      	mov	r2, r6
 8005d42:	4641      	mov	r1, r8
 8005d44:	f000 fbb4 	bl	80064b0 <memmove>
 8005d48:	68a3      	ldr	r3, [r4, #8]
 8005d4a:	1b9b      	subs	r3, r3, r6
 8005d4c:	60a3      	str	r3, [r4, #8]
 8005d4e:	6823      	ldr	r3, [r4, #0]
 8005d50:	4433      	add	r3, r6
 8005d52:	6023      	str	r3, [r4, #0]
 8005d54:	2000      	movs	r0, #0
 8005d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d5a:	462a      	mov	r2, r5
 8005d5c:	f000 fbf4 	bl	8006548 <_realloc_r>
 8005d60:	4606      	mov	r6, r0
 8005d62:	2800      	cmp	r0, #0
 8005d64:	d1e0      	bne.n	8005d28 <__ssputs_r+0x5c>
 8005d66:	6921      	ldr	r1, [r4, #16]
 8005d68:	4650      	mov	r0, sl
 8005d6a:	f7ff feb7 	bl	8005adc <_free_r>
 8005d6e:	230c      	movs	r3, #12
 8005d70:	f8ca 3000 	str.w	r3, [sl]
 8005d74:	89a3      	ldrh	r3, [r4, #12]
 8005d76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d7a:	81a3      	strh	r3, [r4, #12]
 8005d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d80:	e7e9      	b.n	8005d56 <__ssputs_r+0x8a>
	...

08005d84 <_svfiprintf_r>:
 8005d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d88:	4698      	mov	r8, r3
 8005d8a:	898b      	ldrh	r3, [r1, #12]
 8005d8c:	061b      	lsls	r3, r3, #24
 8005d8e:	b09d      	sub	sp, #116	@ 0x74
 8005d90:	4607      	mov	r7, r0
 8005d92:	460d      	mov	r5, r1
 8005d94:	4614      	mov	r4, r2
 8005d96:	d510      	bpl.n	8005dba <_svfiprintf_r+0x36>
 8005d98:	690b      	ldr	r3, [r1, #16]
 8005d9a:	b973      	cbnz	r3, 8005dba <_svfiprintf_r+0x36>
 8005d9c:	2140      	movs	r1, #64	@ 0x40
 8005d9e:	f7ff ff09 	bl	8005bb4 <_malloc_r>
 8005da2:	6028      	str	r0, [r5, #0]
 8005da4:	6128      	str	r0, [r5, #16]
 8005da6:	b930      	cbnz	r0, 8005db6 <_svfiprintf_r+0x32>
 8005da8:	230c      	movs	r3, #12
 8005daa:	603b      	str	r3, [r7, #0]
 8005dac:	f04f 30ff 	mov.w	r0, #4294967295
 8005db0:	b01d      	add	sp, #116	@ 0x74
 8005db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db6:	2340      	movs	r3, #64	@ 0x40
 8005db8:	616b      	str	r3, [r5, #20]
 8005dba:	2300      	movs	r3, #0
 8005dbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dbe:	2320      	movs	r3, #32
 8005dc0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005dc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005dc8:	2330      	movs	r3, #48	@ 0x30
 8005dca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005f68 <_svfiprintf_r+0x1e4>
 8005dce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005dd2:	f04f 0901 	mov.w	r9, #1
 8005dd6:	4623      	mov	r3, r4
 8005dd8:	469a      	mov	sl, r3
 8005dda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005dde:	b10a      	cbz	r2, 8005de4 <_svfiprintf_r+0x60>
 8005de0:	2a25      	cmp	r2, #37	@ 0x25
 8005de2:	d1f9      	bne.n	8005dd8 <_svfiprintf_r+0x54>
 8005de4:	ebba 0b04 	subs.w	fp, sl, r4
 8005de8:	d00b      	beq.n	8005e02 <_svfiprintf_r+0x7e>
 8005dea:	465b      	mov	r3, fp
 8005dec:	4622      	mov	r2, r4
 8005dee:	4629      	mov	r1, r5
 8005df0:	4638      	mov	r0, r7
 8005df2:	f7ff ff6b 	bl	8005ccc <__ssputs_r>
 8005df6:	3001      	adds	r0, #1
 8005df8:	f000 80a7 	beq.w	8005f4a <_svfiprintf_r+0x1c6>
 8005dfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005dfe:	445a      	add	r2, fp
 8005e00:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e02:	f89a 3000 	ldrb.w	r3, [sl]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f000 809f 	beq.w	8005f4a <_svfiprintf_r+0x1c6>
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e16:	f10a 0a01 	add.w	sl, sl, #1
 8005e1a:	9304      	str	r3, [sp, #16]
 8005e1c:	9307      	str	r3, [sp, #28]
 8005e1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e22:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e24:	4654      	mov	r4, sl
 8005e26:	2205      	movs	r2, #5
 8005e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e2c:	484e      	ldr	r0, [pc, #312]	@ (8005f68 <_svfiprintf_r+0x1e4>)
 8005e2e:	f7fa f9df 	bl	80001f0 <memchr>
 8005e32:	9a04      	ldr	r2, [sp, #16]
 8005e34:	b9d8      	cbnz	r0, 8005e6e <_svfiprintf_r+0xea>
 8005e36:	06d0      	lsls	r0, r2, #27
 8005e38:	bf44      	itt	mi
 8005e3a:	2320      	movmi	r3, #32
 8005e3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e40:	0711      	lsls	r1, r2, #28
 8005e42:	bf44      	itt	mi
 8005e44:	232b      	movmi	r3, #43	@ 0x2b
 8005e46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e4a:	f89a 3000 	ldrb.w	r3, [sl]
 8005e4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e50:	d015      	beq.n	8005e7e <_svfiprintf_r+0xfa>
 8005e52:	9a07      	ldr	r2, [sp, #28]
 8005e54:	4654      	mov	r4, sl
 8005e56:	2000      	movs	r0, #0
 8005e58:	f04f 0c0a 	mov.w	ip, #10
 8005e5c:	4621      	mov	r1, r4
 8005e5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e62:	3b30      	subs	r3, #48	@ 0x30
 8005e64:	2b09      	cmp	r3, #9
 8005e66:	d94b      	bls.n	8005f00 <_svfiprintf_r+0x17c>
 8005e68:	b1b0      	cbz	r0, 8005e98 <_svfiprintf_r+0x114>
 8005e6a:	9207      	str	r2, [sp, #28]
 8005e6c:	e014      	b.n	8005e98 <_svfiprintf_r+0x114>
 8005e6e:	eba0 0308 	sub.w	r3, r0, r8
 8005e72:	fa09 f303 	lsl.w	r3, r9, r3
 8005e76:	4313      	orrs	r3, r2
 8005e78:	9304      	str	r3, [sp, #16]
 8005e7a:	46a2      	mov	sl, r4
 8005e7c:	e7d2      	b.n	8005e24 <_svfiprintf_r+0xa0>
 8005e7e:	9b03      	ldr	r3, [sp, #12]
 8005e80:	1d19      	adds	r1, r3, #4
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	9103      	str	r1, [sp, #12]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	bfbb      	ittet	lt
 8005e8a:	425b      	neglt	r3, r3
 8005e8c:	f042 0202 	orrlt.w	r2, r2, #2
 8005e90:	9307      	strge	r3, [sp, #28]
 8005e92:	9307      	strlt	r3, [sp, #28]
 8005e94:	bfb8      	it	lt
 8005e96:	9204      	strlt	r2, [sp, #16]
 8005e98:	7823      	ldrb	r3, [r4, #0]
 8005e9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e9c:	d10a      	bne.n	8005eb4 <_svfiprintf_r+0x130>
 8005e9e:	7863      	ldrb	r3, [r4, #1]
 8005ea0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ea2:	d132      	bne.n	8005f0a <_svfiprintf_r+0x186>
 8005ea4:	9b03      	ldr	r3, [sp, #12]
 8005ea6:	1d1a      	adds	r2, r3, #4
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	9203      	str	r2, [sp, #12]
 8005eac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005eb0:	3402      	adds	r4, #2
 8005eb2:	9305      	str	r3, [sp, #20]
 8005eb4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005f78 <_svfiprintf_r+0x1f4>
 8005eb8:	7821      	ldrb	r1, [r4, #0]
 8005eba:	2203      	movs	r2, #3
 8005ebc:	4650      	mov	r0, sl
 8005ebe:	f7fa f997 	bl	80001f0 <memchr>
 8005ec2:	b138      	cbz	r0, 8005ed4 <_svfiprintf_r+0x150>
 8005ec4:	9b04      	ldr	r3, [sp, #16]
 8005ec6:	eba0 000a 	sub.w	r0, r0, sl
 8005eca:	2240      	movs	r2, #64	@ 0x40
 8005ecc:	4082      	lsls	r2, r0
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	3401      	adds	r4, #1
 8005ed2:	9304      	str	r3, [sp, #16]
 8005ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ed8:	4824      	ldr	r0, [pc, #144]	@ (8005f6c <_svfiprintf_r+0x1e8>)
 8005eda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ede:	2206      	movs	r2, #6
 8005ee0:	f7fa f986 	bl	80001f0 <memchr>
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	d036      	beq.n	8005f56 <_svfiprintf_r+0x1d2>
 8005ee8:	4b21      	ldr	r3, [pc, #132]	@ (8005f70 <_svfiprintf_r+0x1ec>)
 8005eea:	bb1b      	cbnz	r3, 8005f34 <_svfiprintf_r+0x1b0>
 8005eec:	9b03      	ldr	r3, [sp, #12]
 8005eee:	3307      	adds	r3, #7
 8005ef0:	f023 0307 	bic.w	r3, r3, #7
 8005ef4:	3308      	adds	r3, #8
 8005ef6:	9303      	str	r3, [sp, #12]
 8005ef8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005efa:	4433      	add	r3, r6
 8005efc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005efe:	e76a      	b.n	8005dd6 <_svfiprintf_r+0x52>
 8005f00:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f04:	460c      	mov	r4, r1
 8005f06:	2001      	movs	r0, #1
 8005f08:	e7a8      	b.n	8005e5c <_svfiprintf_r+0xd8>
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	3401      	adds	r4, #1
 8005f0e:	9305      	str	r3, [sp, #20]
 8005f10:	4619      	mov	r1, r3
 8005f12:	f04f 0c0a 	mov.w	ip, #10
 8005f16:	4620      	mov	r0, r4
 8005f18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f1c:	3a30      	subs	r2, #48	@ 0x30
 8005f1e:	2a09      	cmp	r2, #9
 8005f20:	d903      	bls.n	8005f2a <_svfiprintf_r+0x1a6>
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d0c6      	beq.n	8005eb4 <_svfiprintf_r+0x130>
 8005f26:	9105      	str	r1, [sp, #20]
 8005f28:	e7c4      	b.n	8005eb4 <_svfiprintf_r+0x130>
 8005f2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f2e:	4604      	mov	r4, r0
 8005f30:	2301      	movs	r3, #1
 8005f32:	e7f0      	b.n	8005f16 <_svfiprintf_r+0x192>
 8005f34:	ab03      	add	r3, sp, #12
 8005f36:	9300      	str	r3, [sp, #0]
 8005f38:	462a      	mov	r2, r5
 8005f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8005f74 <_svfiprintf_r+0x1f0>)
 8005f3c:	a904      	add	r1, sp, #16
 8005f3e:	4638      	mov	r0, r7
 8005f40:	f3af 8000 	nop.w
 8005f44:	1c42      	adds	r2, r0, #1
 8005f46:	4606      	mov	r6, r0
 8005f48:	d1d6      	bne.n	8005ef8 <_svfiprintf_r+0x174>
 8005f4a:	89ab      	ldrh	r3, [r5, #12]
 8005f4c:	065b      	lsls	r3, r3, #25
 8005f4e:	f53f af2d 	bmi.w	8005dac <_svfiprintf_r+0x28>
 8005f52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f54:	e72c      	b.n	8005db0 <_svfiprintf_r+0x2c>
 8005f56:	ab03      	add	r3, sp, #12
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	462a      	mov	r2, r5
 8005f5c:	4b05      	ldr	r3, [pc, #20]	@ (8005f74 <_svfiprintf_r+0x1f0>)
 8005f5e:	a904      	add	r1, sp, #16
 8005f60:	4638      	mov	r0, r7
 8005f62:	f000 f879 	bl	8006058 <_printf_i>
 8005f66:	e7ed      	b.n	8005f44 <_svfiprintf_r+0x1c0>
 8005f68:	08006d74 	.word	0x08006d74
 8005f6c:	08006d7e 	.word	0x08006d7e
 8005f70:	00000000 	.word	0x00000000
 8005f74:	08005ccd 	.word	0x08005ccd
 8005f78:	08006d7a 	.word	0x08006d7a

08005f7c <_printf_common>:
 8005f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f80:	4616      	mov	r6, r2
 8005f82:	4698      	mov	r8, r3
 8005f84:	688a      	ldr	r2, [r1, #8]
 8005f86:	690b      	ldr	r3, [r1, #16]
 8005f88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	bfb8      	it	lt
 8005f90:	4613      	movlt	r3, r2
 8005f92:	6033      	str	r3, [r6, #0]
 8005f94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f98:	4607      	mov	r7, r0
 8005f9a:	460c      	mov	r4, r1
 8005f9c:	b10a      	cbz	r2, 8005fa2 <_printf_common+0x26>
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	6033      	str	r3, [r6, #0]
 8005fa2:	6823      	ldr	r3, [r4, #0]
 8005fa4:	0699      	lsls	r1, r3, #26
 8005fa6:	bf42      	ittt	mi
 8005fa8:	6833      	ldrmi	r3, [r6, #0]
 8005faa:	3302      	addmi	r3, #2
 8005fac:	6033      	strmi	r3, [r6, #0]
 8005fae:	6825      	ldr	r5, [r4, #0]
 8005fb0:	f015 0506 	ands.w	r5, r5, #6
 8005fb4:	d106      	bne.n	8005fc4 <_printf_common+0x48>
 8005fb6:	f104 0a19 	add.w	sl, r4, #25
 8005fba:	68e3      	ldr	r3, [r4, #12]
 8005fbc:	6832      	ldr	r2, [r6, #0]
 8005fbe:	1a9b      	subs	r3, r3, r2
 8005fc0:	42ab      	cmp	r3, r5
 8005fc2:	dc26      	bgt.n	8006012 <_printf_common+0x96>
 8005fc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005fc8:	6822      	ldr	r2, [r4, #0]
 8005fca:	3b00      	subs	r3, #0
 8005fcc:	bf18      	it	ne
 8005fce:	2301      	movne	r3, #1
 8005fd0:	0692      	lsls	r2, r2, #26
 8005fd2:	d42b      	bmi.n	800602c <_printf_common+0xb0>
 8005fd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005fd8:	4641      	mov	r1, r8
 8005fda:	4638      	mov	r0, r7
 8005fdc:	47c8      	blx	r9
 8005fde:	3001      	adds	r0, #1
 8005fe0:	d01e      	beq.n	8006020 <_printf_common+0xa4>
 8005fe2:	6823      	ldr	r3, [r4, #0]
 8005fe4:	6922      	ldr	r2, [r4, #16]
 8005fe6:	f003 0306 	and.w	r3, r3, #6
 8005fea:	2b04      	cmp	r3, #4
 8005fec:	bf02      	ittt	eq
 8005fee:	68e5      	ldreq	r5, [r4, #12]
 8005ff0:	6833      	ldreq	r3, [r6, #0]
 8005ff2:	1aed      	subeq	r5, r5, r3
 8005ff4:	68a3      	ldr	r3, [r4, #8]
 8005ff6:	bf0c      	ite	eq
 8005ff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ffc:	2500      	movne	r5, #0
 8005ffe:	4293      	cmp	r3, r2
 8006000:	bfc4      	itt	gt
 8006002:	1a9b      	subgt	r3, r3, r2
 8006004:	18ed      	addgt	r5, r5, r3
 8006006:	2600      	movs	r6, #0
 8006008:	341a      	adds	r4, #26
 800600a:	42b5      	cmp	r5, r6
 800600c:	d11a      	bne.n	8006044 <_printf_common+0xc8>
 800600e:	2000      	movs	r0, #0
 8006010:	e008      	b.n	8006024 <_printf_common+0xa8>
 8006012:	2301      	movs	r3, #1
 8006014:	4652      	mov	r2, sl
 8006016:	4641      	mov	r1, r8
 8006018:	4638      	mov	r0, r7
 800601a:	47c8      	blx	r9
 800601c:	3001      	adds	r0, #1
 800601e:	d103      	bne.n	8006028 <_printf_common+0xac>
 8006020:	f04f 30ff 	mov.w	r0, #4294967295
 8006024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006028:	3501      	adds	r5, #1
 800602a:	e7c6      	b.n	8005fba <_printf_common+0x3e>
 800602c:	18e1      	adds	r1, r4, r3
 800602e:	1c5a      	adds	r2, r3, #1
 8006030:	2030      	movs	r0, #48	@ 0x30
 8006032:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006036:	4422      	add	r2, r4
 8006038:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800603c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006040:	3302      	adds	r3, #2
 8006042:	e7c7      	b.n	8005fd4 <_printf_common+0x58>
 8006044:	2301      	movs	r3, #1
 8006046:	4622      	mov	r2, r4
 8006048:	4641      	mov	r1, r8
 800604a:	4638      	mov	r0, r7
 800604c:	47c8      	blx	r9
 800604e:	3001      	adds	r0, #1
 8006050:	d0e6      	beq.n	8006020 <_printf_common+0xa4>
 8006052:	3601      	adds	r6, #1
 8006054:	e7d9      	b.n	800600a <_printf_common+0x8e>
	...

08006058 <_printf_i>:
 8006058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800605c:	7e0f      	ldrb	r7, [r1, #24]
 800605e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006060:	2f78      	cmp	r7, #120	@ 0x78
 8006062:	4691      	mov	r9, r2
 8006064:	4680      	mov	r8, r0
 8006066:	460c      	mov	r4, r1
 8006068:	469a      	mov	sl, r3
 800606a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800606e:	d807      	bhi.n	8006080 <_printf_i+0x28>
 8006070:	2f62      	cmp	r7, #98	@ 0x62
 8006072:	d80a      	bhi.n	800608a <_printf_i+0x32>
 8006074:	2f00      	cmp	r7, #0
 8006076:	f000 80d1 	beq.w	800621c <_printf_i+0x1c4>
 800607a:	2f58      	cmp	r7, #88	@ 0x58
 800607c:	f000 80b8 	beq.w	80061f0 <_printf_i+0x198>
 8006080:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006084:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006088:	e03a      	b.n	8006100 <_printf_i+0xa8>
 800608a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800608e:	2b15      	cmp	r3, #21
 8006090:	d8f6      	bhi.n	8006080 <_printf_i+0x28>
 8006092:	a101      	add	r1, pc, #4	@ (adr r1, 8006098 <_printf_i+0x40>)
 8006094:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006098:	080060f1 	.word	0x080060f1
 800609c:	08006105 	.word	0x08006105
 80060a0:	08006081 	.word	0x08006081
 80060a4:	08006081 	.word	0x08006081
 80060a8:	08006081 	.word	0x08006081
 80060ac:	08006081 	.word	0x08006081
 80060b0:	08006105 	.word	0x08006105
 80060b4:	08006081 	.word	0x08006081
 80060b8:	08006081 	.word	0x08006081
 80060bc:	08006081 	.word	0x08006081
 80060c0:	08006081 	.word	0x08006081
 80060c4:	08006203 	.word	0x08006203
 80060c8:	0800612f 	.word	0x0800612f
 80060cc:	080061bd 	.word	0x080061bd
 80060d0:	08006081 	.word	0x08006081
 80060d4:	08006081 	.word	0x08006081
 80060d8:	08006225 	.word	0x08006225
 80060dc:	08006081 	.word	0x08006081
 80060e0:	0800612f 	.word	0x0800612f
 80060e4:	08006081 	.word	0x08006081
 80060e8:	08006081 	.word	0x08006081
 80060ec:	080061c5 	.word	0x080061c5
 80060f0:	6833      	ldr	r3, [r6, #0]
 80060f2:	1d1a      	adds	r2, r3, #4
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6032      	str	r2, [r6, #0]
 80060f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006100:	2301      	movs	r3, #1
 8006102:	e09c      	b.n	800623e <_printf_i+0x1e6>
 8006104:	6833      	ldr	r3, [r6, #0]
 8006106:	6820      	ldr	r0, [r4, #0]
 8006108:	1d19      	adds	r1, r3, #4
 800610a:	6031      	str	r1, [r6, #0]
 800610c:	0606      	lsls	r6, r0, #24
 800610e:	d501      	bpl.n	8006114 <_printf_i+0xbc>
 8006110:	681d      	ldr	r5, [r3, #0]
 8006112:	e003      	b.n	800611c <_printf_i+0xc4>
 8006114:	0645      	lsls	r5, r0, #25
 8006116:	d5fb      	bpl.n	8006110 <_printf_i+0xb8>
 8006118:	f9b3 5000 	ldrsh.w	r5, [r3]
 800611c:	2d00      	cmp	r5, #0
 800611e:	da03      	bge.n	8006128 <_printf_i+0xd0>
 8006120:	232d      	movs	r3, #45	@ 0x2d
 8006122:	426d      	negs	r5, r5
 8006124:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006128:	4858      	ldr	r0, [pc, #352]	@ (800628c <_printf_i+0x234>)
 800612a:	230a      	movs	r3, #10
 800612c:	e011      	b.n	8006152 <_printf_i+0xfa>
 800612e:	6821      	ldr	r1, [r4, #0]
 8006130:	6833      	ldr	r3, [r6, #0]
 8006132:	0608      	lsls	r0, r1, #24
 8006134:	f853 5b04 	ldr.w	r5, [r3], #4
 8006138:	d402      	bmi.n	8006140 <_printf_i+0xe8>
 800613a:	0649      	lsls	r1, r1, #25
 800613c:	bf48      	it	mi
 800613e:	b2ad      	uxthmi	r5, r5
 8006140:	2f6f      	cmp	r7, #111	@ 0x6f
 8006142:	4852      	ldr	r0, [pc, #328]	@ (800628c <_printf_i+0x234>)
 8006144:	6033      	str	r3, [r6, #0]
 8006146:	bf14      	ite	ne
 8006148:	230a      	movne	r3, #10
 800614a:	2308      	moveq	r3, #8
 800614c:	2100      	movs	r1, #0
 800614e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006152:	6866      	ldr	r6, [r4, #4]
 8006154:	60a6      	str	r6, [r4, #8]
 8006156:	2e00      	cmp	r6, #0
 8006158:	db05      	blt.n	8006166 <_printf_i+0x10e>
 800615a:	6821      	ldr	r1, [r4, #0]
 800615c:	432e      	orrs	r6, r5
 800615e:	f021 0104 	bic.w	r1, r1, #4
 8006162:	6021      	str	r1, [r4, #0]
 8006164:	d04b      	beq.n	80061fe <_printf_i+0x1a6>
 8006166:	4616      	mov	r6, r2
 8006168:	fbb5 f1f3 	udiv	r1, r5, r3
 800616c:	fb03 5711 	mls	r7, r3, r1, r5
 8006170:	5dc7      	ldrb	r7, [r0, r7]
 8006172:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006176:	462f      	mov	r7, r5
 8006178:	42bb      	cmp	r3, r7
 800617a:	460d      	mov	r5, r1
 800617c:	d9f4      	bls.n	8006168 <_printf_i+0x110>
 800617e:	2b08      	cmp	r3, #8
 8006180:	d10b      	bne.n	800619a <_printf_i+0x142>
 8006182:	6823      	ldr	r3, [r4, #0]
 8006184:	07df      	lsls	r7, r3, #31
 8006186:	d508      	bpl.n	800619a <_printf_i+0x142>
 8006188:	6923      	ldr	r3, [r4, #16]
 800618a:	6861      	ldr	r1, [r4, #4]
 800618c:	4299      	cmp	r1, r3
 800618e:	bfde      	ittt	le
 8006190:	2330      	movle	r3, #48	@ 0x30
 8006192:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006196:	f106 36ff 	addle.w	r6, r6, #4294967295
 800619a:	1b92      	subs	r2, r2, r6
 800619c:	6122      	str	r2, [r4, #16]
 800619e:	f8cd a000 	str.w	sl, [sp]
 80061a2:	464b      	mov	r3, r9
 80061a4:	aa03      	add	r2, sp, #12
 80061a6:	4621      	mov	r1, r4
 80061a8:	4640      	mov	r0, r8
 80061aa:	f7ff fee7 	bl	8005f7c <_printf_common>
 80061ae:	3001      	adds	r0, #1
 80061b0:	d14a      	bne.n	8006248 <_printf_i+0x1f0>
 80061b2:	f04f 30ff 	mov.w	r0, #4294967295
 80061b6:	b004      	add	sp, #16
 80061b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061bc:	6823      	ldr	r3, [r4, #0]
 80061be:	f043 0320 	orr.w	r3, r3, #32
 80061c2:	6023      	str	r3, [r4, #0]
 80061c4:	4832      	ldr	r0, [pc, #200]	@ (8006290 <_printf_i+0x238>)
 80061c6:	2778      	movs	r7, #120	@ 0x78
 80061c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80061cc:	6823      	ldr	r3, [r4, #0]
 80061ce:	6831      	ldr	r1, [r6, #0]
 80061d0:	061f      	lsls	r7, r3, #24
 80061d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80061d6:	d402      	bmi.n	80061de <_printf_i+0x186>
 80061d8:	065f      	lsls	r7, r3, #25
 80061da:	bf48      	it	mi
 80061dc:	b2ad      	uxthmi	r5, r5
 80061de:	6031      	str	r1, [r6, #0]
 80061e0:	07d9      	lsls	r1, r3, #31
 80061e2:	bf44      	itt	mi
 80061e4:	f043 0320 	orrmi.w	r3, r3, #32
 80061e8:	6023      	strmi	r3, [r4, #0]
 80061ea:	b11d      	cbz	r5, 80061f4 <_printf_i+0x19c>
 80061ec:	2310      	movs	r3, #16
 80061ee:	e7ad      	b.n	800614c <_printf_i+0xf4>
 80061f0:	4826      	ldr	r0, [pc, #152]	@ (800628c <_printf_i+0x234>)
 80061f2:	e7e9      	b.n	80061c8 <_printf_i+0x170>
 80061f4:	6823      	ldr	r3, [r4, #0]
 80061f6:	f023 0320 	bic.w	r3, r3, #32
 80061fa:	6023      	str	r3, [r4, #0]
 80061fc:	e7f6      	b.n	80061ec <_printf_i+0x194>
 80061fe:	4616      	mov	r6, r2
 8006200:	e7bd      	b.n	800617e <_printf_i+0x126>
 8006202:	6833      	ldr	r3, [r6, #0]
 8006204:	6825      	ldr	r5, [r4, #0]
 8006206:	6961      	ldr	r1, [r4, #20]
 8006208:	1d18      	adds	r0, r3, #4
 800620a:	6030      	str	r0, [r6, #0]
 800620c:	062e      	lsls	r6, r5, #24
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	d501      	bpl.n	8006216 <_printf_i+0x1be>
 8006212:	6019      	str	r1, [r3, #0]
 8006214:	e002      	b.n	800621c <_printf_i+0x1c4>
 8006216:	0668      	lsls	r0, r5, #25
 8006218:	d5fb      	bpl.n	8006212 <_printf_i+0x1ba>
 800621a:	8019      	strh	r1, [r3, #0]
 800621c:	2300      	movs	r3, #0
 800621e:	6123      	str	r3, [r4, #16]
 8006220:	4616      	mov	r6, r2
 8006222:	e7bc      	b.n	800619e <_printf_i+0x146>
 8006224:	6833      	ldr	r3, [r6, #0]
 8006226:	1d1a      	adds	r2, r3, #4
 8006228:	6032      	str	r2, [r6, #0]
 800622a:	681e      	ldr	r6, [r3, #0]
 800622c:	6862      	ldr	r2, [r4, #4]
 800622e:	2100      	movs	r1, #0
 8006230:	4630      	mov	r0, r6
 8006232:	f7f9 ffdd 	bl	80001f0 <memchr>
 8006236:	b108      	cbz	r0, 800623c <_printf_i+0x1e4>
 8006238:	1b80      	subs	r0, r0, r6
 800623a:	6060      	str	r0, [r4, #4]
 800623c:	6863      	ldr	r3, [r4, #4]
 800623e:	6123      	str	r3, [r4, #16]
 8006240:	2300      	movs	r3, #0
 8006242:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006246:	e7aa      	b.n	800619e <_printf_i+0x146>
 8006248:	6923      	ldr	r3, [r4, #16]
 800624a:	4632      	mov	r2, r6
 800624c:	4649      	mov	r1, r9
 800624e:	4640      	mov	r0, r8
 8006250:	47d0      	blx	sl
 8006252:	3001      	adds	r0, #1
 8006254:	d0ad      	beq.n	80061b2 <_printf_i+0x15a>
 8006256:	6823      	ldr	r3, [r4, #0]
 8006258:	079b      	lsls	r3, r3, #30
 800625a:	d413      	bmi.n	8006284 <_printf_i+0x22c>
 800625c:	68e0      	ldr	r0, [r4, #12]
 800625e:	9b03      	ldr	r3, [sp, #12]
 8006260:	4298      	cmp	r0, r3
 8006262:	bfb8      	it	lt
 8006264:	4618      	movlt	r0, r3
 8006266:	e7a6      	b.n	80061b6 <_printf_i+0x15e>
 8006268:	2301      	movs	r3, #1
 800626a:	4632      	mov	r2, r6
 800626c:	4649      	mov	r1, r9
 800626e:	4640      	mov	r0, r8
 8006270:	47d0      	blx	sl
 8006272:	3001      	adds	r0, #1
 8006274:	d09d      	beq.n	80061b2 <_printf_i+0x15a>
 8006276:	3501      	adds	r5, #1
 8006278:	68e3      	ldr	r3, [r4, #12]
 800627a:	9903      	ldr	r1, [sp, #12]
 800627c:	1a5b      	subs	r3, r3, r1
 800627e:	42ab      	cmp	r3, r5
 8006280:	dcf2      	bgt.n	8006268 <_printf_i+0x210>
 8006282:	e7eb      	b.n	800625c <_printf_i+0x204>
 8006284:	2500      	movs	r5, #0
 8006286:	f104 0619 	add.w	r6, r4, #25
 800628a:	e7f5      	b.n	8006278 <_printf_i+0x220>
 800628c:	08006d85 	.word	0x08006d85
 8006290:	08006d96 	.word	0x08006d96

08006294 <__sflush_r>:
 8006294:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800629c:	0716      	lsls	r6, r2, #28
 800629e:	4605      	mov	r5, r0
 80062a0:	460c      	mov	r4, r1
 80062a2:	d454      	bmi.n	800634e <__sflush_r+0xba>
 80062a4:	684b      	ldr	r3, [r1, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	dc02      	bgt.n	80062b0 <__sflush_r+0x1c>
 80062aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	dd48      	ble.n	8006342 <__sflush_r+0xae>
 80062b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062b2:	2e00      	cmp	r6, #0
 80062b4:	d045      	beq.n	8006342 <__sflush_r+0xae>
 80062b6:	2300      	movs	r3, #0
 80062b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80062bc:	682f      	ldr	r7, [r5, #0]
 80062be:	6a21      	ldr	r1, [r4, #32]
 80062c0:	602b      	str	r3, [r5, #0]
 80062c2:	d030      	beq.n	8006326 <__sflush_r+0x92>
 80062c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80062c6:	89a3      	ldrh	r3, [r4, #12]
 80062c8:	0759      	lsls	r1, r3, #29
 80062ca:	d505      	bpl.n	80062d8 <__sflush_r+0x44>
 80062cc:	6863      	ldr	r3, [r4, #4]
 80062ce:	1ad2      	subs	r2, r2, r3
 80062d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80062d2:	b10b      	cbz	r3, 80062d8 <__sflush_r+0x44>
 80062d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80062d6:	1ad2      	subs	r2, r2, r3
 80062d8:	2300      	movs	r3, #0
 80062da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062dc:	6a21      	ldr	r1, [r4, #32]
 80062de:	4628      	mov	r0, r5
 80062e0:	47b0      	blx	r6
 80062e2:	1c43      	adds	r3, r0, #1
 80062e4:	89a3      	ldrh	r3, [r4, #12]
 80062e6:	d106      	bne.n	80062f6 <__sflush_r+0x62>
 80062e8:	6829      	ldr	r1, [r5, #0]
 80062ea:	291d      	cmp	r1, #29
 80062ec:	d82b      	bhi.n	8006346 <__sflush_r+0xb2>
 80062ee:	4a2a      	ldr	r2, [pc, #168]	@ (8006398 <__sflush_r+0x104>)
 80062f0:	40ca      	lsrs	r2, r1
 80062f2:	07d6      	lsls	r6, r2, #31
 80062f4:	d527      	bpl.n	8006346 <__sflush_r+0xb2>
 80062f6:	2200      	movs	r2, #0
 80062f8:	6062      	str	r2, [r4, #4]
 80062fa:	04d9      	lsls	r1, r3, #19
 80062fc:	6922      	ldr	r2, [r4, #16]
 80062fe:	6022      	str	r2, [r4, #0]
 8006300:	d504      	bpl.n	800630c <__sflush_r+0x78>
 8006302:	1c42      	adds	r2, r0, #1
 8006304:	d101      	bne.n	800630a <__sflush_r+0x76>
 8006306:	682b      	ldr	r3, [r5, #0]
 8006308:	b903      	cbnz	r3, 800630c <__sflush_r+0x78>
 800630a:	6560      	str	r0, [r4, #84]	@ 0x54
 800630c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800630e:	602f      	str	r7, [r5, #0]
 8006310:	b1b9      	cbz	r1, 8006342 <__sflush_r+0xae>
 8006312:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006316:	4299      	cmp	r1, r3
 8006318:	d002      	beq.n	8006320 <__sflush_r+0x8c>
 800631a:	4628      	mov	r0, r5
 800631c:	f7ff fbde 	bl	8005adc <_free_r>
 8006320:	2300      	movs	r3, #0
 8006322:	6363      	str	r3, [r4, #52]	@ 0x34
 8006324:	e00d      	b.n	8006342 <__sflush_r+0xae>
 8006326:	2301      	movs	r3, #1
 8006328:	4628      	mov	r0, r5
 800632a:	47b0      	blx	r6
 800632c:	4602      	mov	r2, r0
 800632e:	1c50      	adds	r0, r2, #1
 8006330:	d1c9      	bne.n	80062c6 <__sflush_r+0x32>
 8006332:	682b      	ldr	r3, [r5, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d0c6      	beq.n	80062c6 <__sflush_r+0x32>
 8006338:	2b1d      	cmp	r3, #29
 800633a:	d001      	beq.n	8006340 <__sflush_r+0xac>
 800633c:	2b16      	cmp	r3, #22
 800633e:	d11e      	bne.n	800637e <__sflush_r+0xea>
 8006340:	602f      	str	r7, [r5, #0]
 8006342:	2000      	movs	r0, #0
 8006344:	e022      	b.n	800638c <__sflush_r+0xf8>
 8006346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800634a:	b21b      	sxth	r3, r3
 800634c:	e01b      	b.n	8006386 <__sflush_r+0xf2>
 800634e:	690f      	ldr	r7, [r1, #16]
 8006350:	2f00      	cmp	r7, #0
 8006352:	d0f6      	beq.n	8006342 <__sflush_r+0xae>
 8006354:	0793      	lsls	r3, r2, #30
 8006356:	680e      	ldr	r6, [r1, #0]
 8006358:	bf08      	it	eq
 800635a:	694b      	ldreq	r3, [r1, #20]
 800635c:	600f      	str	r7, [r1, #0]
 800635e:	bf18      	it	ne
 8006360:	2300      	movne	r3, #0
 8006362:	eba6 0807 	sub.w	r8, r6, r7
 8006366:	608b      	str	r3, [r1, #8]
 8006368:	f1b8 0f00 	cmp.w	r8, #0
 800636c:	dde9      	ble.n	8006342 <__sflush_r+0xae>
 800636e:	6a21      	ldr	r1, [r4, #32]
 8006370:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006372:	4643      	mov	r3, r8
 8006374:	463a      	mov	r2, r7
 8006376:	4628      	mov	r0, r5
 8006378:	47b0      	blx	r6
 800637a:	2800      	cmp	r0, #0
 800637c:	dc08      	bgt.n	8006390 <__sflush_r+0xfc>
 800637e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006382:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006386:	81a3      	strh	r3, [r4, #12]
 8006388:	f04f 30ff 	mov.w	r0, #4294967295
 800638c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006390:	4407      	add	r7, r0
 8006392:	eba8 0800 	sub.w	r8, r8, r0
 8006396:	e7e7      	b.n	8006368 <__sflush_r+0xd4>
 8006398:	20400001 	.word	0x20400001

0800639c <_fflush_r>:
 800639c:	b538      	push	{r3, r4, r5, lr}
 800639e:	690b      	ldr	r3, [r1, #16]
 80063a0:	4605      	mov	r5, r0
 80063a2:	460c      	mov	r4, r1
 80063a4:	b913      	cbnz	r3, 80063ac <_fflush_r+0x10>
 80063a6:	2500      	movs	r5, #0
 80063a8:	4628      	mov	r0, r5
 80063aa:	bd38      	pop	{r3, r4, r5, pc}
 80063ac:	b118      	cbz	r0, 80063b6 <_fflush_r+0x1a>
 80063ae:	6a03      	ldr	r3, [r0, #32]
 80063b0:	b90b      	cbnz	r3, 80063b6 <_fflush_r+0x1a>
 80063b2:	f7ff f951 	bl	8005658 <__sinit>
 80063b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d0f3      	beq.n	80063a6 <_fflush_r+0xa>
 80063be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80063c0:	07d0      	lsls	r0, r2, #31
 80063c2:	d404      	bmi.n	80063ce <_fflush_r+0x32>
 80063c4:	0599      	lsls	r1, r3, #22
 80063c6:	d402      	bmi.n	80063ce <_fflush_r+0x32>
 80063c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063ca:	f7ff fb76 	bl	8005aba <__retarget_lock_acquire_recursive>
 80063ce:	4628      	mov	r0, r5
 80063d0:	4621      	mov	r1, r4
 80063d2:	f7ff ff5f 	bl	8006294 <__sflush_r>
 80063d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063d8:	07da      	lsls	r2, r3, #31
 80063da:	4605      	mov	r5, r0
 80063dc:	d4e4      	bmi.n	80063a8 <_fflush_r+0xc>
 80063de:	89a3      	ldrh	r3, [r4, #12]
 80063e0:	059b      	lsls	r3, r3, #22
 80063e2:	d4e1      	bmi.n	80063a8 <_fflush_r+0xc>
 80063e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063e6:	f7ff fb69 	bl	8005abc <__retarget_lock_release_recursive>
 80063ea:	e7dd      	b.n	80063a8 <_fflush_r+0xc>

080063ec <__swhatbuf_r>:
 80063ec:	b570      	push	{r4, r5, r6, lr}
 80063ee:	460c      	mov	r4, r1
 80063f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063f4:	2900      	cmp	r1, #0
 80063f6:	b096      	sub	sp, #88	@ 0x58
 80063f8:	4615      	mov	r5, r2
 80063fa:	461e      	mov	r6, r3
 80063fc:	da0d      	bge.n	800641a <__swhatbuf_r+0x2e>
 80063fe:	89a3      	ldrh	r3, [r4, #12]
 8006400:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006404:	f04f 0100 	mov.w	r1, #0
 8006408:	bf14      	ite	ne
 800640a:	2340      	movne	r3, #64	@ 0x40
 800640c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006410:	2000      	movs	r0, #0
 8006412:	6031      	str	r1, [r6, #0]
 8006414:	602b      	str	r3, [r5, #0]
 8006416:	b016      	add	sp, #88	@ 0x58
 8006418:	bd70      	pop	{r4, r5, r6, pc}
 800641a:	466a      	mov	r2, sp
 800641c:	f000 f862 	bl	80064e4 <_fstat_r>
 8006420:	2800      	cmp	r0, #0
 8006422:	dbec      	blt.n	80063fe <__swhatbuf_r+0x12>
 8006424:	9901      	ldr	r1, [sp, #4]
 8006426:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800642a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800642e:	4259      	negs	r1, r3
 8006430:	4159      	adcs	r1, r3
 8006432:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006436:	e7eb      	b.n	8006410 <__swhatbuf_r+0x24>

08006438 <__smakebuf_r>:
 8006438:	898b      	ldrh	r3, [r1, #12]
 800643a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800643c:	079d      	lsls	r5, r3, #30
 800643e:	4606      	mov	r6, r0
 8006440:	460c      	mov	r4, r1
 8006442:	d507      	bpl.n	8006454 <__smakebuf_r+0x1c>
 8006444:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006448:	6023      	str	r3, [r4, #0]
 800644a:	6123      	str	r3, [r4, #16]
 800644c:	2301      	movs	r3, #1
 800644e:	6163      	str	r3, [r4, #20]
 8006450:	b003      	add	sp, #12
 8006452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006454:	ab01      	add	r3, sp, #4
 8006456:	466a      	mov	r2, sp
 8006458:	f7ff ffc8 	bl	80063ec <__swhatbuf_r>
 800645c:	9f00      	ldr	r7, [sp, #0]
 800645e:	4605      	mov	r5, r0
 8006460:	4639      	mov	r1, r7
 8006462:	4630      	mov	r0, r6
 8006464:	f7ff fba6 	bl	8005bb4 <_malloc_r>
 8006468:	b948      	cbnz	r0, 800647e <__smakebuf_r+0x46>
 800646a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800646e:	059a      	lsls	r2, r3, #22
 8006470:	d4ee      	bmi.n	8006450 <__smakebuf_r+0x18>
 8006472:	f023 0303 	bic.w	r3, r3, #3
 8006476:	f043 0302 	orr.w	r3, r3, #2
 800647a:	81a3      	strh	r3, [r4, #12]
 800647c:	e7e2      	b.n	8006444 <__smakebuf_r+0xc>
 800647e:	89a3      	ldrh	r3, [r4, #12]
 8006480:	6020      	str	r0, [r4, #0]
 8006482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006486:	81a3      	strh	r3, [r4, #12]
 8006488:	9b01      	ldr	r3, [sp, #4]
 800648a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800648e:	b15b      	cbz	r3, 80064a8 <__smakebuf_r+0x70>
 8006490:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006494:	4630      	mov	r0, r6
 8006496:	f000 f837 	bl	8006508 <_isatty_r>
 800649a:	b128      	cbz	r0, 80064a8 <__smakebuf_r+0x70>
 800649c:	89a3      	ldrh	r3, [r4, #12]
 800649e:	f023 0303 	bic.w	r3, r3, #3
 80064a2:	f043 0301 	orr.w	r3, r3, #1
 80064a6:	81a3      	strh	r3, [r4, #12]
 80064a8:	89a3      	ldrh	r3, [r4, #12]
 80064aa:	431d      	orrs	r5, r3
 80064ac:	81a5      	strh	r5, [r4, #12]
 80064ae:	e7cf      	b.n	8006450 <__smakebuf_r+0x18>

080064b0 <memmove>:
 80064b0:	4288      	cmp	r0, r1
 80064b2:	b510      	push	{r4, lr}
 80064b4:	eb01 0402 	add.w	r4, r1, r2
 80064b8:	d902      	bls.n	80064c0 <memmove+0x10>
 80064ba:	4284      	cmp	r4, r0
 80064bc:	4623      	mov	r3, r4
 80064be:	d807      	bhi.n	80064d0 <memmove+0x20>
 80064c0:	1e43      	subs	r3, r0, #1
 80064c2:	42a1      	cmp	r1, r4
 80064c4:	d008      	beq.n	80064d8 <memmove+0x28>
 80064c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80064ce:	e7f8      	b.n	80064c2 <memmove+0x12>
 80064d0:	4402      	add	r2, r0
 80064d2:	4601      	mov	r1, r0
 80064d4:	428a      	cmp	r2, r1
 80064d6:	d100      	bne.n	80064da <memmove+0x2a>
 80064d8:	bd10      	pop	{r4, pc}
 80064da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80064de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80064e2:	e7f7      	b.n	80064d4 <memmove+0x24>

080064e4 <_fstat_r>:
 80064e4:	b538      	push	{r3, r4, r5, lr}
 80064e6:	4d07      	ldr	r5, [pc, #28]	@ (8006504 <_fstat_r+0x20>)
 80064e8:	2300      	movs	r3, #0
 80064ea:	4604      	mov	r4, r0
 80064ec:	4608      	mov	r0, r1
 80064ee:	4611      	mov	r1, r2
 80064f0:	602b      	str	r3, [r5, #0]
 80064f2:	f7fc fe4a 	bl	800318a <_fstat>
 80064f6:	1c43      	adds	r3, r0, #1
 80064f8:	d102      	bne.n	8006500 <_fstat_r+0x1c>
 80064fa:	682b      	ldr	r3, [r5, #0]
 80064fc:	b103      	cbz	r3, 8006500 <_fstat_r+0x1c>
 80064fe:	6023      	str	r3, [r4, #0]
 8006500:	bd38      	pop	{r3, r4, r5, pc}
 8006502:	bf00      	nop
 8006504:	20000c14 	.word	0x20000c14

08006508 <_isatty_r>:
 8006508:	b538      	push	{r3, r4, r5, lr}
 800650a:	4d06      	ldr	r5, [pc, #24]	@ (8006524 <_isatty_r+0x1c>)
 800650c:	2300      	movs	r3, #0
 800650e:	4604      	mov	r4, r0
 8006510:	4608      	mov	r0, r1
 8006512:	602b      	str	r3, [r5, #0]
 8006514:	f7fc fe49 	bl	80031aa <_isatty>
 8006518:	1c43      	adds	r3, r0, #1
 800651a:	d102      	bne.n	8006522 <_isatty_r+0x1a>
 800651c:	682b      	ldr	r3, [r5, #0]
 800651e:	b103      	cbz	r3, 8006522 <_isatty_r+0x1a>
 8006520:	6023      	str	r3, [r4, #0]
 8006522:	bd38      	pop	{r3, r4, r5, pc}
 8006524:	20000c14 	.word	0x20000c14

08006528 <_sbrk_r>:
 8006528:	b538      	push	{r3, r4, r5, lr}
 800652a:	4d06      	ldr	r5, [pc, #24]	@ (8006544 <_sbrk_r+0x1c>)
 800652c:	2300      	movs	r3, #0
 800652e:	4604      	mov	r4, r0
 8006530:	4608      	mov	r0, r1
 8006532:	602b      	str	r3, [r5, #0]
 8006534:	f7fc fe52 	bl	80031dc <_sbrk>
 8006538:	1c43      	adds	r3, r0, #1
 800653a:	d102      	bne.n	8006542 <_sbrk_r+0x1a>
 800653c:	682b      	ldr	r3, [r5, #0]
 800653e:	b103      	cbz	r3, 8006542 <_sbrk_r+0x1a>
 8006540:	6023      	str	r3, [r4, #0]
 8006542:	bd38      	pop	{r3, r4, r5, pc}
 8006544:	20000c14 	.word	0x20000c14

08006548 <_realloc_r>:
 8006548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800654c:	4607      	mov	r7, r0
 800654e:	4614      	mov	r4, r2
 8006550:	460d      	mov	r5, r1
 8006552:	b921      	cbnz	r1, 800655e <_realloc_r+0x16>
 8006554:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006558:	4611      	mov	r1, r2
 800655a:	f7ff bb2b 	b.w	8005bb4 <_malloc_r>
 800655e:	b92a      	cbnz	r2, 800656c <_realloc_r+0x24>
 8006560:	f7ff fabc 	bl	8005adc <_free_r>
 8006564:	4625      	mov	r5, r4
 8006566:	4628      	mov	r0, r5
 8006568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800656c:	f000 f81a 	bl	80065a4 <_malloc_usable_size_r>
 8006570:	4284      	cmp	r4, r0
 8006572:	4606      	mov	r6, r0
 8006574:	d802      	bhi.n	800657c <_realloc_r+0x34>
 8006576:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800657a:	d8f4      	bhi.n	8006566 <_realloc_r+0x1e>
 800657c:	4621      	mov	r1, r4
 800657e:	4638      	mov	r0, r7
 8006580:	f7ff fb18 	bl	8005bb4 <_malloc_r>
 8006584:	4680      	mov	r8, r0
 8006586:	b908      	cbnz	r0, 800658c <_realloc_r+0x44>
 8006588:	4645      	mov	r5, r8
 800658a:	e7ec      	b.n	8006566 <_realloc_r+0x1e>
 800658c:	42b4      	cmp	r4, r6
 800658e:	4622      	mov	r2, r4
 8006590:	4629      	mov	r1, r5
 8006592:	bf28      	it	cs
 8006594:	4632      	movcs	r2, r6
 8006596:	f7ff fa92 	bl	8005abe <memcpy>
 800659a:	4629      	mov	r1, r5
 800659c:	4638      	mov	r0, r7
 800659e:	f7ff fa9d 	bl	8005adc <_free_r>
 80065a2:	e7f1      	b.n	8006588 <_realloc_r+0x40>

080065a4 <_malloc_usable_size_r>:
 80065a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065a8:	1f18      	subs	r0, r3, #4
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	bfbc      	itt	lt
 80065ae:	580b      	ldrlt	r3, [r1, r0]
 80065b0:	18c0      	addlt	r0, r0, r3
 80065b2:	4770      	bx	lr

080065b4 <_init>:
 80065b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b6:	bf00      	nop
 80065b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ba:	bc08      	pop	{r3}
 80065bc:	469e      	mov	lr, r3
 80065be:	4770      	bx	lr

080065c0 <_fini>:
 80065c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c2:	bf00      	nop
 80065c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065c6:	bc08      	pop	{r3}
 80065c8:	469e      	mov	lr, r3
 80065ca:	4770      	bx	lr
