
portu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f38  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000738  080050d8  080050d8  000060d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005810  08005810  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005810  08005810  00006810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005818  08005818  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005818  08005818  00006818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800581c  0800581c  0000681c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005820  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d90  2000005c  0800587c  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dec  0800587c  00007dec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009766  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a67  00000000  00000000  000107f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d0  00000000  00000000  00012260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005f6  00000000  00000000  00012a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015bb7  00000000  00000000  00013026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b6d  00000000  00000000  00028bdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086531  00000000  00000000  0003274a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8c7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023a8  00000000  00000000  000b8cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003f  00000000  00000000  000bb068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080050c0 	.word	0x080050c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080050c0 	.word	0x080050c0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f001 fa37 	bl	8001a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f8d9 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 fa0d 	bl	80009e8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ce:	f000 f9bd 	bl	800094c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80005d2:	f000 f93d 	bl	8000850 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005d6:	f000 f965 	bl	80008a4 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80005da:	f000 f98d 	bl	80008f8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Инициализация DWT для бенчмарка */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80005de:	4b57      	ldr	r3, [pc, #348]	@ (800073c <main+0x180>)
 80005e0:	68db      	ldr	r3, [r3, #12]
 80005e2:	4a56      	ldr	r2, [pc, #344]	@ (800073c <main+0x180>)
 80005e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005e8:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80005ea:	4b55      	ldr	r3, [pc, #340]	@ (8000740 <main+0x184>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a54      	ldr	r2, [pc, #336]	@ (8000740 <main+0x184>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6013      	str	r3, [r2, #0]

  /* Инициализация защищенного UART */
  SecureUart_Init(
 80005f6:	4b53      	ldr	r3, [pc, #332]	@ (8000744 <main+0x188>)
 80005f8:	9302      	str	r3, [sp, #8]
 80005fa:	4b53      	ldr	r3, [pc, #332]	@ (8000748 <main+0x18c>)
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	4b53      	ldr	r3, [pc, #332]	@ (800074c <main+0x190>)
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	4b53      	ldr	r3, [pc, #332]	@ (8000750 <main+0x194>)
 8000604:	4a53      	ldr	r2, [pc, #332]	@ (8000754 <main+0x198>)
 8000606:	4954      	ldr	r1, [pc, #336]	@ (8000758 <main+0x19c>)
 8000608:	4854      	ldr	r0, [pc, #336]	@ (800075c <main+0x1a0>)
 800060a:	f000 fa61 	bl	8000ad0 <SecureUart_Init>
    &hdma_usart1_tx, &hdma_usart1_rx,
    &hdma_usart6_tx, &hdma_usart6_rx
  );

  /* Генерация тестовых данных */
  for (uint8_t i = 0; i < TEST_DATA_SIZE; i++) {
 800060e:	2300      	movs	r3, #0
 8000610:	71fb      	strb	r3, [r7, #7]
 8000612:	e00c      	b.n	800062e <main+0x72>
    test_data_uart1[i] = i;
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	4952      	ldr	r1, [pc, #328]	@ (8000760 <main+0x1a4>)
 8000618:	79fa      	ldrb	r2, [r7, #7]
 800061a:	54ca      	strb	r2, [r1, r3]
    test_data_uart6[i] = i + 128; // Другой набор данных для UART6
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	79fa      	ldrb	r2, [r7, #7]
 8000620:	3a80      	subs	r2, #128	@ 0x80
 8000622:	b2d1      	uxtb	r1, r2
 8000624:	4a4f      	ldr	r2, [pc, #316]	@ (8000764 <main+0x1a8>)
 8000626:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < TEST_DATA_SIZE; i++) {
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	3301      	adds	r3, #1
 800062c:	71fb      	strb	r3, [r7, #7]
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	2b1f      	cmp	r3, #31
 8000632:	d9ef      	bls.n	8000614 <main+0x58>
  }

  // Инициализация последовательного цикла отправки
  current_state = STATE_SEND_UART1;
 8000634:	4b4c      	ldr	r3, [pc, #304]	@ (8000768 <main+0x1ac>)
 8000636:	2200      	movs	r2, #0
 8000638:	701a      	strb	r2, [r3, #0]
  last_test_time = HAL_GetTick();
 800063a:	f001 fa61 	bl	8001b00 <HAL_GetTick>
 800063e:	4603      	mov	r3, r0
 8000640:	4a4a      	ldr	r2, [pc, #296]	@ (800076c <main+0x1b0>)
 8000642:	6013      	str	r3, [r2, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    /* Обработка входящих данных */
    SecureUart_Process();
 8000644:	f000 fdb8 	bl	80011b8 <SecureUart_Process>

    /* Последовательная отправка тестовых данных с заданными задержками */
    uint32_t current_time = HAL_GetTick();
 8000648:	f001 fa5a 	bl	8001b00 <HAL_GetTick>
 800064c:	6038      	str	r0, [r7, #0]

    switch (current_state) {
 800064e:	4b46      	ldr	r3, [pc, #280]	@ (8000768 <main+0x1ac>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b03      	cmp	r3, #3
 8000654:	d8f6      	bhi.n	8000644 <main+0x88>
 8000656:	a201      	add	r2, pc, #4	@ (adr r2, 800065c <main+0xa0>)
 8000658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065c:	0800066d 	.word	0x0800066d
 8000660:	0800068f 	.word	0x0800068f
 8000664:	080006ab 	.word	0x080006ab
 8000668:	080006cd 	.word	0x080006cd
      case STATE_SEND_UART1:
        /* Отправка тестовых данных с UART1 на UART6 */
        SecureUart_Debug("\r\n---------------------------------------\r\n");
 800066c:	4840      	ldr	r0, [pc, #256]	@ (8000770 <main+0x1b4>)
 800066e:	f000 fb87 	bl	8000d80 <SecureUart_Debug>
        SecureUart_Debug("Отправка тестовых данных с UART1 на UART6\r\n");
 8000672:	4840      	ldr	r0, [pc, #256]	@ (8000774 <main+0x1b8>)
 8000674:	f000 fb84 	bl	8000d80 <SecureUart_Debug>
        SecureUart_SendFromUart1(test_data_uart1, TEST_DATA_SIZE);
 8000678:	2120      	movs	r1, #32
 800067a:	4839      	ldr	r0, [pc, #228]	@ (8000760 <main+0x1a4>)
 800067c:	f000 faca 	bl	8000c14 <SecureUart_SendFromUart1>

        /* Переход к следующему состоянию */
        current_state = STATE_WAIT1;
 8000680:	4b39      	ldr	r3, [pc, #228]	@ (8000768 <main+0x1ac>)
 8000682:	2201      	movs	r2, #1
 8000684:	701a      	strb	r2, [r3, #0]
        last_test_time = current_time;
 8000686:	4a39      	ldr	r2, [pc, #228]	@ (800076c <main+0x1b0>)
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	6013      	str	r3, [r2, #0]
        break;
 800068c:	e054      	b.n	8000738 <main+0x17c>

      case STATE_WAIT1:
        /* Ожидание 1 секунду */
        if (current_time - last_test_time >= 1000) {
 800068e:	4b37      	ldr	r3, [pc, #220]	@ (800076c <main+0x1b0>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	683a      	ldr	r2, [r7, #0]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800069a:	d349      	bcc.n	8000730 <main+0x174>
          current_state = STATE_SEND_UART6;
 800069c:	4b32      	ldr	r3, [pc, #200]	@ (8000768 <main+0x1ac>)
 800069e:	2202      	movs	r2, #2
 80006a0:	701a      	strb	r2, [r3, #0]
          last_test_time = current_time;
 80006a2:	4a32      	ldr	r2, [pc, #200]	@ (800076c <main+0x1b0>)
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	6013      	str	r3, [r2, #0]
        }
        break;
 80006a8:	e042      	b.n	8000730 <main+0x174>

      case STATE_SEND_UART6:
        /* Отправка тестовых данных с UART6 на UART1 */
        SecureUart_Debug("\r\n---------------------------------------\r\n");
 80006aa:	4831      	ldr	r0, [pc, #196]	@ (8000770 <main+0x1b4>)
 80006ac:	f000 fb68 	bl	8000d80 <SecureUart_Debug>
        SecureUart_Debug("Отправка тестовых данных с UART6 на UART1\r\n");
 80006b0:	4831      	ldr	r0, [pc, #196]	@ (8000778 <main+0x1bc>)
 80006b2:	f000 fb65 	bl	8000d80 <SecureUart_Debug>
        SecureUart_SendFromUart6(test_data_uart6, TEST_DATA_SIZE);
 80006b6:	2120      	movs	r1, #32
 80006b8:	482a      	ldr	r0, [pc, #168]	@ (8000764 <main+0x1a8>)
 80006ba:	f000 fb05 	bl	8000cc8 <SecureUart_SendFromUart6>

        /* Переход к следующему состоянию */
        current_state = STATE_WAIT30;
 80006be:	4b2a      	ldr	r3, [pc, #168]	@ (8000768 <main+0x1ac>)
 80006c0:	2203      	movs	r2, #3
 80006c2:	701a      	strb	r2, [r3, #0]
        last_test_time = current_time;
 80006c4:	4a29      	ldr	r2, [pc, #164]	@ (800076c <main+0x1b0>)
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	6013      	str	r3, [r2, #0]
        break;
 80006ca:	e035      	b.n	8000738 <main+0x17c>

      case STATE_WAIT30:
        /* Ожидание 30 секунд */
        if (current_time - last_test_time >= 30000) {
 80006cc:	4b27      	ldr	r3, [pc, #156]	@ (800076c <main+0x1b0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	683a      	ldr	r2, [r7, #0]
 80006d2:	1ad3      	subs	r3, r2, r3
 80006d4:	f247 522f 	movw	r2, #29999	@ 0x752f
 80006d8:	4293      	cmp	r3, r2
 80006da:	d92b      	bls.n	8000734 <main+0x178>
          current_state = STATE_SEND_UART1;
 80006dc:	4b22      	ldr	r3, [pc, #136]	@ (8000768 <main+0x1ac>)
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
          last_test_time = current_time;
 80006e2:	4a22      	ldr	r2, [pc, #136]	@ (800076c <main+0x1b0>)
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	6013      	str	r3, [r2, #0]

          /* Модификация тестовых данных для следующего цикла */
          for (uint8_t i = 0; i < TEST_DATA_SIZE; i++) {
 80006e8:	2300      	movs	r3, #0
 80006ea:	71bb      	strb	r3, [r7, #6]
 80006ec:	e01c      	b.n	8000728 <main+0x16c>
            test_data_uart1[i] = (test_data_uart1[i] + 1) % 256;
 80006ee:	79bb      	ldrb	r3, [r7, #6]
 80006f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000760 <main+0x1a4>)
 80006f2:	5cd3      	ldrb	r3, [r2, r3]
 80006f4:	3301      	adds	r3, #1
 80006f6:	425a      	negs	r2, r3
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	b2d2      	uxtb	r2, r2
 80006fc:	bf58      	it	pl
 80006fe:	4253      	negpl	r3, r2
 8000700:	79ba      	ldrb	r2, [r7, #6]
 8000702:	b2d9      	uxtb	r1, r3
 8000704:	4b16      	ldr	r3, [pc, #88]	@ (8000760 <main+0x1a4>)
 8000706:	5499      	strb	r1, [r3, r2]
            test_data_uart6[i] = (test_data_uart6[i] + 1) % 256;
 8000708:	79bb      	ldrb	r3, [r7, #6]
 800070a:	4a16      	ldr	r2, [pc, #88]	@ (8000764 <main+0x1a8>)
 800070c:	5cd3      	ldrb	r3, [r2, r3]
 800070e:	3301      	adds	r3, #1
 8000710:	425a      	negs	r2, r3
 8000712:	b2db      	uxtb	r3, r3
 8000714:	b2d2      	uxtb	r2, r2
 8000716:	bf58      	it	pl
 8000718:	4253      	negpl	r3, r2
 800071a:	79ba      	ldrb	r2, [r7, #6]
 800071c:	b2d9      	uxtb	r1, r3
 800071e:	4b11      	ldr	r3, [pc, #68]	@ (8000764 <main+0x1a8>)
 8000720:	5499      	strb	r1, [r3, r2]
          for (uint8_t i = 0; i < TEST_DATA_SIZE; i++) {
 8000722:	79bb      	ldrb	r3, [r7, #6]
 8000724:	3301      	adds	r3, #1
 8000726:	71bb      	strb	r3, [r7, #6]
 8000728:	79bb      	ldrb	r3, [r7, #6]
 800072a:	2b1f      	cmp	r3, #31
 800072c:	d9df      	bls.n	80006ee <main+0x132>
          }
        }
        break;
 800072e:	e001      	b.n	8000734 <main+0x178>
        break;
 8000730:	bf00      	nop
 8000732:	e787      	b.n	8000644 <main+0x88>
        break;
 8000734:	bf00      	nop
 8000736:	e785      	b.n	8000644 <main+0x88>
  {
 8000738:	e784      	b.n	8000644 <main+0x88>
 800073a:	bf00      	nop
 800073c:	e000edf0 	.word	0xe000edf0
 8000740:	e0001000 	.word	0xe0001000
 8000744:	20000210 	.word	0x20000210
 8000748:	20000270 	.word	0x20000270
 800074c:	20000150 	.word	0x20000150
 8000750:	200001b0 	.word	0x200001b0
 8000754:	200000c0 	.word	0x200000c0
 8000758:	20000108 	.word	0x20000108
 800075c:	20000078 	.word	0x20000078
 8000760:	200002d8 	.word	0x200002d8
 8000764:	200002f8 	.word	0x200002f8
 8000768:	200002d4 	.word	0x200002d4
 800076c:	200002d0 	.word	0x200002d0
 8000770:	080050d8 	.word	0x080050d8
 8000774:	08005104 	.word	0x08005104
 8000778:	0800514c 	.word	0x0800514c

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b094      	sub	sp, #80	@ 0x50
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	2230      	movs	r2, #48	@ 0x30
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f004 f81a 	bl	80047c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	4b28      	ldr	r3, [pc, #160]	@ (8000848 <SystemClock_Config+0xcc>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a8:	4a27      	ldr	r2, [pc, #156]	@ (8000848 <SystemClock_Config+0xcc>)
 80007aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80007b0:	4b25      	ldr	r3, [pc, #148]	@ (8000848 <SystemClock_Config+0xcc>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007bc:	2300      	movs	r3, #0
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	4b22      	ldr	r3, [pc, #136]	@ (800084c <SystemClock_Config+0xd0>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a21      	ldr	r2, [pc, #132]	@ (800084c <SystemClock_Config+0xd0>)
 80007c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007ca:	6013      	str	r3, [r2, #0]
 80007cc:	4b1f      	ldr	r3, [pc, #124]	@ (800084c <SystemClock_Config+0xd0>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d8:	2302      	movs	r3, #2
 80007da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007dc:	2301      	movs	r3, #1
 80007de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e0:	2310      	movs	r3, #16
 80007e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e4:	2302      	movs	r3, #2
 80007e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e8:	2300      	movs	r3, #0
 80007ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007ec:	2310      	movs	r3, #16
 80007ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007f0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007f6:	2304      	movs	r3, #4
 80007f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007fa:	2304      	movs	r3, #4
 80007fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fe:	f107 0320 	add.w	r3, r7, #32
 8000802:	4618      	mov	r0, r3
 8000804:	f002 f83a 	bl	800287c <HAL_RCC_OscConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800080e:	f000 f959 	bl	8000ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000812:	230f      	movs	r3, #15
 8000814:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000816:	2302      	movs	r3, #2
 8000818:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800081e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000822:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	2102      	movs	r1, #2
 800082e:	4618      	mov	r0, r3
 8000830:	f002 fa9c 	bl	8002d6c <HAL_RCC_ClockConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800083a:	f000 f943 	bl	8000ac4 <Error_Handler>
  }
}
 800083e:	bf00      	nop
 8000840:	3750      	adds	r7, #80	@ 0x50
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800
 800084c:	40007000 	.word	0x40007000

08000850 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000854:	4b11      	ldr	r3, [pc, #68]	@ (800089c <MX_USART1_UART_Init+0x4c>)
 8000856:	4a12      	ldr	r2, [pc, #72]	@ (80008a0 <MX_USART1_UART_Init+0x50>)
 8000858:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800085a:	4b10      	ldr	r3, [pc, #64]	@ (800089c <MX_USART1_UART_Init+0x4c>)
 800085c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000860:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <MX_USART1_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000868:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <MX_USART1_UART_Init+0x4c>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	@ (800089c <MX_USART1_UART_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000874:	4b09      	ldr	r3, [pc, #36]	@ (800089c <MX_USART1_UART_Init+0x4c>)
 8000876:	220c      	movs	r2, #12
 8000878:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087a:	4b08      	ldr	r3, [pc, #32]	@ (800089c <MX_USART1_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <MX_USART1_UART_Init+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	@ (800089c <MX_USART1_UART_Init+0x4c>)
 8000888:	f002 fc90 	bl	80031ac <HAL_UART_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000892:	f000 f917 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000078 	.word	0x20000078
 80008a0:	40011000 	.word	0x40011000

080008a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a8:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008aa:	4a12      	ldr	r2, [pc, #72]	@ (80008f4 <MX_USART2_UART_Init+0x50>)
 80008ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ae:	4b10      	ldr	r3, [pc, #64]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c8:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008ca:	220c      	movs	r2, #12
 80008cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008dc:	f002 fc66 	bl	80031ac <HAL_UART_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008e6:	f000 f8ed 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200000c0 	.word	0x200000c0
 80008f4:	40004400 	.word	0x40004400

080008f8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80008fc:	4b11      	ldr	r3, [pc, #68]	@ (8000944 <MX_USART6_UART_Init+0x4c>)
 80008fe:	4a12      	ldr	r2, [pc, #72]	@ (8000948 <MX_USART6_UART_Init+0x50>)
 8000900:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000902:	4b10      	ldr	r3, [pc, #64]	@ (8000944 <MX_USART6_UART_Init+0x4c>)
 8000904:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000908:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b0e      	ldr	r3, [pc, #56]	@ (8000944 <MX_USART6_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b0c      	ldr	r3, [pc, #48]	@ (8000944 <MX_USART6_UART_Init+0x4c>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	@ (8000944 <MX_USART6_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <MX_USART6_UART_Init+0x4c>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <MX_USART6_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <MX_USART6_UART_Init+0x4c>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	@ (8000944 <MX_USART6_UART_Init+0x4c>)
 8000930:	f002 fc3c 	bl	80031ac <HAL_UART_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800093a:	f000 f8c3 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000108 	.word	0x20000108
 8000948:	40011400 	.word	0x40011400

0800094c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b23      	ldr	r3, [pc, #140]	@ (80009e4 <MX_DMA_Init+0x98>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a22      	ldr	r2, [pc, #136]	@ (80009e4 <MX_DMA_Init+0x98>)
 800095c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b20      	ldr	r3, [pc, #128]	@ (80009e4 <MX_DMA_Init+0x98>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	4b1c      	ldr	r3, [pc, #112]	@ (80009e4 <MX_DMA_Init+0x98>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a1b      	ldr	r2, [pc, #108]	@ (80009e4 <MX_DMA_Init+0x98>)
 8000978:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
 800097e:	4b19      	ldr	r3, [pc, #100]	@ (80009e4 <MX_DMA_Init+0x98>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2100      	movs	r1, #0
 800098e:	2010      	movs	r0, #16
 8000990:	f001 f99d 	bl	8001cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000994:	2010      	movs	r0, #16
 8000996:	f001 f9b6 	bl	8001d06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	2011      	movs	r0, #17
 80009a0:	f001 f995 	bl	8001cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80009a4:	2011      	movs	r0, #17
 80009a6:	f001 f9ae 	bl	8001d06 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2100      	movs	r1, #0
 80009ae:	2039      	movs	r0, #57	@ 0x39
 80009b0:	f001 f98d 	bl	8001cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80009b4:	2039      	movs	r0, #57	@ 0x39
 80009b6:	f001 f9a6 	bl	8001d06 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	2045      	movs	r0, #69	@ 0x45
 80009c0:	f001 f985 	bl	8001cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80009c4:	2045      	movs	r0, #69	@ 0x45
 80009c6:	f001 f99e 	bl	8001d06 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2100      	movs	r1, #0
 80009ce:	2046      	movs	r0, #70	@ 0x46
 80009d0:	f001 f97d 	bl	8001cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80009d4:	2046      	movs	r0, #70	@ 0x46
 80009d6:	f001 f996 	bl	8001d06 <HAL_NVIC_EnableIRQ>
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800

080009e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	@ 0x28
 80009ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	4b2d      	ldr	r3, [pc, #180]	@ (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	4a2c      	ldr	r2, [pc, #176]	@ (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a08:	f043 0304 	orr.w	r3, r3, #4
 8000a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	f003 0304 	and.w	r3, r3, #4
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	4b26      	ldr	r3, [pc, #152]	@ (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	4a25      	ldr	r2, [pc, #148]	@ (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2a:	4b23      	ldr	r3, [pc, #140]	@ (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a46:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	4b18      	ldr	r3, [pc, #96]	@ (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	4a17      	ldr	r2, [pc, #92]	@ (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a5c:	f043 0302 	orr.w	r3, r3, #2
 8000a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a62:	4b15      	ldr	r3, [pc, #84]	@ (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2120      	movs	r1, #32
 8000a72:	4812      	ldr	r0, [pc, #72]	@ (8000abc <MX_GPIO_Init+0xd4>)
 8000a74:	f001 fee8 	bl	8002848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a7e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	480c      	ldr	r0, [pc, #48]	@ (8000ac0 <MX_GPIO_Init+0xd8>)
 8000a90:	f001 fd56 	bl	8002540 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a94:	2320      	movs	r3, #32
 8000a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4804      	ldr	r0, [pc, #16]	@ (8000abc <MX_GPIO_Init+0xd4>)
 8000aac:	f001 fd48 	bl	8002540 <HAL_GPIO_Init>
}
 8000ab0:	bf00      	nop
 8000ab2:	3728      	adds	r7, #40	@ 0x28
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020000 	.word	0x40020000
 8000ac0:	40020800 	.word	0x40020800

08000ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac8:	b672      	cpsid	i
}
 8000aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <Error_Handler+0x8>

08000ad0 <SecureUart_Init>:
 */
uint8_t SecureUart_Init(
    UART_HandleTypeDef *huart1, UART_HandleTypeDef *huart6, UART_HandleTypeDef *huart2,
    DMA_HandleTypeDef *hdma_usart1_tx, DMA_HandleTypeDef *hdma_usart1_rx,
    DMA_HandleTypeDef *hdma_usart6_tx, DMA_HandleTypeDef *hdma_usart6_rx
) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
 8000adc:	603b      	str	r3, [r7, #0]
    /* Инициализация структуры конфигурации */
    suart_config.uart1.huart = huart1;
 8000ade:	4a46      	ldr	r2, [pc, #280]	@ (8000bf8 <SecureUart_Init+0x128>)
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	6013      	str	r3, [r2, #0]
    suart_config.uart1.hdma_tx = hdma_usart1_tx;
 8000ae4:	4a44      	ldr	r2, [pc, #272]	@ (8000bf8 <SecureUart_Init+0x128>)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	6053      	str	r3, [r2, #4]
    suart_config.uart1.hdma_rx = hdma_usart1_rx;
 8000aea:	4a43      	ldr	r2, [pc, #268]	@ (8000bf8 <SecureUart_Init+0x128>)
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	6093      	str	r3, [r2, #8]
    suart_config.uart1.tx_buffer = uart1_tx_buffer;
 8000af0:	4b41      	ldr	r3, [pc, #260]	@ (8000bf8 <SecureUart_Init+0x128>)
 8000af2:	4a42      	ldr	r2, [pc, #264]	@ (8000bfc <SecureUart_Init+0x12c>)
 8000af4:	60da      	str	r2, [r3, #12]
    suart_config.uart1.rx_buffer = uart1_rx_buffer;
 8000af6:	4b40      	ldr	r3, [pc, #256]	@ (8000bf8 <SecureUart_Init+0x128>)
 8000af8:	4a41      	ldr	r2, [pc, #260]	@ (8000c00 <SecureUart_Init+0x130>)
 8000afa:	611a      	str	r2, [r3, #16]
    suart_config.uart1.tx_buffer_size = FRAME_BUFFER_SIZE;
 8000afc:	4b3e      	ldr	r3, [pc, #248]	@ (8000bf8 <SecureUart_Init+0x128>)
 8000afe:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8000b02:	829a      	strh	r2, [r3, #20]
    suart_config.uart1.rx_buffer_size = FRAME_BUFFER_SIZE;
 8000b04:	4b3c      	ldr	r3, [pc, #240]	@ (8000bf8 <SecureUart_Init+0x128>)
 8000b06:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8000b0a:	82da      	strh	r2, [r3, #22]
    suart_config.uart1.is_tx_busy = 0;
 8000b0c:	4b3a      	ldr	r3, [pc, #232]	@ (8000bf8 <SecureUart_Init+0x128>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	761a      	strb	r2, [r3, #24]
    suart_config.uart1.is_rx_busy = 0;
 8000b12:	4b39      	ldr	r3, [pc, #228]	@ (8000bf8 <SecureUart_Init+0x128>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	765a      	strb	r2, [r3, #25]

    suart_config.uart6.huart = huart6;
 8000b18:	4a37      	ldr	r2, [pc, #220]	@ (8000bf8 <SecureUart_Init+0x128>)
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	61d3      	str	r3, [r2, #28]
    suart_config.uart6.hdma_tx = hdma_usart6_tx;
 8000b1e:	4a36      	ldr	r2, [pc, #216]	@ (8000bf8 <SecureUart_Init+0x128>)
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	6213      	str	r3, [r2, #32]
    suart_config.uart6.hdma_rx = hdma_usart6_rx;
 8000b24:	4a34      	ldr	r2, [pc, #208]	@ (8000bf8 <SecureUart_Init+0x128>)
 8000b26:	6a3b      	ldr	r3, [r7, #32]
 8000b28:	6253      	str	r3, [r2, #36]	@ 0x24
    suart_config.uart6.tx_buffer = uart6_tx_buffer;
 8000b2a:	4b33      	ldr	r3, [pc, #204]	@ (8000bf8 <SecureUart_Init+0x128>)
 8000b2c:	4a35      	ldr	r2, [pc, #212]	@ (8000c04 <SecureUart_Init+0x134>)
 8000b2e:	629a      	str	r2, [r3, #40]	@ 0x28
    suart_config.uart6.rx_buffer = uart6_rx_buffer;
 8000b30:	4b31      	ldr	r3, [pc, #196]	@ (8000bf8 <SecureUart_Init+0x128>)
 8000b32:	4a35      	ldr	r2, [pc, #212]	@ (8000c08 <SecureUart_Init+0x138>)
 8000b34:	62da      	str	r2, [r3, #44]	@ 0x2c
    suart_config.uart6.tx_buffer_size = FRAME_BUFFER_SIZE;
 8000b36:	4b30      	ldr	r3, [pc, #192]	@ (8000bf8 <SecureUart_Init+0x128>)
 8000b38:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8000b3c:	861a      	strh	r2, [r3, #48]	@ 0x30
    suart_config.uart6.rx_buffer_size = FRAME_BUFFER_SIZE;
 8000b3e:	4b2e      	ldr	r3, [pc, #184]	@ (8000bf8 <SecureUart_Init+0x128>)
 8000b40:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8000b44:	865a      	strh	r2, [r3, #50]	@ 0x32
    suart_config.uart6.is_tx_busy = 0;
 8000b46:	4b2c      	ldr	r3, [pc, #176]	@ (8000bf8 <SecureUart_Init+0x128>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    suart_config.uart6.is_rx_busy = 0;
 8000b4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf8 <SecureUart_Init+0x128>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    suart_config.debug.huart = huart2;
 8000b56:	4a28      	ldr	r2, [pc, #160]	@ (8000bf8 <SecureUart_Init+0x128>)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6393      	str	r3, [r2, #56]	@ 0x38
    suart_config.debug.hdma_tx = NULL; // Не используем DMA для отладки
 8000b5c:	4b26      	ldr	r3, [pc, #152]	@ (8000bf8 <SecureUart_Init+0x128>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	63da      	str	r2, [r3, #60]	@ 0x3c
    suart_config.debug.hdma_rx = NULL; // Не используем DMA для отладки
 8000b62:	4b25      	ldr	r3, [pc, #148]	@ (8000bf8 <SecureUart_Init+0x128>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	641a      	str	r2, [r3, #64]	@ 0x40
    suart_config.debug.tx_buffer = debug_tx_buffer;
 8000b68:	4b23      	ldr	r3, [pc, #140]	@ (8000bf8 <SecureUart_Init+0x128>)
 8000b6a:	4a28      	ldr	r2, [pc, #160]	@ (8000c0c <SecureUart_Init+0x13c>)
 8000b6c:	645a      	str	r2, [r3, #68]	@ 0x44
    suart_config.debug.rx_buffer = NULL; // Не используем прием для отладки
 8000b6e:	4b22      	ldr	r3, [pc, #136]	@ (8000bf8 <SecureUart_Init+0x128>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	649a      	str	r2, [r3, #72]	@ 0x48
    suart_config.debug.tx_buffer_size = FRAME_BUFFER_SIZE;
 8000b74:	4b20      	ldr	r3, [pc, #128]	@ (8000bf8 <SecureUart_Init+0x128>)
 8000b76:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8000b7a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    suart_config.debug.rx_buffer_size = 0;
 8000b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf8 <SecureUart_Init+0x128>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    suart_config.debug.is_tx_busy = 0;
 8000b86:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf8 <SecureUart_Init+0x128>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    suart_config.debug.is_rx_busy = 0;
 8000b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf8 <SecureUart_Init+0x128>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Инициализация таблицы CRC32 */
    SecureUart_InitCRC32Table();
 8000b96:	f000 f965 	bl	8000e64 <SecureUart_InitCRC32Table>

    /* Вывод отладочного сообщения */
    SecureUart_Debug("Защищенный UART инициализирован\r\n");
 8000b9a:	481d      	ldr	r0, [pc, #116]	@ (8000c10 <SecureUart_Init+0x140>)
 8000b9c:	f000 f8f0 	bl	8000d80 <SecureUart_Debug>

    /* Запускаем прием данных на обоих UART */
    HAL_UARTEx_ReceiveToIdle_DMA(suart_config.uart1.huart, suart_config.uart1.rx_buffer, FRAME_BUFFER_SIZE);
 8000ba0:	4b15      	ldr	r3, [pc, #84]	@ (8000bf8 <SecureUart_Init+0x128>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a14      	ldr	r2, [pc, #80]	@ (8000bf8 <SecureUart_Init+0x128>)
 8000ba6:	6911      	ldr	r1, [r2, #16]
 8000ba8:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8000bac:	4618      	mov	r0, r3
 8000bae:	f002 fc49 	bl	8003444 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(suart_config.uart1.hdma_rx, DMA_IT_HT);
 8000bb2:	4b11      	ldr	r3, [pc, #68]	@ (8000bf8 <SecureUart_Init+0x128>)
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf8 <SecureUart_Init+0x128>)
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f022 0208 	bic.w	r2, r2, #8
 8000bc4:	601a      	str	r2, [r3, #0]

    HAL_UARTEx_ReceiveToIdle_DMA(suart_config.uart6.huart, suart_config.uart6.rx_buffer, FRAME_BUFFER_SIZE);
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf8 <SecureUart_Init+0x128>)
 8000bc8:	69db      	ldr	r3, [r3, #28]
 8000bca:	4a0b      	ldr	r2, [pc, #44]	@ (8000bf8 <SecureUart_Init+0x128>)
 8000bcc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8000bce:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f002 fc36 	bl	8003444 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(suart_config.uart6.hdma_rx, DMA_IT_HT);
 8000bd8:	4b07      	ldr	r3, [pc, #28]	@ (8000bf8 <SecureUart_Init+0x128>)
 8000bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b05      	ldr	r3, [pc, #20]	@ (8000bf8 <SecureUart_Init+0x128>)
 8000be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f022 0208 	bic.w	r2, r2, #8
 8000bea:	601a      	str	r2, [r3, #0]

    return 0;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000318 	.word	0x20000318
 8000bfc:	2000036c 	.word	0x2000036c
 8000c00:	20000474 	.word	0x20000474
 8000c04:	2000057c 	.word	0x2000057c
 8000c08:	20000684 	.word	0x20000684
 8000c0c:	2000078c 	.word	0x2000078c
 8000c10:	08005194 	.word	0x08005194

08000c14 <SecureUart_SendFromUart1>:

/**
 * @brief  Отправка данных через UART1
 */
FrameStatus SecureUart_SendFromUart1(uint8_t *data, uint16_t size) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b09c      	sub	sp, #112	@ 0x70
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	807b      	strh	r3, [r7, #2]
    if (suart_config.uart1.is_tx_busy) {
 8000c20:	4b23      	ldr	r3, [pc, #140]	@ (8000cb0 <SecureUart_SendFromUart1+0x9c>)
 8000c22:	7e1b      	ldrb	r3, [r3, #24]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d004      	beq.n	8000c32 <SecureUart_SendFromUart1+0x1e>
        SecureUart_Debug("UART1: Ошибка - передатчик занят\r\n");
 8000c28:	4822      	ldr	r0, [pc, #136]	@ (8000cb4 <SecureUart_SendFromUart1+0xa0>)
 8000c2a:	f000 f8a9 	bl	8000d80 <SecureUart_Debug>
        return FRAME_BUSY;
 8000c2e:	2306      	movs	r3, #6
 8000c30:	e03a      	b.n	8000ca8 <SecureUart_SendFromUart1+0x94>
    }

    if (size > FRAME_MAX_DATA_SIZE) {
 8000c32:	887b      	ldrh	r3, [r7, #2]
 8000c34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c38:	d904      	bls.n	8000c44 <SecureUart_SendFromUart1+0x30>
        SecureUart_Debug("Ошибка: размер данных превышает максимальный\r\n");
 8000c3a:	481f      	ldr	r0, [pc, #124]	@ (8000cb8 <SecureUart_SendFromUart1+0xa4>)
 8000c3c:	f000 f8a0 	bl	8000d80 <SecureUart_Debug>
        return FRAME_ERROR_LENGTH;
 8000c40:	2302      	movs	r3, #2
 8000c42:	e031      	b.n	8000ca8 <SecureUart_SendFromUart1+0x94>
    }

    /* Строим фрейм данных */
    uint16_t frame_size = SecureUart_BuildFrame(suart_config.uart1.tx_buffer, data, size);
 8000c44:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb0 <SecureUart_SendFromUart1+0x9c>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	887a      	ldrh	r2, [r7, #2]
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f000 f967 	bl	8000f20 <SecureUart_BuildFrame>
 8000c52:	4603      	mov	r3, r0
 8000c54:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

    /* Отладочный вывод */
    char debug_msg[100];
    sprintf(debug_msg, "UART1 -> UART6: отправка %d байт данных (размер фрейма %d байт)\r\n", size, frame_size);
 8000c58:	887a      	ldrh	r2, [r7, #2]
 8000c5a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8000c5e:	f107 0008 	add.w	r0, r7, #8
 8000c62:	4916      	ldr	r1, [pc, #88]	@ (8000cbc <SecureUart_SendFromUart1+0xa8>)
 8000c64:	f003 fd8c 	bl	8004780 <siprintf>
    SecureUart_Debug(debug_msg);
 8000c68:	f107 0308 	add.w	r3, r7, #8
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f000 f887 	bl	8000d80 <SecureUart_Debug>
    SecureUart_PrintBuffer("TX данные UART1", data, size);
 8000c72:	887b      	ldrh	r3, [r7, #2]
 8000c74:	461a      	mov	r2, r3
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	4811      	ldr	r0, [pc, #68]	@ (8000cc0 <SecureUart_SendFromUart1+0xac>)
 8000c7a:	f000 f897 	bl	8000dac <SecureUart_PrintBuffer>
    SecureUart_PrintBuffer("TX фрейм UART1", suart_config.uart1.tx_buffer, frame_size);
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <SecureUart_SendFromUart1+0x9c>)
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8000c86:	4619      	mov	r1, r3
 8000c88:	480e      	ldr	r0, [pc, #56]	@ (8000cc4 <SecureUart_SendFromUart1+0xb0>)
 8000c8a:	f000 f88f 	bl	8000dac <SecureUart_PrintBuffer>

    /* Отправляем данные по DMA */
    suart_config.uart1.is_tx_busy = 1;
 8000c8e:	4b08      	ldr	r3, [pc, #32]	@ (8000cb0 <SecureUart_SendFromUart1+0x9c>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	761a      	strb	r2, [r3, #24]
    HAL_UART_Transmit_DMA(suart_config.uart1.huart, suart_config.uart1.tx_buffer, frame_size);
 8000c94:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <SecureUart_SendFromUart1+0x9c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a05      	ldr	r2, [pc, #20]	@ (8000cb0 <SecureUart_SendFromUart1+0x9c>)
 8000c9a:	68d1      	ldr	r1, [r2, #12]
 8000c9c:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f002 fb5f 	bl	8003364 <HAL_UART_Transmit_DMA>

    return FRAME_OK;
 8000ca6:	2300      	movs	r3, #0
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3770      	adds	r7, #112	@ 0x70
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000318 	.word	0x20000318
 8000cb4:	080051d0 	.word	0x080051d0
 8000cb8:	08005208 	.word	0x08005208
 8000cbc:	08005260 	.word	0x08005260
 8000cc0:	080052c4 	.word	0x080052c4
 8000cc4:	080052dc 	.word	0x080052dc

08000cc8 <SecureUart_SendFromUart6>:

/**
 * @brief  Отправка данных через UART6
 */
FrameStatus SecureUart_SendFromUart6(uint8_t *data, uint16_t size) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b09c      	sub	sp, #112	@ 0x70
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	807b      	strh	r3, [r7, #2]
    if (suart_config.uart6.is_tx_busy) {
 8000cd4:	4b24      	ldr	r3, [pc, #144]	@ (8000d68 <SecureUart_SendFromUart6+0xa0>)
 8000cd6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d004      	beq.n	8000ce8 <SecureUart_SendFromUart6+0x20>
        SecureUart_Debug("UART6: Ошибка - передатчик занят\r\n");
 8000cde:	4823      	ldr	r0, [pc, #140]	@ (8000d6c <SecureUart_SendFromUart6+0xa4>)
 8000ce0:	f000 f84e 	bl	8000d80 <SecureUart_Debug>
        return FRAME_BUSY;
 8000ce4:	2306      	movs	r3, #6
 8000ce6:	e03b      	b.n	8000d60 <SecureUart_SendFromUart6+0x98>
    }

    if (size > FRAME_MAX_DATA_SIZE) {
 8000ce8:	887b      	ldrh	r3, [r7, #2]
 8000cea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000cee:	d904      	bls.n	8000cfa <SecureUart_SendFromUart6+0x32>
        SecureUart_Debug("Ошибка: размер данных превышает максимальный\r\n");
 8000cf0:	481f      	ldr	r0, [pc, #124]	@ (8000d70 <SecureUart_SendFromUart6+0xa8>)
 8000cf2:	f000 f845 	bl	8000d80 <SecureUart_Debug>
        return FRAME_ERROR_LENGTH;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	e032      	b.n	8000d60 <SecureUart_SendFromUart6+0x98>
    }

    /* Строим фрейм данных */
    uint16_t frame_size = SecureUart_BuildFrame(suart_config.uart6.tx_buffer, data, size);
 8000cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8000d68 <SecureUart_SendFromUart6+0xa0>)
 8000cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cfe:	887a      	ldrh	r2, [r7, #2]
 8000d00:	6879      	ldr	r1, [r7, #4]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 f90c 	bl	8000f20 <SecureUart_BuildFrame>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

    /* Отладочный вывод */
    char debug_msg[100];
    sprintf(debug_msg, "UART6 -> UART1: отправка %d байт данных (размер фрейма %d байт)\r\n", size, frame_size);
 8000d0e:	887a      	ldrh	r2, [r7, #2]
 8000d10:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8000d14:	f107 0008 	add.w	r0, r7, #8
 8000d18:	4916      	ldr	r1, [pc, #88]	@ (8000d74 <SecureUart_SendFromUart6+0xac>)
 8000d1a:	f003 fd31 	bl	8004780 <siprintf>
    SecureUart_Debug(debug_msg);
 8000d1e:	f107 0308 	add.w	r3, r7, #8
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 f82c 	bl	8000d80 <SecureUart_Debug>
    SecureUart_PrintBuffer("TX данные UART6", data, size);
 8000d28:	887b      	ldrh	r3, [r7, #2]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	6879      	ldr	r1, [r7, #4]
 8000d2e:	4812      	ldr	r0, [pc, #72]	@ (8000d78 <SecureUart_SendFromUart6+0xb0>)
 8000d30:	f000 f83c 	bl	8000dac <SecureUart_PrintBuffer>
    SecureUart_PrintBuffer("TX фрейм UART6", suart_config.uart6.tx_buffer, frame_size);
 8000d34:	4b0c      	ldr	r3, [pc, #48]	@ (8000d68 <SecureUart_SendFromUart6+0xa0>)
 8000d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d38:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	480f      	ldr	r0, [pc, #60]	@ (8000d7c <SecureUart_SendFromUart6+0xb4>)
 8000d40:	f000 f834 	bl	8000dac <SecureUart_PrintBuffer>

    /* Отправляем данные по DMA */
    suart_config.uart6.is_tx_busy = 1;
 8000d44:	4b08      	ldr	r3, [pc, #32]	@ (8000d68 <SecureUart_SendFromUart6+0xa0>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    HAL_UART_Transmit_DMA(suart_config.uart6.huart, suart_config.uart6.tx_buffer, frame_size);
 8000d4c:	4b06      	ldr	r3, [pc, #24]	@ (8000d68 <SecureUart_SendFromUart6+0xa0>)
 8000d4e:	69db      	ldr	r3, [r3, #28]
 8000d50:	4a05      	ldr	r2, [pc, #20]	@ (8000d68 <SecureUart_SendFromUart6+0xa0>)
 8000d52:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8000d54:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f002 fb03 	bl	8003364 <HAL_UART_Transmit_DMA>

    return FRAME_OK;
 8000d5e:	2300      	movs	r3, #0
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3770      	adds	r7, #112	@ 0x70
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000318 	.word	0x20000318
 8000d6c:	080052f0 	.word	0x080052f0
 8000d70:	08005208 	.word	0x08005208
 8000d74:	08005328 	.word	0x08005328
 8000d78:	0800538c 	.word	0x0800538c
 8000d7c:	080053a4 	.word	0x080053a4

08000d80 <SecureUart_Debug>:

/**
 * @brief  Отправка отладочного сообщения через UART2
 */
void SecureUart_Debug(const char *message) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
    uint16_t len = strlen(message);
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f7ff fa29 	bl	80001e0 <strlen>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	81fb      	strh	r3, [r7, #14]
    HAL_UART_Transmit(suart_config.debug.huart, (uint8_t*)message, len, 100);
 8000d92:	4b05      	ldr	r3, [pc, #20]	@ (8000da8 <SecureUart_Debug+0x28>)
 8000d94:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8000d96:	89fa      	ldrh	r2, [r7, #14]
 8000d98:	2364      	movs	r3, #100	@ 0x64
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	f002 fa56 	bl	800324c <HAL_UART_Transmit>
}
 8000da0:	bf00      	nop
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000318 	.word	0x20000318

08000dac <SecureUart_PrintBuffer>:

/**
 * @brief  Вывод буфера в отладочный порт
 */
static void SecureUart_PrintBuffer(const char *prefix, const uint8_t *buffer, uint16_t size) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b09e      	sub	sp, #120	@ 0x78
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	4613      	mov	r3, r2
 8000db8:	80fb      	strh	r3, [r7, #6]
    char debug_msg[100];
    sprintf(debug_msg, "%s [%d bytes]: ", prefix, size);
 8000dba:	88fb      	ldrh	r3, [r7, #6]
 8000dbc:	f107 0010 	add.w	r0, r7, #16
 8000dc0:	68fa      	ldr	r2, [r7, #12]
 8000dc2:	4923      	ldr	r1, [pc, #140]	@ (8000e50 <SecureUart_PrintBuffer+0xa4>)
 8000dc4:	f003 fcdc 	bl	8004780 <siprintf>
    SecureUart_Debug(debug_msg);
 8000dc8:	f107 0310 	add.w	r3, r7, #16
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ffd7 	bl	8000d80 <SecureUart_Debug>

    for (uint16_t i = 0; i < size && i < 32; i++) {
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
 8000dd8:	e023      	b.n	8000e22 <SecureUart_PrintBuffer+0x76>
        sprintf(debug_msg, "%02X ", buffer[i]);
 8000dda:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8000dde:	68ba      	ldr	r2, [r7, #8]
 8000de0:	4413      	add	r3, r2
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	f107 0310 	add.w	r3, r7, #16
 8000dea:	491a      	ldr	r1, [pc, #104]	@ (8000e54 <SecureUart_PrintBuffer+0xa8>)
 8000dec:	4618      	mov	r0, r3
 8000dee:	f003 fcc7 	bl	8004780 <siprintf>
        SecureUart_Debug(debug_msg);
 8000df2:	f107 0310 	add.w	r3, r7, #16
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ffc2 	bl	8000d80 <SecureUart_Debug>

        // Добавляем перенос строки каждые 16 байт для удобства чтения
        if ((i + 1) % 16 == 0 && i < 31) {
 8000dfc:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8000e00:	3301      	adds	r3, #1
 8000e02:	f003 030f 	and.w	r3, r3, #15
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d106      	bne.n	8000e18 <SecureUart_PrintBuffer+0x6c>
 8000e0a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8000e0e:	2b1e      	cmp	r3, #30
 8000e10:	d802      	bhi.n	8000e18 <SecureUart_PrintBuffer+0x6c>
            SecureUart_Debug("\r\n                  ");
 8000e12:	4811      	ldr	r0, [pc, #68]	@ (8000e58 <SecureUart_PrintBuffer+0xac>)
 8000e14:	f7ff ffb4 	bl	8000d80 <SecureUart_Debug>
    for (uint16_t i = 0; i < size && i < 32; i++) {
 8000e18:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
 8000e22:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8000e26:	88fb      	ldrh	r3, [r7, #6]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d203      	bcs.n	8000e34 <SecureUart_PrintBuffer+0x88>
 8000e2c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8000e30:	2b1f      	cmp	r3, #31
 8000e32:	d9d2      	bls.n	8000dda <SecureUart_PrintBuffer+0x2e>
        }
    }

    if (size > 32) {
 8000e34:	88fb      	ldrh	r3, [r7, #6]
 8000e36:	2b20      	cmp	r3, #32
 8000e38:	d902      	bls.n	8000e40 <SecureUart_PrintBuffer+0x94>
        SecureUart_Debug("...");
 8000e3a:	4808      	ldr	r0, [pc, #32]	@ (8000e5c <SecureUart_PrintBuffer+0xb0>)
 8000e3c:	f7ff ffa0 	bl	8000d80 <SecureUart_Debug>
    }

    SecureUart_Debug("\r\n");
 8000e40:	4807      	ldr	r0, [pc, #28]	@ (8000e60 <SecureUart_PrintBuffer+0xb4>)
 8000e42:	f7ff ff9d 	bl	8000d80 <SecureUart_Debug>
}
 8000e46:	bf00      	nop
 8000e48:	3778      	adds	r7, #120	@ 0x78
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	080053b8 	.word	0x080053b8
 8000e54:	080053c8 	.word	0x080053c8
 8000e58:	080053d0 	.word	0x080053d0
 8000e5c:	080053e8 	.word	0x080053e8
 8000e60:	080053ec 	.word	0x080053ec

08000e64 <SecureUart_InitCRC32Table>:

/**
 * @brief  Инициализация таблицы CRC32
 */
static void SecureUart_InitCRC32Table(void) {
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
    uint32_t c;
    for (uint32_t i = 0; i < 256; i++) {
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	e01c      	b.n	8000eaa <SecureUart_InitCRC32Table+0x46>
        c = i;
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	60fb      	str	r3, [r7, #12]
        for (uint32_t j = 0; j < 8; j++) {
 8000e74:	2300      	movs	r3, #0
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	e00c      	b.n	8000e94 <SecureUart_InitCRC32Table+0x30>
            c = (c & 1) ? (0xEDB88320 ^ (c >> 1)) : (c >> 1);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	425a      	negs	r2, r3
 8000e82:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec0 <SecureUart_InitCRC32Table+0x5c>)
 8000e84:	4013      	ands	r3, r2
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	0852      	lsrs	r2, r2, #1
 8000e8a:	4053      	eors	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
        for (uint32_t j = 0; j < 8; j++) {
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	3301      	adds	r3, #1
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b07      	cmp	r3, #7
 8000e98:	d9ef      	bls.n	8000e7a <SecureUart_InitCRC32Table+0x16>
        }
        crc32_table[i] = c;
 8000e9a:	490a      	ldr	r1, [pc, #40]	@ (8000ec4 <SecureUart_InitCRC32Table+0x60>)
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (uint32_t i = 0; i < 256; i++) {
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	2bff      	cmp	r3, #255	@ 0xff
 8000eae:	d9df      	bls.n	8000e70 <SecureUart_InitCRC32Table+0xc>
    }
}
 8000eb0:	bf00      	nop
 8000eb2:	bf00      	nop
 8000eb4:	3714      	adds	r7, #20
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	edb88320 	.word	0xedb88320
 8000ec4:	2000089c 	.word	0x2000089c

08000ec8 <SecureUart_CalculateCRC32>:

/**
 * @brief  Функция для вычисления CRC32
 */
uint32_t SecureUart_CalculateCRC32(const uint8_t *data, uint16_t size) {
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	807b      	strh	r3, [r7, #2]
    uint32_t crc = 0xFFFFFFFF;
 8000ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed8:	60fb      	str	r3, [r7, #12]

    for (uint16_t i = 0; i < size; i++) {
 8000eda:	2300      	movs	r3, #0
 8000edc:	817b      	strh	r3, [r7, #10]
 8000ede:	e011      	b.n	8000f04 <SecureUart_CalculateCRC32+0x3c>
        crc = (crc >> 8) ^ crc32_table[(crc ^ data[i]) & 0xFF];
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	0a1a      	lsrs	r2, r3, #8
 8000ee4:	897b      	ldrh	r3, [r7, #10]
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	440b      	add	r3, r1
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4619      	mov	r1, r3
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	404b      	eors	r3, r1
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	4909      	ldr	r1, [pc, #36]	@ (8000f1c <SecureUart_CalculateCRC32+0x54>)
 8000ef6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000efa:	4053      	eors	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = 0; i < size; i++) {
 8000efe:	897b      	ldrh	r3, [r7, #10]
 8000f00:	3301      	adds	r3, #1
 8000f02:	817b      	strh	r3, [r7, #10]
 8000f04:	897a      	ldrh	r2, [r7, #10]
 8000f06:	887b      	ldrh	r3, [r7, #2]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d3e9      	bcc.n	8000ee0 <SecureUart_CalculateCRC32+0x18>
    }

    return ~crc;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	43db      	mvns	r3, r3
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	2000089c 	.word	0x2000089c

08000f20 <SecureUart_BuildFrame>:

/**
 * @brief  Сборка фрейма данных
 */
uint16_t SecureUart_BuildFrame(uint8_t *frame, const uint8_t *data, uint16_t size) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	80fb      	strh	r3, [r7, #6]
    uint16_t idx = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	82fb      	strh	r3, [r7, #22]

    /* Заголовок */
    frame[idx++] = (FRAME_HEADER >> 8) & 0xFF;
 8000f32:	8afb      	ldrh	r3, [r7, #22]
 8000f34:	1c5a      	adds	r2, r3, #1
 8000f36:	82fa      	strh	r2, [r7, #22]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	22aa      	movs	r2, #170	@ 0xaa
 8000f40:	701a      	strb	r2, [r3, #0]
    frame[idx++] = FRAME_HEADER & 0xFF;
 8000f42:	8afb      	ldrh	r3, [r7, #22]
 8000f44:	1c5a      	adds	r2, r3, #1
 8000f46:	82fa      	strh	r2, [r7, #22]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	2255      	movs	r2, #85	@ 0x55
 8000f50:	701a      	strb	r2, [r3, #0]

    /* Длина данных */
    frame[idx++] = (size >> 8) & 0xFF;
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	0a1b      	lsrs	r3, r3, #8
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	8afb      	ldrh	r3, [r7, #22]
 8000f5a:	1c59      	adds	r1, r3, #1
 8000f5c:	82f9      	strh	r1, [r7, #22]
 8000f5e:	4619      	mov	r1, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	440b      	add	r3, r1
 8000f64:	b2d2      	uxtb	r2, r2
 8000f66:	701a      	strb	r2, [r3, #0]
    frame[idx++] = size & 0xFF;
 8000f68:	8afb      	ldrh	r3, [r7, #22]
 8000f6a:	1c5a      	adds	r2, r3, #1
 8000f6c:	82fa      	strh	r2, [r7, #22]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4413      	add	r3, r2
 8000f74:	88fa      	ldrh	r2, [r7, #6]
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	701a      	strb	r2, [r3, #0]

    /* Данные */
    memcpy(&frame[idx], data, size);
 8000f7a:	8afb      	ldrh	r3, [r7, #22]
 8000f7c:	68fa      	ldr	r2, [r7, #12]
 8000f7e:	4413      	add	r3, r2
 8000f80:	88fa      	ldrh	r2, [r7, #6]
 8000f82:	68b9      	ldr	r1, [r7, #8]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f003 fc51 	bl	800482c <memcpy>
    idx += size;
 8000f8a:	8afa      	ldrh	r2, [r7, #22]
 8000f8c:	88fb      	ldrh	r3, [r7, #6]
 8000f8e:	4413      	add	r3, r2
 8000f90:	82fb      	strh	r3, [r7, #22]

    /* CRC32 */
    uint32_t crc = SecureUart_CalculateCRC32(frame, idx);
 8000f92:	8afb      	ldrh	r3, [r7, #22]
 8000f94:	4619      	mov	r1, r3
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	f7ff ff96 	bl	8000ec8 <SecureUart_CalculateCRC32>
 8000f9c:	6138      	str	r0, [r7, #16]
    frame[idx++] = (crc >> 24) & 0xFF;
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	0e1a      	lsrs	r2, r3, #24
 8000fa2:	8afb      	ldrh	r3, [r7, #22]
 8000fa4:	1c59      	adds	r1, r3, #1
 8000fa6:	82f9      	strh	r1, [r7, #22]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	440b      	add	r3, r1
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	701a      	strb	r2, [r3, #0]
    frame[idx++] = (crc >> 16) & 0xFF;
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	0c1a      	lsrs	r2, r3, #16
 8000fb6:	8afb      	ldrh	r3, [r7, #22]
 8000fb8:	1c59      	adds	r1, r3, #1
 8000fba:	82f9      	strh	r1, [r7, #22]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	440b      	add	r3, r1
 8000fc2:	b2d2      	uxtb	r2, r2
 8000fc4:	701a      	strb	r2, [r3, #0]
    frame[idx++] = (crc >> 8) & 0xFF;
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	0a1a      	lsrs	r2, r3, #8
 8000fca:	8afb      	ldrh	r3, [r7, #22]
 8000fcc:	1c59      	adds	r1, r3, #1
 8000fce:	82f9      	strh	r1, [r7, #22]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	440b      	add	r3, r1
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	701a      	strb	r2, [r3, #0]
    frame[idx++] = crc & 0xFF;
 8000fda:	8afb      	ldrh	r3, [r7, #22]
 8000fdc:	1c5a      	adds	r2, r3, #1
 8000fde:	82fa      	strh	r2, [r7, #22]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	701a      	strb	r2, [r3, #0]

    return idx;
 8000fec:	8afb      	ldrh	r3, [r7, #22]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <SecureUart_ParseFrame>:

/**
 * @brief  Разбор принятого фрейма
 */
FrameStatus SecureUart_ParseFrame(const uint8_t *frame, uint16_t frame_size, uint8_t *data, uint16_t *size) {
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b088      	sub	sp, #32
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	60f8      	str	r0, [r7, #12]
 8000ffe:	607a      	str	r2, [r7, #4]
 8001000:	603b      	str	r3, [r7, #0]
 8001002:	460b      	mov	r3, r1
 8001004:	817b      	strh	r3, [r7, #10]
    if (frame_size < FRAME_OVERHEAD) {
 8001006:	897b      	ldrh	r3, [r7, #10]
 8001008:	2b07      	cmp	r3, #7
 800100a:	d801      	bhi.n	8001010 <SecureUart_ParseFrame+0x1a>
        return FRAME_ERROR_LENGTH;
 800100c:	2302      	movs	r3, #2
 800100e:	e062      	b.n	80010d6 <SecureUart_ParseFrame+0xe0>
    }

    /* Проверка заголовка */
    uint16_t header = (frame[0] << 8) | frame[1];
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	b21b      	sxth	r3, r3
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	b21a      	sxth	r2, r3
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	3301      	adds	r3, #1
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	b21b      	sxth	r3, r3
 8001022:	4313      	orrs	r3, r2
 8001024:	b21b      	sxth	r3, r3
 8001026:	83fb      	strh	r3, [r7, #30]
    if (header != FRAME_HEADER) {
 8001028:	8bfb      	ldrh	r3, [r7, #30]
 800102a:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 800102e:	4293      	cmp	r3, r2
 8001030:	d001      	beq.n	8001036 <SecureUart_ParseFrame+0x40>
        return FRAME_ERROR_HEADER;
 8001032:	2301      	movs	r3, #1
 8001034:	e04f      	b.n	80010d6 <SecureUart_ParseFrame+0xe0>
    }

    /* Получение длины данных */
    uint16_t data_length = (frame[2] << 8) | frame[3];
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	3302      	adds	r3, #2
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	b21b      	sxth	r3, r3
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	b21a      	sxth	r2, r3
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	3303      	adds	r3, #3
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	b21b      	sxth	r3, r3
 800104a:	4313      	orrs	r3, r2
 800104c:	b21b      	sxth	r3, r3
 800104e:	83bb      	strh	r3, [r7, #28]

    /* Проверка длины данных */
    if (data_length > FRAME_MAX_DATA_SIZE || data_length + FRAME_OVERHEAD > frame_size) {
 8001050:	8bbb      	ldrh	r3, [r7, #28]
 8001052:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001056:	d804      	bhi.n	8001062 <SecureUart_ParseFrame+0x6c>
 8001058:	8bbb      	ldrh	r3, [r7, #28]
 800105a:	1dda      	adds	r2, r3, #7
 800105c:	897b      	ldrh	r3, [r7, #10]
 800105e:	429a      	cmp	r2, r3
 8001060:	db01      	blt.n	8001066 <SecureUart_ParseFrame+0x70>
        return FRAME_ERROR_LENGTH;
 8001062:	2302      	movs	r3, #2
 8001064:	e037      	b.n	80010d6 <SecureUart_ParseFrame+0xe0>
    }

    /* Проверка CRC */
    uint32_t received_crc =
        ((uint32_t)frame[4 + data_length] << 24) |
 8001066:	8bbb      	ldrh	r3, [r7, #28]
 8001068:	3304      	adds	r3, #4
 800106a:	461a      	mov	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4413      	add	r3, r2
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	061a      	lsls	r2, r3, #24
        ((uint32_t)frame[5 + data_length] << 16) |
 8001074:	8bbb      	ldrh	r3, [r7, #28]
 8001076:	3305      	adds	r3, #5
 8001078:	4619      	mov	r1, r3
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	440b      	add	r3, r1
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	041b      	lsls	r3, r3, #16
        ((uint32_t)frame[4 + data_length] << 24) |
 8001082:	431a      	orrs	r2, r3
        ((uint32_t)frame[6 + data_length] << 8) |
 8001084:	8bbb      	ldrh	r3, [r7, #28]
 8001086:	3306      	adds	r3, #6
 8001088:	4619      	mov	r1, r3
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	440b      	add	r3, r1
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	021b      	lsls	r3, r3, #8
        ((uint32_t)frame[5 + data_length] << 16) |
 8001092:	4313      	orrs	r3, r2
        (uint32_t)frame[7 + data_length];
 8001094:	8bba      	ldrh	r2, [r7, #28]
 8001096:	3207      	adds	r2, #7
 8001098:	4611      	mov	r1, r2
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	440a      	add	r2, r1
 800109e:	7812      	ldrb	r2, [r2, #0]
    uint32_t received_crc =
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]

    uint32_t calculated_crc = SecureUart_CalculateCRC32(frame, 4 + data_length);
 80010a4:	8bbb      	ldrh	r3, [r7, #28]
 80010a6:	3304      	adds	r3, #4
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	4619      	mov	r1, r3
 80010ac:	68f8      	ldr	r0, [r7, #12]
 80010ae:	f7ff ff0b 	bl	8000ec8 <SecureUart_CalculateCRC32>
 80010b2:	6178      	str	r0, [r7, #20]

    if (received_crc != calculated_crc) {
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d001      	beq.n	80010c0 <SecureUart_ParseFrame+0xca>
        return FRAME_ERROR_CRC;
 80010bc:	2303      	movs	r3, #3
 80010be:	e00a      	b.n	80010d6 <SecureUart_ParseFrame+0xe0>
    }

    /* Копирование данных */
    memcpy(data, &frame[4], data_length);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	3304      	adds	r3, #4
 80010c4:	8bba      	ldrh	r2, [r7, #28]
 80010c6:	4619      	mov	r1, r3
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f003 fbaf 	bl	800482c <memcpy>
    *size = data_length;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	8bba      	ldrh	r2, [r7, #28]
 80010d2:	801a      	strh	r2, [r3, #0]

    return FRAME_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3720      	adds	r7, #32
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <SecureUart_RxCpltCallback_UART1>:

/**
 * @brief  Обработчик завершения приема по DMA для UART1
 */
void SecureUart_RxCpltCallback_UART1(void) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
    uart1_data_received = 1;
 80010e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <SecureUart_RxCpltCallback_UART1+0x40>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	701a      	strb	r2, [r3, #0]
    suart_config.uart1.is_rx_busy = 0;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001124 <SecureUart_RxCpltCallback_UART1+0x44>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	765a      	strb	r2, [r3, #25]

    /* Вывод информации о полученных данных */
    SecureUart_Debug("UART1: Прием завершен, буфер помечен для обработки\r\n");
 80010f0:	480d      	ldr	r0, [pc, #52]	@ (8001128 <SecureUart_RxCpltCallback_UART1+0x48>)
 80010f2:	f7ff fe45 	bl	8000d80 <SecureUart_Debug>

    /* Сразу запускаем прием для следующих данных */
    HAL_UARTEx_ReceiveToIdle_DMA(suart_config.uart1.huart, suart_config.uart1.rx_buffer, FRAME_BUFFER_SIZE);
 80010f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <SecureUart_RxCpltCallback_UART1+0x44>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001124 <SecureUart_RxCpltCallback_UART1+0x44>)
 80010fc:	6911      	ldr	r1, [r2, #16]
 80010fe:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8001102:	4618      	mov	r0, r3
 8001104:	f002 f99e 	bl	8003444 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(suart_config.uart1.hdma_rx, DMA_IT_HT);
 8001108:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <SecureUart_RxCpltCallback_UART1+0x44>)
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b04      	ldr	r3, [pc, #16]	@ (8001124 <SecureUart_RxCpltCallback_UART1+0x44>)
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f022 0208 	bic.w	r2, r2, #8
 800111a:	601a      	str	r2, [r3, #0]
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000894 	.word	0x20000894
 8001124:	20000318 	.word	0x20000318
 8001128:	080053f0 	.word	0x080053f0

0800112c <SecureUart_RxCpltCallback_UART6>:

/**
 * @brief  Обработчик завершения приема по DMA для UART6
 */
void SecureUart_RxCpltCallback_UART6(void) {
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
    uart6_data_received = 1;
 8001130:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <SecureUart_RxCpltCallback_UART6+0x44>)
 8001132:	2201      	movs	r2, #1
 8001134:	701a      	strb	r2, [r3, #0]
    suart_config.uart6.is_rx_busy = 0;
 8001136:	4b0f      	ldr	r3, [pc, #60]	@ (8001174 <SecureUart_RxCpltCallback_UART6+0x48>)
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Вывод информации о полученных данных */
    SecureUart_Debug("UART6: Прием завершен, буфер помечен для обработки\r\n");
 800113e:	480e      	ldr	r0, [pc, #56]	@ (8001178 <SecureUart_RxCpltCallback_UART6+0x4c>)
 8001140:	f7ff fe1e 	bl	8000d80 <SecureUart_Debug>

    /* Сразу запускаем прием для следующих данных */
    HAL_UARTEx_ReceiveToIdle_DMA(suart_config.uart6.huart, suart_config.uart6.rx_buffer, FRAME_BUFFER_SIZE);
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <SecureUart_RxCpltCallback_UART6+0x48>)
 8001146:	69db      	ldr	r3, [r3, #28]
 8001148:	4a0a      	ldr	r2, [pc, #40]	@ (8001174 <SecureUart_RxCpltCallback_UART6+0x48>)
 800114a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800114c:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8001150:	4618      	mov	r0, r3
 8001152:	f002 f977 	bl	8003444 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(suart_config.uart6.hdma_rx, DMA_IT_HT);
 8001156:	4b07      	ldr	r3, [pc, #28]	@ (8001174 <SecureUart_RxCpltCallback_UART6+0x48>)
 8001158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	4b05      	ldr	r3, [pc, #20]	@ (8001174 <SecureUart_RxCpltCallback_UART6+0x48>)
 8001160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f022 0208 	bic.w	r2, r2, #8
 8001168:	601a      	str	r2, [r3, #0]
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000895 	.word	0x20000895
 8001174:	20000318 	.word	0x20000318
 8001178:	0800544c 	.word	0x0800544c

0800117c <SecureUart_TxCpltCallback_UART1>:

/**
 * @brief  Обработчик завершения передачи по DMA для UART1
 */
void SecureUart_TxCpltCallback_UART1(void) {
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
    suart_config.uart1.is_tx_busy = 0;
 8001180:	4b03      	ldr	r3, [pc, #12]	@ (8001190 <SecureUart_TxCpltCallback_UART1+0x14>)
 8001182:	2200      	movs	r2, #0
 8001184:	761a      	strb	r2, [r3, #24]
    SecureUart_Debug("UART1: передача завершена\r\n");
 8001186:	4803      	ldr	r0, [pc, #12]	@ (8001194 <SecureUart_TxCpltCallback_UART1+0x18>)
 8001188:	f7ff fdfa 	bl	8000d80 <SecureUart_Debug>
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000318 	.word	0x20000318
 8001194:	080054a8 	.word	0x080054a8

08001198 <SecureUart_TxCpltCallback_UART6>:

/**
 * @brief  Обработчик завершения передачи по DMA для UART6
 */
void SecureUart_TxCpltCallback_UART6(void) {
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
    suart_config.uart6.is_tx_busy = 0;
 800119c:	4b04      	ldr	r3, [pc, #16]	@ (80011b0 <SecureUart_TxCpltCallback_UART6+0x18>)
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    SecureUart_Debug("UART6: передача завершена\r\n");
 80011a4:	4803      	ldr	r0, [pc, #12]	@ (80011b4 <SecureUart_TxCpltCallback_UART6+0x1c>)
 80011a6:	f7ff fdeb 	bl	8000d80 <SecureUart_Debug>
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000318 	.word	0x20000318
 80011b4:	080054d8 	.word	0x080054d8

080011b8 <SecureUart_Process>:
}

/**
 * @brief  Обработка полученных данных
 */
void SecureUart_Process(void) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b0de      	sub	sp, #376	@ 0x178
 80011bc:	af00      	add	r7, sp, #0
    uint8_t data[FRAME_MAX_DATA_SIZE];
    uint16_t size;
    FrameStatus status;

    /* Обработка данных с UART6 */
    if (uart6_data_received) {
 80011be:	4b84      	ldr	r3, [pc, #528]	@ (80013d0 <SecureUart_Process+0x218>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d07c      	beq.n	80012c2 <SecureUart_Process+0x10a>
        SecureUart_Debug("\r\nНачало разбора данных от UART6...\r\n");
 80011c8:	4882      	ldr	r0, [pc, #520]	@ (80013d4 <SecureUart_Process+0x21c>)
 80011ca:	f7ff fdd9 	bl	8000d80 <SecureUart_Debug>
        SecureUart_PrintBuffer("Буфер UART6", suart_config.uart6.rx_buffer, uart6_rx_size);
 80011ce:	4b82      	ldr	r3, [pc, #520]	@ (80013d8 <SecureUart_Process+0x220>)
 80011d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011d2:	4a82      	ldr	r2, [pc, #520]	@ (80013dc <SecureUart_Process+0x224>)
 80011d4:	8812      	ldrh	r2, [r2, #0]
 80011d6:	b292      	uxth	r2, r2
 80011d8:	4619      	mov	r1, r3
 80011da:	4881      	ldr	r0, [pc, #516]	@ (80013e0 <SecureUart_Process+0x228>)
 80011dc:	f7ff fde6 	bl	8000dac <SecureUart_PrintBuffer>

        status = SecureUart_ParseFrame(suart_config.uart6.rx_buffer, uart6_rx_size, data, &size);
 80011e0:	4b7d      	ldr	r3, [pc, #500]	@ (80013d8 <SecureUart_Process+0x220>)
 80011e2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80011e4:	4b7d      	ldr	r3, [pc, #500]	@ (80013dc <SecureUart_Process+0x224>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	b299      	uxth	r1, r3
 80011ea:	f107 036a 	add.w	r3, r7, #106	@ 0x6a
 80011ee:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80011f2:	f7ff ff00 	bl	8000ff6 <SecureUart_ParseFrame>
 80011f6:	4603      	mov	r3, r0
 80011f8:	f887 3177 	strb.w	r3, [r7, #375]	@ 0x177

        if (status == FRAME_OK) {
 80011fc:	f897 3177 	ldrb.w	r3, [r7, #375]	@ 0x177
 8001200:	2b00      	cmp	r3, #0
 8001202:	d11a      	bne.n	800123a <SecureUart_Process+0x82>
            char debug_msg[100];
            sprintf(debug_msg, "UART1 <- UART6: Успешно получено %d байт данных\r\n", size);
 8001204:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001208:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 800120c:	881b      	ldrh	r3, [r3, #0]
 800120e:	461a      	mov	r2, r3
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	4974      	ldr	r1, [pc, #464]	@ (80013e4 <SecureUart_Process+0x22c>)
 8001214:	4618      	mov	r0, r3
 8001216:	f003 fab3 	bl	8004780 <siprintf>
            SecureUart_Debug(debug_msg);
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff fdaf 	bl	8000d80 <SecureUart_Debug>
            SecureUart_PrintBuffer("RX UART1", data, size);
 8001222:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001226:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 800122a:	881a      	ldrh	r2, [r3, #0]
 800122c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001230:	4619      	mov	r1, r3
 8001232:	486d      	ldr	r0, [pc, #436]	@ (80013e8 <SecureUart_Process+0x230>)
 8001234:	f7ff fdba 	bl	8000dac <SecureUart_PrintBuffer>
 8001238:	e040      	b.n	80012bc <SecureUart_Process+0x104>
        } else {
            char debug_msg[100];
            sprintf(debug_msg, "UART1 <- UART6: Ошибка разбора фрейма: %d\r\n", status);
 800123a:	f897 2177 	ldrb.w	r2, [r7, #375]	@ 0x177
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	496a      	ldr	r1, [pc, #424]	@ (80013ec <SecureUart_Process+0x234>)
 8001242:	4618      	mov	r0, r3
 8001244:	f003 fa9c 	bl	8004780 <siprintf>
            SecureUart_Debug(debug_msg);
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fd98 	bl	8000d80 <SecureUart_Debug>

            // Дополнительный дамп для отладки в случае ошибки
            uint16_t header = (suart_config.uart6.rx_buffer[0] << 8) | suart_config.uart6.rx_buffer[1];
 8001250:	4b61      	ldr	r3, [pc, #388]	@ (80013d8 <SecureUart_Process+0x220>)
 8001252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	b21b      	sxth	r3, r3
 8001258:	021b      	lsls	r3, r3, #8
 800125a:	b21a      	sxth	r2, r3
 800125c:	4b5e      	ldr	r3, [pc, #376]	@ (80013d8 <SecureUart_Process+0x220>)
 800125e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001260:	3301      	adds	r3, #1
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	b21b      	sxth	r3, r3
 8001266:	4313      	orrs	r3, r2
 8001268:	b21b      	sxth	r3, r3
 800126a:	f8a7 3174 	strh.w	r3, [r7, #372]	@ 0x174
            uint16_t length = (suart_config.uart6.rx_buffer[2] << 8) | suart_config.uart6.rx_buffer[3];
 800126e:	4b5a      	ldr	r3, [pc, #360]	@ (80013d8 <SecureUart_Process+0x220>)
 8001270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001272:	3302      	adds	r3, #2
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	b21b      	sxth	r3, r3
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	b21a      	sxth	r2, r3
 800127c:	4b56      	ldr	r3, [pc, #344]	@ (80013d8 <SecureUart_Process+0x220>)
 800127e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001280:	3303      	adds	r3, #3
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	b21b      	sxth	r3, r3
 8001286:	4313      	orrs	r3, r2
 8001288:	b21b      	sxth	r3, r3
 800128a:	f8a7 3172 	strh.w	r3, [r7, #370]	@ 0x172
            sprintf(debug_msg, "  Заголовок: 0x%04X (ожидается 0x%04X)\r\n", header, FRAME_HEADER);
 800128e:	f8b7 2174 	ldrh.w	r2, [r7, #372]	@ 0x174
 8001292:	1d38      	adds	r0, r7, #4
 8001294:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8001298:	4955      	ldr	r1, [pc, #340]	@ (80013f0 <SecureUart_Process+0x238>)
 800129a:	f003 fa71 	bl	8004780 <siprintf>
            SecureUart_Debug(debug_msg);
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fd6d 	bl	8000d80 <SecureUart_Debug>
            sprintf(debug_msg, "  Длина данных: %d\r\n", length);
 80012a6:	f8b7 2172 	ldrh.w	r2, [r7, #370]	@ 0x172
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	4951      	ldr	r1, [pc, #324]	@ (80013f4 <SecureUart_Process+0x23c>)
 80012ae:	4618      	mov	r0, r3
 80012b0:	f003 fa66 	bl	8004780 <siprintf>
            SecureUart_Debug(debug_msg);
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fd62 	bl	8000d80 <SecureUart_Debug>
        }

        uart6_data_received = 0;
 80012bc:	4b44      	ldr	r3, [pc, #272]	@ (80013d0 <SecureUart_Process+0x218>)
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]
    }

    /* Обработка данных с UART1 */
    if (uart1_data_received) {
 80012c2:	4b4d      	ldr	r3, [pc, #308]	@ (80013f8 <SecureUart_Process+0x240>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d07c      	beq.n	80013c6 <SecureUart_Process+0x20e>
        SecureUart_Debug("\r\nНачало разбора данных от UART1...\r\n");
 80012cc:	484b      	ldr	r0, [pc, #300]	@ (80013fc <SecureUart_Process+0x244>)
 80012ce:	f7ff fd57 	bl	8000d80 <SecureUart_Debug>
        SecureUart_PrintBuffer("Буфер UART1", suart_config.uart1.rx_buffer, uart1_rx_size);
 80012d2:	4b41      	ldr	r3, [pc, #260]	@ (80013d8 <SecureUart_Process+0x220>)
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	4a4a      	ldr	r2, [pc, #296]	@ (8001400 <SecureUart_Process+0x248>)
 80012d8:	8812      	ldrh	r2, [r2, #0]
 80012da:	b292      	uxth	r2, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	4849      	ldr	r0, [pc, #292]	@ (8001404 <SecureUart_Process+0x24c>)
 80012e0:	f7ff fd64 	bl	8000dac <SecureUart_PrintBuffer>

        status = SecureUart_ParseFrame(suart_config.uart1.rx_buffer, uart1_rx_size, data, &size);
 80012e4:	4b3c      	ldr	r3, [pc, #240]	@ (80013d8 <SecureUart_Process+0x220>)
 80012e6:	6918      	ldr	r0, [r3, #16]
 80012e8:	4b45      	ldr	r3, [pc, #276]	@ (8001400 <SecureUart_Process+0x248>)
 80012ea:	881b      	ldrh	r3, [r3, #0]
 80012ec:	b299      	uxth	r1, r3
 80012ee:	f107 036a 	add.w	r3, r7, #106	@ 0x6a
 80012f2:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80012f6:	f7ff fe7e 	bl	8000ff6 <SecureUart_ParseFrame>
 80012fa:	4603      	mov	r3, r0
 80012fc:	f887 3177 	strb.w	r3, [r7, #375]	@ 0x177

        if (status == FRAME_OK) {
 8001300:	f897 3177 	ldrb.w	r3, [r7, #375]	@ 0x177
 8001304:	2b00      	cmp	r3, #0
 8001306:	d11a      	bne.n	800133e <SecureUart_Process+0x186>
            char debug_msg[100];
            sprintf(debug_msg, "UART6 <- UART1: Успешно получено %d байт данных\r\n", size);
 8001308:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800130c:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	461a      	mov	r2, r3
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	493c      	ldr	r1, [pc, #240]	@ (8001408 <SecureUart_Process+0x250>)
 8001318:	4618      	mov	r0, r3
 800131a:	f003 fa31 	bl	8004780 <siprintf>
            SecureUart_Debug(debug_msg);
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fd2d 	bl	8000d80 <SecureUart_Debug>
            SecureUart_PrintBuffer("RX UART6", data, size);
 8001326:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800132a:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 800132e:	881a      	ldrh	r2, [r3, #0]
 8001330:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001334:	4619      	mov	r1, r3
 8001336:	4835      	ldr	r0, [pc, #212]	@ (800140c <SecureUart_Process+0x254>)
 8001338:	f7ff fd38 	bl	8000dac <SecureUart_PrintBuffer>
 800133c:	e040      	b.n	80013c0 <SecureUart_Process+0x208>
        } else {
            char debug_msg[100];
            sprintf(debug_msg, "UART6 <- UART1: Ошибка разбора фрейма: %d\r\n", status);
 800133e:	f897 2177 	ldrb.w	r2, [r7, #375]	@ 0x177
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	4932      	ldr	r1, [pc, #200]	@ (8001410 <SecureUart_Process+0x258>)
 8001346:	4618      	mov	r0, r3
 8001348:	f003 fa1a 	bl	8004780 <siprintf>
            SecureUart_Debug(debug_msg);
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fd16 	bl	8000d80 <SecureUart_Debug>

            // Дополнительный дамп для отладки в случае ошибки
            uint16_t header = (suart_config.uart1.rx_buffer[0] << 8) | suart_config.uart1.rx_buffer[1];
 8001354:	4b20      	ldr	r3, [pc, #128]	@ (80013d8 <SecureUart_Process+0x220>)
 8001356:	691b      	ldr	r3, [r3, #16]
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	b21b      	sxth	r3, r3
 800135c:	021b      	lsls	r3, r3, #8
 800135e:	b21a      	sxth	r2, r3
 8001360:	4b1d      	ldr	r3, [pc, #116]	@ (80013d8 <SecureUart_Process+0x220>)
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	3301      	adds	r3, #1
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	b21b      	sxth	r3, r3
 800136a:	4313      	orrs	r3, r2
 800136c:	b21b      	sxth	r3, r3
 800136e:	f8a7 3170 	strh.w	r3, [r7, #368]	@ 0x170
            uint16_t length = (suart_config.uart1.rx_buffer[2] << 8) | suart_config.uart1.rx_buffer[3];
 8001372:	4b19      	ldr	r3, [pc, #100]	@ (80013d8 <SecureUart_Process+0x220>)
 8001374:	691b      	ldr	r3, [r3, #16]
 8001376:	3302      	adds	r3, #2
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	b21b      	sxth	r3, r3
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	b21a      	sxth	r2, r3
 8001380:	4b15      	ldr	r3, [pc, #84]	@ (80013d8 <SecureUart_Process+0x220>)
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	3303      	adds	r3, #3
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	b21b      	sxth	r3, r3
 800138a:	4313      	orrs	r3, r2
 800138c:	b21b      	sxth	r3, r3
 800138e:	f8a7 316e 	strh.w	r3, [r7, #366]	@ 0x16e
            sprintf(debug_msg, "  Заголовок: 0x%04X (ожидается 0x%04X)\r\n", header, FRAME_HEADER);
 8001392:	f8b7 2170 	ldrh.w	r2, [r7, #368]	@ 0x170
 8001396:	1d38      	adds	r0, r7, #4
 8001398:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800139c:	4914      	ldr	r1, [pc, #80]	@ (80013f0 <SecureUart_Process+0x238>)
 800139e:	f003 f9ef 	bl	8004780 <siprintf>
            SecureUart_Debug(debug_msg);
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fceb 	bl	8000d80 <SecureUart_Debug>
            sprintf(debug_msg, "  Длина данных: %d\r\n", length);
 80013aa:	f8b7 216e 	ldrh.w	r2, [r7, #366]	@ 0x16e
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	4910      	ldr	r1, [pc, #64]	@ (80013f4 <SecureUart_Process+0x23c>)
 80013b2:	4618      	mov	r0, r3
 80013b4:	f003 f9e4 	bl	8004780 <siprintf>
            SecureUart_Debug(debug_msg);
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fce0 	bl	8000d80 <SecureUart_Debug>
        }

        uart1_data_received = 0;
 80013c0:	4b0d      	ldr	r3, [pc, #52]	@ (80013f8 <SecureUart_Process+0x240>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	701a      	strb	r2, [r3, #0]
    }
}
 80013c6:	bf00      	nop
 80013c8:	f507 77bc 	add.w	r7, r7, #376	@ 0x178
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000895 	.word	0x20000895
 80013d4:	08005508 	.word	0x08005508
 80013d8:	20000318 	.word	0x20000318
 80013dc:	20000898 	.word	0x20000898
 80013e0:	08005544 	.word	0x08005544
 80013e4:	08005558 	.word	0x08005558
 80013e8:	080055a4 	.word	0x080055a4
 80013ec:	080055b0 	.word	0x080055b0
 80013f0:	080055f0 	.word	0x080055f0
 80013f4:	0800562c 	.word	0x0800562c
 80013f8:	20000894 	.word	0x20000894
 80013fc:	0800564c 	.word	0x0800564c
 8001400:	20000896 	.word	0x20000896
 8001404:	08005688 	.word	0x08005688
 8001408:	0800569c 	.word	0x0800569c
 800140c:	080056e8 	.word	0x080056e8
 8001410:	080056f4 	.word	0x080056f4

08001414 <HAL_UARTEx_RxEventCallback>:

/**
 * @brief  Обработчик события приема данных по UART с DMA (для обоих UART)
 * @note   Эта функция должна быть вызвана из колбека HAL_UARTEx_RxEventCallback
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b09c      	sub	sp, #112	@ 0x70
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	807b      	strh	r3, [r7, #2]
    char debug_msg[100];

    /* Определяем, какой UART вызвал колбек */
    if (huart == suart_config.uart1.huart) {
 8001420:	4b18      	ldr	r3, [pc, #96]	@ (8001484 <HAL_UARTEx_RxEventCallback+0x70>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	429a      	cmp	r2, r3
 8001428:	d111      	bne.n	800144e <HAL_UARTEx_RxEventCallback+0x3a>
        uart1_rx_size = Size;
 800142a:	4a17      	ldr	r2, [pc, #92]	@ (8001488 <HAL_UARTEx_RxEventCallback+0x74>)
 800142c:	887b      	ldrh	r3, [r7, #2]
 800142e:	8013      	strh	r3, [r2, #0]
        sprintf(debug_msg, "UART1: получены данные, размер: %d байт\r\n", Size);
 8001430:	887a      	ldrh	r2, [r7, #2]
 8001432:	f107 030c 	add.w	r3, r7, #12
 8001436:	4915      	ldr	r1, [pc, #84]	@ (800148c <HAL_UARTEx_RxEventCallback+0x78>)
 8001438:	4618      	mov	r0, r3
 800143a:	f003 f9a1 	bl	8004780 <siprintf>
        SecureUart_Debug(debug_msg);
 800143e:	f107 030c 	add.w	r3, r7, #12
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fc9c 	bl	8000d80 <SecureUart_Debug>
        SecureUart_RxCpltCallback_UART1();
 8001448:	f7ff fe4a 	bl	80010e0 <SecureUart_RxCpltCallback_UART1>
        uart6_rx_size = Size;
        sprintf(debug_msg, "UART6: получены данные, размер: %d байт\r\n", Size);
        SecureUart_Debug(debug_msg);
        SecureUart_RxCpltCallback_UART6();
    }
}
 800144c:	e015      	b.n	800147a <HAL_UARTEx_RxEventCallback+0x66>
    } else if (huart == suart_config.uart6.huart) {
 800144e:	4b0d      	ldr	r3, [pc, #52]	@ (8001484 <HAL_UARTEx_RxEventCallback+0x70>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	429a      	cmp	r2, r3
 8001456:	d110      	bne.n	800147a <HAL_UARTEx_RxEventCallback+0x66>
        uart6_rx_size = Size;
 8001458:	4a0d      	ldr	r2, [pc, #52]	@ (8001490 <HAL_UARTEx_RxEventCallback+0x7c>)
 800145a:	887b      	ldrh	r3, [r7, #2]
 800145c:	8013      	strh	r3, [r2, #0]
        sprintf(debug_msg, "UART6: получены данные, размер: %d байт\r\n", Size);
 800145e:	887a      	ldrh	r2, [r7, #2]
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	490b      	ldr	r1, [pc, #44]	@ (8001494 <HAL_UARTEx_RxEventCallback+0x80>)
 8001466:	4618      	mov	r0, r3
 8001468:	f003 f98a 	bl	8004780 <siprintf>
        SecureUart_Debug(debug_msg);
 800146c:	f107 030c 	add.w	r3, r7, #12
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff fc85 	bl	8000d80 <SecureUart_Debug>
        SecureUart_RxCpltCallback_UART6();
 8001476:	f7ff fe59 	bl	800112c <SecureUart_RxCpltCallback_UART6>
}
 800147a:	bf00      	nop
 800147c:	3770      	adds	r7, #112	@ 0x70
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000318 	.word	0x20000318
 8001488:	20000896 	.word	0x20000896
 800148c:	08005734 	.word	0x08005734
 8001490:	20000898 	.word	0x20000898
 8001494:	08005778 	.word	0x08005778

08001498 <HAL_UART_TxCpltCallback>:

/**
 * @brief  Обработчик завершения передачи по UART с DMA (для обоих UART)
 * @note   Эта функция должна быть вызвана из колбека HAL_UART_TxCpltCallback
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
    /* Определяем, какой UART вызвал колбек */
    if (huart == suart_config.uart1.huart) {
 80014a0:	4b09      	ldr	r3, [pc, #36]	@ (80014c8 <HAL_UART_TxCpltCallback+0x30>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d102      	bne.n	80014b0 <HAL_UART_TxCpltCallback+0x18>
        SecureUart_TxCpltCallback_UART1();
 80014aa:	f7ff fe67 	bl	800117c <SecureUart_TxCpltCallback_UART1>
    } else if (huart == suart_config.uart6.huart) {
        SecureUart_TxCpltCallback_UART6();
    }
}
 80014ae:	e006      	b.n	80014be <HAL_UART_TxCpltCallback+0x26>
    } else if (huart == suart_config.uart6.huart) {
 80014b0:	4b05      	ldr	r3, [pc, #20]	@ (80014c8 <HAL_UART_TxCpltCallback+0x30>)
 80014b2:	69db      	ldr	r3, [r3, #28]
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d101      	bne.n	80014be <HAL_UART_TxCpltCallback+0x26>
        SecureUart_TxCpltCallback_UART6();
 80014ba:	f7ff fe6d 	bl	8001198 <SecureUart_TxCpltCallback_UART6>
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000318 	.word	0x20000318

080014cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	4b10      	ldr	r3, [pc, #64]	@ (8001518 <HAL_MspInit+0x4c>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014da:	4a0f      	ldr	r2, [pc, #60]	@ (8001518 <HAL_MspInit+0x4c>)
 80014dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001518 <HAL_MspInit+0x4c>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	603b      	str	r3, [r7, #0]
 80014f2:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <HAL_MspInit+0x4c>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f6:	4a08      	ldr	r2, [pc, #32]	@ (8001518 <HAL_MspInit+0x4c>)
 80014f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014fe:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <HAL_MspInit+0x4c>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800

0800151c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08e      	sub	sp, #56	@ 0x38
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a68      	ldr	r2, [pc, #416]	@ (80016dc <HAL_UART_MspInit+0x1c0>)
 800153a:	4293      	cmp	r3, r2
 800153c:	f040 8094 	bne.w	8001668 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001540:	2300      	movs	r3, #0
 8001542:	623b      	str	r3, [r7, #32]
 8001544:	4b66      	ldr	r3, [pc, #408]	@ (80016e0 <HAL_UART_MspInit+0x1c4>)
 8001546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001548:	4a65      	ldr	r2, [pc, #404]	@ (80016e0 <HAL_UART_MspInit+0x1c4>)
 800154a:	f043 0310 	orr.w	r3, r3, #16
 800154e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001550:	4b63      	ldr	r3, [pc, #396]	@ (80016e0 <HAL_UART_MspInit+0x1c4>)
 8001552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001554:	f003 0310 	and.w	r3, r3, #16
 8001558:	623b      	str	r3, [r7, #32]
 800155a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]
 8001560:	4b5f      	ldr	r3, [pc, #380]	@ (80016e0 <HAL_UART_MspInit+0x1c4>)
 8001562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001564:	4a5e      	ldr	r2, [pc, #376]	@ (80016e0 <HAL_UART_MspInit+0x1c4>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	6313      	str	r3, [r2, #48]	@ 0x30
 800156c:	4b5c      	ldr	r3, [pc, #368]	@ (80016e0 <HAL_UART_MspInit+0x1c4>)
 800156e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	61fb      	str	r3, [r7, #28]
 8001576:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001578:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001586:	2303      	movs	r3, #3
 8001588:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800158a:	2307      	movs	r3, #7
 800158c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001592:	4619      	mov	r1, r3
 8001594:	4853      	ldr	r0, [pc, #332]	@ (80016e4 <HAL_UART_MspInit+0x1c8>)
 8001596:	f000 ffd3 	bl	8002540 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream5;
 800159a:	4b53      	ldr	r3, [pc, #332]	@ (80016e8 <HAL_UART_MspInit+0x1cc>)
 800159c:	4a53      	ldr	r2, [pc, #332]	@ (80016ec <HAL_UART_MspInit+0x1d0>)
 800159e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80015a0:	4b51      	ldr	r3, [pc, #324]	@ (80016e8 <HAL_UART_MspInit+0x1cc>)
 80015a2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80015a6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015a8:	4b4f      	ldr	r3, [pc, #316]	@ (80016e8 <HAL_UART_MspInit+0x1cc>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ae:	4b4e      	ldr	r3, [pc, #312]	@ (80016e8 <HAL_UART_MspInit+0x1cc>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015b4:	4b4c      	ldr	r3, [pc, #304]	@ (80016e8 <HAL_UART_MspInit+0x1cc>)
 80015b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015ba:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015bc:	4b4a      	ldr	r3, [pc, #296]	@ (80016e8 <HAL_UART_MspInit+0x1cc>)
 80015be:	2200      	movs	r2, #0
 80015c0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015c2:	4b49      	ldr	r3, [pc, #292]	@ (80016e8 <HAL_UART_MspInit+0x1cc>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80015c8:	4b47      	ldr	r3, [pc, #284]	@ (80016e8 <HAL_UART_MspInit+0x1cc>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80015ce:	4b46      	ldr	r3, [pc, #280]	@ (80016e8 <HAL_UART_MspInit+0x1cc>)
 80015d0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80015d4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015d6:	4b44      	ldr	r3, [pc, #272]	@ (80016e8 <HAL_UART_MspInit+0x1cc>)
 80015d8:	2200      	movs	r2, #0
 80015da:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80015dc:	4842      	ldr	r0, [pc, #264]	@ (80016e8 <HAL_UART_MspInit+0x1cc>)
 80015de:	f000 fbad 	bl	8001d3c <HAL_DMA_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80015e8:	f7ff fa6c 	bl	8000ac4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a3e      	ldr	r2, [pc, #248]	@ (80016e8 <HAL_UART_MspInit+0x1cc>)
 80015f0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80015f2:	4a3d      	ldr	r2, [pc, #244]	@ (80016e8 <HAL_UART_MspInit+0x1cc>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream6;
 80015f8:	4b3d      	ldr	r3, [pc, #244]	@ (80016f0 <HAL_UART_MspInit+0x1d4>)
 80015fa:	4a3e      	ldr	r2, [pc, #248]	@ (80016f4 <HAL_UART_MspInit+0x1d8>)
 80015fc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80015fe:	4b3c      	ldr	r3, [pc, #240]	@ (80016f0 <HAL_UART_MspInit+0x1d4>)
 8001600:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001604:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001606:	4b3a      	ldr	r3, [pc, #232]	@ (80016f0 <HAL_UART_MspInit+0x1d4>)
 8001608:	2240      	movs	r2, #64	@ 0x40
 800160a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800160c:	4b38      	ldr	r3, [pc, #224]	@ (80016f0 <HAL_UART_MspInit+0x1d4>)
 800160e:	2200      	movs	r2, #0
 8001610:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001612:	4b37      	ldr	r3, [pc, #220]	@ (80016f0 <HAL_UART_MspInit+0x1d4>)
 8001614:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001618:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800161a:	4b35      	ldr	r3, [pc, #212]	@ (80016f0 <HAL_UART_MspInit+0x1d4>)
 800161c:	2200      	movs	r2, #0
 800161e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001620:	4b33      	ldr	r3, [pc, #204]	@ (80016f0 <HAL_UART_MspInit+0x1d4>)
 8001622:	2200      	movs	r2, #0
 8001624:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001626:	4b32      	ldr	r3, [pc, #200]	@ (80016f0 <HAL_UART_MspInit+0x1d4>)
 8001628:	2200      	movs	r2, #0
 800162a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800162c:	4b30      	ldr	r3, [pc, #192]	@ (80016f0 <HAL_UART_MspInit+0x1d4>)
 800162e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001632:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001634:	4b2e      	ldr	r3, [pc, #184]	@ (80016f0 <HAL_UART_MspInit+0x1d4>)
 8001636:	2200      	movs	r2, #0
 8001638:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800163a:	482d      	ldr	r0, [pc, #180]	@ (80016f0 <HAL_UART_MspInit+0x1d4>)
 800163c:	f000 fb7e 	bl	8001d3c <HAL_DMA_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8001646:	f7ff fa3d 	bl	8000ac4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a28      	ldr	r2, [pc, #160]	@ (80016f0 <HAL_UART_MspInit+0x1d4>)
 800164e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001650:	4a27      	ldr	r2, [pc, #156]	@ (80016f0 <HAL_UART_MspInit+0x1d4>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	2100      	movs	r1, #0
 800165a:	2025      	movs	r0, #37	@ 0x25
 800165c:	f000 fb37 	bl	8001cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001660:	2025      	movs	r0, #37	@ 0x25
 8001662:	f000 fb50 	bl	8001d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001666:	e0e1      	b.n	800182c <HAL_UART_MspInit+0x310>
  else if(huart->Instance==USART2)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a22      	ldr	r2, [pc, #136]	@ (80016f8 <HAL_UART_MspInit+0x1dc>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d144      	bne.n	80016fc <HAL_UART_MspInit+0x1e0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	61bb      	str	r3, [r7, #24]
 8001676:	4b1a      	ldr	r3, [pc, #104]	@ (80016e0 <HAL_UART_MspInit+0x1c4>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167a:	4a19      	ldr	r2, [pc, #100]	@ (80016e0 <HAL_UART_MspInit+0x1c4>)
 800167c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001680:	6413      	str	r3, [r2, #64]	@ 0x40
 8001682:	4b17      	ldr	r3, [pc, #92]	@ (80016e0 <HAL_UART_MspInit+0x1c4>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800168a:	61bb      	str	r3, [r7, #24]
 800168c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	4b13      	ldr	r3, [pc, #76]	@ (80016e0 <HAL_UART_MspInit+0x1c4>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	4a12      	ldr	r2, [pc, #72]	@ (80016e0 <HAL_UART_MspInit+0x1c4>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6313      	str	r3, [r2, #48]	@ 0x30
 800169e:	4b10      	ldr	r3, [pc, #64]	@ (80016e0 <HAL_UART_MspInit+0x1c4>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016aa:	230c      	movs	r3, #12
 80016ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ae:	2302      	movs	r3, #2
 80016b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b6:	2303      	movs	r3, #3
 80016b8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016ba:	2307      	movs	r3, #7
 80016bc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016c2:	4619      	mov	r1, r3
 80016c4:	4807      	ldr	r0, [pc, #28]	@ (80016e4 <HAL_UART_MspInit+0x1c8>)
 80016c6:	f000 ff3b 	bl	8002540 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2100      	movs	r1, #0
 80016ce:	2026      	movs	r0, #38	@ 0x26
 80016d0:	f000 fafd 	bl	8001cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016d4:	2026      	movs	r0, #38	@ 0x26
 80016d6:	f000 fb16 	bl	8001d06 <HAL_NVIC_EnableIRQ>
}
 80016da:	e0a7      	b.n	800182c <HAL_UART_MspInit+0x310>
 80016dc:	40011000 	.word	0x40011000
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40020000 	.word	0x40020000
 80016e8:	20000150 	.word	0x20000150
 80016ec:	40026088 	.word	0x40026088
 80016f0:	200001b0 	.word	0x200001b0
 80016f4:	400260a0 	.word	0x400260a0
 80016f8:	40004400 	.word	0x40004400
  else if(huart->Instance==USART6)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a4c      	ldr	r2, [pc, #304]	@ (8001834 <HAL_UART_MspInit+0x318>)
 8001702:	4293      	cmp	r3, r2
 8001704:	f040 8092 	bne.w	800182c <HAL_UART_MspInit+0x310>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	4b4a      	ldr	r3, [pc, #296]	@ (8001838 <HAL_UART_MspInit+0x31c>)
 800170e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001710:	4a49      	ldr	r2, [pc, #292]	@ (8001838 <HAL_UART_MspInit+0x31c>)
 8001712:	f043 0320 	orr.w	r3, r3, #32
 8001716:	6453      	str	r3, [r2, #68]	@ 0x44
 8001718:	4b47      	ldr	r3, [pc, #284]	@ (8001838 <HAL_UART_MspInit+0x31c>)
 800171a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171c:	f003 0320 	and.w	r3, r3, #32
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	4b43      	ldr	r3, [pc, #268]	@ (8001838 <HAL_UART_MspInit+0x31c>)
 800172a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172c:	4a42      	ldr	r2, [pc, #264]	@ (8001838 <HAL_UART_MspInit+0x31c>)
 800172e:	f043 0304 	orr.w	r3, r3, #4
 8001732:	6313      	str	r3, [r2, #48]	@ 0x30
 8001734:	4b40      	ldr	r3, [pc, #256]	@ (8001838 <HAL_UART_MspInit+0x31c>)
 8001736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001740:	23c0      	movs	r3, #192	@ 0xc0
 8001742:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	2302      	movs	r3, #2
 8001746:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174c:	2303      	movs	r3, #3
 800174e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001750:	2308      	movs	r3, #8
 8001752:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001754:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001758:	4619      	mov	r1, r3
 800175a:	4838      	ldr	r0, [pc, #224]	@ (800183c <HAL_UART_MspInit+0x320>)
 800175c:	f000 fef0 	bl	8002540 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001760:	4b37      	ldr	r3, [pc, #220]	@ (8001840 <HAL_UART_MspInit+0x324>)
 8001762:	4a38      	ldr	r2, [pc, #224]	@ (8001844 <HAL_UART_MspInit+0x328>)
 8001764:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001766:	4b36      	ldr	r3, [pc, #216]	@ (8001840 <HAL_UART_MspInit+0x324>)
 8001768:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800176c:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800176e:	4b34      	ldr	r3, [pc, #208]	@ (8001840 <HAL_UART_MspInit+0x324>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001774:	4b32      	ldr	r3, [pc, #200]	@ (8001840 <HAL_UART_MspInit+0x324>)
 8001776:	2200      	movs	r2, #0
 8001778:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800177a:	4b31      	ldr	r3, [pc, #196]	@ (8001840 <HAL_UART_MspInit+0x324>)
 800177c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001780:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001782:	4b2f      	ldr	r3, [pc, #188]	@ (8001840 <HAL_UART_MspInit+0x324>)
 8001784:	2200      	movs	r2, #0
 8001786:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001788:	4b2d      	ldr	r3, [pc, #180]	@ (8001840 <HAL_UART_MspInit+0x324>)
 800178a:	2200      	movs	r2, #0
 800178c:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800178e:	4b2c      	ldr	r3, [pc, #176]	@ (8001840 <HAL_UART_MspInit+0x324>)
 8001790:	2200      	movs	r2, #0
 8001792:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001794:	4b2a      	ldr	r3, [pc, #168]	@ (8001840 <HAL_UART_MspInit+0x324>)
 8001796:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800179a:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800179c:	4b28      	ldr	r3, [pc, #160]	@ (8001840 <HAL_UART_MspInit+0x324>)
 800179e:	2200      	movs	r2, #0
 80017a0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80017a2:	4827      	ldr	r0, [pc, #156]	@ (8001840 <HAL_UART_MspInit+0x324>)
 80017a4:	f000 faca 	bl	8001d3c <HAL_DMA_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_UART_MspInit+0x296>
      Error_Handler();
 80017ae:	f7ff f989 	bl	8000ac4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a22      	ldr	r2, [pc, #136]	@ (8001840 <HAL_UART_MspInit+0x324>)
 80017b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80017b8:	4a21      	ldr	r2, [pc, #132]	@ (8001840 <HAL_UART_MspInit+0x324>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80017be:	4b22      	ldr	r3, [pc, #136]	@ (8001848 <HAL_UART_MspInit+0x32c>)
 80017c0:	4a22      	ldr	r2, [pc, #136]	@ (800184c <HAL_UART_MspInit+0x330>)
 80017c2:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80017c4:	4b20      	ldr	r3, [pc, #128]	@ (8001848 <HAL_UART_MspInit+0x32c>)
 80017c6:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80017ca:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001848 <HAL_UART_MspInit+0x32c>)
 80017ce:	2240      	movs	r2, #64	@ 0x40
 80017d0:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001848 <HAL_UART_MspInit+0x32c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001848 <HAL_UART_MspInit+0x32c>)
 80017da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017de:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017e0:	4b19      	ldr	r3, [pc, #100]	@ (8001848 <HAL_UART_MspInit+0x32c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017e6:	4b18      	ldr	r3, [pc, #96]	@ (8001848 <HAL_UART_MspInit+0x32c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80017ec:	4b16      	ldr	r3, [pc, #88]	@ (8001848 <HAL_UART_MspInit+0x32c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80017f2:	4b15      	ldr	r3, [pc, #84]	@ (8001848 <HAL_UART_MspInit+0x32c>)
 80017f4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80017f8:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017fa:	4b13      	ldr	r3, [pc, #76]	@ (8001848 <HAL_UART_MspInit+0x32c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001800:	4811      	ldr	r0, [pc, #68]	@ (8001848 <HAL_UART_MspInit+0x32c>)
 8001802:	f000 fa9b 	bl	8001d3c <HAL_DMA_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <HAL_UART_MspInit+0x2f4>
      Error_Handler();
 800180c:	f7ff f95a 	bl	8000ac4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a0d      	ldr	r2, [pc, #52]	@ (8001848 <HAL_UART_MspInit+0x32c>)
 8001814:	639a      	str	r2, [r3, #56]	@ 0x38
 8001816:	4a0c      	ldr	r2, [pc, #48]	@ (8001848 <HAL_UART_MspInit+0x32c>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800181c:	2200      	movs	r2, #0
 800181e:	2100      	movs	r1, #0
 8001820:	2047      	movs	r0, #71	@ 0x47
 8001822:	f000 fa54 	bl	8001cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001826:	2047      	movs	r0, #71	@ 0x47
 8001828:	f000 fa6d 	bl	8001d06 <HAL_NVIC_EnableIRQ>
}
 800182c:	bf00      	nop
 800182e:	3738      	adds	r7, #56	@ 0x38
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40011400 	.word	0x40011400
 8001838:	40023800 	.word	0x40023800
 800183c:	40020800 	.word	0x40020800
 8001840:	20000210 	.word	0x20000210
 8001844:	40026428 	.word	0x40026428
 8001848:	20000270 	.word	0x20000270
 800184c:	400264a0 	.word	0x400264a0

08001850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001854:	bf00      	nop
 8001856:	e7fd      	b.n	8001854 <NMI_Handler+0x4>

08001858 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800185c:	bf00      	nop
 800185e:	e7fd      	b.n	800185c <HardFault_Handler+0x4>

08001860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <MemManage_Handler+0x4>

08001868 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <BusFault_Handler+0x4>

08001870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001874:	bf00      	nop
 8001876:	e7fd      	b.n	8001874 <UsageFault_Handler+0x4>

08001878 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018a6:	f000 f917 	bl	8001ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80018b4:	4802      	ldr	r0, [pc, #8]	@ (80018c0 <DMA1_Stream5_IRQHandler+0x10>)
 80018b6:	f000 fbd9 	bl	800206c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000150 	.word	0x20000150

080018c4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80018c8:	4802      	ldr	r0, [pc, #8]	@ (80018d4 <DMA1_Stream6_IRQHandler+0x10>)
 80018ca:	f000 fbcf 	bl	800206c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200001b0 	.word	0x200001b0

080018d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018dc:	4802      	ldr	r0, [pc, #8]	@ (80018e8 <USART1_IRQHandler+0x10>)
 80018de:	f001 fe0f 	bl	8003500 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000078 	.word	0x20000078

080018ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018f0:	4802      	ldr	r0, [pc, #8]	@ (80018fc <USART2_IRQHandler+0x10>)
 80018f2:	f001 fe05 	bl	8003500 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200000c0 	.word	0x200000c0

08001900 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001904:	4802      	ldr	r0, [pc, #8]	@ (8001910 <DMA2_Stream1_IRQHandler+0x10>)
 8001906:	f000 fbb1 	bl	800206c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000210 	.word	0x20000210

08001914 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001918:	4802      	ldr	r0, [pc, #8]	@ (8001924 <USART6_IRQHandler+0x10>)
 800191a:	f001 fdf1 	bl	8003500 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000108 	.word	0x20000108

08001928 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800192c:	4802      	ldr	r0, [pc, #8]	@ (8001938 <DMA2_Stream6_IRQHandler+0x10>)
 800192e:	f000 fb9d 	bl	800206c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000270 	.word	0x20000270

0800193c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001940:	4802      	ldr	r0, [pc, #8]	@ (800194c <DMA2_Stream7_IRQHandler+0x10>)
 8001942:	f000 fb93 	bl	800206c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000270 	.word	0x20000270

08001950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001958:	4a14      	ldr	r2, [pc, #80]	@ (80019ac <_sbrk+0x5c>)
 800195a:	4b15      	ldr	r3, [pc, #84]	@ (80019b0 <_sbrk+0x60>)
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001964:	4b13      	ldr	r3, [pc, #76]	@ (80019b4 <_sbrk+0x64>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d102      	bne.n	8001972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800196c:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <_sbrk+0x64>)
 800196e:	4a12      	ldr	r2, [pc, #72]	@ (80019b8 <_sbrk+0x68>)
 8001970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001972:	4b10      	ldr	r3, [pc, #64]	@ (80019b4 <_sbrk+0x64>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	429a      	cmp	r2, r3
 800197e:	d207      	bcs.n	8001990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001980:	f002 ff28 	bl	80047d4 <__errno>
 8001984:	4603      	mov	r3, r0
 8001986:	220c      	movs	r2, #12
 8001988:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800198a:	f04f 33ff 	mov.w	r3, #4294967295
 800198e:	e009      	b.n	80019a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001990:	4b08      	ldr	r3, [pc, #32]	@ (80019b4 <_sbrk+0x64>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001996:	4b07      	ldr	r3, [pc, #28]	@ (80019b4 <_sbrk+0x64>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4413      	add	r3, r2
 800199e:	4a05      	ldr	r2, [pc, #20]	@ (80019b4 <_sbrk+0x64>)
 80019a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019a2:	68fb      	ldr	r3, [r7, #12]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20020000 	.word	0x20020000
 80019b0:	00000400 	.word	0x00000400
 80019b4:	20000c9c 	.word	0x20000c9c
 80019b8:	20000df0 	.word	0x20000df0

080019bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019c0:	4b06      	ldr	r3, [pc, #24]	@ (80019dc <SystemInit+0x20>)
 80019c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019c6:	4a05      	ldr	r2, [pc, #20]	@ (80019dc <SystemInit+0x20>)
 80019c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a18 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019e4:	f7ff ffea 	bl	80019bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019e8:	480c      	ldr	r0, [pc, #48]	@ (8001a1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019ea:	490d      	ldr	r1, [pc, #52]	@ (8001a20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001a24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019f0:	e002      	b.n	80019f8 <LoopCopyDataInit>

080019f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019f6:	3304      	adds	r3, #4

080019f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019fc:	d3f9      	bcc.n	80019f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001a28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a00:	4c0a      	ldr	r4, [pc, #40]	@ (8001a2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a04:	e001      	b.n	8001a0a <LoopFillZerobss>

08001a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a08:	3204      	adds	r2, #4

08001a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a0c:	d3fb      	bcc.n	8001a06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a0e:	f002 fee7 	bl	80047e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a12:	f7fe fdd3 	bl	80005bc <main>
  bx  lr    
 8001a16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a20:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001a24:	08005820 	.word	0x08005820
  ldr r2, =_sbss
 8001a28:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001a2c:	20000dec 	.word	0x20000dec

08001a30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a30:	e7fe      	b.n	8001a30 <ADC_IRQHandler>
	...

08001a34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a38:	4b0e      	ldr	r3, [pc, #56]	@ (8001a74 <HAL_Init+0x40>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a74 <HAL_Init+0x40>)
 8001a3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a44:	4b0b      	ldr	r3, [pc, #44]	@ (8001a74 <HAL_Init+0x40>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a0a      	ldr	r2, [pc, #40]	@ (8001a74 <HAL_Init+0x40>)
 8001a4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a50:	4b08      	ldr	r3, [pc, #32]	@ (8001a74 <HAL_Init+0x40>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a07      	ldr	r2, [pc, #28]	@ (8001a74 <HAL_Init+0x40>)
 8001a56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a5c:	2003      	movs	r0, #3
 8001a5e:	f000 f92b 	bl	8001cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a62:	2000      	movs	r0, #0
 8001a64:	f000 f808 	bl	8001a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a68:	f7ff fd30 	bl	80014cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40023c00 	.word	0x40023c00

08001a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a80:	4b12      	ldr	r3, [pc, #72]	@ (8001acc <HAL_InitTick+0x54>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4b12      	ldr	r3, [pc, #72]	@ (8001ad0 <HAL_InitTick+0x58>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 f943 	bl	8001d22 <HAL_SYSTICK_Config>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e00e      	b.n	8001ac4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b0f      	cmp	r3, #15
 8001aaa:	d80a      	bhi.n	8001ac2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aac:	2200      	movs	r2, #0
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab4:	f000 f90b 	bl	8001cce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ab8:	4a06      	ldr	r2, [pc, #24]	@ (8001ad4 <HAL_InitTick+0x5c>)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e000      	b.n	8001ac4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20000000 	.word	0x20000000
 8001ad0:	20000008 	.word	0x20000008
 8001ad4:	20000004 	.word	0x20000004

08001ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001adc:	4b06      	ldr	r3, [pc, #24]	@ (8001af8 <HAL_IncTick+0x20>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <HAL_IncTick+0x24>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	4a04      	ldr	r2, [pc, #16]	@ (8001afc <HAL_IncTick+0x24>)
 8001aea:	6013      	str	r3, [r2, #0]
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	20000008 	.word	0x20000008
 8001afc:	20000ca0 	.word	0x20000ca0

08001b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return uwTick;
 8001b04:	4b03      	ldr	r3, [pc, #12]	@ (8001b14 <HAL_GetTick+0x14>)
 8001b06:	681b      	ldr	r3, [r3, #0]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	20000ca0 	.word	0x20000ca0

08001b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b28:	4b0c      	ldr	r3, [pc, #48]	@ (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b34:	4013      	ands	r3, r2
 8001b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4a:	4a04      	ldr	r2, [pc, #16]	@ (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	60d3      	str	r3, [r2, #12]
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b64:	4b04      	ldr	r3, [pc, #16]	@ (8001b78 <__NVIC_GetPriorityGrouping+0x18>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	0a1b      	lsrs	r3, r3, #8
 8001b6a:	f003 0307 	and.w	r3, r3, #7
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	db0b      	blt.n	8001ba6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	f003 021f 	and.w	r2, r3, #31
 8001b94:	4907      	ldr	r1, [pc, #28]	@ (8001bb4 <__NVIC_EnableIRQ+0x38>)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	095b      	lsrs	r3, r3, #5
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000e100 	.word	0xe000e100

08001bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	6039      	str	r1, [r7, #0]
 8001bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	db0a      	blt.n	8001be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	490c      	ldr	r1, [pc, #48]	@ (8001c04 <__NVIC_SetPriority+0x4c>)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	0112      	lsls	r2, r2, #4
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	440b      	add	r3, r1
 8001bdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be0:	e00a      	b.n	8001bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	4908      	ldr	r1, [pc, #32]	@ (8001c08 <__NVIC_SetPriority+0x50>)
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	3b04      	subs	r3, #4
 8001bf0:	0112      	lsls	r2, r2, #4
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	761a      	strb	r2, [r3, #24]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	e000e100 	.word	0xe000e100
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b089      	sub	sp, #36	@ 0x24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f1c3 0307 	rsb	r3, r3, #7
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	bf28      	it	cs
 8001c2a:	2304      	movcs	r3, #4
 8001c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3304      	adds	r3, #4
 8001c32:	2b06      	cmp	r3, #6
 8001c34:	d902      	bls.n	8001c3c <NVIC_EncodePriority+0x30>
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3b03      	subs	r3, #3
 8001c3a:	e000      	b.n	8001c3e <NVIC_EncodePriority+0x32>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	f04f 32ff 	mov.w	r2, #4294967295
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43da      	mvns	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	401a      	ands	r2, r3
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c54:	f04f 31ff 	mov.w	r1, #4294967295
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5e:	43d9      	mvns	r1, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c64:	4313      	orrs	r3, r2
         );
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3724      	adds	r7, #36	@ 0x24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c84:	d301      	bcc.n	8001c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c86:	2301      	movs	r3, #1
 8001c88:	e00f      	b.n	8001caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb4 <SysTick_Config+0x40>)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c92:	210f      	movs	r1, #15
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295
 8001c98:	f7ff ff8e 	bl	8001bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c9c:	4b05      	ldr	r3, [pc, #20]	@ (8001cb4 <SysTick_Config+0x40>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ca2:	4b04      	ldr	r3, [pc, #16]	@ (8001cb4 <SysTick_Config+0x40>)
 8001ca4:	2207      	movs	r2, #7
 8001ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	e000e010 	.word	0xe000e010

08001cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff ff29 	bl	8001b18 <__NVIC_SetPriorityGrouping>
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b086      	sub	sp, #24
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
 8001cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce0:	f7ff ff3e 	bl	8001b60 <__NVIC_GetPriorityGrouping>
 8001ce4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	6978      	ldr	r0, [r7, #20]
 8001cec:	f7ff ff8e 	bl	8001c0c <NVIC_EncodePriority>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff5d 	bl	8001bb8 <__NVIC_SetPriority>
}
 8001cfe:	bf00      	nop
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff31 	bl	8001b7c <__NVIC_EnableIRQ>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff ffa2 	bl	8001c74 <SysTick_Config>
 8001d30:	4603      	mov	r3, r0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d48:	f7ff feda 	bl	8001b00 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e099      	b.n	8001e8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0201 	bic.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d78:	e00f      	b.n	8001d9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d7a:	f7ff fec1 	bl	8001b00 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b05      	cmp	r3, #5
 8001d86:	d908      	bls.n	8001d9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2220      	movs	r2, #32
 8001d8c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2203      	movs	r2, #3
 8001d92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e078      	b.n	8001e8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1e8      	bne.n	8001d7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	4b38      	ldr	r3, [pc, #224]	@ (8001e94 <HAL_DMA_Init+0x158>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d107      	bne.n	8001e04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	f023 0307 	bic.w	r3, r3, #7
 8001e1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d117      	bne.n	8001e5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00e      	beq.n	8001e5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 fb01 	bl	8002448 <DMA_CheckFifoParam>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d008      	beq.n	8001e5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2240      	movs	r2, #64	@ 0x40
 8001e50:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e016      	b.n	8001e8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 fab8 	bl	80023dc <DMA_CalcBaseAndBitshift>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e74:	223f      	movs	r2, #63	@ 0x3f
 8001e76:	409a      	lsls	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	f010803f 	.word	0xf010803f

08001e98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
 8001ea4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d101      	bne.n	8001ebe <HAL_DMA_Start_IT+0x26>
 8001eba:	2302      	movs	r3, #2
 8001ebc:	e040      	b.n	8001f40 <HAL_DMA_Start_IT+0xa8>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d12f      	bne.n	8001f32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2200      	movs	r2, #0
 8001ede:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	68b9      	ldr	r1, [r7, #8]
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f000 fa4a 	bl	8002380 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ef0:	223f      	movs	r2, #63	@ 0x3f
 8001ef2:	409a      	lsls	r2, r3
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0216 	orr.w	r2, r2, #22
 8001f06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d007      	beq.n	8001f20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0208 	orr.w	r2, r2, #8
 8001f1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0201 	orr.w	r2, r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	e005      	b.n	8001f3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f54:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f56:	f7ff fdd3 	bl	8001b00 <HAL_GetTick>
 8001f5a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d008      	beq.n	8001f7a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2280      	movs	r2, #128	@ 0x80
 8001f6c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e052      	b.n	8002020 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 0216 	bic.w	r2, r2, #22
 8001f88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	695a      	ldr	r2, [r3, #20]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d103      	bne.n	8001faa <HAL_DMA_Abort+0x62>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d007      	beq.n	8001fba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0208 	bic.w	r2, r2, #8
 8001fb8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 0201 	bic.w	r2, r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fca:	e013      	b.n	8001ff4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fcc:	f7ff fd98 	bl	8001b00 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b05      	cmp	r3, #5
 8001fd8:	d90c      	bls.n	8001ff4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2220      	movs	r2, #32
 8001fde:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2203      	movs	r2, #3
 8001fe4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e015      	b.n	8002020 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1e4      	bne.n	8001fcc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002006:	223f      	movs	r2, #63	@ 0x3f
 8002008:	409a      	lsls	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d004      	beq.n	8002046 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2280      	movs	r2, #128	@ 0x80
 8002040:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e00c      	b.n	8002060 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2205      	movs	r2, #5
 800204a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0201 	bic.w	r2, r2, #1
 800205c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002078:	4b8e      	ldr	r3, [pc, #568]	@ (80022b4 <HAL_DMA_IRQHandler+0x248>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a8e      	ldr	r2, [pc, #568]	@ (80022b8 <HAL_DMA_IRQHandler+0x24c>)
 800207e:	fba2 2303 	umull	r2, r3, r2, r3
 8002082:	0a9b      	lsrs	r3, r3, #10
 8002084:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800208a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002096:	2208      	movs	r2, #8
 8002098:	409a      	lsls	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	4013      	ands	r3, r2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d01a      	beq.n	80020d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d013      	beq.n	80020d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0204 	bic.w	r2, r2, #4
 80020be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c4:	2208      	movs	r2, #8
 80020c6:	409a      	lsls	r2, r3
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d0:	f043 0201 	orr.w	r2, r3, #1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020dc:	2201      	movs	r2, #1
 80020de:	409a      	lsls	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d012      	beq.n	800210e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00b      	beq.n	800210e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020fa:	2201      	movs	r2, #1
 80020fc:	409a      	lsls	r2, r3
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002106:	f043 0202 	orr.w	r2, r3, #2
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002112:	2204      	movs	r2, #4
 8002114:	409a      	lsls	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	4013      	ands	r3, r2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d012      	beq.n	8002144 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00b      	beq.n	8002144 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002130:	2204      	movs	r2, #4
 8002132:	409a      	lsls	r2, r3
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800213c:	f043 0204 	orr.w	r2, r3, #4
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002148:	2210      	movs	r2, #16
 800214a:	409a      	lsls	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4013      	ands	r3, r2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d043      	beq.n	80021dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b00      	cmp	r3, #0
 8002160:	d03c      	beq.n	80021dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002166:	2210      	movs	r2, #16
 8002168:	409a      	lsls	r2, r3
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d018      	beq.n	80021ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d108      	bne.n	800219c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218e:	2b00      	cmp	r3, #0
 8002190:	d024      	beq.n	80021dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	4798      	blx	r3
 800219a:	e01f      	b.n	80021dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d01b      	beq.n	80021dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	4798      	blx	r3
 80021ac:	e016      	b.n	80021dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d107      	bne.n	80021cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 0208 	bic.w	r2, r2, #8
 80021ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e0:	2220      	movs	r2, #32
 80021e2:	409a      	lsls	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	4013      	ands	r3, r2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 808f 	beq.w	800230c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0310 	and.w	r3, r3, #16
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 8087 	beq.w	800230c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002202:	2220      	movs	r2, #32
 8002204:	409a      	lsls	r2, r3
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b05      	cmp	r3, #5
 8002214:	d136      	bne.n	8002284 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 0216 	bic.w	r2, r2, #22
 8002224:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	695a      	ldr	r2, [r3, #20]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002234:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223a:	2b00      	cmp	r3, #0
 800223c:	d103      	bne.n	8002246 <HAL_DMA_IRQHandler+0x1da>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002242:	2b00      	cmp	r3, #0
 8002244:	d007      	beq.n	8002256 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 0208 	bic.w	r2, r2, #8
 8002254:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800225a:	223f      	movs	r2, #63	@ 0x3f
 800225c:	409a      	lsls	r2, r3
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002276:	2b00      	cmp	r3, #0
 8002278:	d07e      	beq.n	8002378 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	4798      	blx	r3
        }
        return;
 8002282:	e079      	b.n	8002378 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d01d      	beq.n	80022ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10d      	bne.n	80022bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d031      	beq.n	800230c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	4798      	blx	r3
 80022b0:	e02c      	b.n	800230c <HAL_DMA_IRQHandler+0x2a0>
 80022b2:	bf00      	nop
 80022b4:	20000000 	.word	0x20000000
 80022b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d023      	beq.n	800230c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	4798      	blx	r3
 80022cc:	e01e      	b.n	800230c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d10f      	bne.n	80022fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0210 	bic.w	r2, r2, #16
 80022ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002310:	2b00      	cmp	r3, #0
 8002312:	d032      	beq.n	800237a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	d022      	beq.n	8002366 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2205      	movs	r2, #5
 8002324:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0201 	bic.w	r2, r2, #1
 8002336:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	3301      	adds	r3, #1
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	429a      	cmp	r2, r3
 8002342:	d307      	bcc.n	8002354 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f2      	bne.n	8002338 <HAL_DMA_IRQHandler+0x2cc>
 8002352:	e000      	b.n	8002356 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002354:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800236a:	2b00      	cmp	r3, #0
 800236c:	d005      	beq.n	800237a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	4798      	blx	r3
 8002376:	e000      	b.n	800237a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002378:	bf00      	nop
    }
  }
}
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
 800238c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800239c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	2b40      	cmp	r3, #64	@ 0x40
 80023ac:	d108      	bne.n	80023c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023be:	e007      	b.n	80023d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	60da      	str	r2, [r3, #12]
}
 80023d0:	bf00      	nop
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	3b10      	subs	r3, #16
 80023ec:	4a14      	ldr	r2, [pc, #80]	@ (8002440 <DMA_CalcBaseAndBitshift+0x64>)
 80023ee:	fba2 2303 	umull	r2, r3, r2, r3
 80023f2:	091b      	lsrs	r3, r3, #4
 80023f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023f6:	4a13      	ldr	r2, [pc, #76]	@ (8002444 <DMA_CalcBaseAndBitshift+0x68>)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4413      	add	r3, r2
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	461a      	mov	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2b03      	cmp	r3, #3
 8002408:	d909      	bls.n	800241e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002412:	f023 0303 	bic.w	r3, r3, #3
 8002416:	1d1a      	adds	r2, r3, #4
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	659a      	str	r2, [r3, #88]	@ 0x58
 800241c:	e007      	b.n	800242e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002426:	f023 0303 	bic.w	r3, r3, #3
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002432:	4618      	mov	r0, r3
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	aaaaaaab 	.word	0xaaaaaaab
 8002444:	080057d4 	.word	0x080057d4

08002448 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002450:	2300      	movs	r3, #0
 8002452:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002458:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d11f      	bne.n	80024a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b03      	cmp	r3, #3
 8002466:	d856      	bhi.n	8002516 <DMA_CheckFifoParam+0xce>
 8002468:	a201      	add	r2, pc, #4	@ (adr r2, 8002470 <DMA_CheckFifoParam+0x28>)
 800246a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800246e:	bf00      	nop
 8002470:	08002481 	.word	0x08002481
 8002474:	08002493 	.word	0x08002493
 8002478:	08002481 	.word	0x08002481
 800247c:	08002517 	.word	0x08002517
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002484:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d046      	beq.n	800251a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002490:	e043      	b.n	800251a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002496:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800249a:	d140      	bne.n	800251e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024a0:	e03d      	b.n	800251e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024aa:	d121      	bne.n	80024f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	2b03      	cmp	r3, #3
 80024b0:	d837      	bhi.n	8002522 <DMA_CheckFifoParam+0xda>
 80024b2:	a201      	add	r2, pc, #4	@ (adr r2, 80024b8 <DMA_CheckFifoParam+0x70>)
 80024b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b8:	080024c9 	.word	0x080024c9
 80024bc:	080024cf 	.word	0x080024cf
 80024c0:	080024c9 	.word	0x080024c9
 80024c4:	080024e1 	.word	0x080024e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	73fb      	strb	r3, [r7, #15]
      break;
 80024cc:	e030      	b.n	8002530 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d025      	beq.n	8002526 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024de:	e022      	b.n	8002526 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024e8:	d11f      	bne.n	800252a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024ee:	e01c      	b.n	800252a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d903      	bls.n	80024fe <DMA_CheckFifoParam+0xb6>
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	2b03      	cmp	r3, #3
 80024fa:	d003      	beq.n	8002504 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024fc:	e018      	b.n	8002530 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	73fb      	strb	r3, [r7, #15]
      break;
 8002502:	e015      	b.n	8002530 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002508:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00e      	beq.n	800252e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	73fb      	strb	r3, [r7, #15]
      break;
 8002514:	e00b      	b.n	800252e <DMA_CheckFifoParam+0xe6>
      break;
 8002516:	bf00      	nop
 8002518:	e00a      	b.n	8002530 <DMA_CheckFifoParam+0xe8>
      break;
 800251a:	bf00      	nop
 800251c:	e008      	b.n	8002530 <DMA_CheckFifoParam+0xe8>
      break;
 800251e:	bf00      	nop
 8002520:	e006      	b.n	8002530 <DMA_CheckFifoParam+0xe8>
      break;
 8002522:	bf00      	nop
 8002524:	e004      	b.n	8002530 <DMA_CheckFifoParam+0xe8>
      break;
 8002526:	bf00      	nop
 8002528:	e002      	b.n	8002530 <DMA_CheckFifoParam+0xe8>
      break;   
 800252a:	bf00      	nop
 800252c:	e000      	b.n	8002530 <DMA_CheckFifoParam+0xe8>
      break;
 800252e:	bf00      	nop
    }
  } 
  
  return status; 
 8002530:	7bfb      	ldrb	r3, [r7, #15]
}
 8002532:	4618      	mov	r0, r3
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop

08002540 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002540:	b480      	push	{r7}
 8002542:	b089      	sub	sp, #36	@ 0x24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800254e:	2300      	movs	r3, #0
 8002550:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002552:	2300      	movs	r3, #0
 8002554:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
 800255a:	e159      	b.n	8002810 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800255c:	2201      	movs	r2, #1
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	4013      	ands	r3, r2
 800256e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	429a      	cmp	r2, r3
 8002576:	f040 8148 	bne.w	800280a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	2b01      	cmp	r3, #1
 8002584:	d005      	beq.n	8002592 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800258e:	2b02      	cmp	r3, #2
 8002590:	d130      	bne.n	80025f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	2203      	movs	r2, #3
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4013      	ands	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025c8:	2201      	movs	r2, #1
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	091b      	lsrs	r3, r3, #4
 80025de:	f003 0201 	and.w	r2, r3, #1
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 0303 	and.w	r3, r3, #3
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d017      	beq.n	8002630 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	2203      	movs	r2, #3
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4313      	orrs	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 0303 	and.w	r3, r3, #3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d123      	bne.n	8002684 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	08da      	lsrs	r2, r3, #3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3208      	adds	r2, #8
 8002644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002648:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	220f      	movs	r2, #15
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4013      	ands	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	691a      	ldr	r2, [r3, #16]
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4313      	orrs	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	08da      	lsrs	r2, r3, #3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	3208      	adds	r2, #8
 800267e:	69b9      	ldr	r1, [r7, #24]
 8002680:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	2203      	movs	r2, #3
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 0203 	and.w	r2, r3, #3
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 80a2 	beq.w	800280a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	4b57      	ldr	r3, [pc, #348]	@ (8002828 <HAL_GPIO_Init+0x2e8>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ce:	4a56      	ldr	r2, [pc, #344]	@ (8002828 <HAL_GPIO_Init+0x2e8>)
 80026d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026d6:	4b54      	ldr	r3, [pc, #336]	@ (8002828 <HAL_GPIO_Init+0x2e8>)
 80026d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026e2:	4a52      	ldr	r2, [pc, #328]	@ (800282c <HAL_GPIO_Init+0x2ec>)
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	089b      	lsrs	r3, r3, #2
 80026e8:	3302      	adds	r3, #2
 80026ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	220f      	movs	r2, #15
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a49      	ldr	r2, [pc, #292]	@ (8002830 <HAL_GPIO_Init+0x2f0>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d019      	beq.n	8002742 <HAL_GPIO_Init+0x202>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a48      	ldr	r2, [pc, #288]	@ (8002834 <HAL_GPIO_Init+0x2f4>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d013      	beq.n	800273e <HAL_GPIO_Init+0x1fe>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a47      	ldr	r2, [pc, #284]	@ (8002838 <HAL_GPIO_Init+0x2f8>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d00d      	beq.n	800273a <HAL_GPIO_Init+0x1fa>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a46      	ldr	r2, [pc, #280]	@ (800283c <HAL_GPIO_Init+0x2fc>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d007      	beq.n	8002736 <HAL_GPIO_Init+0x1f6>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a45      	ldr	r2, [pc, #276]	@ (8002840 <HAL_GPIO_Init+0x300>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d101      	bne.n	8002732 <HAL_GPIO_Init+0x1f2>
 800272e:	2304      	movs	r3, #4
 8002730:	e008      	b.n	8002744 <HAL_GPIO_Init+0x204>
 8002732:	2307      	movs	r3, #7
 8002734:	e006      	b.n	8002744 <HAL_GPIO_Init+0x204>
 8002736:	2303      	movs	r3, #3
 8002738:	e004      	b.n	8002744 <HAL_GPIO_Init+0x204>
 800273a:	2302      	movs	r3, #2
 800273c:	e002      	b.n	8002744 <HAL_GPIO_Init+0x204>
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <HAL_GPIO_Init+0x204>
 8002742:	2300      	movs	r3, #0
 8002744:	69fa      	ldr	r2, [r7, #28]
 8002746:	f002 0203 	and.w	r2, r2, #3
 800274a:	0092      	lsls	r2, r2, #2
 800274c:	4093      	lsls	r3, r2
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4313      	orrs	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002754:	4935      	ldr	r1, [pc, #212]	@ (800282c <HAL_GPIO_Init+0x2ec>)
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	089b      	lsrs	r3, r3, #2
 800275a:	3302      	adds	r3, #2
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002762:	4b38      	ldr	r3, [pc, #224]	@ (8002844 <HAL_GPIO_Init+0x304>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	43db      	mvns	r3, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4013      	ands	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	4313      	orrs	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002786:	4a2f      	ldr	r2, [pc, #188]	@ (8002844 <HAL_GPIO_Init+0x304>)
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800278c:	4b2d      	ldr	r3, [pc, #180]	@ (8002844 <HAL_GPIO_Init+0x304>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	43db      	mvns	r3, r3
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4013      	ands	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d003      	beq.n	80027b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027b0:	4a24      	ldr	r2, [pc, #144]	@ (8002844 <HAL_GPIO_Init+0x304>)
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027b6:	4b23      	ldr	r3, [pc, #140]	@ (8002844 <HAL_GPIO_Init+0x304>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	43db      	mvns	r3, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4013      	ands	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027da:	4a1a      	ldr	r2, [pc, #104]	@ (8002844 <HAL_GPIO_Init+0x304>)
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027e0:	4b18      	ldr	r3, [pc, #96]	@ (8002844 <HAL_GPIO_Init+0x304>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4313      	orrs	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002804:	4a0f      	ldr	r2, [pc, #60]	@ (8002844 <HAL_GPIO_Init+0x304>)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	3301      	adds	r3, #1
 800280e:	61fb      	str	r3, [r7, #28]
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	2b0f      	cmp	r3, #15
 8002814:	f67f aea2 	bls.w	800255c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002818:	bf00      	nop
 800281a:	bf00      	nop
 800281c:	3724      	adds	r7, #36	@ 0x24
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	40023800 	.word	0x40023800
 800282c:	40013800 	.word	0x40013800
 8002830:	40020000 	.word	0x40020000
 8002834:	40020400 	.word	0x40020400
 8002838:	40020800 	.word	0x40020800
 800283c:	40020c00 	.word	0x40020c00
 8002840:	40021000 	.word	0x40021000
 8002844:	40013c00 	.word	0x40013c00

08002848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	807b      	strh	r3, [r7, #2]
 8002854:	4613      	mov	r3, r2
 8002856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002858:	787b      	ldrb	r3, [r7, #1]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800285e:	887a      	ldrh	r2, [r7, #2]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002864:	e003      	b.n	800286e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002866:	887b      	ldrh	r3, [r7, #2]
 8002868:	041a      	lsls	r2, r3, #16
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	619a      	str	r2, [r3, #24]
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e267      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d075      	beq.n	8002986 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800289a:	4b88      	ldr	r3, [pc, #544]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 030c 	and.w	r3, r3, #12
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d00c      	beq.n	80028c0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028a6:	4b85      	ldr	r3, [pc, #532]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d112      	bne.n	80028d8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028b2:	4b82      	ldr	r3, [pc, #520]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028be:	d10b      	bne.n	80028d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c0:	4b7e      	ldr	r3, [pc, #504]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d05b      	beq.n	8002984 <HAL_RCC_OscConfig+0x108>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d157      	bne.n	8002984 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e242      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028e0:	d106      	bne.n	80028f0 <HAL_RCC_OscConfig+0x74>
 80028e2:	4b76      	ldr	r3, [pc, #472]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a75      	ldr	r2, [pc, #468]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 80028e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	e01d      	b.n	800292c <HAL_RCC_OscConfig+0xb0>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028f8:	d10c      	bne.n	8002914 <HAL_RCC_OscConfig+0x98>
 80028fa:	4b70      	ldr	r3, [pc, #448]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a6f      	ldr	r2, [pc, #444]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 8002900:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	4b6d      	ldr	r3, [pc, #436]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a6c      	ldr	r2, [pc, #432]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 800290c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	e00b      	b.n	800292c <HAL_RCC_OscConfig+0xb0>
 8002914:	4b69      	ldr	r3, [pc, #420]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a68      	ldr	r2, [pc, #416]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 800291a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800291e:	6013      	str	r3, [r2, #0]
 8002920:	4b66      	ldr	r3, [pc, #408]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a65      	ldr	r2, [pc, #404]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 8002926:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800292a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d013      	beq.n	800295c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002934:	f7ff f8e4 	bl	8001b00 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800293c:	f7ff f8e0 	bl	8001b00 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b64      	cmp	r3, #100	@ 0x64
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e207      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294e:	4b5b      	ldr	r3, [pc, #364]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0f0      	beq.n	800293c <HAL_RCC_OscConfig+0xc0>
 800295a:	e014      	b.n	8002986 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295c:	f7ff f8d0 	bl	8001b00 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002964:	f7ff f8cc 	bl	8001b00 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b64      	cmp	r3, #100	@ 0x64
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e1f3      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002976:	4b51      	ldr	r3, [pc, #324]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0xe8>
 8002982:	e000      	b.n	8002986 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d063      	beq.n	8002a5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002992:	4b4a      	ldr	r3, [pc, #296]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 030c 	and.w	r3, r3, #12
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00b      	beq.n	80029b6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800299e:	4b47      	ldr	r3, [pc, #284]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80029a6:	2b08      	cmp	r3, #8
 80029a8:	d11c      	bne.n	80029e4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029aa:	4b44      	ldr	r3, [pc, #272]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d116      	bne.n	80029e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b6:	4b41      	ldr	r3, [pc, #260]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d005      	beq.n	80029ce <HAL_RCC_OscConfig+0x152>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d001      	beq.n	80029ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e1c7      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ce:	4b3b      	ldr	r3, [pc, #236]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	4937      	ldr	r1, [pc, #220]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e2:	e03a      	b.n	8002a5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d020      	beq.n	8002a2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ec:	4b34      	ldr	r3, [pc, #208]	@ (8002ac0 <HAL_RCC_OscConfig+0x244>)
 80029ee:	2201      	movs	r2, #1
 80029f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f2:	f7ff f885 	bl	8001b00 <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029fa:	f7ff f881 	bl	8001b00 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e1a8      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0f0      	beq.n	80029fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a18:	4b28      	ldr	r3, [pc, #160]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	4925      	ldr	r1, [pc, #148]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	600b      	str	r3, [r1, #0]
 8002a2c:	e015      	b.n	8002a5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a2e:	4b24      	ldr	r3, [pc, #144]	@ (8002ac0 <HAL_RCC_OscConfig+0x244>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a34:	f7ff f864 	bl	8001b00 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a3c:	f7ff f860 	bl	8001b00 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e187      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d036      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d016      	beq.n	8002a9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a6e:	4b15      	ldr	r3, [pc, #84]	@ (8002ac4 <HAL_RCC_OscConfig+0x248>)
 8002a70:	2201      	movs	r2, #1
 8002a72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a74:	f7ff f844 	bl	8001b00 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a7c:	f7ff f840 	bl	8001b00 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e167      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8002abc <HAL_RCC_OscConfig+0x240>)
 8002a90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f0      	beq.n	8002a7c <HAL_RCC_OscConfig+0x200>
 8002a9a:	e01b      	b.n	8002ad4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a9c:	4b09      	ldr	r3, [pc, #36]	@ (8002ac4 <HAL_RCC_OscConfig+0x248>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa2:	f7ff f82d 	bl	8001b00 <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa8:	e00e      	b.n	8002ac8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aaa:	f7ff f829 	bl	8001b00 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d907      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e150      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	42470000 	.word	0x42470000
 8002ac4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac8:	4b88      	ldr	r3, [pc, #544]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002aca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1ea      	bne.n	8002aaa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 8097 	beq.w	8002c10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ae6:	4b81      	ldr	r3, [pc, #516]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10f      	bne.n	8002b12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	4b7d      	ldr	r3, [pc, #500]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afa:	4a7c      	ldr	r2, [pc, #496]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b02:	4b7a      	ldr	r3, [pc, #488]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b0a:	60bb      	str	r3, [r7, #8]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b12:	4b77      	ldr	r3, [pc, #476]	@ (8002cf0 <HAL_RCC_OscConfig+0x474>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d118      	bne.n	8002b50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b1e:	4b74      	ldr	r3, [pc, #464]	@ (8002cf0 <HAL_RCC_OscConfig+0x474>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a73      	ldr	r2, [pc, #460]	@ (8002cf0 <HAL_RCC_OscConfig+0x474>)
 8002b24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b2a:	f7fe ffe9 	bl	8001b00 <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b32:	f7fe ffe5 	bl	8001b00 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e10c      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b44:	4b6a      	ldr	r3, [pc, #424]	@ (8002cf0 <HAL_RCC_OscConfig+0x474>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0f0      	beq.n	8002b32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d106      	bne.n	8002b66 <HAL_RCC_OscConfig+0x2ea>
 8002b58:	4b64      	ldr	r3, [pc, #400]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b5c:	4a63      	ldr	r2, [pc, #396]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b64:	e01c      	b.n	8002ba0 <HAL_RCC_OscConfig+0x324>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	2b05      	cmp	r3, #5
 8002b6c:	d10c      	bne.n	8002b88 <HAL_RCC_OscConfig+0x30c>
 8002b6e:	4b5f      	ldr	r3, [pc, #380]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b72:	4a5e      	ldr	r2, [pc, #376]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b74:	f043 0304 	orr.w	r3, r3, #4
 8002b78:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b7a:	4b5c      	ldr	r3, [pc, #368]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b7e:	4a5b      	ldr	r2, [pc, #364]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b80:	f043 0301 	orr.w	r3, r3, #1
 8002b84:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b86:	e00b      	b.n	8002ba0 <HAL_RCC_OscConfig+0x324>
 8002b88:	4b58      	ldr	r3, [pc, #352]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b8c:	4a57      	ldr	r2, [pc, #348]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b8e:	f023 0301 	bic.w	r3, r3, #1
 8002b92:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b94:	4b55      	ldr	r3, [pc, #340]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b98:	4a54      	ldr	r2, [pc, #336]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b9a:	f023 0304 	bic.w	r3, r3, #4
 8002b9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d015      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba8:	f7fe ffaa 	bl	8001b00 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bae:	e00a      	b.n	8002bc6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb0:	f7fe ffa6 	bl	8001b00 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e0cb      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc6:	4b49      	ldr	r3, [pc, #292]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0ee      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x334>
 8002bd2:	e014      	b.n	8002bfe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd4:	f7fe ff94 	bl	8001b00 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bda:	e00a      	b.n	8002bf2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bdc:	f7fe ff90 	bl	8001b00 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e0b5      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf2:	4b3e      	ldr	r3, [pc, #248]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1ee      	bne.n	8002bdc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bfe:	7dfb      	ldrb	r3, [r7, #23]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d105      	bne.n	8002c10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c04:	4b39      	ldr	r3, [pc, #228]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c08:	4a38      	ldr	r2, [pc, #224]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002c0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c0e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 80a1 	beq.w	8002d5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c1a:	4b34      	ldr	r3, [pc, #208]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d05c      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d141      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2e:	4b31      	ldr	r3, [pc, #196]	@ (8002cf4 <HAL_RCC_OscConfig+0x478>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c34:	f7fe ff64 	bl	8001b00 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3c:	f7fe ff60 	bl	8001b00 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e087      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4e:	4b27      	ldr	r3, [pc, #156]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69da      	ldr	r2, [r3, #28]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c68:	019b      	lsls	r3, r3, #6
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c70:	085b      	lsrs	r3, r3, #1
 8002c72:	3b01      	subs	r3, #1
 8002c74:	041b      	lsls	r3, r3, #16
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c7c:	061b      	lsls	r3, r3, #24
 8002c7e:	491b      	ldr	r1, [pc, #108]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c84:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf4 <HAL_RCC_OscConfig+0x478>)
 8002c86:	2201      	movs	r2, #1
 8002c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8a:	f7fe ff39 	bl	8001b00 <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c92:	f7fe ff35 	bl	8001b00 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e05c      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca4:	4b11      	ldr	r3, [pc, #68]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0f0      	beq.n	8002c92 <HAL_RCC_OscConfig+0x416>
 8002cb0:	e054      	b.n	8002d5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb2:	4b10      	ldr	r3, [pc, #64]	@ (8002cf4 <HAL_RCC_OscConfig+0x478>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb8:	f7fe ff22 	bl	8001b00 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc0:	f7fe ff1e 	bl	8001b00 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e045      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd2:	4b06      	ldr	r3, [pc, #24]	@ (8002cec <HAL_RCC_OscConfig+0x470>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f0      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x444>
 8002cde:	e03d      	b.n	8002d5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d107      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e038      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	40007000 	.word	0x40007000
 8002cf4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8002d68 <HAL_RCC_OscConfig+0x4ec>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d028      	beq.n	8002d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d121      	bne.n	8002d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d11a      	bne.n	8002d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d28:	4013      	ands	r3, r2
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d111      	bne.n	8002d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d3e:	085b      	lsrs	r3, r3, #1
 8002d40:	3b01      	subs	r3, #1
 8002d42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d107      	bne.n	8002d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d001      	beq.n	8002d5c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e000      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40023800 	.word	0x40023800

08002d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0cc      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d80:	4b68      	ldr	r3, [pc, #416]	@ (8002f24 <HAL_RCC_ClockConfig+0x1b8>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d90c      	bls.n	8002da8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8e:	4b65      	ldr	r3, [pc, #404]	@ (8002f24 <HAL_RCC_ClockConfig+0x1b8>)
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d96:	4b63      	ldr	r3, [pc, #396]	@ (8002f24 <HAL_RCC_ClockConfig+0x1b8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d001      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e0b8      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d020      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d005      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dc0:	4b59      	ldr	r3, [pc, #356]	@ (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	4a58      	ldr	r2, [pc, #352]	@ (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002dca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d005      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dd8:	4b53      	ldr	r3, [pc, #332]	@ (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	4a52      	ldr	r2, [pc, #328]	@ (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002de2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de4:	4b50      	ldr	r3, [pc, #320]	@ (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	494d      	ldr	r1, [pc, #308]	@ (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d044      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d107      	bne.n	8002e1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0a:	4b47      	ldr	r3, [pc, #284]	@ (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d119      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e07f      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d003      	beq.n	8002e2a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	d107      	bne.n	8002e3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e2a:	4b3f      	ldr	r3, [pc, #252]	@ (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d109      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e06f      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3a:	4b3b      	ldr	r3, [pc, #236]	@ (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e067      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e4a:	4b37      	ldr	r3, [pc, #220]	@ (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f023 0203 	bic.w	r2, r3, #3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	4934      	ldr	r1, [pc, #208]	@ (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e5c:	f7fe fe50 	bl	8001b00 <HAL_GetTick>
 8002e60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e62:	e00a      	b.n	8002e7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e64:	f7fe fe4c 	bl	8001b00 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e04f      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7a:	4b2b      	ldr	r3, [pc, #172]	@ (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 020c 	and.w	r2, r3, #12
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d1eb      	bne.n	8002e64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e8c:	4b25      	ldr	r3, [pc, #148]	@ (8002f24 <HAL_RCC_ClockConfig+0x1b8>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d20c      	bcs.n	8002eb4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9a:	4b22      	ldr	r3, [pc, #136]	@ (8002f24 <HAL_RCC_ClockConfig+0x1b8>)
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea2:	4b20      	ldr	r3, [pc, #128]	@ (8002f24 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d001      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e032      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d008      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ec0:	4b19      	ldr	r3, [pc, #100]	@ (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	4916      	ldr	r1, [pc, #88]	@ (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d009      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ede:	4b12      	ldr	r3, [pc, #72]	@ (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	490e      	ldr	r1, [pc, #56]	@ (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ef2:	f000 f821 	bl	8002f38 <HAL_RCC_GetSysClockFreq>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	091b      	lsrs	r3, r3, #4
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	490a      	ldr	r1, [pc, #40]	@ (8002f2c <HAL_RCC_ClockConfig+0x1c0>)
 8002f04:	5ccb      	ldrb	r3, [r1, r3]
 8002f06:	fa22 f303 	lsr.w	r3, r2, r3
 8002f0a:	4a09      	ldr	r2, [pc, #36]	@ (8002f30 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002f0e:	4b09      	ldr	r3, [pc, #36]	@ (8002f34 <HAL_RCC_ClockConfig+0x1c8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fe fdb0 	bl	8001a78 <HAL_InitTick>

  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	40023c00 	.word	0x40023c00
 8002f28:	40023800 	.word	0x40023800
 8002f2c:	080057bc 	.word	0x080057bc
 8002f30:	20000000 	.word	0x20000000
 8002f34:	20000004 	.word	0x20000004

08002f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f3c:	b094      	sub	sp, #80	@ 0x50
 8002f3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f50:	4b79      	ldr	r3, [pc, #484]	@ (8003138 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 030c 	and.w	r3, r3, #12
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d00d      	beq.n	8002f78 <HAL_RCC_GetSysClockFreq+0x40>
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	f200 80e1 	bhi.w	8003124 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <HAL_RCC_GetSysClockFreq+0x34>
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d003      	beq.n	8002f72 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f6a:	e0db      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f6c:	4b73      	ldr	r3, [pc, #460]	@ (800313c <HAL_RCC_GetSysClockFreq+0x204>)
 8002f6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f70:	e0db      	b.n	800312a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f72:	4b73      	ldr	r3, [pc, #460]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f76:	e0d8      	b.n	800312a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f78:	4b6f      	ldr	r3, [pc, #444]	@ (8003138 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f80:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f82:	4b6d      	ldr	r3, [pc, #436]	@ (8003138 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d063      	beq.n	8003056 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f8e:	4b6a      	ldr	r3, [pc, #424]	@ (8003138 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	099b      	lsrs	r3, r3, #6
 8002f94:	2200      	movs	r2, #0
 8002f96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f98:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fa0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fa6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002faa:	4622      	mov	r2, r4
 8002fac:	462b      	mov	r3, r5
 8002fae:	f04f 0000 	mov.w	r0, #0
 8002fb2:	f04f 0100 	mov.w	r1, #0
 8002fb6:	0159      	lsls	r1, r3, #5
 8002fb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fbc:	0150      	lsls	r0, r2, #5
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4621      	mov	r1, r4
 8002fc4:	1a51      	subs	r1, r2, r1
 8002fc6:	6139      	str	r1, [r7, #16]
 8002fc8:	4629      	mov	r1, r5
 8002fca:	eb63 0301 	sbc.w	r3, r3, r1
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fdc:	4659      	mov	r1, fp
 8002fde:	018b      	lsls	r3, r1, #6
 8002fe0:	4651      	mov	r1, sl
 8002fe2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fe6:	4651      	mov	r1, sl
 8002fe8:	018a      	lsls	r2, r1, #6
 8002fea:	4651      	mov	r1, sl
 8002fec:	ebb2 0801 	subs.w	r8, r2, r1
 8002ff0:	4659      	mov	r1, fp
 8002ff2:	eb63 0901 	sbc.w	r9, r3, r1
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	f04f 0300 	mov.w	r3, #0
 8002ffe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003002:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003006:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800300a:	4690      	mov	r8, r2
 800300c:	4699      	mov	r9, r3
 800300e:	4623      	mov	r3, r4
 8003010:	eb18 0303 	adds.w	r3, r8, r3
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	462b      	mov	r3, r5
 8003018:	eb49 0303 	adc.w	r3, r9, r3
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	f04f 0200 	mov.w	r2, #0
 8003022:	f04f 0300 	mov.w	r3, #0
 8003026:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800302a:	4629      	mov	r1, r5
 800302c:	024b      	lsls	r3, r1, #9
 800302e:	4621      	mov	r1, r4
 8003030:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003034:	4621      	mov	r1, r4
 8003036:	024a      	lsls	r2, r1, #9
 8003038:	4610      	mov	r0, r2
 800303a:	4619      	mov	r1, r3
 800303c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800303e:	2200      	movs	r2, #0
 8003040:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003042:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003044:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003048:	f7fd f922 	bl	8000290 <__aeabi_uldivmod>
 800304c:	4602      	mov	r2, r0
 800304e:	460b      	mov	r3, r1
 8003050:	4613      	mov	r3, r2
 8003052:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003054:	e058      	b.n	8003108 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003056:	4b38      	ldr	r3, [pc, #224]	@ (8003138 <HAL_RCC_GetSysClockFreq+0x200>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	099b      	lsrs	r3, r3, #6
 800305c:	2200      	movs	r2, #0
 800305e:	4618      	mov	r0, r3
 8003060:	4611      	mov	r1, r2
 8003062:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003066:	623b      	str	r3, [r7, #32]
 8003068:	2300      	movs	r3, #0
 800306a:	627b      	str	r3, [r7, #36]	@ 0x24
 800306c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003070:	4642      	mov	r2, r8
 8003072:	464b      	mov	r3, r9
 8003074:	f04f 0000 	mov.w	r0, #0
 8003078:	f04f 0100 	mov.w	r1, #0
 800307c:	0159      	lsls	r1, r3, #5
 800307e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003082:	0150      	lsls	r0, r2, #5
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	4641      	mov	r1, r8
 800308a:	ebb2 0a01 	subs.w	sl, r2, r1
 800308e:	4649      	mov	r1, r9
 8003090:	eb63 0b01 	sbc.w	fp, r3, r1
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	f04f 0300 	mov.w	r3, #0
 800309c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030a8:	ebb2 040a 	subs.w	r4, r2, sl
 80030ac:	eb63 050b 	sbc.w	r5, r3, fp
 80030b0:	f04f 0200 	mov.w	r2, #0
 80030b4:	f04f 0300 	mov.w	r3, #0
 80030b8:	00eb      	lsls	r3, r5, #3
 80030ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030be:	00e2      	lsls	r2, r4, #3
 80030c0:	4614      	mov	r4, r2
 80030c2:	461d      	mov	r5, r3
 80030c4:	4643      	mov	r3, r8
 80030c6:	18e3      	adds	r3, r4, r3
 80030c8:	603b      	str	r3, [r7, #0]
 80030ca:	464b      	mov	r3, r9
 80030cc:	eb45 0303 	adc.w	r3, r5, r3
 80030d0:	607b      	str	r3, [r7, #4]
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030de:	4629      	mov	r1, r5
 80030e0:	028b      	lsls	r3, r1, #10
 80030e2:	4621      	mov	r1, r4
 80030e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030e8:	4621      	mov	r1, r4
 80030ea:	028a      	lsls	r2, r1, #10
 80030ec:	4610      	mov	r0, r2
 80030ee:	4619      	mov	r1, r3
 80030f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030f2:	2200      	movs	r2, #0
 80030f4:	61bb      	str	r3, [r7, #24]
 80030f6:	61fa      	str	r2, [r7, #28]
 80030f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030fc:	f7fd f8c8 	bl	8000290 <__aeabi_uldivmod>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	4613      	mov	r3, r2
 8003106:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003108:	4b0b      	ldr	r3, [pc, #44]	@ (8003138 <HAL_RCC_GetSysClockFreq+0x200>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	0c1b      	lsrs	r3, r3, #16
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	3301      	adds	r3, #1
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003118:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800311a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800311c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003120:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003122:	e002      	b.n	800312a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003124:	4b05      	ldr	r3, [pc, #20]	@ (800313c <HAL_RCC_GetSysClockFreq+0x204>)
 8003126:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003128:	bf00      	nop
    }
  }
  return sysclockfreq;
 800312a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800312c:	4618      	mov	r0, r3
 800312e:	3750      	adds	r7, #80	@ 0x50
 8003130:	46bd      	mov	sp, r7
 8003132:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003136:	bf00      	nop
 8003138:	40023800 	.word	0x40023800
 800313c:	00f42400 	.word	0x00f42400
 8003140:	007a1200 	.word	0x007a1200

08003144 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003148:	4b03      	ldr	r3, [pc, #12]	@ (8003158 <HAL_RCC_GetHCLKFreq+0x14>)
 800314a:	681b      	ldr	r3, [r3, #0]
}
 800314c:	4618      	mov	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	20000000 	.word	0x20000000

0800315c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003160:	f7ff fff0 	bl	8003144 <HAL_RCC_GetHCLKFreq>
 8003164:	4602      	mov	r2, r0
 8003166:	4b05      	ldr	r3, [pc, #20]	@ (800317c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	0a9b      	lsrs	r3, r3, #10
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	4903      	ldr	r1, [pc, #12]	@ (8003180 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003172:	5ccb      	ldrb	r3, [r1, r3]
 8003174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003178:	4618      	mov	r0, r3
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40023800 	.word	0x40023800
 8003180:	080057cc 	.word	0x080057cc

08003184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003188:	f7ff ffdc 	bl	8003144 <HAL_RCC_GetHCLKFreq>
 800318c:	4602      	mov	r2, r0
 800318e:	4b05      	ldr	r3, [pc, #20]	@ (80031a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	0b5b      	lsrs	r3, r3, #13
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	4903      	ldr	r1, [pc, #12]	@ (80031a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800319a:	5ccb      	ldrb	r3, [r1, r3]
 800319c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40023800 	.word	0x40023800
 80031a8:	080057cc 	.word	0x080057cc

080031ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e042      	b.n	8003244 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d106      	bne.n	80031d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7fe f9a2 	bl	800151c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2224      	movs	r2, #36	@ 0x24
 80031dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68da      	ldr	r2, [r3, #12]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f001 f851 	bl	8004298 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	691a      	ldr	r2, [r3, #16]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003204:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	695a      	ldr	r2, [r3, #20]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003214:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003224:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2220      	movs	r2, #32
 8003230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2220      	movs	r2, #32
 8003238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b08a      	sub	sp, #40	@ 0x28
 8003250:	af02      	add	r7, sp, #8
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	603b      	str	r3, [r7, #0]
 8003258:	4613      	mov	r3, r2
 800325a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b20      	cmp	r3, #32
 800326a:	d175      	bne.n	8003358 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <HAL_UART_Transmit+0x2c>
 8003272:	88fb      	ldrh	r3, [r7, #6]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e06e      	b.n	800335a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2221      	movs	r2, #33	@ 0x21
 8003286:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800328a:	f7fe fc39 	bl	8001b00 <HAL_GetTick>
 800328e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	88fa      	ldrh	r2, [r7, #6]
 8003294:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	88fa      	ldrh	r2, [r7, #6]
 800329a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032a4:	d108      	bne.n	80032b8 <HAL_UART_Transmit+0x6c>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d104      	bne.n	80032b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80032ae:	2300      	movs	r3, #0
 80032b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	61bb      	str	r3, [r7, #24]
 80032b6:	e003      	b.n	80032c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032c0:	e02e      	b.n	8003320 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2200      	movs	r2, #0
 80032ca:	2180      	movs	r1, #128	@ 0x80
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 fd2a 	bl	8003d26 <UART_WaitOnFlagUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d005      	beq.n	80032e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2220      	movs	r2, #32
 80032dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e03a      	b.n	800335a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10b      	bne.n	8003302 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	461a      	mov	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	3302      	adds	r3, #2
 80032fe:	61bb      	str	r3, [r7, #24]
 8003300:	e007      	b.n	8003312 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	781a      	ldrb	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	3301      	adds	r3, #1
 8003310:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003316:	b29b      	uxth	r3, r3
 8003318:	3b01      	subs	r3, #1
 800331a:	b29a      	uxth	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003324:	b29b      	uxth	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1cb      	bne.n	80032c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	2200      	movs	r2, #0
 8003332:	2140      	movs	r1, #64	@ 0x40
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f000 fcf6 	bl	8003d26 <UART_WaitOnFlagUntilTimeout>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d005      	beq.n	800334c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e006      	b.n	800335a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003354:	2300      	movs	r3, #0
 8003356:	e000      	b.n	800335a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003358:	2302      	movs	r3, #2
  }
}
 800335a:	4618      	mov	r0, r3
 800335c:	3720      	adds	r7, #32
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b08c      	sub	sp, #48	@ 0x30
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	4613      	mov	r3, r2
 8003370:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b20      	cmp	r3, #32
 800337c:	d156      	bne.n	800342c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d002      	beq.n	800338a <HAL_UART_Transmit_DMA+0x26>
 8003384:	88fb      	ldrh	r3, [r7, #6]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e04f      	b.n	800342e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	88fa      	ldrh	r2, [r7, #6]
 8003398:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	88fa      	ldrh	r2, [r7, #6]
 800339e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2221      	movs	r2, #33	@ 0x21
 80033aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b2:	4a21      	ldr	r2, [pc, #132]	@ (8003438 <HAL_UART_Transmit_DMA+0xd4>)
 80033b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ba:	4a20      	ldr	r2, [pc, #128]	@ (800343c <HAL_UART_Transmit_DMA+0xd8>)
 80033bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c2:	4a1f      	ldr	r2, [pc, #124]	@ (8003440 <HAL_UART_Transmit_DMA+0xdc>)
 80033c4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ca:	2200      	movs	r2, #0
 80033cc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80033ce:	f107 0308 	add.w	r3, r7, #8
 80033d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80033d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033da:	6819      	ldr	r1, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	3304      	adds	r3, #4
 80033e2:	461a      	mov	r2, r3
 80033e4:	88fb      	ldrh	r3, [r7, #6]
 80033e6:	f7fe fd57 	bl	8001e98 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80033f2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3314      	adds	r3, #20
 80033fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	e853 3f00 	ldrex	r3, [r3]
 8003402:	617b      	str	r3, [r7, #20]
   return(result);
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800340a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	3314      	adds	r3, #20
 8003412:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003414:	627a      	str	r2, [r7, #36]	@ 0x24
 8003416:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003418:	6a39      	ldr	r1, [r7, #32]
 800341a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800341c:	e841 2300 	strex	r3, r2, [r1]
 8003420:	61fb      	str	r3, [r7, #28]
   return(result);
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1e5      	bne.n	80033f4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003428:	2300      	movs	r3, #0
 800342a:	e000      	b.n	800342e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800342c:	2302      	movs	r3, #2
  }
}
 800342e:	4618      	mov	r0, r3
 8003430:	3730      	adds	r7, #48	@ 0x30
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	08003a75 	.word	0x08003a75
 800343c:	08003b0f 	.word	0x08003b0f
 8003440:	08003c93 	.word	0x08003c93

08003444 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08c      	sub	sp, #48	@ 0x30
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	4613      	mov	r3, r2
 8003450:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b20      	cmp	r3, #32
 800345c:	d14a      	bne.n	80034f4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d002      	beq.n	800346a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003464:	88fb      	ldrh	r3, [r7, #6]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e043      	b.n	80034f6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2201      	movs	r2, #1
 8003472:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800347a:	88fb      	ldrh	r3, [r7, #6]
 800347c:	461a      	mov	r2, r3
 800347e:	68b9      	ldr	r1, [r7, #8]
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 fca9 	bl	8003dd8 <UART_Start_Receive_DMA>
 8003486:	4603      	mov	r3, r0
 8003488:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800348c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003490:	2b00      	cmp	r3, #0
 8003492:	d12c      	bne.n	80034ee <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003498:	2b01      	cmp	r3, #1
 800349a:	d125      	bne.n	80034e8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800349c:	2300      	movs	r3, #0
 800349e:	613b      	str	r3, [r7, #16]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	613b      	str	r3, [r7, #16]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	613b      	str	r3, [r7, #16]
 80034b0:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	330c      	adds	r3, #12
 80034b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	e853 3f00 	ldrex	r3, [r3]
 80034c0:	617b      	str	r3, [r7, #20]
   return(result);
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f043 0310 	orr.w	r3, r3, #16
 80034c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	330c      	adds	r3, #12
 80034d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80034d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d6:	6a39      	ldr	r1, [r7, #32]
 80034d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034da:	e841 2300 	strex	r3, r2, [r1]
 80034de:	61fb      	str	r3, [r7, #28]
   return(result);
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1e5      	bne.n	80034b2 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80034e6:	e002      	b.n	80034ee <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80034ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80034f2:	e000      	b.n	80034f6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80034f4:	2302      	movs	r3, #2
  }
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3730      	adds	r7, #48	@ 0x30
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
	...

08003500 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b0ba      	sub	sp, #232	@ 0xe8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003526:	2300      	movs	r3, #0
 8003528:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800352c:	2300      	movs	r3, #0
 800352e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800353e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10f      	bne.n	8003566 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800354a:	f003 0320 	and.w	r3, r3, #32
 800354e:	2b00      	cmp	r3, #0
 8003550:	d009      	beq.n	8003566 <HAL_UART_IRQHandler+0x66>
 8003552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003556:	f003 0320 	and.w	r3, r3, #32
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 fddb 	bl	800411a <UART_Receive_IT>
      return;
 8003564:	e25b      	b.n	8003a1e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003566:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 80de 	beq.w	800372c <HAL_UART_IRQHandler+0x22c>
 8003570:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b00      	cmp	r3, #0
 800357a:	d106      	bne.n	800358a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800357c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003580:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 80d1 	beq.w	800372c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800358a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00b      	beq.n	80035ae <HAL_UART_IRQHandler+0xae>
 8003596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800359a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d005      	beq.n	80035ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a6:	f043 0201 	orr.w	r2, r3, #1
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035b2:	f003 0304 	and.w	r3, r3, #4
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00b      	beq.n	80035d2 <HAL_UART_IRQHandler+0xd2>
 80035ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d005      	beq.n	80035d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ca:	f043 0202 	orr.w	r2, r3, #2
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00b      	beq.n	80035f6 <HAL_UART_IRQHandler+0xf6>
 80035de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d005      	beq.n	80035f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ee:	f043 0204 	orr.w	r2, r3, #4
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80035f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d011      	beq.n	8003626 <HAL_UART_IRQHandler+0x126>
 8003602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003606:	f003 0320 	and.w	r3, r3, #32
 800360a:	2b00      	cmp	r3, #0
 800360c:	d105      	bne.n	800361a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800360e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d005      	beq.n	8003626 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361e:	f043 0208 	orr.w	r2, r3, #8
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362a:	2b00      	cmp	r3, #0
 800362c:	f000 81f2 	beq.w	8003a14 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003634:	f003 0320 	and.w	r3, r3, #32
 8003638:	2b00      	cmp	r3, #0
 800363a:	d008      	beq.n	800364e <HAL_UART_IRQHandler+0x14e>
 800363c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003640:	f003 0320 	and.w	r3, r3, #32
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 fd66 	bl	800411a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003658:	2b40      	cmp	r3, #64	@ 0x40
 800365a:	bf0c      	ite	eq
 800365c:	2301      	moveq	r3, #1
 800365e:	2300      	movne	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b00      	cmp	r3, #0
 8003670:	d103      	bne.n	800367a <HAL_UART_IRQHandler+0x17a>
 8003672:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003676:	2b00      	cmp	r3, #0
 8003678:	d04f      	beq.n	800371a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 fc6e 	bl	8003f5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800368a:	2b40      	cmp	r3, #64	@ 0x40
 800368c:	d141      	bne.n	8003712 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	3314      	adds	r3, #20
 8003694:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003698:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800369c:	e853 3f00 	ldrex	r3, [r3]
 80036a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80036a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80036a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3314      	adds	r3, #20
 80036b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80036ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80036be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80036c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80036ca:	e841 2300 	strex	r3, r2, [r1]
 80036ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80036d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1d9      	bne.n	800368e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d013      	beq.n	800370a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036e6:	4a7e      	ldr	r2, [pc, #504]	@ (80038e0 <HAL_UART_IRQHandler+0x3e0>)
 80036e8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7fe fc9a 	bl	8002028 <HAL_DMA_Abort_IT>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d016      	beq.n	8003728 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003704:	4610      	mov	r0, r2
 8003706:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003708:	e00e      	b.n	8003728 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f9a8 	bl	8003a60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003710:	e00a      	b.n	8003728 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f9a4 	bl	8003a60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003718:	e006      	b.n	8003728 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f9a0 	bl	8003a60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003726:	e175      	b.n	8003a14 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003728:	bf00      	nop
    return;
 800372a:	e173      	b.n	8003a14 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003730:	2b01      	cmp	r3, #1
 8003732:	f040 814f 	bne.w	80039d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800373a:	f003 0310 	and.w	r3, r3, #16
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 8148 	beq.w	80039d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003748:	f003 0310 	and.w	r3, r3, #16
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 8141 	beq.w	80039d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003752:	2300      	movs	r3, #0
 8003754:	60bb      	str	r3, [r7, #8]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	60bb      	str	r3, [r7, #8]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003772:	2b40      	cmp	r3, #64	@ 0x40
 8003774:	f040 80b6 	bne.w	80038e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003784:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 8145 	beq.w	8003a18 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003792:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003796:	429a      	cmp	r2, r3
 8003798:	f080 813e 	bcs.w	8003a18 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80037a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037ae:	f000 8088 	beq.w	80038c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	330c      	adds	r3, #12
 80037b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037c0:	e853 3f00 	ldrex	r3, [r3]
 80037c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80037c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	330c      	adds	r3, #12
 80037da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80037de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80037e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80037ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80037ee:	e841 2300 	strex	r3, r2, [r1]
 80037f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80037f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1d9      	bne.n	80037b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	3314      	adds	r3, #20
 8003804:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003806:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003808:	e853 3f00 	ldrex	r3, [r3]
 800380c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800380e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003810:	f023 0301 	bic.w	r3, r3, #1
 8003814:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	3314      	adds	r3, #20
 800381e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003822:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003826:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003828:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800382a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800382e:	e841 2300 	strex	r3, r2, [r1]
 8003832:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003834:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1e1      	bne.n	80037fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	3314      	adds	r3, #20
 8003840:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003842:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003844:	e853 3f00 	ldrex	r3, [r3]
 8003848:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800384a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800384c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003850:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	3314      	adds	r3, #20
 800385a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800385e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003860:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003862:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003864:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003866:	e841 2300 	strex	r3, r2, [r1]
 800386a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800386c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1e3      	bne.n	800383a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2220      	movs	r2, #32
 8003876:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	330c      	adds	r3, #12
 8003886:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003888:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800388a:	e853 3f00 	ldrex	r3, [r3]
 800388e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003890:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003892:	f023 0310 	bic.w	r3, r3, #16
 8003896:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	330c      	adds	r3, #12
 80038a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80038a4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80038a6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80038aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80038ac:	e841 2300 	strex	r3, r2, [r1]
 80038b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80038b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1e3      	bne.n	8003880 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038bc:	4618      	mov	r0, r3
 80038be:	f7fe fb43 	bl	8001f48 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2202      	movs	r2, #2
 80038c6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	4619      	mov	r1, r3
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7fd fd9b 	bl	8001414 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038de:	e09b      	b.n	8003a18 <HAL_UART_IRQHandler+0x518>
 80038e0:	08004023 	.word	0x08004023
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 808e 	beq.w	8003a1c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003900:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 8089 	beq.w	8003a1c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	330c      	adds	r3, #12
 8003910:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003914:	e853 3f00 	ldrex	r3, [r3]
 8003918:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800391a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800391c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003920:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	330c      	adds	r3, #12
 800392a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800392e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003930:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003932:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003934:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003936:	e841 2300 	strex	r3, r2, [r1]
 800393a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800393c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1e3      	bne.n	800390a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	3314      	adds	r3, #20
 8003948:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394c:	e853 3f00 	ldrex	r3, [r3]
 8003950:	623b      	str	r3, [r7, #32]
   return(result);
 8003952:	6a3b      	ldr	r3, [r7, #32]
 8003954:	f023 0301 	bic.w	r3, r3, #1
 8003958:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	3314      	adds	r3, #20
 8003962:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003966:	633a      	str	r2, [r7, #48]	@ 0x30
 8003968:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800396c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800396e:	e841 2300 	strex	r3, r2, [r1]
 8003972:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1e3      	bne.n	8003942 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	330c      	adds	r3, #12
 800398e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	e853 3f00 	ldrex	r3, [r3]
 8003996:	60fb      	str	r3, [r7, #12]
   return(result);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f023 0310 	bic.w	r3, r3, #16
 800399e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	330c      	adds	r3, #12
 80039a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80039ac:	61fa      	str	r2, [r7, #28]
 80039ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b0:	69b9      	ldr	r1, [r7, #24]
 80039b2:	69fa      	ldr	r2, [r7, #28]
 80039b4:	e841 2300 	strex	r3, r2, [r1]
 80039b8:	617b      	str	r3, [r7, #20]
   return(result);
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1e3      	bne.n	8003988 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039ca:	4619      	mov	r1, r3
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7fd fd21 	bl	8001414 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039d2:	e023      	b.n	8003a1c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d009      	beq.n	80039f4 <HAL_UART_IRQHandler+0x4f4>
 80039e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 fb2c 	bl	800404a <UART_Transmit_IT>
    return;
 80039f2:	e014      	b.n	8003a1e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00e      	beq.n	8003a1e <HAL_UART_IRQHandler+0x51e>
 8003a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d008      	beq.n	8003a1e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 fb6c 	bl	80040ea <UART_EndTransmit_IT>
    return;
 8003a12:	e004      	b.n	8003a1e <HAL_UART_IRQHandler+0x51e>
    return;
 8003a14:	bf00      	nop
 8003a16:	e002      	b.n	8003a1e <HAL_UART_IRQHandler+0x51e>
      return;
 8003a18:	bf00      	nop
 8003a1a:	e000      	b.n	8003a1e <HAL_UART_IRQHandler+0x51e>
      return;
 8003a1c:	bf00      	nop
  }
}
 8003a1e:	37e8      	adds	r7, #232	@ 0xe8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b090      	sub	sp, #64	@ 0x40
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d137      	bne.n	8003b00 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003a90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a92:	2200      	movs	r2, #0
 8003a94:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003a96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	3314      	adds	r3, #20
 8003a9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa0:	e853 3f00 	ldrex	r3, [r3]
 8003aa4:	623b      	str	r3, [r7, #32]
   return(result);
 8003aa6:	6a3b      	ldr	r3, [r7, #32]
 8003aa8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003aac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003aae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	3314      	adds	r3, #20
 8003ab4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ab6:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003abc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003abe:	e841 2300 	strex	r3, r2, [r1]
 8003ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1e5      	bne.n	8003a96 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003aca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	330c      	adds	r3, #12
 8003ad0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	e853 3f00 	ldrex	r3, [r3]
 8003ad8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ae0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ae2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	330c      	adds	r3, #12
 8003ae8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003aea:	61fa      	str	r2, [r7, #28]
 8003aec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aee:	69b9      	ldr	r1, [r7, #24]
 8003af0:	69fa      	ldr	r2, [r7, #28]
 8003af2:	e841 2300 	strex	r3, r2, [r1]
 8003af6:	617b      	str	r3, [r7, #20]
   return(result);
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1e5      	bne.n	8003aca <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003afe:	e002      	b.n	8003b06 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003b00:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003b02:	f7fd fcc9 	bl	8001498 <HAL_UART_TxCpltCallback>
}
 8003b06:	bf00      	nop
 8003b08:	3740      	adds	r7, #64	@ 0x40
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b084      	sub	sp, #16
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b1a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f7ff ff81 	bl	8003a24 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b22:	bf00      	nop
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b09c      	sub	sp, #112	@ 0x70
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b36:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d172      	bne.n	8003c2c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003b46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b48:	2200      	movs	r2, #0
 8003b4a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	330c      	adds	r3, #12
 8003b52:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b56:	e853 3f00 	ldrex	r3, [r3]
 8003b5a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b5e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b62:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	330c      	adds	r3, #12
 8003b6a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003b6c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003b6e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b70:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b72:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b74:	e841 2300 	strex	r3, r2, [r1]
 8003b78:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1e5      	bne.n	8003b4c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	3314      	adds	r3, #20
 8003b86:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b8a:	e853 3f00 	ldrex	r3, [r3]
 8003b8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b92:	f023 0301 	bic.w	r3, r3, #1
 8003b96:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	3314      	adds	r3, #20
 8003b9e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003ba0:	647a      	str	r2, [r7, #68]	@ 0x44
 8003ba2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ba6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ba8:	e841 2300 	strex	r3, r2, [r1]
 8003bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1e5      	bne.n	8003b80 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	3314      	adds	r3, #20
 8003bba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbe:	e853 3f00 	ldrex	r3, [r3]
 8003bc2:	623b      	str	r3, [r7, #32]
   return(result);
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bca:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	3314      	adds	r3, #20
 8003bd2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003bd4:	633a      	str	r2, [r7, #48]	@ 0x30
 8003bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bdc:	e841 2300 	strex	r3, r2, [r1]
 8003be0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1e5      	bne.n	8003bb4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003be8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bea:	2220      	movs	r2, #32
 8003bec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d119      	bne.n	8003c2c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	330c      	adds	r3, #12
 8003bfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	e853 3f00 	ldrex	r3, [r3]
 8003c06:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f023 0310 	bic.w	r3, r3, #16
 8003c0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	330c      	adds	r3, #12
 8003c16:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003c18:	61fa      	str	r2, [r7, #28]
 8003c1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1c:	69b9      	ldr	r1, [r7, #24]
 8003c1e:	69fa      	ldr	r2, [r7, #28]
 8003c20:	e841 2300 	strex	r3, r2, [r1]
 8003c24:	617b      	str	r3, [r7, #20]
   return(result);
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e5      	bne.n	8003bf8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c2e:	2200      	movs	r2, #0
 8003c30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d106      	bne.n	8003c48 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c3c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c3e:	4619      	mov	r1, r3
 8003c40:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003c42:	f7fd fbe7 	bl	8001414 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c46:	e002      	b.n	8003c4e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003c48:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003c4a:	f7ff fef5 	bl	8003a38 <HAL_UART_RxCpltCallback>
}
 8003c4e:	bf00      	nop
 8003c50:	3770      	adds	r7, #112	@ 0x70
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b084      	sub	sp, #16
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c62:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2201      	movs	r2, #1
 8003c68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d108      	bne.n	8003c84 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c76:	085b      	lsrs	r3, r3, #1
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f7fd fbc9 	bl	8001414 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c82:	e002      	b.n	8003c8a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f7ff fee1 	bl	8003a4c <HAL_UART_RxHalfCpltCallback>
}
 8003c8a:	bf00      	nop
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b084      	sub	sp, #16
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cae:	2b80      	cmp	r3, #128	@ 0x80
 8003cb0:	bf0c      	ite	eq
 8003cb2:	2301      	moveq	r3, #1
 8003cb4:	2300      	movne	r3, #0
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b21      	cmp	r3, #33	@ 0x21
 8003cc4:	d108      	bne.n	8003cd8 <UART_DMAError+0x46>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003cd2:	68b8      	ldr	r0, [r7, #8]
 8003cd4:	f000 f91a 	bl	8003f0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce2:	2b40      	cmp	r3, #64	@ 0x40
 8003ce4:	bf0c      	ite	eq
 8003ce6:	2301      	moveq	r3, #1
 8003ce8:	2300      	movne	r3, #0
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b22      	cmp	r3, #34	@ 0x22
 8003cf8:	d108      	bne.n	8003d0c <UART_DMAError+0x7a>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d005      	beq.n	8003d0c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	2200      	movs	r2, #0
 8003d04:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003d06:	68b8      	ldr	r0, [r7, #8]
 8003d08:	f000 f928 	bl	8003f5c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d10:	f043 0210 	orr.w	r2, r3, #16
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d18:	68b8      	ldr	r0, [r7, #8]
 8003d1a:	f7ff fea1 	bl	8003a60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d1e:	bf00      	nop
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b086      	sub	sp, #24
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	603b      	str	r3, [r7, #0]
 8003d32:	4613      	mov	r3, r2
 8003d34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d36:	e03b      	b.n	8003db0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3e:	d037      	beq.n	8003db0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d40:	f7fd fede 	bl	8001b00 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	6a3a      	ldr	r2, [r7, #32]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d302      	bcc.n	8003d56 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d50:	6a3b      	ldr	r3, [r7, #32]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e03a      	b.n	8003dd0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d023      	beq.n	8003db0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2b80      	cmp	r3, #128	@ 0x80
 8003d6c:	d020      	beq.n	8003db0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	2b40      	cmp	r3, #64	@ 0x40
 8003d72:	d01d      	beq.n	8003db0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d116      	bne.n	8003db0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003d82:	2300      	movs	r3, #0
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	617b      	str	r3, [r7, #20]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	617b      	str	r3, [r7, #20]
 8003d96:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 f8df 	bl	8003f5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2208      	movs	r2, #8
 8003da2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e00f      	b.n	8003dd0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	4013      	ands	r3, r2
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	bf0c      	ite	eq
 8003dc0:	2301      	moveq	r3, #1
 8003dc2:	2300      	movne	r3, #0
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	79fb      	ldrb	r3, [r7, #7]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d0b4      	beq.n	8003d38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b098      	sub	sp, #96	@ 0x60
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	4613      	mov	r3, r2
 8003de4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	88fa      	ldrh	r2, [r7, #6]
 8003df0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2222      	movs	r2, #34	@ 0x22
 8003dfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e04:	4a3e      	ldr	r2, [pc, #248]	@ (8003f00 <UART_Start_Receive_DMA+0x128>)
 8003e06:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e0c:	4a3d      	ldr	r2, [pc, #244]	@ (8003f04 <UART_Start_Receive_DMA+0x12c>)
 8003e0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e14:	4a3c      	ldr	r2, [pc, #240]	@ (8003f08 <UART_Start_Receive_DMA+0x130>)
 8003e16:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003e20:	f107 0308 	add.w	r3, r7, #8
 8003e24:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	3304      	adds	r3, #4
 8003e30:	4619      	mov	r1, r3
 8003e32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	88fb      	ldrh	r3, [r7, #6]
 8003e38:	f7fe f82e 	bl	8001e98 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	613b      	str	r3, [r7, #16]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	613b      	str	r3, [r7, #16]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	613b      	str	r3, [r7, #16]
 8003e50:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d019      	beq.n	8003e8e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	330c      	adds	r3, #12
 8003e60:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e64:	e853 3f00 	ldrex	r3, [r3]
 8003e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e70:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	330c      	adds	r3, #12
 8003e78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e7a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003e80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e82:	e841 2300 	strex	r3, r2, [r1]
 8003e86:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003e88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1e5      	bne.n	8003e5a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	3314      	adds	r3, #20
 8003e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e98:	e853 3f00 	ldrex	r3, [r3]
 8003e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea0:	f043 0301 	orr.w	r3, r3, #1
 8003ea4:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3314      	adds	r3, #20
 8003eac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003eae:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003eb0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003eb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003eb6:	e841 2300 	strex	r3, r2, [r1]
 8003eba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1e5      	bne.n	8003e8e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	3314      	adds	r3, #20
 8003ec8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	e853 3f00 	ldrex	r3, [r3]
 8003ed0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ed8:	653b      	str	r3, [r7, #80]	@ 0x50
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3314      	adds	r3, #20
 8003ee0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003ee2:	627a      	str	r2, [r7, #36]	@ 0x24
 8003ee4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee6:	6a39      	ldr	r1, [r7, #32]
 8003ee8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eea:	e841 2300 	strex	r3, r2, [r1]
 8003eee:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1e5      	bne.n	8003ec2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3760      	adds	r7, #96	@ 0x60
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	08003b2b 	.word	0x08003b2b
 8003f04:	08003c57 	.word	0x08003c57
 8003f08:	08003c93 	.word	0x08003c93

08003f0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b089      	sub	sp, #36	@ 0x24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	330c      	adds	r3, #12
 8003f1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	e853 3f00 	ldrex	r3, [r3]
 8003f22:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003f2a:	61fb      	str	r3, [r7, #28]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	330c      	adds	r3, #12
 8003f32:	69fa      	ldr	r2, [r7, #28]
 8003f34:	61ba      	str	r2, [r7, #24]
 8003f36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f38:	6979      	ldr	r1, [r7, #20]
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	e841 2300 	strex	r3, r2, [r1]
 8003f40:	613b      	str	r3, [r7, #16]
   return(result);
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1e5      	bne.n	8003f14 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003f50:	bf00      	nop
 8003f52:	3724      	adds	r7, #36	@ 0x24
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b095      	sub	sp, #84	@ 0x54
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	330c      	adds	r3, #12
 8003f6a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f6e:	e853 3f00 	ldrex	r3, [r3]
 8003f72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	330c      	adds	r3, #12
 8003f82:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f84:	643a      	str	r2, [r7, #64]	@ 0x40
 8003f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f8c:	e841 2300 	strex	r3, r2, [r1]
 8003f90:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1e5      	bne.n	8003f64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	3314      	adds	r3, #20
 8003f9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	e853 3f00 	ldrex	r3, [r3]
 8003fa6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f023 0301 	bic.w	r3, r3, #1
 8003fae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3314      	adds	r3, #20
 8003fb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fc0:	e841 2300 	strex	r3, r2, [r1]
 8003fc4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1e5      	bne.n	8003f98 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d119      	bne.n	8004008 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	330c      	adds	r3, #12
 8003fda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	e853 3f00 	ldrex	r3, [r3]
 8003fe2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f023 0310 	bic.w	r3, r3, #16
 8003fea:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	330c      	adds	r3, #12
 8003ff2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ff4:	61ba      	str	r2, [r7, #24]
 8003ff6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff8:	6979      	ldr	r1, [r7, #20]
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	e841 2300 	strex	r3, r2, [r1]
 8004000:	613b      	str	r3, [r7, #16]
   return(result);
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1e5      	bne.n	8003fd4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2220      	movs	r2, #32
 800400c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004016:	bf00      	nop
 8004018:	3754      	adds	r7, #84	@ 0x54
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b084      	sub	sp, #16
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800402e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f7ff fd0f 	bl	8003a60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004042:	bf00      	nop
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800404a:	b480      	push	{r7}
 800404c:	b085      	sub	sp, #20
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b21      	cmp	r3, #33	@ 0x21
 800405c:	d13e      	bne.n	80040dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004066:	d114      	bne.n	8004092 <UART_Transmit_IT+0x48>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d110      	bne.n	8004092 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a1b      	ldr	r3, [r3, #32]
 8004074:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	881b      	ldrh	r3, [r3, #0]
 800407a:	461a      	mov	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004084:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	1c9a      	adds	r2, r3, #2
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	621a      	str	r2, [r3, #32]
 8004090:	e008      	b.n	80040a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	1c59      	adds	r1, r3, #1
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6211      	str	r1, [r2, #32]
 800409c:	781a      	ldrb	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	4619      	mov	r1, r3
 80040b2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10f      	bne.n	80040d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68da      	ldr	r2, [r3, #12]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040d8:	2300      	movs	r3, #0
 80040da:	e000      	b.n	80040de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040dc:	2302      	movs	r3, #2
  }
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b082      	sub	sp, #8
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68da      	ldr	r2, [r3, #12]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004100:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2220      	movs	r2, #32
 8004106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7fd f9c4 	bl	8001498 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b08c      	sub	sp, #48	@ 0x30
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b22      	cmp	r3, #34	@ 0x22
 800412c:	f040 80ae 	bne.w	800428c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004138:	d117      	bne.n	800416a <UART_Receive_IT+0x50>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d113      	bne.n	800416a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004142:	2300      	movs	r3, #0
 8004144:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800414a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	b29b      	uxth	r3, r3
 8004154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004158:	b29a      	uxth	r2, r3
 800415a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800415c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004162:	1c9a      	adds	r2, r3, #2
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	629a      	str	r2, [r3, #40]	@ 0x28
 8004168:	e026      	b.n	80041b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800416e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004170:	2300      	movs	r3, #0
 8004172:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800417c:	d007      	beq.n	800418e <UART_Receive_IT+0x74>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10a      	bne.n	800419c <UART_Receive_IT+0x82>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d106      	bne.n	800419c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	b2da      	uxtb	r2, r3
 8004196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004198:	701a      	strb	r2, [r3, #0]
 800419a:	e008      	b.n	80041ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b2:	1c5a      	adds	r2, r3, #1
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041bc:	b29b      	uxth	r3, r3
 80041be:	3b01      	subs	r3, #1
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	4619      	mov	r1, r3
 80041c6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d15d      	bne.n	8004288 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0220 	bic.w	r2, r2, #32
 80041da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695a      	ldr	r2, [r3, #20]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 0201 	bic.w	r2, r2, #1
 80041fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2220      	movs	r2, #32
 8004200:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800420e:	2b01      	cmp	r3, #1
 8004210:	d135      	bne.n	800427e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	330c      	adds	r3, #12
 800421e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	e853 3f00 	ldrex	r3, [r3]
 8004226:	613b      	str	r3, [r7, #16]
   return(result);
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	f023 0310 	bic.w	r3, r3, #16
 800422e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	330c      	adds	r3, #12
 8004236:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004238:	623a      	str	r2, [r7, #32]
 800423a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423c:	69f9      	ldr	r1, [r7, #28]
 800423e:	6a3a      	ldr	r2, [r7, #32]
 8004240:	e841 2300 	strex	r3, r2, [r1]
 8004244:	61bb      	str	r3, [r7, #24]
   return(result);
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1e5      	bne.n	8004218 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0310 	and.w	r3, r3, #16
 8004256:	2b10      	cmp	r3, #16
 8004258:	d10a      	bne.n	8004270 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800425a:	2300      	movs	r3, #0
 800425c:	60fb      	str	r3, [r7, #12]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	60fb      	str	r3, [r7, #12]
 800426e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004274:	4619      	mov	r1, r3
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7fd f8cc 	bl	8001414 <HAL_UARTEx_RxEventCallback>
 800427c:	e002      	b.n	8004284 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7ff fbda 	bl	8003a38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004284:	2300      	movs	r3, #0
 8004286:	e002      	b.n	800428e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004288:	2300      	movs	r3, #0
 800428a:	e000      	b.n	800428e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800428c:	2302      	movs	r3, #2
  }
}
 800428e:	4618      	mov	r0, r3
 8004290:	3730      	adds	r7, #48	@ 0x30
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
	...

08004298 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800429c:	b0c0      	sub	sp, #256	@ 0x100
 800429e:	af00      	add	r7, sp, #0
 80042a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80042b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b4:	68d9      	ldr	r1, [r3, #12]
 80042b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	ea40 0301 	orr.w	r3, r0, r1
 80042c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	431a      	orrs	r2, r3
 80042d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	431a      	orrs	r2, r3
 80042d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	4313      	orrs	r3, r2
 80042e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80042f0:	f021 010c 	bic.w	r1, r1, #12
 80042f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80042fe:	430b      	orrs	r3, r1
 8004300:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800430e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004312:	6999      	ldr	r1, [r3, #24]
 8004314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	ea40 0301 	orr.w	r3, r0, r1
 800431e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	4b8f      	ldr	r3, [pc, #572]	@ (8004564 <UART_SetConfig+0x2cc>)
 8004328:	429a      	cmp	r2, r3
 800432a:	d005      	beq.n	8004338 <UART_SetConfig+0xa0>
 800432c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	4b8d      	ldr	r3, [pc, #564]	@ (8004568 <UART_SetConfig+0x2d0>)
 8004334:	429a      	cmp	r2, r3
 8004336:	d104      	bne.n	8004342 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004338:	f7fe ff24 	bl	8003184 <HAL_RCC_GetPCLK2Freq>
 800433c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004340:	e003      	b.n	800434a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004342:	f7fe ff0b 	bl	800315c <HAL_RCC_GetPCLK1Freq>
 8004346:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800434a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004354:	f040 810c 	bne.w	8004570 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004358:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800435c:	2200      	movs	r2, #0
 800435e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004362:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004366:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800436a:	4622      	mov	r2, r4
 800436c:	462b      	mov	r3, r5
 800436e:	1891      	adds	r1, r2, r2
 8004370:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004372:	415b      	adcs	r3, r3
 8004374:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004376:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800437a:	4621      	mov	r1, r4
 800437c:	eb12 0801 	adds.w	r8, r2, r1
 8004380:	4629      	mov	r1, r5
 8004382:	eb43 0901 	adc.w	r9, r3, r1
 8004386:	f04f 0200 	mov.w	r2, #0
 800438a:	f04f 0300 	mov.w	r3, #0
 800438e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004392:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004396:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800439a:	4690      	mov	r8, r2
 800439c:	4699      	mov	r9, r3
 800439e:	4623      	mov	r3, r4
 80043a0:	eb18 0303 	adds.w	r3, r8, r3
 80043a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80043a8:	462b      	mov	r3, r5
 80043aa:	eb49 0303 	adc.w	r3, r9, r3
 80043ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80043b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80043be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80043c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80043c6:	460b      	mov	r3, r1
 80043c8:	18db      	adds	r3, r3, r3
 80043ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80043cc:	4613      	mov	r3, r2
 80043ce:	eb42 0303 	adc.w	r3, r2, r3
 80043d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80043d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80043d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80043dc:	f7fb ff58 	bl	8000290 <__aeabi_uldivmod>
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4b61      	ldr	r3, [pc, #388]	@ (800456c <UART_SetConfig+0x2d4>)
 80043e6:	fba3 2302 	umull	r2, r3, r3, r2
 80043ea:	095b      	lsrs	r3, r3, #5
 80043ec:	011c      	lsls	r4, r3, #4
 80043ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043f2:	2200      	movs	r2, #0
 80043f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80043fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004400:	4642      	mov	r2, r8
 8004402:	464b      	mov	r3, r9
 8004404:	1891      	adds	r1, r2, r2
 8004406:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004408:	415b      	adcs	r3, r3
 800440a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800440c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004410:	4641      	mov	r1, r8
 8004412:	eb12 0a01 	adds.w	sl, r2, r1
 8004416:	4649      	mov	r1, r9
 8004418:	eb43 0b01 	adc.w	fp, r3, r1
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004428:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800442c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004430:	4692      	mov	sl, r2
 8004432:	469b      	mov	fp, r3
 8004434:	4643      	mov	r3, r8
 8004436:	eb1a 0303 	adds.w	r3, sl, r3
 800443a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800443e:	464b      	mov	r3, r9
 8004440:	eb4b 0303 	adc.w	r3, fp, r3
 8004444:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004454:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004458:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800445c:	460b      	mov	r3, r1
 800445e:	18db      	adds	r3, r3, r3
 8004460:	643b      	str	r3, [r7, #64]	@ 0x40
 8004462:	4613      	mov	r3, r2
 8004464:	eb42 0303 	adc.w	r3, r2, r3
 8004468:	647b      	str	r3, [r7, #68]	@ 0x44
 800446a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800446e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004472:	f7fb ff0d 	bl	8000290 <__aeabi_uldivmod>
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	4611      	mov	r1, r2
 800447c:	4b3b      	ldr	r3, [pc, #236]	@ (800456c <UART_SetConfig+0x2d4>)
 800447e:	fba3 2301 	umull	r2, r3, r3, r1
 8004482:	095b      	lsrs	r3, r3, #5
 8004484:	2264      	movs	r2, #100	@ 0x64
 8004486:	fb02 f303 	mul.w	r3, r2, r3
 800448a:	1acb      	subs	r3, r1, r3
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004492:	4b36      	ldr	r3, [pc, #216]	@ (800456c <UART_SetConfig+0x2d4>)
 8004494:	fba3 2302 	umull	r2, r3, r3, r2
 8004498:	095b      	lsrs	r3, r3, #5
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80044a0:	441c      	add	r4, r3
 80044a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044a6:	2200      	movs	r2, #0
 80044a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80044b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80044b4:	4642      	mov	r2, r8
 80044b6:	464b      	mov	r3, r9
 80044b8:	1891      	adds	r1, r2, r2
 80044ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80044bc:	415b      	adcs	r3, r3
 80044be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80044c4:	4641      	mov	r1, r8
 80044c6:	1851      	adds	r1, r2, r1
 80044c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80044ca:	4649      	mov	r1, r9
 80044cc:	414b      	adcs	r3, r1
 80044ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80044dc:	4659      	mov	r1, fp
 80044de:	00cb      	lsls	r3, r1, #3
 80044e0:	4651      	mov	r1, sl
 80044e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044e6:	4651      	mov	r1, sl
 80044e8:	00ca      	lsls	r2, r1, #3
 80044ea:	4610      	mov	r0, r2
 80044ec:	4619      	mov	r1, r3
 80044ee:	4603      	mov	r3, r0
 80044f0:	4642      	mov	r2, r8
 80044f2:	189b      	adds	r3, r3, r2
 80044f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044f8:	464b      	mov	r3, r9
 80044fa:	460a      	mov	r2, r1
 80044fc:	eb42 0303 	adc.w	r3, r2, r3
 8004500:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004510:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004514:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004518:	460b      	mov	r3, r1
 800451a:	18db      	adds	r3, r3, r3
 800451c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800451e:	4613      	mov	r3, r2
 8004520:	eb42 0303 	adc.w	r3, r2, r3
 8004524:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004526:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800452a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800452e:	f7fb feaf 	bl	8000290 <__aeabi_uldivmod>
 8004532:	4602      	mov	r2, r0
 8004534:	460b      	mov	r3, r1
 8004536:	4b0d      	ldr	r3, [pc, #52]	@ (800456c <UART_SetConfig+0x2d4>)
 8004538:	fba3 1302 	umull	r1, r3, r3, r2
 800453c:	095b      	lsrs	r3, r3, #5
 800453e:	2164      	movs	r1, #100	@ 0x64
 8004540:	fb01 f303 	mul.w	r3, r1, r3
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	3332      	adds	r3, #50	@ 0x32
 800454a:	4a08      	ldr	r2, [pc, #32]	@ (800456c <UART_SetConfig+0x2d4>)
 800454c:	fba2 2303 	umull	r2, r3, r2, r3
 8004550:	095b      	lsrs	r3, r3, #5
 8004552:	f003 0207 	and.w	r2, r3, #7
 8004556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4422      	add	r2, r4
 800455e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004560:	e106      	b.n	8004770 <UART_SetConfig+0x4d8>
 8004562:	bf00      	nop
 8004564:	40011000 	.word	0x40011000
 8004568:	40011400 	.word	0x40011400
 800456c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004570:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004574:	2200      	movs	r2, #0
 8004576:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800457a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800457e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004582:	4642      	mov	r2, r8
 8004584:	464b      	mov	r3, r9
 8004586:	1891      	adds	r1, r2, r2
 8004588:	6239      	str	r1, [r7, #32]
 800458a:	415b      	adcs	r3, r3
 800458c:	627b      	str	r3, [r7, #36]	@ 0x24
 800458e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004592:	4641      	mov	r1, r8
 8004594:	1854      	adds	r4, r2, r1
 8004596:	4649      	mov	r1, r9
 8004598:	eb43 0501 	adc.w	r5, r3, r1
 800459c:	f04f 0200 	mov.w	r2, #0
 80045a0:	f04f 0300 	mov.w	r3, #0
 80045a4:	00eb      	lsls	r3, r5, #3
 80045a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045aa:	00e2      	lsls	r2, r4, #3
 80045ac:	4614      	mov	r4, r2
 80045ae:	461d      	mov	r5, r3
 80045b0:	4643      	mov	r3, r8
 80045b2:	18e3      	adds	r3, r4, r3
 80045b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045b8:	464b      	mov	r3, r9
 80045ba:	eb45 0303 	adc.w	r3, r5, r3
 80045be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80045c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80045d2:	f04f 0200 	mov.w	r2, #0
 80045d6:	f04f 0300 	mov.w	r3, #0
 80045da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80045de:	4629      	mov	r1, r5
 80045e0:	008b      	lsls	r3, r1, #2
 80045e2:	4621      	mov	r1, r4
 80045e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045e8:	4621      	mov	r1, r4
 80045ea:	008a      	lsls	r2, r1, #2
 80045ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80045f0:	f7fb fe4e 	bl	8000290 <__aeabi_uldivmod>
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	4b60      	ldr	r3, [pc, #384]	@ (800477c <UART_SetConfig+0x4e4>)
 80045fa:	fba3 2302 	umull	r2, r3, r3, r2
 80045fe:	095b      	lsrs	r3, r3, #5
 8004600:	011c      	lsls	r4, r3, #4
 8004602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004606:	2200      	movs	r2, #0
 8004608:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800460c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004610:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004614:	4642      	mov	r2, r8
 8004616:	464b      	mov	r3, r9
 8004618:	1891      	adds	r1, r2, r2
 800461a:	61b9      	str	r1, [r7, #24]
 800461c:	415b      	adcs	r3, r3
 800461e:	61fb      	str	r3, [r7, #28]
 8004620:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004624:	4641      	mov	r1, r8
 8004626:	1851      	adds	r1, r2, r1
 8004628:	6139      	str	r1, [r7, #16]
 800462a:	4649      	mov	r1, r9
 800462c:	414b      	adcs	r3, r1
 800462e:	617b      	str	r3, [r7, #20]
 8004630:	f04f 0200 	mov.w	r2, #0
 8004634:	f04f 0300 	mov.w	r3, #0
 8004638:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800463c:	4659      	mov	r1, fp
 800463e:	00cb      	lsls	r3, r1, #3
 8004640:	4651      	mov	r1, sl
 8004642:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004646:	4651      	mov	r1, sl
 8004648:	00ca      	lsls	r2, r1, #3
 800464a:	4610      	mov	r0, r2
 800464c:	4619      	mov	r1, r3
 800464e:	4603      	mov	r3, r0
 8004650:	4642      	mov	r2, r8
 8004652:	189b      	adds	r3, r3, r2
 8004654:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004658:	464b      	mov	r3, r9
 800465a:	460a      	mov	r2, r1
 800465c:	eb42 0303 	adc.w	r3, r2, r3
 8004660:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800466e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004670:	f04f 0200 	mov.w	r2, #0
 8004674:	f04f 0300 	mov.w	r3, #0
 8004678:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800467c:	4649      	mov	r1, r9
 800467e:	008b      	lsls	r3, r1, #2
 8004680:	4641      	mov	r1, r8
 8004682:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004686:	4641      	mov	r1, r8
 8004688:	008a      	lsls	r2, r1, #2
 800468a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800468e:	f7fb fdff 	bl	8000290 <__aeabi_uldivmod>
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	4611      	mov	r1, r2
 8004698:	4b38      	ldr	r3, [pc, #224]	@ (800477c <UART_SetConfig+0x4e4>)
 800469a:	fba3 2301 	umull	r2, r3, r3, r1
 800469e:	095b      	lsrs	r3, r3, #5
 80046a0:	2264      	movs	r2, #100	@ 0x64
 80046a2:	fb02 f303 	mul.w	r3, r2, r3
 80046a6:	1acb      	subs	r3, r1, r3
 80046a8:	011b      	lsls	r3, r3, #4
 80046aa:	3332      	adds	r3, #50	@ 0x32
 80046ac:	4a33      	ldr	r2, [pc, #204]	@ (800477c <UART_SetConfig+0x4e4>)
 80046ae:	fba2 2303 	umull	r2, r3, r2, r3
 80046b2:	095b      	lsrs	r3, r3, #5
 80046b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046b8:	441c      	add	r4, r3
 80046ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046be:	2200      	movs	r2, #0
 80046c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80046c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80046c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80046c8:	4642      	mov	r2, r8
 80046ca:	464b      	mov	r3, r9
 80046cc:	1891      	adds	r1, r2, r2
 80046ce:	60b9      	str	r1, [r7, #8]
 80046d0:	415b      	adcs	r3, r3
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046d8:	4641      	mov	r1, r8
 80046da:	1851      	adds	r1, r2, r1
 80046dc:	6039      	str	r1, [r7, #0]
 80046de:	4649      	mov	r1, r9
 80046e0:	414b      	adcs	r3, r1
 80046e2:	607b      	str	r3, [r7, #4]
 80046e4:	f04f 0200 	mov.w	r2, #0
 80046e8:	f04f 0300 	mov.w	r3, #0
 80046ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046f0:	4659      	mov	r1, fp
 80046f2:	00cb      	lsls	r3, r1, #3
 80046f4:	4651      	mov	r1, sl
 80046f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046fa:	4651      	mov	r1, sl
 80046fc:	00ca      	lsls	r2, r1, #3
 80046fe:	4610      	mov	r0, r2
 8004700:	4619      	mov	r1, r3
 8004702:	4603      	mov	r3, r0
 8004704:	4642      	mov	r2, r8
 8004706:	189b      	adds	r3, r3, r2
 8004708:	66bb      	str	r3, [r7, #104]	@ 0x68
 800470a:	464b      	mov	r3, r9
 800470c:	460a      	mov	r2, r1
 800470e:	eb42 0303 	adc.w	r3, r2, r3
 8004712:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	663b      	str	r3, [r7, #96]	@ 0x60
 800471e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004720:	f04f 0200 	mov.w	r2, #0
 8004724:	f04f 0300 	mov.w	r3, #0
 8004728:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800472c:	4649      	mov	r1, r9
 800472e:	008b      	lsls	r3, r1, #2
 8004730:	4641      	mov	r1, r8
 8004732:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004736:	4641      	mov	r1, r8
 8004738:	008a      	lsls	r2, r1, #2
 800473a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800473e:	f7fb fda7 	bl	8000290 <__aeabi_uldivmod>
 8004742:	4602      	mov	r2, r0
 8004744:	460b      	mov	r3, r1
 8004746:	4b0d      	ldr	r3, [pc, #52]	@ (800477c <UART_SetConfig+0x4e4>)
 8004748:	fba3 1302 	umull	r1, r3, r3, r2
 800474c:	095b      	lsrs	r3, r3, #5
 800474e:	2164      	movs	r1, #100	@ 0x64
 8004750:	fb01 f303 	mul.w	r3, r1, r3
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	3332      	adds	r3, #50	@ 0x32
 800475a:	4a08      	ldr	r2, [pc, #32]	@ (800477c <UART_SetConfig+0x4e4>)
 800475c:	fba2 2303 	umull	r2, r3, r2, r3
 8004760:	095b      	lsrs	r3, r3, #5
 8004762:	f003 020f 	and.w	r2, r3, #15
 8004766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4422      	add	r2, r4
 800476e:	609a      	str	r2, [r3, #8]
}
 8004770:	bf00      	nop
 8004772:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004776:	46bd      	mov	sp, r7
 8004778:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800477c:	51eb851f 	.word	0x51eb851f

08004780 <siprintf>:
 8004780:	b40e      	push	{r1, r2, r3}
 8004782:	b510      	push	{r4, lr}
 8004784:	b09d      	sub	sp, #116	@ 0x74
 8004786:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004788:	9002      	str	r0, [sp, #8]
 800478a:	9006      	str	r0, [sp, #24]
 800478c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004790:	480a      	ldr	r0, [pc, #40]	@ (80047bc <siprintf+0x3c>)
 8004792:	9107      	str	r1, [sp, #28]
 8004794:	9104      	str	r1, [sp, #16]
 8004796:	490a      	ldr	r1, [pc, #40]	@ (80047c0 <siprintf+0x40>)
 8004798:	f853 2b04 	ldr.w	r2, [r3], #4
 800479c:	9105      	str	r1, [sp, #20]
 800479e:	2400      	movs	r4, #0
 80047a0:	a902      	add	r1, sp, #8
 80047a2:	6800      	ldr	r0, [r0, #0]
 80047a4:	9301      	str	r3, [sp, #4]
 80047a6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80047a8:	f000 f9a2 	bl	8004af0 <_svfiprintf_r>
 80047ac:	9b02      	ldr	r3, [sp, #8]
 80047ae:	701c      	strb	r4, [r3, #0]
 80047b0:	b01d      	add	sp, #116	@ 0x74
 80047b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047b6:	b003      	add	sp, #12
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	2000000c 	.word	0x2000000c
 80047c0:	ffff0208 	.word	0xffff0208

080047c4 <memset>:
 80047c4:	4402      	add	r2, r0
 80047c6:	4603      	mov	r3, r0
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d100      	bne.n	80047ce <memset+0xa>
 80047cc:	4770      	bx	lr
 80047ce:	f803 1b01 	strb.w	r1, [r3], #1
 80047d2:	e7f9      	b.n	80047c8 <memset+0x4>

080047d4 <__errno>:
 80047d4:	4b01      	ldr	r3, [pc, #4]	@ (80047dc <__errno+0x8>)
 80047d6:	6818      	ldr	r0, [r3, #0]
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	2000000c 	.word	0x2000000c

080047e0 <__libc_init_array>:
 80047e0:	b570      	push	{r4, r5, r6, lr}
 80047e2:	4d0d      	ldr	r5, [pc, #52]	@ (8004818 <__libc_init_array+0x38>)
 80047e4:	4c0d      	ldr	r4, [pc, #52]	@ (800481c <__libc_init_array+0x3c>)
 80047e6:	1b64      	subs	r4, r4, r5
 80047e8:	10a4      	asrs	r4, r4, #2
 80047ea:	2600      	movs	r6, #0
 80047ec:	42a6      	cmp	r6, r4
 80047ee:	d109      	bne.n	8004804 <__libc_init_array+0x24>
 80047f0:	4d0b      	ldr	r5, [pc, #44]	@ (8004820 <__libc_init_array+0x40>)
 80047f2:	4c0c      	ldr	r4, [pc, #48]	@ (8004824 <__libc_init_array+0x44>)
 80047f4:	f000 fc64 	bl	80050c0 <_init>
 80047f8:	1b64      	subs	r4, r4, r5
 80047fa:	10a4      	asrs	r4, r4, #2
 80047fc:	2600      	movs	r6, #0
 80047fe:	42a6      	cmp	r6, r4
 8004800:	d105      	bne.n	800480e <__libc_init_array+0x2e>
 8004802:	bd70      	pop	{r4, r5, r6, pc}
 8004804:	f855 3b04 	ldr.w	r3, [r5], #4
 8004808:	4798      	blx	r3
 800480a:	3601      	adds	r6, #1
 800480c:	e7ee      	b.n	80047ec <__libc_init_array+0xc>
 800480e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004812:	4798      	blx	r3
 8004814:	3601      	adds	r6, #1
 8004816:	e7f2      	b.n	80047fe <__libc_init_array+0x1e>
 8004818:	08005818 	.word	0x08005818
 800481c:	08005818 	.word	0x08005818
 8004820:	08005818 	.word	0x08005818
 8004824:	0800581c 	.word	0x0800581c

08004828 <__retarget_lock_acquire_recursive>:
 8004828:	4770      	bx	lr

0800482a <__retarget_lock_release_recursive>:
 800482a:	4770      	bx	lr

0800482c <memcpy>:
 800482c:	440a      	add	r2, r1
 800482e:	4291      	cmp	r1, r2
 8004830:	f100 33ff 	add.w	r3, r0, #4294967295
 8004834:	d100      	bne.n	8004838 <memcpy+0xc>
 8004836:	4770      	bx	lr
 8004838:	b510      	push	{r4, lr}
 800483a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800483e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004842:	4291      	cmp	r1, r2
 8004844:	d1f9      	bne.n	800483a <memcpy+0xe>
 8004846:	bd10      	pop	{r4, pc}

08004848 <_free_r>:
 8004848:	b538      	push	{r3, r4, r5, lr}
 800484a:	4605      	mov	r5, r0
 800484c:	2900      	cmp	r1, #0
 800484e:	d041      	beq.n	80048d4 <_free_r+0x8c>
 8004850:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004854:	1f0c      	subs	r4, r1, #4
 8004856:	2b00      	cmp	r3, #0
 8004858:	bfb8      	it	lt
 800485a:	18e4      	addlt	r4, r4, r3
 800485c:	f000 f8e0 	bl	8004a20 <__malloc_lock>
 8004860:	4a1d      	ldr	r2, [pc, #116]	@ (80048d8 <_free_r+0x90>)
 8004862:	6813      	ldr	r3, [r2, #0]
 8004864:	b933      	cbnz	r3, 8004874 <_free_r+0x2c>
 8004866:	6063      	str	r3, [r4, #4]
 8004868:	6014      	str	r4, [r2, #0]
 800486a:	4628      	mov	r0, r5
 800486c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004870:	f000 b8dc 	b.w	8004a2c <__malloc_unlock>
 8004874:	42a3      	cmp	r3, r4
 8004876:	d908      	bls.n	800488a <_free_r+0x42>
 8004878:	6820      	ldr	r0, [r4, #0]
 800487a:	1821      	adds	r1, r4, r0
 800487c:	428b      	cmp	r3, r1
 800487e:	bf01      	itttt	eq
 8004880:	6819      	ldreq	r1, [r3, #0]
 8004882:	685b      	ldreq	r3, [r3, #4]
 8004884:	1809      	addeq	r1, r1, r0
 8004886:	6021      	streq	r1, [r4, #0]
 8004888:	e7ed      	b.n	8004866 <_free_r+0x1e>
 800488a:	461a      	mov	r2, r3
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	b10b      	cbz	r3, 8004894 <_free_r+0x4c>
 8004890:	42a3      	cmp	r3, r4
 8004892:	d9fa      	bls.n	800488a <_free_r+0x42>
 8004894:	6811      	ldr	r1, [r2, #0]
 8004896:	1850      	adds	r0, r2, r1
 8004898:	42a0      	cmp	r0, r4
 800489a:	d10b      	bne.n	80048b4 <_free_r+0x6c>
 800489c:	6820      	ldr	r0, [r4, #0]
 800489e:	4401      	add	r1, r0
 80048a0:	1850      	adds	r0, r2, r1
 80048a2:	4283      	cmp	r3, r0
 80048a4:	6011      	str	r1, [r2, #0]
 80048a6:	d1e0      	bne.n	800486a <_free_r+0x22>
 80048a8:	6818      	ldr	r0, [r3, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	6053      	str	r3, [r2, #4]
 80048ae:	4408      	add	r0, r1
 80048b0:	6010      	str	r0, [r2, #0]
 80048b2:	e7da      	b.n	800486a <_free_r+0x22>
 80048b4:	d902      	bls.n	80048bc <_free_r+0x74>
 80048b6:	230c      	movs	r3, #12
 80048b8:	602b      	str	r3, [r5, #0]
 80048ba:	e7d6      	b.n	800486a <_free_r+0x22>
 80048bc:	6820      	ldr	r0, [r4, #0]
 80048be:	1821      	adds	r1, r4, r0
 80048c0:	428b      	cmp	r3, r1
 80048c2:	bf04      	itt	eq
 80048c4:	6819      	ldreq	r1, [r3, #0]
 80048c6:	685b      	ldreq	r3, [r3, #4]
 80048c8:	6063      	str	r3, [r4, #4]
 80048ca:	bf04      	itt	eq
 80048cc:	1809      	addeq	r1, r1, r0
 80048ce:	6021      	streq	r1, [r4, #0]
 80048d0:	6054      	str	r4, [r2, #4]
 80048d2:	e7ca      	b.n	800486a <_free_r+0x22>
 80048d4:	bd38      	pop	{r3, r4, r5, pc}
 80048d6:	bf00      	nop
 80048d8:	20000de8 	.word	0x20000de8

080048dc <sbrk_aligned>:
 80048dc:	b570      	push	{r4, r5, r6, lr}
 80048de:	4e0f      	ldr	r6, [pc, #60]	@ (800491c <sbrk_aligned+0x40>)
 80048e0:	460c      	mov	r4, r1
 80048e2:	6831      	ldr	r1, [r6, #0]
 80048e4:	4605      	mov	r5, r0
 80048e6:	b911      	cbnz	r1, 80048ee <sbrk_aligned+0x12>
 80048e8:	f000 fba4 	bl	8005034 <_sbrk_r>
 80048ec:	6030      	str	r0, [r6, #0]
 80048ee:	4621      	mov	r1, r4
 80048f0:	4628      	mov	r0, r5
 80048f2:	f000 fb9f 	bl	8005034 <_sbrk_r>
 80048f6:	1c43      	adds	r3, r0, #1
 80048f8:	d103      	bne.n	8004902 <sbrk_aligned+0x26>
 80048fa:	f04f 34ff 	mov.w	r4, #4294967295
 80048fe:	4620      	mov	r0, r4
 8004900:	bd70      	pop	{r4, r5, r6, pc}
 8004902:	1cc4      	adds	r4, r0, #3
 8004904:	f024 0403 	bic.w	r4, r4, #3
 8004908:	42a0      	cmp	r0, r4
 800490a:	d0f8      	beq.n	80048fe <sbrk_aligned+0x22>
 800490c:	1a21      	subs	r1, r4, r0
 800490e:	4628      	mov	r0, r5
 8004910:	f000 fb90 	bl	8005034 <_sbrk_r>
 8004914:	3001      	adds	r0, #1
 8004916:	d1f2      	bne.n	80048fe <sbrk_aligned+0x22>
 8004918:	e7ef      	b.n	80048fa <sbrk_aligned+0x1e>
 800491a:	bf00      	nop
 800491c:	20000de4 	.word	0x20000de4

08004920 <_malloc_r>:
 8004920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004924:	1ccd      	adds	r5, r1, #3
 8004926:	f025 0503 	bic.w	r5, r5, #3
 800492a:	3508      	adds	r5, #8
 800492c:	2d0c      	cmp	r5, #12
 800492e:	bf38      	it	cc
 8004930:	250c      	movcc	r5, #12
 8004932:	2d00      	cmp	r5, #0
 8004934:	4606      	mov	r6, r0
 8004936:	db01      	blt.n	800493c <_malloc_r+0x1c>
 8004938:	42a9      	cmp	r1, r5
 800493a:	d904      	bls.n	8004946 <_malloc_r+0x26>
 800493c:	230c      	movs	r3, #12
 800493e:	6033      	str	r3, [r6, #0]
 8004940:	2000      	movs	r0, #0
 8004942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004946:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a1c <_malloc_r+0xfc>
 800494a:	f000 f869 	bl	8004a20 <__malloc_lock>
 800494e:	f8d8 3000 	ldr.w	r3, [r8]
 8004952:	461c      	mov	r4, r3
 8004954:	bb44      	cbnz	r4, 80049a8 <_malloc_r+0x88>
 8004956:	4629      	mov	r1, r5
 8004958:	4630      	mov	r0, r6
 800495a:	f7ff ffbf 	bl	80048dc <sbrk_aligned>
 800495e:	1c43      	adds	r3, r0, #1
 8004960:	4604      	mov	r4, r0
 8004962:	d158      	bne.n	8004a16 <_malloc_r+0xf6>
 8004964:	f8d8 4000 	ldr.w	r4, [r8]
 8004968:	4627      	mov	r7, r4
 800496a:	2f00      	cmp	r7, #0
 800496c:	d143      	bne.n	80049f6 <_malloc_r+0xd6>
 800496e:	2c00      	cmp	r4, #0
 8004970:	d04b      	beq.n	8004a0a <_malloc_r+0xea>
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	4639      	mov	r1, r7
 8004976:	4630      	mov	r0, r6
 8004978:	eb04 0903 	add.w	r9, r4, r3
 800497c:	f000 fb5a 	bl	8005034 <_sbrk_r>
 8004980:	4581      	cmp	r9, r0
 8004982:	d142      	bne.n	8004a0a <_malloc_r+0xea>
 8004984:	6821      	ldr	r1, [r4, #0]
 8004986:	1a6d      	subs	r5, r5, r1
 8004988:	4629      	mov	r1, r5
 800498a:	4630      	mov	r0, r6
 800498c:	f7ff ffa6 	bl	80048dc <sbrk_aligned>
 8004990:	3001      	adds	r0, #1
 8004992:	d03a      	beq.n	8004a0a <_malloc_r+0xea>
 8004994:	6823      	ldr	r3, [r4, #0]
 8004996:	442b      	add	r3, r5
 8004998:	6023      	str	r3, [r4, #0]
 800499a:	f8d8 3000 	ldr.w	r3, [r8]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	bb62      	cbnz	r2, 80049fc <_malloc_r+0xdc>
 80049a2:	f8c8 7000 	str.w	r7, [r8]
 80049a6:	e00f      	b.n	80049c8 <_malloc_r+0xa8>
 80049a8:	6822      	ldr	r2, [r4, #0]
 80049aa:	1b52      	subs	r2, r2, r5
 80049ac:	d420      	bmi.n	80049f0 <_malloc_r+0xd0>
 80049ae:	2a0b      	cmp	r2, #11
 80049b0:	d917      	bls.n	80049e2 <_malloc_r+0xc2>
 80049b2:	1961      	adds	r1, r4, r5
 80049b4:	42a3      	cmp	r3, r4
 80049b6:	6025      	str	r5, [r4, #0]
 80049b8:	bf18      	it	ne
 80049ba:	6059      	strne	r1, [r3, #4]
 80049bc:	6863      	ldr	r3, [r4, #4]
 80049be:	bf08      	it	eq
 80049c0:	f8c8 1000 	streq.w	r1, [r8]
 80049c4:	5162      	str	r2, [r4, r5]
 80049c6:	604b      	str	r3, [r1, #4]
 80049c8:	4630      	mov	r0, r6
 80049ca:	f000 f82f 	bl	8004a2c <__malloc_unlock>
 80049ce:	f104 000b 	add.w	r0, r4, #11
 80049d2:	1d23      	adds	r3, r4, #4
 80049d4:	f020 0007 	bic.w	r0, r0, #7
 80049d8:	1ac2      	subs	r2, r0, r3
 80049da:	bf1c      	itt	ne
 80049dc:	1a1b      	subne	r3, r3, r0
 80049de:	50a3      	strne	r3, [r4, r2]
 80049e0:	e7af      	b.n	8004942 <_malloc_r+0x22>
 80049e2:	6862      	ldr	r2, [r4, #4]
 80049e4:	42a3      	cmp	r3, r4
 80049e6:	bf0c      	ite	eq
 80049e8:	f8c8 2000 	streq.w	r2, [r8]
 80049ec:	605a      	strne	r2, [r3, #4]
 80049ee:	e7eb      	b.n	80049c8 <_malloc_r+0xa8>
 80049f0:	4623      	mov	r3, r4
 80049f2:	6864      	ldr	r4, [r4, #4]
 80049f4:	e7ae      	b.n	8004954 <_malloc_r+0x34>
 80049f6:	463c      	mov	r4, r7
 80049f8:	687f      	ldr	r7, [r7, #4]
 80049fa:	e7b6      	b.n	800496a <_malloc_r+0x4a>
 80049fc:	461a      	mov	r2, r3
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	42a3      	cmp	r3, r4
 8004a02:	d1fb      	bne.n	80049fc <_malloc_r+0xdc>
 8004a04:	2300      	movs	r3, #0
 8004a06:	6053      	str	r3, [r2, #4]
 8004a08:	e7de      	b.n	80049c8 <_malloc_r+0xa8>
 8004a0a:	230c      	movs	r3, #12
 8004a0c:	6033      	str	r3, [r6, #0]
 8004a0e:	4630      	mov	r0, r6
 8004a10:	f000 f80c 	bl	8004a2c <__malloc_unlock>
 8004a14:	e794      	b.n	8004940 <_malloc_r+0x20>
 8004a16:	6005      	str	r5, [r0, #0]
 8004a18:	e7d6      	b.n	80049c8 <_malloc_r+0xa8>
 8004a1a:	bf00      	nop
 8004a1c:	20000de8 	.word	0x20000de8

08004a20 <__malloc_lock>:
 8004a20:	4801      	ldr	r0, [pc, #4]	@ (8004a28 <__malloc_lock+0x8>)
 8004a22:	f7ff bf01 	b.w	8004828 <__retarget_lock_acquire_recursive>
 8004a26:	bf00      	nop
 8004a28:	20000de0 	.word	0x20000de0

08004a2c <__malloc_unlock>:
 8004a2c:	4801      	ldr	r0, [pc, #4]	@ (8004a34 <__malloc_unlock+0x8>)
 8004a2e:	f7ff befc 	b.w	800482a <__retarget_lock_release_recursive>
 8004a32:	bf00      	nop
 8004a34:	20000de0 	.word	0x20000de0

08004a38 <__ssputs_r>:
 8004a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a3c:	688e      	ldr	r6, [r1, #8]
 8004a3e:	461f      	mov	r7, r3
 8004a40:	42be      	cmp	r6, r7
 8004a42:	680b      	ldr	r3, [r1, #0]
 8004a44:	4682      	mov	sl, r0
 8004a46:	460c      	mov	r4, r1
 8004a48:	4690      	mov	r8, r2
 8004a4a:	d82d      	bhi.n	8004aa8 <__ssputs_r+0x70>
 8004a4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004a50:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004a54:	d026      	beq.n	8004aa4 <__ssputs_r+0x6c>
 8004a56:	6965      	ldr	r5, [r4, #20]
 8004a58:	6909      	ldr	r1, [r1, #16]
 8004a5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a5e:	eba3 0901 	sub.w	r9, r3, r1
 8004a62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a66:	1c7b      	adds	r3, r7, #1
 8004a68:	444b      	add	r3, r9
 8004a6a:	106d      	asrs	r5, r5, #1
 8004a6c:	429d      	cmp	r5, r3
 8004a6e:	bf38      	it	cc
 8004a70:	461d      	movcc	r5, r3
 8004a72:	0553      	lsls	r3, r2, #21
 8004a74:	d527      	bpl.n	8004ac6 <__ssputs_r+0x8e>
 8004a76:	4629      	mov	r1, r5
 8004a78:	f7ff ff52 	bl	8004920 <_malloc_r>
 8004a7c:	4606      	mov	r6, r0
 8004a7e:	b360      	cbz	r0, 8004ada <__ssputs_r+0xa2>
 8004a80:	6921      	ldr	r1, [r4, #16]
 8004a82:	464a      	mov	r2, r9
 8004a84:	f7ff fed2 	bl	800482c <memcpy>
 8004a88:	89a3      	ldrh	r3, [r4, #12]
 8004a8a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004a8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a92:	81a3      	strh	r3, [r4, #12]
 8004a94:	6126      	str	r6, [r4, #16]
 8004a96:	6165      	str	r5, [r4, #20]
 8004a98:	444e      	add	r6, r9
 8004a9a:	eba5 0509 	sub.w	r5, r5, r9
 8004a9e:	6026      	str	r6, [r4, #0]
 8004aa0:	60a5      	str	r5, [r4, #8]
 8004aa2:	463e      	mov	r6, r7
 8004aa4:	42be      	cmp	r6, r7
 8004aa6:	d900      	bls.n	8004aaa <__ssputs_r+0x72>
 8004aa8:	463e      	mov	r6, r7
 8004aaa:	6820      	ldr	r0, [r4, #0]
 8004aac:	4632      	mov	r2, r6
 8004aae:	4641      	mov	r1, r8
 8004ab0:	f000 faa6 	bl	8005000 <memmove>
 8004ab4:	68a3      	ldr	r3, [r4, #8]
 8004ab6:	1b9b      	subs	r3, r3, r6
 8004ab8:	60a3      	str	r3, [r4, #8]
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	4433      	add	r3, r6
 8004abe:	6023      	str	r3, [r4, #0]
 8004ac0:	2000      	movs	r0, #0
 8004ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ac6:	462a      	mov	r2, r5
 8004ac8:	f000 fac4 	bl	8005054 <_realloc_r>
 8004acc:	4606      	mov	r6, r0
 8004ace:	2800      	cmp	r0, #0
 8004ad0:	d1e0      	bne.n	8004a94 <__ssputs_r+0x5c>
 8004ad2:	6921      	ldr	r1, [r4, #16]
 8004ad4:	4650      	mov	r0, sl
 8004ad6:	f7ff feb7 	bl	8004848 <_free_r>
 8004ada:	230c      	movs	r3, #12
 8004adc:	f8ca 3000 	str.w	r3, [sl]
 8004ae0:	89a3      	ldrh	r3, [r4, #12]
 8004ae2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ae6:	81a3      	strh	r3, [r4, #12]
 8004ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8004aec:	e7e9      	b.n	8004ac2 <__ssputs_r+0x8a>
	...

08004af0 <_svfiprintf_r>:
 8004af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004af4:	4698      	mov	r8, r3
 8004af6:	898b      	ldrh	r3, [r1, #12]
 8004af8:	061b      	lsls	r3, r3, #24
 8004afa:	b09d      	sub	sp, #116	@ 0x74
 8004afc:	4607      	mov	r7, r0
 8004afe:	460d      	mov	r5, r1
 8004b00:	4614      	mov	r4, r2
 8004b02:	d510      	bpl.n	8004b26 <_svfiprintf_r+0x36>
 8004b04:	690b      	ldr	r3, [r1, #16]
 8004b06:	b973      	cbnz	r3, 8004b26 <_svfiprintf_r+0x36>
 8004b08:	2140      	movs	r1, #64	@ 0x40
 8004b0a:	f7ff ff09 	bl	8004920 <_malloc_r>
 8004b0e:	6028      	str	r0, [r5, #0]
 8004b10:	6128      	str	r0, [r5, #16]
 8004b12:	b930      	cbnz	r0, 8004b22 <_svfiprintf_r+0x32>
 8004b14:	230c      	movs	r3, #12
 8004b16:	603b      	str	r3, [r7, #0]
 8004b18:	f04f 30ff 	mov.w	r0, #4294967295
 8004b1c:	b01d      	add	sp, #116	@ 0x74
 8004b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b22:	2340      	movs	r3, #64	@ 0x40
 8004b24:	616b      	str	r3, [r5, #20]
 8004b26:	2300      	movs	r3, #0
 8004b28:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b2a:	2320      	movs	r3, #32
 8004b2c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004b30:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b34:	2330      	movs	r3, #48	@ 0x30
 8004b36:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004cd4 <_svfiprintf_r+0x1e4>
 8004b3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004b3e:	f04f 0901 	mov.w	r9, #1
 8004b42:	4623      	mov	r3, r4
 8004b44:	469a      	mov	sl, r3
 8004b46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b4a:	b10a      	cbz	r2, 8004b50 <_svfiprintf_r+0x60>
 8004b4c:	2a25      	cmp	r2, #37	@ 0x25
 8004b4e:	d1f9      	bne.n	8004b44 <_svfiprintf_r+0x54>
 8004b50:	ebba 0b04 	subs.w	fp, sl, r4
 8004b54:	d00b      	beq.n	8004b6e <_svfiprintf_r+0x7e>
 8004b56:	465b      	mov	r3, fp
 8004b58:	4622      	mov	r2, r4
 8004b5a:	4629      	mov	r1, r5
 8004b5c:	4638      	mov	r0, r7
 8004b5e:	f7ff ff6b 	bl	8004a38 <__ssputs_r>
 8004b62:	3001      	adds	r0, #1
 8004b64:	f000 80a7 	beq.w	8004cb6 <_svfiprintf_r+0x1c6>
 8004b68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b6a:	445a      	add	r2, fp
 8004b6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004b6e:	f89a 3000 	ldrb.w	r3, [sl]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f000 809f 	beq.w	8004cb6 <_svfiprintf_r+0x1c6>
 8004b78:	2300      	movs	r3, #0
 8004b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b82:	f10a 0a01 	add.w	sl, sl, #1
 8004b86:	9304      	str	r3, [sp, #16]
 8004b88:	9307      	str	r3, [sp, #28]
 8004b8a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004b8e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004b90:	4654      	mov	r4, sl
 8004b92:	2205      	movs	r2, #5
 8004b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b98:	484e      	ldr	r0, [pc, #312]	@ (8004cd4 <_svfiprintf_r+0x1e4>)
 8004b9a:	f7fb fb29 	bl	80001f0 <memchr>
 8004b9e:	9a04      	ldr	r2, [sp, #16]
 8004ba0:	b9d8      	cbnz	r0, 8004bda <_svfiprintf_r+0xea>
 8004ba2:	06d0      	lsls	r0, r2, #27
 8004ba4:	bf44      	itt	mi
 8004ba6:	2320      	movmi	r3, #32
 8004ba8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004bac:	0711      	lsls	r1, r2, #28
 8004bae:	bf44      	itt	mi
 8004bb0:	232b      	movmi	r3, #43	@ 0x2b
 8004bb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004bb6:	f89a 3000 	ldrb.w	r3, [sl]
 8004bba:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bbc:	d015      	beq.n	8004bea <_svfiprintf_r+0xfa>
 8004bbe:	9a07      	ldr	r2, [sp, #28]
 8004bc0:	4654      	mov	r4, sl
 8004bc2:	2000      	movs	r0, #0
 8004bc4:	f04f 0c0a 	mov.w	ip, #10
 8004bc8:	4621      	mov	r1, r4
 8004bca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bce:	3b30      	subs	r3, #48	@ 0x30
 8004bd0:	2b09      	cmp	r3, #9
 8004bd2:	d94b      	bls.n	8004c6c <_svfiprintf_r+0x17c>
 8004bd4:	b1b0      	cbz	r0, 8004c04 <_svfiprintf_r+0x114>
 8004bd6:	9207      	str	r2, [sp, #28]
 8004bd8:	e014      	b.n	8004c04 <_svfiprintf_r+0x114>
 8004bda:	eba0 0308 	sub.w	r3, r0, r8
 8004bde:	fa09 f303 	lsl.w	r3, r9, r3
 8004be2:	4313      	orrs	r3, r2
 8004be4:	9304      	str	r3, [sp, #16]
 8004be6:	46a2      	mov	sl, r4
 8004be8:	e7d2      	b.n	8004b90 <_svfiprintf_r+0xa0>
 8004bea:	9b03      	ldr	r3, [sp, #12]
 8004bec:	1d19      	adds	r1, r3, #4
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	9103      	str	r1, [sp, #12]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	bfbb      	ittet	lt
 8004bf6:	425b      	neglt	r3, r3
 8004bf8:	f042 0202 	orrlt.w	r2, r2, #2
 8004bfc:	9307      	strge	r3, [sp, #28]
 8004bfe:	9307      	strlt	r3, [sp, #28]
 8004c00:	bfb8      	it	lt
 8004c02:	9204      	strlt	r2, [sp, #16]
 8004c04:	7823      	ldrb	r3, [r4, #0]
 8004c06:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c08:	d10a      	bne.n	8004c20 <_svfiprintf_r+0x130>
 8004c0a:	7863      	ldrb	r3, [r4, #1]
 8004c0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c0e:	d132      	bne.n	8004c76 <_svfiprintf_r+0x186>
 8004c10:	9b03      	ldr	r3, [sp, #12]
 8004c12:	1d1a      	adds	r2, r3, #4
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	9203      	str	r2, [sp, #12]
 8004c18:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c1c:	3402      	adds	r4, #2
 8004c1e:	9305      	str	r3, [sp, #20]
 8004c20:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004ce4 <_svfiprintf_r+0x1f4>
 8004c24:	7821      	ldrb	r1, [r4, #0]
 8004c26:	2203      	movs	r2, #3
 8004c28:	4650      	mov	r0, sl
 8004c2a:	f7fb fae1 	bl	80001f0 <memchr>
 8004c2e:	b138      	cbz	r0, 8004c40 <_svfiprintf_r+0x150>
 8004c30:	9b04      	ldr	r3, [sp, #16]
 8004c32:	eba0 000a 	sub.w	r0, r0, sl
 8004c36:	2240      	movs	r2, #64	@ 0x40
 8004c38:	4082      	lsls	r2, r0
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	3401      	adds	r4, #1
 8004c3e:	9304      	str	r3, [sp, #16]
 8004c40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c44:	4824      	ldr	r0, [pc, #144]	@ (8004cd8 <_svfiprintf_r+0x1e8>)
 8004c46:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004c4a:	2206      	movs	r2, #6
 8004c4c:	f7fb fad0 	bl	80001f0 <memchr>
 8004c50:	2800      	cmp	r0, #0
 8004c52:	d036      	beq.n	8004cc2 <_svfiprintf_r+0x1d2>
 8004c54:	4b21      	ldr	r3, [pc, #132]	@ (8004cdc <_svfiprintf_r+0x1ec>)
 8004c56:	bb1b      	cbnz	r3, 8004ca0 <_svfiprintf_r+0x1b0>
 8004c58:	9b03      	ldr	r3, [sp, #12]
 8004c5a:	3307      	adds	r3, #7
 8004c5c:	f023 0307 	bic.w	r3, r3, #7
 8004c60:	3308      	adds	r3, #8
 8004c62:	9303      	str	r3, [sp, #12]
 8004c64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c66:	4433      	add	r3, r6
 8004c68:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c6a:	e76a      	b.n	8004b42 <_svfiprintf_r+0x52>
 8004c6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c70:	460c      	mov	r4, r1
 8004c72:	2001      	movs	r0, #1
 8004c74:	e7a8      	b.n	8004bc8 <_svfiprintf_r+0xd8>
 8004c76:	2300      	movs	r3, #0
 8004c78:	3401      	adds	r4, #1
 8004c7a:	9305      	str	r3, [sp, #20]
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	f04f 0c0a 	mov.w	ip, #10
 8004c82:	4620      	mov	r0, r4
 8004c84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c88:	3a30      	subs	r2, #48	@ 0x30
 8004c8a:	2a09      	cmp	r2, #9
 8004c8c:	d903      	bls.n	8004c96 <_svfiprintf_r+0x1a6>
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d0c6      	beq.n	8004c20 <_svfiprintf_r+0x130>
 8004c92:	9105      	str	r1, [sp, #20]
 8004c94:	e7c4      	b.n	8004c20 <_svfiprintf_r+0x130>
 8004c96:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c9a:	4604      	mov	r4, r0
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e7f0      	b.n	8004c82 <_svfiprintf_r+0x192>
 8004ca0:	ab03      	add	r3, sp, #12
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	462a      	mov	r2, r5
 8004ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8004ce0 <_svfiprintf_r+0x1f0>)
 8004ca8:	a904      	add	r1, sp, #16
 8004caa:	4638      	mov	r0, r7
 8004cac:	f3af 8000 	nop.w
 8004cb0:	1c42      	adds	r2, r0, #1
 8004cb2:	4606      	mov	r6, r0
 8004cb4:	d1d6      	bne.n	8004c64 <_svfiprintf_r+0x174>
 8004cb6:	89ab      	ldrh	r3, [r5, #12]
 8004cb8:	065b      	lsls	r3, r3, #25
 8004cba:	f53f af2d 	bmi.w	8004b18 <_svfiprintf_r+0x28>
 8004cbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004cc0:	e72c      	b.n	8004b1c <_svfiprintf_r+0x2c>
 8004cc2:	ab03      	add	r3, sp, #12
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	462a      	mov	r2, r5
 8004cc8:	4b05      	ldr	r3, [pc, #20]	@ (8004ce0 <_svfiprintf_r+0x1f0>)
 8004cca:	a904      	add	r1, sp, #16
 8004ccc:	4638      	mov	r0, r7
 8004cce:	f000 f879 	bl	8004dc4 <_printf_i>
 8004cd2:	e7ed      	b.n	8004cb0 <_svfiprintf_r+0x1c0>
 8004cd4:	080057dc 	.word	0x080057dc
 8004cd8:	080057e6 	.word	0x080057e6
 8004cdc:	00000000 	.word	0x00000000
 8004ce0:	08004a39 	.word	0x08004a39
 8004ce4:	080057e2 	.word	0x080057e2

08004ce8 <_printf_common>:
 8004ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cec:	4616      	mov	r6, r2
 8004cee:	4698      	mov	r8, r3
 8004cf0:	688a      	ldr	r2, [r1, #8]
 8004cf2:	690b      	ldr	r3, [r1, #16]
 8004cf4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	bfb8      	it	lt
 8004cfc:	4613      	movlt	r3, r2
 8004cfe:	6033      	str	r3, [r6, #0]
 8004d00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d04:	4607      	mov	r7, r0
 8004d06:	460c      	mov	r4, r1
 8004d08:	b10a      	cbz	r2, 8004d0e <_printf_common+0x26>
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	6033      	str	r3, [r6, #0]
 8004d0e:	6823      	ldr	r3, [r4, #0]
 8004d10:	0699      	lsls	r1, r3, #26
 8004d12:	bf42      	ittt	mi
 8004d14:	6833      	ldrmi	r3, [r6, #0]
 8004d16:	3302      	addmi	r3, #2
 8004d18:	6033      	strmi	r3, [r6, #0]
 8004d1a:	6825      	ldr	r5, [r4, #0]
 8004d1c:	f015 0506 	ands.w	r5, r5, #6
 8004d20:	d106      	bne.n	8004d30 <_printf_common+0x48>
 8004d22:	f104 0a19 	add.w	sl, r4, #25
 8004d26:	68e3      	ldr	r3, [r4, #12]
 8004d28:	6832      	ldr	r2, [r6, #0]
 8004d2a:	1a9b      	subs	r3, r3, r2
 8004d2c:	42ab      	cmp	r3, r5
 8004d2e:	dc26      	bgt.n	8004d7e <_printf_common+0x96>
 8004d30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d34:	6822      	ldr	r2, [r4, #0]
 8004d36:	3b00      	subs	r3, #0
 8004d38:	bf18      	it	ne
 8004d3a:	2301      	movne	r3, #1
 8004d3c:	0692      	lsls	r2, r2, #26
 8004d3e:	d42b      	bmi.n	8004d98 <_printf_common+0xb0>
 8004d40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d44:	4641      	mov	r1, r8
 8004d46:	4638      	mov	r0, r7
 8004d48:	47c8      	blx	r9
 8004d4a:	3001      	adds	r0, #1
 8004d4c:	d01e      	beq.n	8004d8c <_printf_common+0xa4>
 8004d4e:	6823      	ldr	r3, [r4, #0]
 8004d50:	6922      	ldr	r2, [r4, #16]
 8004d52:	f003 0306 	and.w	r3, r3, #6
 8004d56:	2b04      	cmp	r3, #4
 8004d58:	bf02      	ittt	eq
 8004d5a:	68e5      	ldreq	r5, [r4, #12]
 8004d5c:	6833      	ldreq	r3, [r6, #0]
 8004d5e:	1aed      	subeq	r5, r5, r3
 8004d60:	68a3      	ldr	r3, [r4, #8]
 8004d62:	bf0c      	ite	eq
 8004d64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d68:	2500      	movne	r5, #0
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	bfc4      	itt	gt
 8004d6e:	1a9b      	subgt	r3, r3, r2
 8004d70:	18ed      	addgt	r5, r5, r3
 8004d72:	2600      	movs	r6, #0
 8004d74:	341a      	adds	r4, #26
 8004d76:	42b5      	cmp	r5, r6
 8004d78:	d11a      	bne.n	8004db0 <_printf_common+0xc8>
 8004d7a:	2000      	movs	r0, #0
 8004d7c:	e008      	b.n	8004d90 <_printf_common+0xa8>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	4652      	mov	r2, sl
 8004d82:	4641      	mov	r1, r8
 8004d84:	4638      	mov	r0, r7
 8004d86:	47c8      	blx	r9
 8004d88:	3001      	adds	r0, #1
 8004d8a:	d103      	bne.n	8004d94 <_printf_common+0xac>
 8004d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d94:	3501      	adds	r5, #1
 8004d96:	e7c6      	b.n	8004d26 <_printf_common+0x3e>
 8004d98:	18e1      	adds	r1, r4, r3
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	2030      	movs	r0, #48	@ 0x30
 8004d9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004da2:	4422      	add	r2, r4
 8004da4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004da8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004dac:	3302      	adds	r3, #2
 8004dae:	e7c7      	b.n	8004d40 <_printf_common+0x58>
 8004db0:	2301      	movs	r3, #1
 8004db2:	4622      	mov	r2, r4
 8004db4:	4641      	mov	r1, r8
 8004db6:	4638      	mov	r0, r7
 8004db8:	47c8      	blx	r9
 8004dba:	3001      	adds	r0, #1
 8004dbc:	d0e6      	beq.n	8004d8c <_printf_common+0xa4>
 8004dbe:	3601      	adds	r6, #1
 8004dc0:	e7d9      	b.n	8004d76 <_printf_common+0x8e>
	...

08004dc4 <_printf_i>:
 8004dc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dc8:	7e0f      	ldrb	r7, [r1, #24]
 8004dca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004dcc:	2f78      	cmp	r7, #120	@ 0x78
 8004dce:	4691      	mov	r9, r2
 8004dd0:	4680      	mov	r8, r0
 8004dd2:	460c      	mov	r4, r1
 8004dd4:	469a      	mov	sl, r3
 8004dd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004dda:	d807      	bhi.n	8004dec <_printf_i+0x28>
 8004ddc:	2f62      	cmp	r7, #98	@ 0x62
 8004dde:	d80a      	bhi.n	8004df6 <_printf_i+0x32>
 8004de0:	2f00      	cmp	r7, #0
 8004de2:	f000 80d1 	beq.w	8004f88 <_printf_i+0x1c4>
 8004de6:	2f58      	cmp	r7, #88	@ 0x58
 8004de8:	f000 80b8 	beq.w	8004f5c <_printf_i+0x198>
 8004dec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004df0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004df4:	e03a      	b.n	8004e6c <_printf_i+0xa8>
 8004df6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004dfa:	2b15      	cmp	r3, #21
 8004dfc:	d8f6      	bhi.n	8004dec <_printf_i+0x28>
 8004dfe:	a101      	add	r1, pc, #4	@ (adr r1, 8004e04 <_printf_i+0x40>)
 8004e00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e04:	08004e5d 	.word	0x08004e5d
 8004e08:	08004e71 	.word	0x08004e71
 8004e0c:	08004ded 	.word	0x08004ded
 8004e10:	08004ded 	.word	0x08004ded
 8004e14:	08004ded 	.word	0x08004ded
 8004e18:	08004ded 	.word	0x08004ded
 8004e1c:	08004e71 	.word	0x08004e71
 8004e20:	08004ded 	.word	0x08004ded
 8004e24:	08004ded 	.word	0x08004ded
 8004e28:	08004ded 	.word	0x08004ded
 8004e2c:	08004ded 	.word	0x08004ded
 8004e30:	08004f6f 	.word	0x08004f6f
 8004e34:	08004e9b 	.word	0x08004e9b
 8004e38:	08004f29 	.word	0x08004f29
 8004e3c:	08004ded 	.word	0x08004ded
 8004e40:	08004ded 	.word	0x08004ded
 8004e44:	08004f91 	.word	0x08004f91
 8004e48:	08004ded 	.word	0x08004ded
 8004e4c:	08004e9b 	.word	0x08004e9b
 8004e50:	08004ded 	.word	0x08004ded
 8004e54:	08004ded 	.word	0x08004ded
 8004e58:	08004f31 	.word	0x08004f31
 8004e5c:	6833      	ldr	r3, [r6, #0]
 8004e5e:	1d1a      	adds	r2, r3, #4
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	6032      	str	r2, [r6, #0]
 8004e64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e09c      	b.n	8004faa <_printf_i+0x1e6>
 8004e70:	6833      	ldr	r3, [r6, #0]
 8004e72:	6820      	ldr	r0, [r4, #0]
 8004e74:	1d19      	adds	r1, r3, #4
 8004e76:	6031      	str	r1, [r6, #0]
 8004e78:	0606      	lsls	r6, r0, #24
 8004e7a:	d501      	bpl.n	8004e80 <_printf_i+0xbc>
 8004e7c:	681d      	ldr	r5, [r3, #0]
 8004e7e:	e003      	b.n	8004e88 <_printf_i+0xc4>
 8004e80:	0645      	lsls	r5, r0, #25
 8004e82:	d5fb      	bpl.n	8004e7c <_printf_i+0xb8>
 8004e84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004e88:	2d00      	cmp	r5, #0
 8004e8a:	da03      	bge.n	8004e94 <_printf_i+0xd0>
 8004e8c:	232d      	movs	r3, #45	@ 0x2d
 8004e8e:	426d      	negs	r5, r5
 8004e90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e94:	4858      	ldr	r0, [pc, #352]	@ (8004ff8 <_printf_i+0x234>)
 8004e96:	230a      	movs	r3, #10
 8004e98:	e011      	b.n	8004ebe <_printf_i+0xfa>
 8004e9a:	6821      	ldr	r1, [r4, #0]
 8004e9c:	6833      	ldr	r3, [r6, #0]
 8004e9e:	0608      	lsls	r0, r1, #24
 8004ea0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ea4:	d402      	bmi.n	8004eac <_printf_i+0xe8>
 8004ea6:	0649      	lsls	r1, r1, #25
 8004ea8:	bf48      	it	mi
 8004eaa:	b2ad      	uxthmi	r5, r5
 8004eac:	2f6f      	cmp	r7, #111	@ 0x6f
 8004eae:	4852      	ldr	r0, [pc, #328]	@ (8004ff8 <_printf_i+0x234>)
 8004eb0:	6033      	str	r3, [r6, #0]
 8004eb2:	bf14      	ite	ne
 8004eb4:	230a      	movne	r3, #10
 8004eb6:	2308      	moveq	r3, #8
 8004eb8:	2100      	movs	r1, #0
 8004eba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004ebe:	6866      	ldr	r6, [r4, #4]
 8004ec0:	60a6      	str	r6, [r4, #8]
 8004ec2:	2e00      	cmp	r6, #0
 8004ec4:	db05      	blt.n	8004ed2 <_printf_i+0x10e>
 8004ec6:	6821      	ldr	r1, [r4, #0]
 8004ec8:	432e      	orrs	r6, r5
 8004eca:	f021 0104 	bic.w	r1, r1, #4
 8004ece:	6021      	str	r1, [r4, #0]
 8004ed0:	d04b      	beq.n	8004f6a <_printf_i+0x1a6>
 8004ed2:	4616      	mov	r6, r2
 8004ed4:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ed8:	fb03 5711 	mls	r7, r3, r1, r5
 8004edc:	5dc7      	ldrb	r7, [r0, r7]
 8004ede:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ee2:	462f      	mov	r7, r5
 8004ee4:	42bb      	cmp	r3, r7
 8004ee6:	460d      	mov	r5, r1
 8004ee8:	d9f4      	bls.n	8004ed4 <_printf_i+0x110>
 8004eea:	2b08      	cmp	r3, #8
 8004eec:	d10b      	bne.n	8004f06 <_printf_i+0x142>
 8004eee:	6823      	ldr	r3, [r4, #0]
 8004ef0:	07df      	lsls	r7, r3, #31
 8004ef2:	d508      	bpl.n	8004f06 <_printf_i+0x142>
 8004ef4:	6923      	ldr	r3, [r4, #16]
 8004ef6:	6861      	ldr	r1, [r4, #4]
 8004ef8:	4299      	cmp	r1, r3
 8004efa:	bfde      	ittt	le
 8004efc:	2330      	movle	r3, #48	@ 0x30
 8004efe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f02:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f06:	1b92      	subs	r2, r2, r6
 8004f08:	6122      	str	r2, [r4, #16]
 8004f0a:	f8cd a000 	str.w	sl, [sp]
 8004f0e:	464b      	mov	r3, r9
 8004f10:	aa03      	add	r2, sp, #12
 8004f12:	4621      	mov	r1, r4
 8004f14:	4640      	mov	r0, r8
 8004f16:	f7ff fee7 	bl	8004ce8 <_printf_common>
 8004f1a:	3001      	adds	r0, #1
 8004f1c:	d14a      	bne.n	8004fb4 <_printf_i+0x1f0>
 8004f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f22:	b004      	add	sp, #16
 8004f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f28:	6823      	ldr	r3, [r4, #0]
 8004f2a:	f043 0320 	orr.w	r3, r3, #32
 8004f2e:	6023      	str	r3, [r4, #0]
 8004f30:	4832      	ldr	r0, [pc, #200]	@ (8004ffc <_printf_i+0x238>)
 8004f32:	2778      	movs	r7, #120	@ 0x78
 8004f34:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f38:	6823      	ldr	r3, [r4, #0]
 8004f3a:	6831      	ldr	r1, [r6, #0]
 8004f3c:	061f      	lsls	r7, r3, #24
 8004f3e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f42:	d402      	bmi.n	8004f4a <_printf_i+0x186>
 8004f44:	065f      	lsls	r7, r3, #25
 8004f46:	bf48      	it	mi
 8004f48:	b2ad      	uxthmi	r5, r5
 8004f4a:	6031      	str	r1, [r6, #0]
 8004f4c:	07d9      	lsls	r1, r3, #31
 8004f4e:	bf44      	itt	mi
 8004f50:	f043 0320 	orrmi.w	r3, r3, #32
 8004f54:	6023      	strmi	r3, [r4, #0]
 8004f56:	b11d      	cbz	r5, 8004f60 <_printf_i+0x19c>
 8004f58:	2310      	movs	r3, #16
 8004f5a:	e7ad      	b.n	8004eb8 <_printf_i+0xf4>
 8004f5c:	4826      	ldr	r0, [pc, #152]	@ (8004ff8 <_printf_i+0x234>)
 8004f5e:	e7e9      	b.n	8004f34 <_printf_i+0x170>
 8004f60:	6823      	ldr	r3, [r4, #0]
 8004f62:	f023 0320 	bic.w	r3, r3, #32
 8004f66:	6023      	str	r3, [r4, #0]
 8004f68:	e7f6      	b.n	8004f58 <_printf_i+0x194>
 8004f6a:	4616      	mov	r6, r2
 8004f6c:	e7bd      	b.n	8004eea <_printf_i+0x126>
 8004f6e:	6833      	ldr	r3, [r6, #0]
 8004f70:	6825      	ldr	r5, [r4, #0]
 8004f72:	6961      	ldr	r1, [r4, #20]
 8004f74:	1d18      	adds	r0, r3, #4
 8004f76:	6030      	str	r0, [r6, #0]
 8004f78:	062e      	lsls	r6, r5, #24
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	d501      	bpl.n	8004f82 <_printf_i+0x1be>
 8004f7e:	6019      	str	r1, [r3, #0]
 8004f80:	e002      	b.n	8004f88 <_printf_i+0x1c4>
 8004f82:	0668      	lsls	r0, r5, #25
 8004f84:	d5fb      	bpl.n	8004f7e <_printf_i+0x1ba>
 8004f86:	8019      	strh	r1, [r3, #0]
 8004f88:	2300      	movs	r3, #0
 8004f8a:	6123      	str	r3, [r4, #16]
 8004f8c:	4616      	mov	r6, r2
 8004f8e:	e7bc      	b.n	8004f0a <_printf_i+0x146>
 8004f90:	6833      	ldr	r3, [r6, #0]
 8004f92:	1d1a      	adds	r2, r3, #4
 8004f94:	6032      	str	r2, [r6, #0]
 8004f96:	681e      	ldr	r6, [r3, #0]
 8004f98:	6862      	ldr	r2, [r4, #4]
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	4630      	mov	r0, r6
 8004f9e:	f7fb f927 	bl	80001f0 <memchr>
 8004fa2:	b108      	cbz	r0, 8004fa8 <_printf_i+0x1e4>
 8004fa4:	1b80      	subs	r0, r0, r6
 8004fa6:	6060      	str	r0, [r4, #4]
 8004fa8:	6863      	ldr	r3, [r4, #4]
 8004faa:	6123      	str	r3, [r4, #16]
 8004fac:	2300      	movs	r3, #0
 8004fae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fb2:	e7aa      	b.n	8004f0a <_printf_i+0x146>
 8004fb4:	6923      	ldr	r3, [r4, #16]
 8004fb6:	4632      	mov	r2, r6
 8004fb8:	4649      	mov	r1, r9
 8004fba:	4640      	mov	r0, r8
 8004fbc:	47d0      	blx	sl
 8004fbe:	3001      	adds	r0, #1
 8004fc0:	d0ad      	beq.n	8004f1e <_printf_i+0x15a>
 8004fc2:	6823      	ldr	r3, [r4, #0]
 8004fc4:	079b      	lsls	r3, r3, #30
 8004fc6:	d413      	bmi.n	8004ff0 <_printf_i+0x22c>
 8004fc8:	68e0      	ldr	r0, [r4, #12]
 8004fca:	9b03      	ldr	r3, [sp, #12]
 8004fcc:	4298      	cmp	r0, r3
 8004fce:	bfb8      	it	lt
 8004fd0:	4618      	movlt	r0, r3
 8004fd2:	e7a6      	b.n	8004f22 <_printf_i+0x15e>
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	4632      	mov	r2, r6
 8004fd8:	4649      	mov	r1, r9
 8004fda:	4640      	mov	r0, r8
 8004fdc:	47d0      	blx	sl
 8004fde:	3001      	adds	r0, #1
 8004fe0:	d09d      	beq.n	8004f1e <_printf_i+0x15a>
 8004fe2:	3501      	adds	r5, #1
 8004fe4:	68e3      	ldr	r3, [r4, #12]
 8004fe6:	9903      	ldr	r1, [sp, #12]
 8004fe8:	1a5b      	subs	r3, r3, r1
 8004fea:	42ab      	cmp	r3, r5
 8004fec:	dcf2      	bgt.n	8004fd4 <_printf_i+0x210>
 8004fee:	e7eb      	b.n	8004fc8 <_printf_i+0x204>
 8004ff0:	2500      	movs	r5, #0
 8004ff2:	f104 0619 	add.w	r6, r4, #25
 8004ff6:	e7f5      	b.n	8004fe4 <_printf_i+0x220>
 8004ff8:	080057ed 	.word	0x080057ed
 8004ffc:	080057fe 	.word	0x080057fe

08005000 <memmove>:
 8005000:	4288      	cmp	r0, r1
 8005002:	b510      	push	{r4, lr}
 8005004:	eb01 0402 	add.w	r4, r1, r2
 8005008:	d902      	bls.n	8005010 <memmove+0x10>
 800500a:	4284      	cmp	r4, r0
 800500c:	4623      	mov	r3, r4
 800500e:	d807      	bhi.n	8005020 <memmove+0x20>
 8005010:	1e43      	subs	r3, r0, #1
 8005012:	42a1      	cmp	r1, r4
 8005014:	d008      	beq.n	8005028 <memmove+0x28>
 8005016:	f811 2b01 	ldrb.w	r2, [r1], #1
 800501a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800501e:	e7f8      	b.n	8005012 <memmove+0x12>
 8005020:	4402      	add	r2, r0
 8005022:	4601      	mov	r1, r0
 8005024:	428a      	cmp	r2, r1
 8005026:	d100      	bne.n	800502a <memmove+0x2a>
 8005028:	bd10      	pop	{r4, pc}
 800502a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800502e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005032:	e7f7      	b.n	8005024 <memmove+0x24>

08005034 <_sbrk_r>:
 8005034:	b538      	push	{r3, r4, r5, lr}
 8005036:	4d06      	ldr	r5, [pc, #24]	@ (8005050 <_sbrk_r+0x1c>)
 8005038:	2300      	movs	r3, #0
 800503a:	4604      	mov	r4, r0
 800503c:	4608      	mov	r0, r1
 800503e:	602b      	str	r3, [r5, #0]
 8005040:	f7fc fc86 	bl	8001950 <_sbrk>
 8005044:	1c43      	adds	r3, r0, #1
 8005046:	d102      	bne.n	800504e <_sbrk_r+0x1a>
 8005048:	682b      	ldr	r3, [r5, #0]
 800504a:	b103      	cbz	r3, 800504e <_sbrk_r+0x1a>
 800504c:	6023      	str	r3, [r4, #0]
 800504e:	bd38      	pop	{r3, r4, r5, pc}
 8005050:	20000ddc 	.word	0x20000ddc

08005054 <_realloc_r>:
 8005054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005058:	4607      	mov	r7, r0
 800505a:	4614      	mov	r4, r2
 800505c:	460d      	mov	r5, r1
 800505e:	b921      	cbnz	r1, 800506a <_realloc_r+0x16>
 8005060:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005064:	4611      	mov	r1, r2
 8005066:	f7ff bc5b 	b.w	8004920 <_malloc_r>
 800506a:	b92a      	cbnz	r2, 8005078 <_realloc_r+0x24>
 800506c:	f7ff fbec 	bl	8004848 <_free_r>
 8005070:	4625      	mov	r5, r4
 8005072:	4628      	mov	r0, r5
 8005074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005078:	f000 f81a 	bl	80050b0 <_malloc_usable_size_r>
 800507c:	4284      	cmp	r4, r0
 800507e:	4606      	mov	r6, r0
 8005080:	d802      	bhi.n	8005088 <_realloc_r+0x34>
 8005082:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005086:	d8f4      	bhi.n	8005072 <_realloc_r+0x1e>
 8005088:	4621      	mov	r1, r4
 800508a:	4638      	mov	r0, r7
 800508c:	f7ff fc48 	bl	8004920 <_malloc_r>
 8005090:	4680      	mov	r8, r0
 8005092:	b908      	cbnz	r0, 8005098 <_realloc_r+0x44>
 8005094:	4645      	mov	r5, r8
 8005096:	e7ec      	b.n	8005072 <_realloc_r+0x1e>
 8005098:	42b4      	cmp	r4, r6
 800509a:	4622      	mov	r2, r4
 800509c:	4629      	mov	r1, r5
 800509e:	bf28      	it	cs
 80050a0:	4632      	movcs	r2, r6
 80050a2:	f7ff fbc3 	bl	800482c <memcpy>
 80050a6:	4629      	mov	r1, r5
 80050a8:	4638      	mov	r0, r7
 80050aa:	f7ff fbcd 	bl	8004848 <_free_r>
 80050ae:	e7f1      	b.n	8005094 <_realloc_r+0x40>

080050b0 <_malloc_usable_size_r>:
 80050b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050b4:	1f18      	subs	r0, r3, #4
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	bfbc      	itt	lt
 80050ba:	580b      	ldrlt	r3, [r1, r0]
 80050bc:	18c0      	addlt	r0, r0, r3
 80050be:	4770      	bx	lr

080050c0 <_init>:
 80050c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c2:	bf00      	nop
 80050c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050c6:	bc08      	pop	{r3}
 80050c8:	469e      	mov	lr, r3
 80050ca:	4770      	bx	lr

080050cc <_fini>:
 80050cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ce:	bf00      	nop
 80050d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050d2:	bc08      	pop	{r3}
 80050d4:	469e      	mov	lr, r3
 80050d6:	4770      	bx	lr
