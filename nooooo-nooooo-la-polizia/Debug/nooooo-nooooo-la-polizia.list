
nooooo-nooooo-la-polizia.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059b4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  08005b54  08005b54  00006b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f30  08005f30  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005f30  08005f30  00006f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f38  08005f38  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f38  08005f38  00006f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f3c  08005f3c  00006f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005f40  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006dc  2000005c  08005f9c  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000738  08005f9c  00007738  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a0ac  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d12  00000000  00000000  00011138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000800  00000000  00000000  00012e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000636  00000000  00000000  00013650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015dc4  00000000  00000000  00013c86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a715  00000000  00000000  00029a4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086620  00000000  00000000  0003415f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ba77f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002598  00000000  00000000  000ba7c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000bcd5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005b3c 	.word	0x08005b3c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08005b3c 	.word	0x08005b3c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <HAL_UARTEx_RxEventCallback>:
/* USER CODE BEGIN 0 */

/**
 * @brief Обработчик прерывания IDLE для UART
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	460b      	mov	r3, r1
 80005c6:	807b      	strh	r3, [r7, #2]
	// Вызываем обработчик IDLE из нашей библиотеки
	SecUart_RxIdleCallback(&secure_uart_ctx, huart);
 80005c8:	6879      	ldr	r1, [r7, #4]
 80005ca:	4803      	ldr	r0, [pc, #12]	@ (80005d8 <HAL_UARTEx_RxEventCallback+0x1c>)
 80005cc:	f000 fe26 	bl	800121c <SecUart_RxIdleCallback>
}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000330 	.word	0x20000330

080005dc <HAL_UART_TxCpltCallback>:

/**
 * @brief Обработчик завершения передачи по DMA
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b092      	sub	sp, #72	@ 0x48
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	// Добавляем логирование
	char debug[64];
	sprintf(debug, "HAL_UART_TxCpltCallback called for UART: 0x%lX\r\n", (uint32_t)huart->Instance);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	461a      	mov	r2, r3
 80005ea:	f107 0308 	add.w	r3, r7, #8
 80005ee:	4912      	ldr	r1, [pc, #72]	@ (8000638 <HAL_UART_TxCpltCallback+0x5c>)
 80005f0:	4618      	mov	r0, r3
 80005f2:	f004 fea1 	bl	8005338 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)debug, strlen(debug), 100);
 80005f6:	f107 0308 	add.w	r3, r7, #8
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff fdf0 	bl	80001e0 <strlen>
 8000600:	4603      	mov	r3, r0
 8000602:	b29a      	uxth	r2, r3
 8000604:	f107 0108 	add.w	r1, r7, #8
 8000608:	2364      	movs	r3, #100	@ 0x64
 800060a:	480c      	ldr	r0, [pc, #48]	@ (800063c <HAL_UART_TxCpltCallback+0x60>)
 800060c:	f003 fa20 	bl	8003a50 <HAL_UART_Transmit>

	if (huart == secure_uart_ctx.huart_tx) {
 8000610:	4b0b      	ldr	r3, [pc, #44]	@ (8000640 <HAL_UART_TxCpltCallback+0x64>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	429a      	cmp	r2, r3
 8000618:	d109      	bne.n	800062e <HAL_UART_TxCpltCallback+0x52>
		// Устанавливаем флаг завершения передачи
		secure_uart_ctx.tx_complete = true;
 800061a:	4b09      	ldr	r3, [pc, #36]	@ (8000640 <HAL_UART_TxCpltCallback+0x64>)
 800061c:	2201      	movs	r2, #1
 800061e:	f883 2231 	strb.w	r2, [r3, #561]	@ 0x231
		HAL_UART_Transmit(&huart2, (uint8_t*)"TX Complete flag set to true\r\n", 30, 100);
 8000622:	2364      	movs	r3, #100	@ 0x64
 8000624:	221e      	movs	r2, #30
 8000626:	4907      	ldr	r1, [pc, #28]	@ (8000644 <HAL_UART_TxCpltCallback+0x68>)
 8000628:	4804      	ldr	r0, [pc, #16]	@ (800063c <HAL_UART_TxCpltCallback+0x60>)
 800062a:	f003 fa11 	bl	8003a50 <HAL_UART_Transmit>
	}
}
 800062e:	bf00      	nop
 8000630:	3748      	adds	r7, #72	@ 0x48
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	08005b54 	.word	0x08005b54
 800063c:	200000c0 	.word	0x200000c0
 8000640:	20000330 	.word	0x20000330
 8000644:	08005b88 	.word	0x08005b88

08000648 <ProcessSecureUart>:

/**
 * @brief Обработка защищенного UART
 */
static void ProcessSecureUart(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b0b4      	sub	sp, #208	@ 0xd0
 800064c:	af02      	add	r7, sp, #8
	// Проверяем, есть ли принятые данные
	if (secure_uart_ctx.rx_complete) {
 800064e:	4b31      	ldr	r3, [pc, #196]	@ (8000714 <ProcessSecureUart+0xcc>)
 8000650:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2b00      	cmp	r3, #0
 8000658:	d058      	beq.n	800070c <ProcessSecureUart+0xc4>
		uint8_t rx_data[DATA_BUFFER_SIZE];
		uint8_t rx_size;
		SecUartMsgType rx_type;

		// Обрабатываем принятые данные
		SecUartError err = SecUart_ProcessRxData(&secure_uart_ctx, rx_data, &rx_size, &rx_type);
 800065a:	f107 03c5 	add.w	r3, r7, #197	@ 0xc5
 800065e:	f107 02c6 	add.w	r2, r7, #198	@ 0xc6
 8000662:	1d39      	adds	r1, r7, #4
 8000664:	482b      	ldr	r0, [pc, #172]	@ (8000714 <ProcessSecureUart+0xcc>)
 8000666:	f000 fcc7 	bl	8000ff8 <SecUart_ProcessRxData>
 800066a:	4603      	mov	r3, r0
 800066c:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

		if (err == SECUART_OK) {
 8000670:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8000674:	2b00      	cmp	r3, #0
 8000676:	d13b      	bne.n	80006f0 <ProcessSecureUart+0xa8>
			// Выводим расшифрованные данные в монитор
			char log_buffer[128];
			snprintf(log_buffer, sizeof(log_buffer),
 8000678:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 800067c:	461a      	mov	r2, r3
 800067e:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8000682:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	4613      	mov	r3, r2
 800068a:	4a23      	ldr	r2, [pc, #140]	@ (8000718 <ProcessSecureUart+0xd0>)
 800068c:	2180      	movs	r1, #128	@ 0x80
 800068e:	f004 fe1d 	bl	80052cc <sniprintf>
					"Received data [type=%u, size=%u]: ", rx_type, rx_size);
			SecUart_Log(&secure_uart_ctx, log_buffer);
 8000692:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000696:	4619      	mov	r1, r3
 8000698:	481e      	ldr	r0, [pc, #120]	@ (8000714 <ProcessSecureUart+0xcc>)
 800069a:	f000 fe07 	bl	80012ac <SecUart_Log>

			// Добавляем содержимое данных (только для текстовых данных)
			if (rx_type == SECUART_MSG_DATA) {
 800069e:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d132      	bne.n	800070c <ProcessSecureUart+0xc4>
				// Копируем данные в текстовый буфер для вывода
				memcpy(log_buffer, rx_data, rx_size);
 80006a6:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 80006aa:	461a      	mov	r2, r3
 80006ac:	1d39      	adds	r1, r7, #4
 80006ae:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80006b2:	4618      	mov	r0, r3
 80006b4:	f004 feb6 	bl	8005424 <memcpy>
				log_buffer[rx_size] = '\0';
 80006b8:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 80006bc:	33c8      	adds	r3, #200	@ 0xc8
 80006be:	443b      	add	r3, r7
 80006c0:	2200      	movs	r2, #0
 80006c2:	f803 2c84 	strb.w	r2, [r3, #-132]
				SecUart_Log(&secure_uart_ctx, log_buffer);
 80006c6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80006ca:	4619      	mov	r1, r3
 80006cc:	4811      	ldr	r0, [pc, #68]	@ (8000714 <ProcessSecureUart+0xcc>)
 80006ce:	f000 fded 	bl	80012ac <SecUart_Log>
				SecUart_Log(&secure_uart_ctx, "\r\n");
 80006d2:	4912      	ldr	r1, [pc, #72]	@ (800071c <ProcessSecureUart+0xd4>)
 80006d4:	480f      	ldr	r0, [pc, #60]	@ (8000714 <ProcessSecureUart+0xcc>)
 80006d6:	f000 fde9 	bl	80012ac <SecUart_Log>

				// Отправляем подтверждение с правильным размером
				uint8_t ack_data[1] = {0};
 80006da:	2300      	movs	r3, #0
 80006dc:	f887 30c4 	strb.w	r3, [r7, #196]	@ 0xc4
				// Размер = 1, поскольку мы отправляем только тип сообщения
				SecUart_Send(&secure_uart_ctx, ack_data, 1, SECUART_MSG_ACK);
 80006e0:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 80006e4:	2302      	movs	r3, #2
 80006e6:	2201      	movs	r2, #1
 80006e8:	480a      	ldr	r0, [pc, #40]	@ (8000714 <ProcessSecureUart+0xcc>)
 80006ea:	f000 fb6d 	bl	8000dc8 <SecUart_Send>
			snprintf(log_buffer, sizeof(log_buffer),
					"Received unknown message type: %u\r\n", rx_type);
			SecUart_Log(&secure_uart_ctx, log_buffer);
		}
	}
}
 80006ee:	e00d      	b.n	800070c <ProcessSecureUart+0xc4>
			snprintf(log_buffer, sizeof(log_buffer),
 80006f0:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 80006f4:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 80006f8:	4a09      	ldr	r2, [pc, #36]	@ (8000720 <ProcessSecureUart+0xd8>)
 80006fa:	2140      	movs	r1, #64	@ 0x40
 80006fc:	f004 fde6 	bl	80052cc <sniprintf>
			SecUart_Log(&secure_uart_ctx, log_buffer);
 8000700:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000704:	4619      	mov	r1, r3
 8000706:	4803      	ldr	r0, [pc, #12]	@ (8000714 <ProcessSecureUart+0xcc>)
 8000708:	f000 fdd0 	bl	80012ac <SecUart_Log>
}
 800070c:	bf00      	nop
 800070e:	37c8      	adds	r7, #200	@ 0xc8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000330 	.word	0x20000330
 8000718:	08005ba8 	.word	0x08005ba8
 800071c:	08005bcc 	.word	0x08005bcc
 8000720:	08005bd0 	.word	0x08005bd0

08000724 <SendPeriodicMessage>:

/**
 * @brief Отправка периодического сообщения
 */
static void SendPeriodicMessage(void) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b0ae      	sub	sp, #184	@ 0xb8
 8000728:	af04      	add	r7, sp, #16
	uint32_t current_time = HAL_GetTick();
 800072a:	f001 fda1 	bl	8002270 <HAL_GetTick>
 800072e:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4

	// Каждые 5 секунд выводим отладочную информацию для мониторинга состояния
	static uint32_t last_debug_time = 0;
	if (current_time - last_debug_time >= 5000) {
 8000732:	4b40      	ldr	r3, [pc, #256]	@ (8000834 <SendPeriodicMessage+0x110>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800073a:	1ad3      	subs	r3, r2, r3
 800073c:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000740:	4293      	cmp	r3, r2
 8000742:	d91f      	bls.n	8000784 <SendPeriodicMessage+0x60>
		char debug_buffer[128];
		snprintf(debug_buffer, sizeof(debug_buffer),
 8000744:	4b3c      	ldr	r3, [pc, #240]	@ (8000838 <SendPeriodicMessage+0x114>)
 8000746:	681b      	ldr	r3, [r3, #0]
				"DEBUG: Time=%lu, LastTX=%lu, TxComplete=%d, RxComplete=%d\r\n",
				current_time, last_tx_time,
				secure_uart_ctx.tx_complete, secure_uart_ctx.rx_complete);
 8000748:	4a3c      	ldr	r2, [pc, #240]	@ (800083c <SendPeriodicMessage+0x118>)
 800074a:	f892 2231 	ldrb.w	r2, [r2, #561]	@ 0x231
 800074e:	b2d2      	uxtb	r2, r2
		snprintf(debug_buffer, sizeof(debug_buffer),
 8000750:	4611      	mov	r1, r2
				secure_uart_ctx.tx_complete, secure_uart_ctx.rx_complete);
 8000752:	4a3a      	ldr	r2, [pc, #232]	@ (800083c <SendPeriodicMessage+0x118>)
 8000754:	f892 2230 	ldrb.w	r2, [r2, #560]	@ 0x230
 8000758:	b2d2      	uxtb	r2, r2
		snprintf(debug_buffer, sizeof(debug_buffer),
 800075a:	f107 0020 	add.w	r0, r7, #32
 800075e:	9202      	str	r2, [sp, #8]
 8000760:	9101      	str	r1, [sp, #4]
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000768:	4a35      	ldr	r2, [pc, #212]	@ (8000840 <SendPeriodicMessage+0x11c>)
 800076a:	2180      	movs	r1, #128	@ 0x80
 800076c:	f004 fdae 	bl	80052cc <sniprintf>
		SecUart_Log(&secure_uart_ctx, debug_buffer);
 8000770:	f107 0320 	add.w	r3, r7, #32
 8000774:	4619      	mov	r1, r3
 8000776:	4831      	ldr	r0, [pc, #196]	@ (800083c <SendPeriodicMessage+0x118>)
 8000778:	f000 fd98 	bl	80012ac <SecUart_Log>
		last_debug_time = current_time;
 800077c:	4a2d      	ldr	r2, [pc, #180]	@ (8000834 <SendPeriodicMessage+0x110>)
 800077e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000782:	6013      	str	r3, [r2, #0]
	}

	// Проверяем, прошло ли достаточно времени с последней отправки
	if (current_time - last_tx_time >= TX_PERIOD_MS) {
 8000784:	4b2c      	ldr	r3, [pc, #176]	@ (8000838 <SendPeriodicMessage+0x114>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	f247 522f 	movw	r2, #29999	@ 0x752f
 8000792:	4293      	cmp	r3, r2
 8000794:	d949      	bls.n	800082a <SendPeriodicMessage+0x106>
		// Если предыдущая передача не завершена, пробуем принудительно сбросить флаг
		if (!secure_uart_ctx.tx_complete) {
 8000796:	4b29      	ldr	r3, [pc, #164]	@ (800083c <SendPeriodicMessage+0x118>)
 8000798:	f893 3231 	ldrb.w	r3, [r3, #561]	@ 0x231
 800079c:	b2db      	uxtb	r3, r3
 800079e:	f083 0301 	eor.w	r3, r3, #1
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d007      	beq.n	80007b8 <SendPeriodicMessage+0x94>
			SecUart_Log(&secure_uart_ctx, "WARNING: Forcing tx_complete to true\r\n");
 80007a8:	4926      	ldr	r1, [pc, #152]	@ (8000844 <SendPeriodicMessage+0x120>)
 80007aa:	4824      	ldr	r0, [pc, #144]	@ (800083c <SendPeriodicMessage+0x118>)
 80007ac:	f000 fd7e 	bl	80012ac <SecUart_Log>
			secure_uart_ctx.tx_complete = true;
 80007b0:	4b22      	ldr	r3, [pc, #136]	@ (800083c <SendPeriodicMessage+0x118>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	f883 2231 	strb.w	r2, [r3, #561]	@ 0x231
		}

		// Формируем тестовое сообщение
		uint8_t msg_data[32];
		memset(msg_data, 0, sizeof(msg_data)); // Очищаем буфер
 80007b8:	463b      	mov	r3, r7
 80007ba:	2220      	movs	r2, #32
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f004 fdec 	bl	800539c <memset>

		// Используем безопасную функцию с проверкой длины
		uint8_t msg_size = snprintf((char*)msg_data, sizeof(msg_data) - 1,
				"Test message #%lu", secure_uart_ctx.packets_sent + 1);
 80007c4:	4b1d      	ldr	r3, [pc, #116]	@ (800083c <SendPeriodicMessage+0x118>)
 80007c6:	f8d3 32a0 	ldr.w	r3, [r3, #672]	@ 0x2a0
		uint8_t msg_size = snprintf((char*)msg_data, sizeof(msg_data) - 1,
 80007ca:	3301      	adds	r3, #1
 80007cc:	4638      	mov	r0, r7
 80007ce:	4a1e      	ldr	r2, [pc, #120]	@ (8000848 <SendPeriodicMessage+0x124>)
 80007d0:	211f      	movs	r1, #31
 80007d2:	f004 fd7b 	bl	80052cc <sniprintf>
 80007d6:	4603      	mov	r3, r0
 80007d8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

		// Добавляем 1 для учета типа сообщения
		SecUartError err = SecUart_Send(&secure_uart_ctx, msg_data, msg_size + 1, SECUART_MSG_DATA);
 80007dc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80007e0:	3301      	adds	r3, #1
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	4639      	mov	r1, r7
 80007e6:	2301      	movs	r3, #1
 80007e8:	4814      	ldr	r0, [pc, #80]	@ (800083c <SendPeriodicMessage+0x118>)
 80007ea:	f000 faed 	bl	8000dc8 <SecUart_Send>
 80007ee:	4603      	mov	r3, r0
 80007f0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2


		if (err == SECUART_OK) {
 80007f4:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d108      	bne.n	800080e <SendPeriodicMessage+0xea>
			// Обновляем время последней отправки
			last_tx_time = current_time;
 80007fc:	4a0e      	ldr	r2, [pc, #56]	@ (8000838 <SendPeriodicMessage+0x114>)
 80007fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000802:	6013      	str	r3, [r2, #0]
			SecUart_Log(&secure_uart_ctx, "INFO: Message sent successfully\r\n");
 8000804:	4911      	ldr	r1, [pc, #68]	@ (800084c <SendPeriodicMessage+0x128>)
 8000806:	480d      	ldr	r0, [pc, #52]	@ (800083c <SendPeriodicMessage+0x118>)
 8000808:	f000 fd50 	bl	80012ac <SecUart_Log>
			char err_buffer[64];
			snprintf(err_buffer, sizeof(err_buffer), "ERROR: Failed to send message, error=%d\r\n", err);
			SecUart_Log(&secure_uart_ctx, err_buffer);
		}
	}
}
 800080c:	e00d      	b.n	800082a <SendPeriodicMessage+0x106>
			snprintf(err_buffer, sizeof(err_buffer), "ERROR: Failed to send message, error=%d\r\n", err);
 800080e:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
 8000812:	f107 0020 	add.w	r0, r7, #32
 8000816:	4a0e      	ldr	r2, [pc, #56]	@ (8000850 <SendPeriodicMessage+0x12c>)
 8000818:	2140      	movs	r1, #64	@ 0x40
 800081a:	f004 fd57 	bl	80052cc <sniprintf>
			SecUart_Log(&secure_uart_ctx, err_buffer);
 800081e:	f107 0320 	add.w	r3, r7, #32
 8000822:	4619      	mov	r1, r3
 8000824:	4805      	ldr	r0, [pc, #20]	@ (800083c <SendPeriodicMessage+0x118>)
 8000826:	f000 fd41 	bl	80012ac <SecUart_Log>
}
 800082a:	bf00      	nop
 800082c:	37a8      	adds	r7, #168	@ 0xa8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200005e0 	.word	0x200005e0
 8000838:	200005dc 	.word	0x200005dc
 800083c:	20000330 	.word	0x20000330
 8000840:	08005bf4 	.word	0x08005bf4
 8000844:	08005c30 	.word	0x08005c30
 8000848:	08005c58 	.word	0x08005c58
 800084c:	08005c6c 	.word	0x08005c6c
 8000850:	08005c90 	.word	0x08005c90

08000854 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000854:	b5b0      	push	{r4, r5, r7, lr}
 8000856:	b08c      	sub	sp, #48	@ 0x30
 8000858:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800085a:	f001 fca3 	bl	80021a4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800085e:	f000 f86b 	bl	8000938 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000862:	f000 f99f 	bl	8000ba4 <MX_GPIO_Init>
	MX_DMA_Init();
 8000866:	f000 f94f 	bl	8000b08 <MX_DMA_Init>
	MX_USART2_UART_Init();
 800086a:	f000 f8f9 	bl	8000a60 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 800086e:	f000 f8cd 	bl	8000a0c <MX_USART1_UART_Init>
	MX_USART6_UART_Init();
 8000872:	f000 f91f 	bl	8000ab4 <MX_USART6_UART_Init>
	/* USER CODE BEGIN 2 */

	// Инициализация защищенного UART
	SecUartError err = SecUart_Init(&secure_uart_ctx, &huart1, &huart6, &huart2, secure_key);
 8000876:	4b25      	ldr	r3, [pc, #148]	@ (800090c <main+0xb8>)
 8000878:	9300      	str	r3, [sp, #0]
 800087a:	4b25      	ldr	r3, [pc, #148]	@ (8000910 <main+0xbc>)
 800087c:	4a25      	ldr	r2, [pc, #148]	@ (8000914 <main+0xc0>)
 800087e:	4926      	ldr	r1, [pc, #152]	@ (8000918 <main+0xc4>)
 8000880:	4826      	ldr	r0, [pc, #152]	@ (800091c <main+0xc8>)
 8000882:	f000 fa03 	bl	8000c8c <SecUart_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (err != SECUART_OK) {
 800088c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000890:	2b00      	cmp	r3, #0
 8000892:	d01c      	beq.n	80008ce <main+0x7a>
		// Ошибка инициализации
		char error_msg[] = "Failed to initialize secure UART!\r\n";
 8000894:	4b22      	ldr	r3, [pc, #136]	@ (8000920 <main+0xcc>)
 8000896:	463c      	mov	r4, r7
 8000898:	461d      	mov	r5, r3
 800089a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800089c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800089e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008a2:	682b      	ldr	r3, [r5, #0]
 80008a4:	6023      	str	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)error_msg, strlen(error_msg), 100);
 80008a6:	463b      	mov	r3, r7
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff fc99 	bl	80001e0 <strlen>
 80008ae:	4603      	mov	r3, r0
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	4639      	mov	r1, r7
 80008b4:	2364      	movs	r3, #100	@ 0x64
 80008b6:	4816      	ldr	r0, [pc, #88]	@ (8000910 <main+0xbc>)
 80008b8:	f003 f8ca 	bl	8003a50 <HAL_UART_Transmit>

		// Бесконечный цикл в случае ошибки
		while (1) {
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008bc:	2120      	movs	r1, #32
 80008be:	4819      	ldr	r0, [pc, #100]	@ (8000924 <main+0xd0>)
 80008c0:	f002 fbc3 	bl	800304a <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 80008c4:	20c8      	movs	r0, #200	@ 0xc8
 80008c6:	f001 fcdf 	bl	8002288 <HAL_Delay>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008ca:	bf00      	nop
 80008cc:	e7f6      	b.n	80008bc <main+0x68>
		}
	}

	// Отправляем приветственное сообщение в монитор
	SecUart_Log(&secure_uart_ctx, "\r\n=================================\r\n");
 80008ce:	4916      	ldr	r1, [pc, #88]	@ (8000928 <main+0xd4>)
 80008d0:	4812      	ldr	r0, [pc, #72]	@ (800091c <main+0xc8>)
 80008d2:	f000 fceb 	bl	80012ac <SecUart_Log>
	SecUart_Log(&secure_uart_ctx, "Secure UART Protocol Initialized\r\n");
 80008d6:	4915      	ldr	r1, [pc, #84]	@ (800092c <main+0xd8>)
 80008d8:	4810      	ldr	r0, [pc, #64]	@ (800091c <main+0xc8>)
 80008da:	f000 fce7 	bl	80012ac <SecUart_Log>
	SecUart_Log(&secure_uart_ctx, "=================================\r\n");
 80008de:	4914      	ldr	r1, [pc, #80]	@ (8000930 <main+0xdc>)
 80008e0:	480e      	ldr	r0, [pc, #56]	@ (800091c <main+0xc8>)
 80008e2:	f000 fce3 	bl	80012ac <SecUart_Log>

	// Инициализируем время последней отправки
	last_tx_time = HAL_GetTick();
 80008e6:	f001 fcc3 	bl	8002270 <HAL_GetTick>
 80008ea:	4603      	mov	r3, r0
 80008ec:	4a11      	ldr	r2, [pc, #68]	@ (8000934 <main+0xe0>)
 80008ee:	6013      	str	r3, [r2, #0]
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		// Обработка защищенного UART
		ProcessSecureUart();
 80008f0:	f7ff feaa 	bl	8000648 <ProcessSecureUart>

		// Отправка периодического сообщения
		SendPeriodicMessage();
 80008f4:	f7ff ff16 	bl	8000724 <SendPeriodicMessage>

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		// Мигаем светодиодом для индикации работы
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008f8:	2120      	movs	r1, #32
 80008fa:	480a      	ldr	r0, [pc, #40]	@ (8000924 <main+0xd0>)
 80008fc:	f002 fba5 	bl	800304a <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000900:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000904:	f001 fcc0 	bl	8002288 <HAL_Delay>
		ProcessSecureUart();
 8000908:	bf00      	nop
 800090a:	e7f1      	b.n	80008f0 <main+0x9c>
 800090c:	08005ecc 	.word	0x08005ecc
 8000910:	200000c0 	.word	0x200000c0
 8000914:	20000108 	.word	0x20000108
 8000918:	20000078 	.word	0x20000078
 800091c:	20000330 	.word	0x20000330
 8000920:	08005d2c 	.word	0x08005d2c
 8000924:	40020000 	.word	0x40020000
 8000928:	08005cbc 	.word	0x08005cbc
 800092c:	08005ce4 	.word	0x08005ce4
 8000930:	08005d08 	.word	0x08005d08
 8000934:	200005dc 	.word	0x200005dc

08000938 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b094      	sub	sp, #80	@ 0x50
 800093c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093e:	f107 0320 	add.w	r3, r7, #32
 8000942:	2230      	movs	r2, #48	@ 0x30
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f004 fd28 	bl	800539c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	4b28      	ldr	r3, [pc, #160]	@ (8000a04 <SystemClock_Config+0xcc>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000964:	4a27      	ldr	r2, [pc, #156]	@ (8000a04 <SystemClock_Config+0xcc>)
 8000966:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800096a:	6413      	str	r3, [r2, #64]	@ 0x40
 800096c:	4b25      	ldr	r3, [pc, #148]	@ (8000a04 <SystemClock_Config+0xcc>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000970:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000978:	2300      	movs	r3, #0
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	4b22      	ldr	r3, [pc, #136]	@ (8000a08 <SystemClock_Config+0xd0>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a21      	ldr	r2, [pc, #132]	@ (8000a08 <SystemClock_Config+0xd0>)
 8000982:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000986:	6013      	str	r3, [r2, #0]
 8000988:	4b1f      	ldr	r3, [pc, #124]	@ (8000a08 <SystemClock_Config+0xd0>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000994:	2302      	movs	r3, #2
 8000996:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000998:	2301      	movs	r3, #1
 800099a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800099c:	2310      	movs	r3, #16
 800099e:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a0:	2302      	movs	r3, #2
 80009a2:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009a4:	2300      	movs	r3, #0
 80009a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 80009a8:	2310      	movs	r3, #16
 80009aa:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80009ac:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80009b0:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009b2:	2304      	movs	r3, #4
 80009b4:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80009b6:	2304      	movs	r3, #4
 80009b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ba:	f107 0320 	add.w	r3, r7, #32
 80009be:	4618      	mov	r0, r3
 80009c0:	f002 fb5e 	bl	8003080 <HAL_RCC_OscConfig>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <SystemClock_Config+0x96>
	{
		Error_Handler();
 80009ca:	f000 f959 	bl	8000c80 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ce:	230f      	movs	r3, #15
 80009d0:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d2:	2302      	movs	r3, #2
 80009d4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009de:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	2102      	movs	r1, #2
 80009ea:	4618      	mov	r0, r3
 80009ec:	f002 fdc0 	bl	8003570 <HAL_RCC_ClockConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80009f6:	f000 f943 	bl	8000c80 <Error_Handler>
	}
}
 80009fa:	bf00      	nop
 80009fc:	3750      	adds	r7, #80	@ 0x50
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40007000 	.word	0x40007000

08000a0c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000a10:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a12:	4a12      	ldr	r2, [pc, #72]	@ (8000a5c <MX_USART1_UART_Init+0x50>)
 8000a14:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000a16:	4b10      	ldr	r3, [pc, #64]	@ (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a1c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a42:	4805      	ldr	r0, [pc, #20]	@ (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a44:	f002 ffb4 	bl	80039b0 <HAL_UART_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8000a4e:	f000 f917 	bl	8000c80 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000078 	.word	0x20000078
 8000a5c:	40011000 	.word	0x40011000

08000a60 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000a64:	4b11      	ldr	r3, [pc, #68]	@ (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a66:	4a12      	ldr	r2, [pc, #72]	@ (8000ab0 <MX_USART2_UART_Init+0x50>)
 8000a68:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000a6a:	4b10      	ldr	r3, [pc, #64]	@ (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a70:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	@ (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX;
 8000a84:	4b09      	ldr	r3, [pc, #36]	@ (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a86:	2208      	movs	r2, #8
 8000a88:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	@ (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a90:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a96:	4805      	ldr	r0, [pc, #20]	@ (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a98:	f002 ff8a 	bl	80039b0 <HAL_UART_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8000aa2:	f000 f8ed 	bl	8000c80 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200000c0 	.word	0x200000c0
 8000ab0:	40004400 	.word	0x40004400

08000ab4 <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <MX_USART6_UART_Init+0x4c>)
 8000aba:	4a12      	ldr	r2, [pc, #72]	@ (8000b04 <MX_USART6_UART_Init+0x50>)
 8000abc:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8000abe:	4b10      	ldr	r3, [pc, #64]	@ (8000b00 <MX_USART6_UART_Init+0x4c>)
 8000ac0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ac4:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <MX_USART6_UART_Init+0x4c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <MX_USART6_UART_Init+0x4c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b00 <MX_USART6_UART_Init+0x4c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <MX_USART6_UART_Init+0x4c>)
 8000ada:	220c      	movs	r2, #12
 8000adc:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ade:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <MX_USART6_UART_Init+0x4c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <MX_USART6_UART_Init+0x4c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK)
 8000aea:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <MX_USART6_UART_Init+0x4c>)
 8000aec:	f002 ff60 	bl	80039b0 <HAL_UART_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_USART6_UART_Init+0x46>
	{
		Error_Handler();
 8000af6:	f000 f8c3 	bl	8000c80 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000108 	.word	0x20000108
 8000b04:	40011400 	.word	0x40011400

08000b08 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	4b23      	ldr	r3, [pc, #140]	@ (8000ba0 <MX_DMA_Init+0x98>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	4a22      	ldr	r2, [pc, #136]	@ (8000ba0 <MX_DMA_Init+0x98>)
 8000b18:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1e:	4b20      	ldr	r3, [pc, #128]	@ (8000ba0 <MX_DMA_Init+0x98>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba0 <MX_DMA_Init+0x98>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	4a1b      	ldr	r2, [pc, #108]	@ (8000ba0 <MX_DMA_Init+0x98>)
 8000b34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ba0 <MX_DMA_Init+0x98>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2011      	movs	r0, #17
 8000b4c:	f001 fc9b 	bl	8002486 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000b50:	2011      	movs	r0, #17
 8000b52:	f001 fcb4 	bl	80024be <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2100      	movs	r1, #0
 8000b5a:	2039      	movs	r0, #57	@ 0x39
 8000b5c:	f001 fc93 	bl	8002486 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000b60:	2039      	movs	r0, #57	@ 0x39
 8000b62:	f001 fcac 	bl	80024be <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2100      	movs	r1, #0
 8000b6a:	203a      	movs	r0, #58	@ 0x3a
 8000b6c:	f001 fc8b 	bl	8002486 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000b70:	203a      	movs	r0, #58	@ 0x3a
 8000b72:	f001 fca4 	bl	80024be <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2100      	movs	r1, #0
 8000b7a:	2045      	movs	r0, #69	@ 0x45
 8000b7c:	f001 fc83 	bl	8002486 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000b80:	2045      	movs	r0, #69	@ 0x45
 8000b82:	f001 fc9c 	bl	80024be <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2100      	movs	r1, #0
 8000b8a:	2046      	movs	r0, #70	@ 0x46
 8000b8c:	f001 fc7b 	bl	8002486 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000b90:	2046      	movs	r0, #70	@ 0x46
 8000b92:	f001 fc94 	bl	80024be <HAL_NVIC_EnableIRQ>

}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40023800 	.word	0x40023800

08000ba4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	@ 0x28
 8000ba8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	4b2d      	ldr	r3, [pc, #180]	@ (8000c74 <MX_GPIO_Init+0xd0>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	4a2c      	ldr	r2, [pc, #176]	@ (8000c74 <MX_GPIO_Init+0xd0>)
 8000bc4:	f043 0304 	orr.w	r3, r3, #4
 8000bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bca:	4b2a      	ldr	r3, [pc, #168]	@ (8000c74 <MX_GPIO_Init+0xd0>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	f003 0304 	and.w	r3, r3, #4
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	4b26      	ldr	r3, [pc, #152]	@ (8000c74 <MX_GPIO_Init+0xd0>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	4a25      	ldr	r2, [pc, #148]	@ (8000c74 <MX_GPIO_Init+0xd0>)
 8000be0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be6:	4b23      	ldr	r3, [pc, #140]	@ (8000c74 <MX_GPIO_Init+0xd0>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c74 <MX_GPIO_Init+0xd0>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	4a1e      	ldr	r2, [pc, #120]	@ (8000c74 <MX_GPIO_Init+0xd0>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c02:	4b1c      	ldr	r3, [pc, #112]	@ (8000c74 <MX_GPIO_Init+0xd0>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	4b18      	ldr	r3, [pc, #96]	@ (8000c74 <MX_GPIO_Init+0xd0>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	4a17      	ldr	r2, [pc, #92]	@ (8000c74 <MX_GPIO_Init+0xd0>)
 8000c18:	f043 0302 	orr.w	r3, r3, #2
 8000c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1e:	4b15      	ldr	r3, [pc, #84]	@ (8000c74 <MX_GPIO_Init+0xd0>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2120      	movs	r1, #32
 8000c2e:	4812      	ldr	r0, [pc, #72]	@ (8000c78 <MX_GPIO_Init+0xd4>)
 8000c30:	f002 f9f2 	bl	8003018 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000c34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c38:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c3a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c3e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	4619      	mov	r1, r3
 8000c4a:	480c      	ldr	r0, [pc, #48]	@ (8000c7c <MX_GPIO_Init+0xd8>)
 8000c4c:	f002 f860 	bl	8002d10 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000c50:	2320      	movs	r3, #32
 8000c52:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	4619      	mov	r1, r3
 8000c66:	4804      	ldr	r0, [pc, #16]	@ (8000c78 <MX_GPIO_Init+0xd4>)
 8000c68:	f002 f852 	bl	8002d10 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000c6c:	bf00      	nop
 8000c6e:	3728      	adds	r7, #40	@ 0x28
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020000 	.word	0x40020000
 8000c7c:	40020800 	.word	0x40020800

08000c80 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c84:	b672      	cpsid	i
}
 8000c86:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <Error_Handler+0x8>

08000c8c <SecUart_Init>:
 */
SecUartError SecUart_Init(SecUartContext *ctx,
		UART_HandleTypeDef *huart_tx,
		UART_HandleTypeDef *huart_rx,
		UART_HandleTypeDef *huart_monitor,
		const uint32_t *key) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
 8000c98:	603b      	str	r3, [r7, #0]

	if (ctx == NULL || huart_tx == NULL || huart_rx == NULL || key == NULL) {
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d008      	beq.n	8000cb2 <SecUart_Init+0x26>
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d005      	beq.n	8000cb2 <SecUart_Init+0x26>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d002      	beq.n	8000cb2 <SecUart_Init+0x26>
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d101      	bne.n	8000cb6 <SecUart_Init+0x2a>
		return SECUART_ERR_INVALID_SOF;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e040      	b.n	8000d38 <SecUart_Init+0xac>
	}

	// Инициализация интерфейсов UART
	ctx->huart_tx = huart_tx;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	68ba      	ldr	r2, [r7, #8]
 8000cba:	601a      	str	r2, [r3, #0]
	ctx->huart_rx = huart_rx;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	605a      	str	r2, [r3, #4]
	ctx->huart_monitor = huart_monitor;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	683a      	ldr	r2, [r7, #0]
 8000cc6:	609a      	str	r2, [r3, #8]

	// Инициализация счетчиков и флагов
	ctx->tx_counter = 0;
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
	ctx->rx_counter = 0;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
	ctx->rx_complete = false;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230
	ctx->tx_complete = true;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f883 2231 	strb.w	r2, [r3, #561]	@ 0x231
	ctx->packets_sent = 0;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	2200      	movs	r2, #0
 8000cec:	f8c3 22a0 	str.w	r2, [r3, #672]	@ 0x2a0
	ctx->packets_received = 0;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
	ctx->errors_detected = 0;
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f8c3 22a8 	str.w	r2, [r3, #680]	@ 0x2a8

	// Инициализация контекста шифрования
	speck_init(&ctx->cipher_ctx, key);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8000d06:	69b9      	ldr	r1, [r7, #24]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f000 fda9 	bl	8001860 <speck_init>

	// Очистка буферов
	memset(ctx->tx_buffer, 0, SECUART_BUFFER_SIZE);
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	330c      	adds	r3, #12
 8000d12:	f240 120d 	movw	r2, #269	@ 0x10d
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f004 fb3f 	bl	800539c <memset>
	memset(ctx->rx_buffer, 0, SECUART_BUFFER_SIZE);
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	f203 1319 	addw	r3, r3, #281	@ 0x119
 8000d24:	f240 120d 	movw	r2, #269	@ 0x10d
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f004 fb36 	bl	800539c <memset>

	// Запуск приема данных по DMA
	return SecUart_StartReceive(ctx);
 8000d30:	68f8      	ldr	r0, [r7, #12]
 8000d32:	f000 f805 	bl	8000d40 <SecUart_StartReceive>
 8000d36:	4603      	mov	r3, r0
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <SecUart_StartReceive>:

/**
 * @brief Запуск приема по DMA
 */
SecUartError SecUart_StartReceive(SecUartContext *ctx) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	if (ctx == NULL || ctx->huart_rx == NULL) {
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d003      	beq.n	8000d56 <SecUart_StartReceive+0x16>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d101      	bne.n	8000d5a <SecUart_StartReceive+0x1a>
		return SECUART_ERR_INVALID_SOF;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e02f      	b.n	8000dba <SecUart_StartReceive+0x7a>
	}

	// Сначала останавливаем любой текущий прием
	HAL_UART_AbortReceive(ctx->huart_rx);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f002 ffff 	bl	8003d62 <HAL_UART_AbortReceive>

	// Сброс флага завершения приема
	ctx->rx_complete = false;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230

	// Очистка буфера приема
	memset(ctx->rx_buffer, 0, SECUART_BUFFER_SIZE);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f203 1319 	addw	r3, r3, #281	@ 0x119
 8000d72:	f240 120d 	movw	r2, #269	@ 0x10d
 8000d76:	2100      	movs	r1, #0
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f004 fb0f 	bl	800539c <memset>

	// Запуск приема данных по DMA до прерывания IDLE
	if (HAL_UART_Receive_DMA(ctx->huart_rx, ctx->rx_buffer, SECUART_BUFFER_SIZE) != HAL_OK) {
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6858      	ldr	r0, [r3, #4]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f203 1319 	addw	r3, r3, #281	@ 0x119
 8000d88:	f240 120d 	movw	r2, #269	@ 0x10d
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f002 ff5b 	bl	8003c48 <HAL_UART_Receive_DMA>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <SecUart_StartReceive+0x5c>
		return SECUART_ERR_TIMEOUT;
 8000d98:	2305      	movs	r3, #5
 8000d9a:	e00e      	b.n	8000dba <SecUart_StartReceive+0x7a>
	}

	// Включение прерывания IDLE
	__HAL_UART_ENABLE_IT(ctx->huart_rx, UART_IT_IDLE);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	68da      	ldr	r2, [r3, #12]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f042 0210 	orr.w	r2, r2, #16
 8000dae:	60da      	str	r2, [r3, #12]

	// Отладочное сообщение
	SecUart_Log(ctx, "DMA receive restarted\r\n");
 8000db0:	4904      	ldr	r1, [pc, #16]	@ (8000dc4 <SecUart_StartReceive+0x84>)
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f000 fa7a 	bl	80012ac <SecUart_Log>

	return SECUART_OK;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	08005d50 	.word	0x08005d50

08000dc8 <SecUart_Send>:
 * @brief Отправка данных через защищенный UART
 */
SecUartError SecUart_Send(SecUartContext *ctx,
		const uint8_t *data,
		uint8_t size,
		SecUartMsgType msg_type) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b0a8      	sub	sp, #160	@ 0xa0
 8000dcc:	af02      	add	r7, sp, #8
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	71fb      	strb	r3, [r7, #7]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	71bb      	strb	r3, [r7, #6]

	if (ctx == NULL || data == NULL || size == 0 || size > SECUART_MAX_DATA_SIZE) {
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d005      	beq.n	8000df0 <SecUart_Send+0x28>
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d002      	beq.n	8000df0 <SecUart_Send+0x28>
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d101      	bne.n	8000df4 <SecUart_Send+0x2c>
		return SECUART_ERR_INVALID_SOF;
 8000df0:	2301      	movs	r3, #1
 8000df2:	e088      	b.n	8000f06 <SecUart_Send+0x13e>
	}

	// Проверяем, завершена ли предыдущая передача
	if (!ctx->tx_complete) {
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f893 3231 	ldrb.w	r3, [r3, #561]	@ 0x231
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	f083 0301 	eor.w	r3, r3, #1
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d030      	beq.n	8000e68 <SecUart_Send+0xa0>
		// Добавляем лог для отладки
		SecUart_Log(ctx, "TX busy, tx_complete is false\r\n");
 8000e06:	4942      	ldr	r1, [pc, #264]	@ (8000f10 <SecUart_Send+0x148>)
 8000e08:	68f8      	ldr	r0, [r7, #12]
 8000e0a:	f000 fa4f 	bl	80012ac <SecUart_Log>

		// Проверяем статус UART и DMA
		uint32_t uart_status = ctx->huart_tx->gState;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		char status_buf[64];
		snprintf(status_buf, sizeof(status_buf),
 8000e1c:	f107 0010 	add.w	r0, r7, #16
 8000e20:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000e24:	4a3b      	ldr	r2, [pc, #236]	@ (8000f14 <SecUart_Send+0x14c>)
 8000e26:	2140      	movs	r1, #64	@ 0x40
 8000e28:	f004 fa50 	bl	80052cc <sniprintf>
				"UART State: 0x%lX\r\n", uart_status);
		SecUart_Log(ctx, status_buf);
 8000e2c:	f107 0310 	add.w	r3, r7, #16
 8000e30:	4619      	mov	r1, r3
 8000e32:	68f8      	ldr	r0, [r7, #12]
 8000e34:	f000 fa3a 	bl	80012ac <SecUart_Log>

		// Если UART находится в состоянии ошибки или неизвестном состоянии, сбрасываем его
		if (uart_status != HAL_UART_STATE_READY && uart_status != HAL_UART_STATE_BUSY_TX) {
 8000e38:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000e3c:	2b20      	cmp	r3, #32
 8000e3e:	d011      	beq.n	8000e64 <SecUart_Send+0x9c>
 8000e40:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000e44:	2b21      	cmp	r3, #33	@ 0x21
 8000e46:	d00d      	beq.n	8000e64 <SecUart_Send+0x9c>
			SecUart_Log(ctx, "Resetting UART TX state\r\n");
 8000e48:	4933      	ldr	r1, [pc, #204]	@ (8000f18 <SecUart_Send+0x150>)
 8000e4a:	68f8      	ldr	r0, [r7, #12]
 8000e4c:	f000 fa2e 	bl	80012ac <SecUart_Log>
			HAL_UART_AbortTransmit(ctx->huart_tx);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f002 ff1c 	bl	8003c92 <HAL_UART_AbortTransmit>
			ctx->tx_complete = true;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	f883 2231 	strb.w	r2, [r3, #561]	@ 0x231
 8000e62:	e001      	b.n	8000e68 <SecUart_Send+0xa0>
		} else {
			return SECUART_ERR_TIMEOUT;
 8000e64:	2305      	movs	r3, #5
 8000e66:	e04e      	b.n	8000f06 <SecUart_Send+0x13e>
		}
	}

	// Подготовка фрейма для отправки
	SecUart_PrepareFrame(ctx, data, size, msg_type);
 8000e68:	79bb      	ldrb	r3, [r7, #6]
 8000e6a:	79fa      	ldrb	r2, [r7, #7]
 8000e6c:	68b9      	ldr	r1, [r7, #8]
 8000e6e:	68f8      	ldr	r0, [r7, #12]
 8000e70:	f000 f858 	bl	8000f24 <SecUart_PrepareFrame>

	// Общий размер фрейма: заголовок + размер данных + MAC
	uint16_t frame_size = SECUART_HEADER_SIZE + size + SECUART_MAC_SIZE;
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	330e      	adds	r3, #14
 8000e7a:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

	// Сброс флага завершения передачи
	ctx->tx_complete = false;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	2200      	movs	r2, #0
 8000e82:	f883 2231 	strb.w	r2, [r3, #561]	@ 0x231

	// Отправка данных по DMA
	HAL_StatusTypeDef hal_status = HAL_UART_Transmit_DMA(ctx->huart_tx, ctx->tx_buffer, frame_size);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	6818      	ldr	r0, [r3, #0]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	330c      	adds	r3, #12
 8000e8e:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8000e92:	4619      	mov	r1, r3
 8000e94:	f002 fe68 	bl	8003b68 <HAL_UART_Transmit_DMA>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
	if (hal_status != HAL_OK) {
 8000e9e:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d013      	beq.n	8000ece <SecUart_Send+0x106>
		// Выводим код ошибки HAL для диагностики
		char err_buf[64];
		snprintf(err_buf, sizeof(err_buf),
 8000ea6:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 8000eaa:	f107 0010 	add.w	r0, r7, #16
 8000eae:	4a1b      	ldr	r2, [pc, #108]	@ (8000f1c <SecUart_Send+0x154>)
 8000eb0:	2140      	movs	r1, #64	@ 0x40
 8000eb2:	f004 fa0b 	bl	80052cc <sniprintf>
				"HAL TX Error: %d\r\n", hal_status);
		SecUart_Log(ctx, err_buf);
 8000eb6:	f107 0310 	add.w	r3, r7, #16
 8000eba:	4619      	mov	r1, r3
 8000ebc:	68f8      	ldr	r0, [r7, #12]
 8000ebe:	f000 f9f5 	bl	80012ac <SecUart_Log>

		ctx->tx_complete = true;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	f883 2231 	strb.w	r2, [r3, #561]	@ 0x231
		return SECUART_ERR_TIMEOUT;
 8000eca:	2305      	movs	r3, #5
 8000ecc:	e01b      	b.n	8000f06 <SecUart_Send+0x13e>
	}

	// Увеличиваем счетчик отправленных пакетов
	ctx->packets_sent++;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f8d3 32a0 	ldr.w	r3, [r3, #672]	@ 0x2a0
 8000ed4:	1c5a      	adds	r2, r3, #1
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f8c3 22a0 	str.w	r2, [r3, #672]	@ 0x2a0

	// Отладочное сообщение в монитор
	char log_buffer[64];
	snprintf(log_buffer, sizeof(log_buffer),
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f8d3 1228 	ldr.w	r1, [r3, #552]	@ 0x228
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	79ba      	ldrb	r2, [r7, #6]
 8000ee6:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000eea:	9201      	str	r2, [sp, #4]
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	460b      	mov	r3, r1
 8000ef0:	4a0b      	ldr	r2, [pc, #44]	@ (8000f20 <SecUart_Send+0x158>)
 8000ef2:	2140      	movs	r1, #64	@ 0x40
 8000ef4:	f004 f9ea 	bl	80052cc <sniprintf>
			"TX: Counter=%lu, Size=%u, Type=%u\r\n",
			ctx->tx_counter, size, msg_type);
	SecUart_Log(ctx, log_buffer);
 8000ef8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000efc:	4619      	mov	r1, r3
 8000efe:	68f8      	ldr	r0, [r7, #12]
 8000f00:	f000 f9d4 	bl	80012ac <SecUart_Log>

	return SECUART_OK;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3798      	adds	r7, #152	@ 0x98
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	08005d68 	.word	0x08005d68
 8000f14:	08005d88 	.word	0x08005d88
 8000f18:	08005d9c 	.word	0x08005d9c
 8000f1c:	08005db8 	.word	0x08005db8
 8000f20:	08005dcc 	.word	0x08005dcc

08000f24 <SecUart_PrepareFrame>:

/**
 * @brief Подготовка фрейма для отправки
 */
static void SecUart_PrepareFrame(SecUartContext *ctx, const uint8_t *data, uint8_t size, SecUartMsgType msg_type) {
 8000f24:	b590      	push	{r4, r7, lr}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	4611      	mov	r1, r2
 8000f30:	461a      	mov	r2, r3
 8000f32:	460b      	mov	r3, r1
 8000f34:	71fb      	strb	r3, [r7, #7]
 8000f36:	4613      	mov	r3, r2
 8000f38:	71bb      	strb	r3, [r7, #6]
	// Очистка буфера передачи
	memset(ctx->tx_buffer, 0, SECUART_BUFFER_SIZE);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	330c      	adds	r3, #12
 8000f3e:	f240 120d 	movw	r2, #269	@ 0x10d
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f004 fa29 	bl	800539c <memset>

	// Заполнение заголовка
	ctx->tx_buffer[0] = SECUART_START_BYTE;                  // SOF
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	22aa      	movs	r2, #170	@ 0xaa
 8000f4e:	731a      	strb	r2, [r3, #12]
	ctx->tx_counter++;                                       // Увеличиваем счетчик
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8000f56:	1c5a      	adds	r2, r3, #1
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
	ctx->tx_buffer[1] = (ctx->tx_counter >> 24) & 0xFF;      // CNT (MSB)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8000f64:	0e1b      	lsrs	r3, r3, #24
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	735a      	strb	r2, [r3, #13]
	ctx->tx_buffer[2] = (ctx->tx_counter >> 16) & 0xFF;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	739a      	strb	r2, [r3, #14]
	ctx->tx_buffer[3] = (ctx->tx_counter >> 8) & 0xFF;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8000f80:	0a1b      	lsrs	r3, r3, #8
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	73da      	strb	r2, [r3, #15]
	ctx->tx_buffer[4] = ctx->tx_counter & 0xFF;              // CNT (LSB)
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	741a      	strb	r2, [r3, #16]
	ctx->tx_buffer[5] = size;                                // LEN
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	79fa      	ldrb	r2, [r7, #7]
 8000f98:	745a      	strb	r2, [r3, #17]

	// Копирование данных с учетом типа сообщения
	ctx->tx_buffer[SECUART_HEADER_SIZE] = msg_type;          // Тип сообщения
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	79ba      	ldrb	r2, [r7, #6]
 8000f9e:	749a      	strb	r2, [r3, #18]

	// Убедимся, что мы не выходим за границы размера, особенно для ACK
	if (size > 1) {
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d908      	bls.n	8000fb8 <SecUart_PrepareFrame+0x94>
		memcpy(ctx->tx_buffer + SECUART_HEADER_SIZE + 1, data, size - 1);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	330c      	adds	r3, #12
 8000faa:	1dd8      	adds	r0, r3, #7
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	68b9      	ldr	r1, [r7, #8]
 8000fb4:	f004 fa36 	bl	8005424 <memcpy>
	}
	// Шифрование данных
	SecUart_EncryptBlock(&ctx->cipher_ctx, ctx->tx_buffer + SECUART_HEADER_SIZE, size);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f503 700d 	add.w	r0, r3, #564	@ 0x234
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	330c      	adds	r3, #12
 8000fc2:	3306      	adds	r3, #6
 8000fc4:	79fa      	ldrb	r2, [r7, #7]
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f000 f990 	bl	80012ec <SecUart_EncryptBlock>

	// Вычисление MAC для всего фрейма (заголовок + зашифрованные данные)
	SecUart_CalculateMAC(&ctx->cipher_ctx, ctx->tx_buffer, SECUART_HEADER_SIZE + size,
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f503 700d 	add.w	r0, r3, #564	@ 0x234
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f103 010c 	add.w	r1, r3, #12
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	3306      	adds	r3, #6
 8000fdc:	b2dc      	uxtb	r4, r3
			ctx->tx_buffer + SECUART_HEADER_SIZE + size);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f103 020c 	add.w	r2, r3, #12
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	3306      	adds	r3, #6
	SecUart_CalculateMAC(&ctx->cipher_ctx, ctx->tx_buffer, SECUART_HEADER_SIZE + size,
 8000fe8:	4413      	add	r3, r2
 8000fea:	4622      	mov	r2, r4
 8000fec:	f000 fbe6 	bl	80017bc <SecUart_CalculateMAC>
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd90      	pop	{r4, r7, pc}

08000ff8 <SecUart_ProcessRxData>:
 * @brief Обработка принятых данных
 */
SecUartError SecUart_ProcessRxData(SecUartContext *ctx,
		uint8_t *data,
		uint8_t *size,
		SecUartMsgType *msg_type) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b0aa      	sub	sp, #168	@ 0xa8
 8000ffc:	af02      	add	r7, sp, #8
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	603b      	str	r3, [r7, #0]

	if (ctx == NULL || data == NULL || size == NULL || msg_type == NULL) {
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d008      	beq.n	800101e <SecUart_ProcessRxData+0x26>
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d005      	beq.n	800101e <SecUart_ProcessRxData+0x26>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d002      	beq.n	800101e <SecUart_ProcessRxData+0x26>
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d101      	bne.n	8001022 <SecUart_ProcessRxData+0x2a>
		return SECUART_ERR_INVALID_SOF;
 800101e:	2301      	movs	r3, #1
 8001020:	e0ed      	b.n	80011fe <SecUart_ProcessRxData+0x206>
	}

	// Проверяем флаг завершения приема
	if (!ctx->rx_complete) {
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 8001028:	b2db      	uxtb	r3, r3
 800102a:	f083 0301 	eor.w	r3, r3, #1
 800102e:	b2db      	uxtb	r3, r3
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <SecUart_ProcessRxData+0x40>
		return SECUART_ERR_TIMEOUT;
 8001034:	2305      	movs	r3, #5
 8001036:	e0e2      	b.n	80011fe <SecUart_ProcessRxData+0x206>
	}

	// Проверяем стартовый байт
	if (ctx->rx_buffer[0] != SECUART_START_BYTE) {
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f893 3119 	ldrb.w	r3, [r3, #281]	@ 0x119
 800103e:	2baa      	cmp	r3, #170	@ 0xaa
 8001040:	d00c      	beq.n	800105c <SecUart_ProcessRxData+0x64>
		ctx->errors_detected++;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 8001048:	1c5a      	adds	r2, r3, #1
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f8c3 22a8 	str.w	r2, [r3, #680]	@ 0x2a8
		SecUart_Log(ctx, "ERR: Invalid SOF\r\n");
 8001050:	496d      	ldr	r1, [pc, #436]	@ (8001208 <SecUart_ProcessRxData+0x210>)
 8001052:	68f8      	ldr	r0, [r7, #12]
 8001054:	f000 f92a 	bl	80012ac <SecUart_Log>
		return SECUART_ERR_INVALID_SOF;
 8001058:	2301      	movs	r3, #1
 800105a:	e0d0      	b.n	80011fe <SecUart_ProcessRxData+0x206>
	}

	// Извлекаем счетчик и размер данных
	uint32_t rx_counter = ((uint32_t)ctx->rx_buffer[1] << 24) |
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8001062:	061a      	lsls	r2, r3, #24
			((uint32_t)ctx->rx_buffer[2] << 16) |
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 800106a:	041b      	lsls	r3, r3, #16
	uint32_t rx_counter = ((uint32_t)ctx->rx_buffer[1] << 24) |
 800106c:	431a      	orrs	r2, r3
			((uint32_t)ctx->rx_buffer[3] << 8) |
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8001074:	021b      	lsls	r3, r3, #8
			((uint32_t)ctx->rx_buffer[2] << 16) |
 8001076:	4313      	orrs	r3, r2
			ctx->rx_buffer[4];
 8001078:	68fa      	ldr	r2, [r7, #12]
 800107a:	f892 211d 	ldrb.w	r2, [r2, #285]	@ 0x11d
	uint32_t rx_counter = ((uint32_t)ctx->rx_buffer[1] << 24) |
 800107e:	4313      	orrs	r3, r2
 8001080:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	uint8_t rx_size = ctx->rx_buffer[5];
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 800108a:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b

	// Проверяем защиту от Replay-атак (счетчик должен быть больше предыдущего)
	if (rx_counter <= ctx->rx_counter && ctx->rx_counter > 0) {
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8001094:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001098:	429a      	cmp	r2, r3
 800109a:	d81f      	bhi.n	80010dc <SecUart_ProcessRxData+0xe4>
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d01a      	beq.n	80010dc <SecUart_ProcessRxData+0xe4>
		ctx->errors_detected++;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 80010ac:	1c5a      	adds	r2, r3, #1
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	f8c3 22a8 	str.w	r2, [r3, #680]	@ 0x2a8

		char log_buffer[64];
		snprintf(log_buffer, sizeof(log_buffer),
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80010ba:	f107 0010 	add.w	r0, r7, #16
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80010c4:	4a51      	ldr	r2, [pc, #324]	@ (800120c <SecUart_ProcessRxData+0x214>)
 80010c6:	2140      	movs	r1, #64	@ 0x40
 80010c8:	f004 f900 	bl	80052cc <sniprintf>
				"ERR: Replay attack detected (%lu <= %lu)\r\n",
				rx_counter, ctx->rx_counter);
		SecUart_Log(ctx, log_buffer);
 80010cc:	f107 0310 	add.w	r3, r7, #16
 80010d0:	4619      	mov	r1, r3
 80010d2:	68f8      	ldr	r0, [r7, #12]
 80010d4:	f000 f8ea 	bl	80012ac <SecUart_Log>

		return SECUART_ERR_REPLAY;
 80010d8:	2303      	movs	r3, #3
 80010da:	e090      	b.n	80011fe <SecUart_ProcessRxData+0x206>
	}

	// Проверяем размер данных
	if (rx_size == 0 || rx_size > SECUART_MAX_DATA_SIZE) {
 80010dc:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d10c      	bne.n	80010fe <SecUart_ProcessRxData+0x106>
		ctx->errors_detected++;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 80010ea:	1c5a      	adds	r2, r3, #1
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f8c3 22a8 	str.w	r2, [r3, #680]	@ 0x2a8
		SecUart_Log(ctx, "ERR: Invalid data size\r\n");
 80010f2:	4947      	ldr	r1, [pc, #284]	@ (8001210 <SecUart_ProcessRxData+0x218>)
 80010f4:	68f8      	ldr	r0, [r7, #12]
 80010f6:	f000 f8d9 	bl	80012ac <SecUart_Log>
		return SECUART_ERR_BUFFER_OVERFLOW;
 80010fa:	2304      	movs	r3, #4
 80010fc:	e07f      	b.n	80011fe <SecUart_ProcessRxData+0x206>
	}

	// Проверяем MAC
	uint8_t *rx_mac = ctx->rx_buffer + SECUART_HEADER_SIZE + rx_size;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f203 1219 	addw	r2, r3, #281	@ 0x119
 8001104:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8001108:	3306      	adds	r3, #6
 800110a:	4413      	add	r3, r2
 800110c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	bool mac_valid = SecUart_VerifyMAC(&ctx->cipher_ctx,
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f503 700d 	add.w	r0, r3, #564	@ 0x234
			ctx->rx_buffer,
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	f203 1119 	addw	r1, r3, #281	@ 0x119
	bool mac_valid = SecUart_VerifyMAC(&ctx->cipher_ctx,
 800111c:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8001120:	3306      	adds	r3, #6
 8001122:	b2da      	uxtb	r2, r3
 8001124:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001128:	f000 fb5a 	bl	80017e0 <SecUart_VerifyMAC>
 800112c:	4603      	mov	r3, r0
 800112e:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
			SECUART_HEADER_SIZE + rx_size,
			rx_mac);

	if (!mac_valid) {
 8001132:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8001136:	f083 0301 	eor.w	r3, r3, #1
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	d00c      	beq.n	800115a <SecUart_ProcessRxData+0x162>
		ctx->errors_detected++;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 8001146:	1c5a      	adds	r2, r3, #1
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f8c3 22a8 	str.w	r2, [r3, #680]	@ 0x2a8
		SecUart_Log(ctx, "ERR: Invalid MAC\r\n");
 800114e:	4931      	ldr	r1, [pc, #196]	@ (8001214 <SecUart_ProcessRxData+0x21c>)
 8001150:	68f8      	ldr	r0, [r7, #12]
 8001152:	f000 f8ab 	bl	80012ac <SecUart_Log>
		return SECUART_ERR_INVALID_MAC;
 8001156:	2302      	movs	r3, #2
 8001158:	e051      	b.n	80011fe <SecUart_ProcessRxData+0x206>
	}

	// Дешифруем данные
	SecUart_DecryptBlock(&ctx->cipher_ctx, ctx->rx_buffer + SECUART_HEADER_SIZE, rx_size);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f503 700d 	add.w	r0, r3, #564	@ 0x234
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f203 1319 	addw	r3, r3, #281	@ 0x119
 8001166:	3306      	adds	r3, #6
 8001168:	f897 209b 	ldrb.w	r2, [r7, #155]	@ 0x9b
 800116c:	4619      	mov	r1, r3
 800116e:	f000 f9f1 	bl	8001554 <SecUart_DecryptBlock>

	// Извлекаем тип сообщения
	*msg_type = (SecUartMsgType)ctx->rx_buffer[SECUART_HEADER_SIZE];
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f893 211f 	ldrb.w	r2, [r3, #287]	@ 0x11f
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	701a      	strb	r2, [r3, #0]

	// Если размер данных равен 0 или 1, то данных нет, только тип сообщения
	if (rx_size <= 1) {
 800117c:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8001180:	2b01      	cmp	r3, #1
 8001182:	d803      	bhi.n	800118c <SecUart_ProcessRxData+0x194>
		*size = 0;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
 800118a:	e00f      	b.n	80011ac <SecUart_ProcessRxData+0x1b4>
	} else {
		// Иначе копируем данные без учета типа сообщения
		*size = rx_size - 1;
 800118c:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8001190:	3b01      	subs	r3, #1
 8001192:	b2da      	uxtb	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	701a      	strb	r2, [r3, #0]
		memcpy(data, ctx->rx_buffer + SECUART_HEADER_SIZE + 1, *size);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f203 1319 	addw	r3, r3, #281	@ 0x119
 800119e:	1dd9      	adds	r1, r3, #7
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	68b8      	ldr	r0, [r7, #8]
 80011a8:	f004 f93c 	bl	8005424 <memcpy>
	}

	// Обновляем счетчик
	ctx->rx_counter = rx_counter;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80011b2:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
	ctx->rx_complete = false;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230

	// Увеличиваем счетчик принятых пакетов
	ctx->packets_received++;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80011c4:	1c5a      	adds	r2, r3, #1
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

	// Отладочное сообщение в монитор
	char log_buffer[64];
	snprintf(log_buffer, sizeof(log_buffer),
			"RX: Counter=%lu, Size=%u, Type=%u\r\n",
			rx_counter, *size, *msg_type);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	781b      	ldrb	r3, [r3, #0]
	snprintf(log_buffer, sizeof(log_buffer),
 80011d0:	461a      	mov	r2, r3
			rx_counter, *size, *msg_type);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	781b      	ldrb	r3, [r3, #0]
	snprintf(log_buffer, sizeof(log_buffer),
 80011d6:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	9200      	str	r2, [sp, #0]
 80011de:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80011e2:	4a0d      	ldr	r2, [pc, #52]	@ (8001218 <SecUart_ProcessRxData+0x220>)
 80011e4:	2140      	movs	r1, #64	@ 0x40
 80011e6:	f004 f871 	bl	80052cc <sniprintf>
	SecUart_Log(ctx, log_buffer);
 80011ea:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80011ee:	4619      	mov	r1, r3
 80011f0:	68f8      	ldr	r0, [r7, #12]
 80011f2:	f000 f85b 	bl	80012ac <SecUart_Log>

	// Перезапускаем прием
	SecUart_StartReceive(ctx);
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f7ff fda2 	bl	8000d40 <SecUart_StartReceive>

	return SECUART_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	37a0      	adds	r7, #160	@ 0xa0
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	08005df0 	.word	0x08005df0
 800120c:	08005e04 	.word	0x08005e04
 8001210:	08005e30 	.word	0x08005e30
 8001214:	08005e4c 	.word	0x08005e4c
 8001218:	08005e60 	.word	0x08005e60

0800121c <SecUart_RxIdleCallback>:

/**
 * @brief Обработчик прерывания IDLE для UART
 */
void SecUart_RxIdleCallback(SecUartContext *ctx, UART_HandleTypeDef *huart) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b094      	sub	sp, #80	@ 0x50
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
	if (ctx == NULL || huart != ctx->huart_rx) {
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d039      	beq.n	80012a0 <SecUart_RxIdleCallback+0x84>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	429a      	cmp	r2, r3
 8001234:	d134      	bne.n	80012a0 <SecUart_RxIdleCallback+0x84>
		return;
	}

	// Отключаем прерывание IDLE
	__HAL_UART_DISABLE_IT(huart, UART_IT_IDLE);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	68da      	ldr	r2, [r3, #12]
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f022 0210 	bic.w	r2, r2, #16
 8001244:	60da      	str	r2, [r3, #12]

	// Останавливаем DMA
	HAL_UART_AbortReceive(huart);
 8001246:	6838      	ldr	r0, [r7, #0]
 8001248:	f002 fd8b 	bl	8003d62 <HAL_UART_AbortReceive>

	// Вычисляем количество принятых байт
	uint32_t dma_index = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	64fb      	str	r3, [r7, #76]	@ 0x4c
	ctx->rx_data_size = SECUART_BUFFER_SIZE - dma_index;
 8001256:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001258:	b2db      	uxtb	r3, r3
 800125a:	f1c3 030d 	rsb	r3, r3, #13
 800125e:	b2da      	uxtb	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f883 2232 	strb.w	r2, [r3, #562]	@ 0x232

	// Проверяем минимальный размер принятых данных
	// (заголовок + тип сообщения + MAC)
	if (ctx->rx_data_size < SECUART_HEADER_SIZE + 1 + SECUART_MAC_SIZE) {
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f893 3232 	ldrb.w	r3, [r3, #562]	@ 0x232
 800126c:	2b0e      	cmp	r3, #14
 800126e:	d803      	bhi.n	8001278 <SecUart_RxIdleCallback+0x5c>
		// Сбрасываем прием из-за недостаточного размера пакета
		SecUart_StartReceive(ctx);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff fd65 	bl	8000d40 <SecUart_StartReceive>
		return;
 8001276:	e014      	b.n	80012a2 <SecUart_RxIdleCallback+0x86>
	}

	// Устанавливаем флаг завершения приема
	ctx->rx_complete = true;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2201      	movs	r2, #1
 800127c:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230

	// Отладочное сообщение в монитор
	char log_buffer[64];
	snprintf(log_buffer, sizeof(log_buffer),
			"IDLE: Received %u bytes\r\n", ctx->rx_data_size);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f893 3232 	ldrb.w	r3, [r3, #562]	@ 0x232
	snprintf(log_buffer, sizeof(log_buffer),
 8001286:	f107 000c 	add.w	r0, r7, #12
 800128a:	4a07      	ldr	r2, [pc, #28]	@ (80012a8 <SecUart_RxIdleCallback+0x8c>)
 800128c:	2140      	movs	r1, #64	@ 0x40
 800128e:	f004 f81d 	bl	80052cc <sniprintf>
	SecUart_Log(ctx, log_buffer);
 8001292:	f107 030c 	add.w	r3, r7, #12
 8001296:	4619      	mov	r1, r3
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f000 f807 	bl	80012ac <SecUart_Log>
 800129e:	e000      	b.n	80012a2 <SecUart_RxIdleCallback+0x86>
		return;
 80012a0:	bf00      	nop
}
 80012a2:	3750      	adds	r7, #80	@ 0x50
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	08005e84 	.word	0x08005e84

080012ac <SecUart_Log>:

/**
 * @brief Отправка отладочного сообщения через монитор
 */
void SecUart_Log(SecUartContext *ctx, const char *msg) {
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
	if (ctx == NULL || ctx->huart_monitor == NULL || msg == NULL) {
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d013      	beq.n	80012e4 <SecUart_Log+0x38>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d00f      	beq.n	80012e4 <SecUart_Log+0x38>
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d00c      	beq.n	80012e4 <SecUart_Log+0x38>
		return;
	}

	HAL_UART_Transmit(ctx->huart_monitor, (uint8_t*)msg, strlen(msg), 100);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689c      	ldr	r4, [r3, #8]
 80012ce:	6838      	ldr	r0, [r7, #0]
 80012d0:	f7fe ff86 	bl	80001e0 <strlen>
 80012d4:	4603      	mov	r3, r0
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	2364      	movs	r3, #100	@ 0x64
 80012da:	6839      	ldr	r1, [r7, #0]
 80012dc:	4620      	mov	r0, r4
 80012de:	f002 fbb7 	bl	8003a50 <HAL_UART_Transmit>
 80012e2:	e000      	b.n	80012e6 <SecUart_Log+0x3a>
		return;
 80012e4:	bf00      	nop
}
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd90      	pop	{r4, r7, pc}

080012ec <SecUart_EncryptBlock>:

/**
 * @brief Шифрование блока данных
 */
static void SecUart_EncryptBlock(const SpeckContext *ctx, uint8_t *data, uint8_t size) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	4613      	mov	r3, r2
 80012f8:	71fb      	strb	r3, [r7, #7]
	uint8_t padded_size = ((size + SECUART_BLOCK_SIZE - 1) / SECUART_BLOCK_SIZE) * SECUART_BLOCK_SIZE;
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	3307      	adds	r3, #7
 80012fe:	2b00      	cmp	r3, #0
 8001300:	da00      	bge.n	8001304 <SecUart_EncryptBlock+0x18>
 8001302:	3307      	adds	r3, #7
 8001304:	10db      	asrs	r3, r3, #3
 8001306:	b2db      	uxtb	r3, r3
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	76bb      	strb	r3, [r7, #26]

	// Обрабатываем данные блоками по 8 байт (64 бит)
	for (uint8_t i = 0; i < padded_size; i += SECUART_BLOCK_SIZE) {
 800130c:	2300      	movs	r3, #0
 800130e:	77fb      	strb	r3, [r7, #31]
 8001310:	e116      	b.n	8001540 <SecUart_EncryptBlock+0x254>
		uint32_t block[2];

		// Преобразуем 8 байт в два 32-битных слова
		if (i + 3 < size) {
 8001312:	7ffb      	ldrb	r3, [r7, #31]
 8001314:	1cda      	adds	r2, r3, #3
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	429a      	cmp	r2, r3
 800131a:	da1a      	bge.n	8001352 <SecUart_EncryptBlock+0x66>
			block[0] = ((uint32_t)data[i] << 24) |
 800131c:	7ffb      	ldrb	r3, [r7, #31]
 800131e:	68ba      	ldr	r2, [r7, #8]
 8001320:	4413      	add	r3, r2
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	061a      	lsls	r2, r3, #24
					((uint32_t)data[i+1] << 16) |
 8001326:	7ffb      	ldrb	r3, [r7, #31]
 8001328:	3301      	adds	r3, #1
 800132a:	68b9      	ldr	r1, [r7, #8]
 800132c:	440b      	add	r3, r1
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	041b      	lsls	r3, r3, #16
			block[0] = ((uint32_t)data[i] << 24) |
 8001332:	431a      	orrs	r2, r3
					((uint32_t)data[i+2] << 8) |
 8001334:	7ffb      	ldrb	r3, [r7, #31]
 8001336:	3302      	adds	r3, #2
 8001338:	68b9      	ldr	r1, [r7, #8]
 800133a:	440b      	add	r3, r1
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	021b      	lsls	r3, r3, #8
					((uint32_t)data[i+1] << 16) |
 8001340:	4313      	orrs	r3, r2
					data[i+3];
 8001342:	7ffa      	ldrb	r2, [r7, #31]
 8001344:	3203      	adds	r2, #3
 8001346:	68b9      	ldr	r1, [r7, #8]
 8001348:	440a      	add	r2, r1
 800134a:	7812      	ldrb	r2, [r2, #0]
					((uint32_t)data[i+2] << 8) |
 800134c:	4313      	orrs	r3, r2
			block[0] = ((uint32_t)data[i] << 24) |
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	e021      	b.n	8001396 <SecUart_EncryptBlock+0xaa>
		} else {
			// Дополнение нулями, если недостаточно данных
			block[0] = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
			for (uint8_t j = 0; j < 4 && i + j < size; j++) {
 8001356:	2300      	movs	r3, #0
 8001358:	77bb      	strb	r3, [r7, #30]
 800135a:	e013      	b.n	8001384 <SecUart_EncryptBlock+0x98>
				block[0] |= ((uint32_t)data[i+j] << ((3-j) * 8));
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	7ff9      	ldrb	r1, [r7, #31]
 8001360:	7fbb      	ldrb	r3, [r7, #30]
 8001362:	440b      	add	r3, r1
 8001364:	4619      	mov	r1, r3
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	440b      	add	r3, r1
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4619      	mov	r1, r3
 800136e:	7fbb      	ldrb	r3, [r7, #30]
 8001370:	f1c3 0303 	rsb	r3, r3, #3
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	fa01 f303 	lsl.w	r3, r1, r3
 800137a:	4313      	orrs	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
			for (uint8_t j = 0; j < 4 && i + j < size; j++) {
 800137e:	7fbb      	ldrb	r3, [r7, #30]
 8001380:	3301      	adds	r3, #1
 8001382:	77bb      	strb	r3, [r7, #30]
 8001384:	7fbb      	ldrb	r3, [r7, #30]
 8001386:	2b03      	cmp	r3, #3
 8001388:	d805      	bhi.n	8001396 <SecUart_EncryptBlock+0xaa>
 800138a:	7ffa      	ldrb	r2, [r7, #31]
 800138c:	7fbb      	ldrb	r3, [r7, #30]
 800138e:	441a      	add	r2, r3
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	429a      	cmp	r2, r3
 8001394:	dbe2      	blt.n	800135c <SecUart_EncryptBlock+0x70>
			}
		}

		if (i + 7 < size) {
 8001396:	7ffb      	ldrb	r3, [r7, #31]
 8001398:	1dda      	adds	r2, r3, #7
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	429a      	cmp	r2, r3
 800139e:	da1b      	bge.n	80013d8 <SecUart_EncryptBlock+0xec>
			block[1] = ((uint32_t)data[i+4] << 24) |
 80013a0:	7ffb      	ldrb	r3, [r7, #31]
 80013a2:	3304      	adds	r3, #4
 80013a4:	68ba      	ldr	r2, [r7, #8]
 80013a6:	4413      	add	r3, r2
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	061a      	lsls	r2, r3, #24
					((uint32_t)data[i+5] << 16) |
 80013ac:	7ffb      	ldrb	r3, [r7, #31]
 80013ae:	3305      	adds	r3, #5
 80013b0:	68b9      	ldr	r1, [r7, #8]
 80013b2:	440b      	add	r3, r1
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	041b      	lsls	r3, r3, #16
			block[1] = ((uint32_t)data[i+4] << 24) |
 80013b8:	431a      	orrs	r2, r3
					((uint32_t)data[i+6] << 8) |
 80013ba:	7ffb      	ldrb	r3, [r7, #31]
 80013bc:	3306      	adds	r3, #6
 80013be:	68b9      	ldr	r1, [r7, #8]
 80013c0:	440b      	add	r3, r1
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	021b      	lsls	r3, r3, #8
					((uint32_t)data[i+5] << 16) |
 80013c6:	4313      	orrs	r3, r2
					data[i+7];
 80013c8:	7ffa      	ldrb	r2, [r7, #31]
 80013ca:	3207      	adds	r2, #7
 80013cc:	68b9      	ldr	r1, [r7, #8]
 80013ce:	440a      	add	r2, r1
 80013d0:	7812      	ldrb	r2, [r2, #0]
					((uint32_t)data[i+6] << 8) |
 80013d2:	4313      	orrs	r3, r2
			block[1] = ((uint32_t)data[i+4] << 24) |
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	e023      	b.n	8001420 <SecUart_EncryptBlock+0x134>
		} else {
			// Дополнение нулями, если недостаточно данных
			block[1] = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
			for (uint8_t j = 0; j < 4 && i + 4 + j < size; j++) {
 80013dc:	2300      	movs	r3, #0
 80013de:	777b      	strb	r3, [r7, #29]
 80013e0:	e014      	b.n	800140c <SecUart_EncryptBlock+0x120>
				block[1] |= ((uint32_t)data[i+4+j] << ((3-j) * 8));
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	7ffb      	ldrb	r3, [r7, #31]
 80013e6:	1d19      	adds	r1, r3, #4
 80013e8:	7f7b      	ldrb	r3, [r7, #29]
 80013ea:	440b      	add	r3, r1
 80013ec:	4619      	mov	r1, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	440b      	add	r3, r1
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	4619      	mov	r1, r3
 80013f6:	7f7b      	ldrb	r3, [r7, #29]
 80013f8:	f1c3 0303 	rsb	r3, r3, #3
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001402:	4313      	orrs	r3, r2
 8001404:	617b      	str	r3, [r7, #20]
			for (uint8_t j = 0; j < 4 && i + 4 + j < size; j++) {
 8001406:	7f7b      	ldrb	r3, [r7, #29]
 8001408:	3301      	adds	r3, #1
 800140a:	777b      	strb	r3, [r7, #29]
 800140c:	7f7b      	ldrb	r3, [r7, #29]
 800140e:	2b03      	cmp	r3, #3
 8001410:	d806      	bhi.n	8001420 <SecUart_EncryptBlock+0x134>
 8001412:	7ffb      	ldrb	r3, [r7, #31]
 8001414:	1d1a      	adds	r2, r3, #4
 8001416:	7f7b      	ldrb	r3, [r7, #29]
 8001418:	441a      	add	r2, r3
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	429a      	cmp	r2, r3
 800141e:	dbe0      	blt.n	80013e2 <SecUart_EncryptBlock+0xf6>
			}
		}

		// Шифруем блок
		speck_encrypt(ctx, block);
 8001420:	f107 0310 	add.w	r3, r7, #16
 8001424:	4619      	mov	r1, r3
 8001426:	68f8      	ldr	r0, [r7, #12]
 8001428:	f000 fa82 	bl	8001930 <speck_encrypt>

		// Преобразуем два 32-битных слова обратно в 8 байт
		// и записываем обратно в буфер
		if (i + 3 < size) {
 800142c:	7ffb      	ldrb	r3, [r7, #31]
 800142e:	1cda      	adds	r2, r3, #3
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	429a      	cmp	r2, r3
 8001434:	da1e      	bge.n	8001474 <SecUart_EncryptBlock+0x188>
			data[i] = (block[0] >> 24) & 0xFF;
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	0e19      	lsrs	r1, r3, #24
 800143a:	7ffb      	ldrb	r3, [r7, #31]
 800143c:	68ba      	ldr	r2, [r7, #8]
 800143e:	4413      	add	r3, r2
 8001440:	b2ca      	uxtb	r2, r1
 8001442:	701a      	strb	r2, [r3, #0]
			data[i+1] = (block[0] >> 16) & 0xFF;
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	0c19      	lsrs	r1, r3, #16
 8001448:	7ffb      	ldrb	r3, [r7, #31]
 800144a:	3301      	adds	r3, #1
 800144c:	68ba      	ldr	r2, [r7, #8]
 800144e:	4413      	add	r3, r2
 8001450:	b2ca      	uxtb	r2, r1
 8001452:	701a      	strb	r2, [r3, #0]
			data[i+2] = (block[0] >> 8) & 0xFF;
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	0a19      	lsrs	r1, r3, #8
 8001458:	7ffb      	ldrb	r3, [r7, #31]
 800145a:	3302      	adds	r3, #2
 800145c:	68ba      	ldr	r2, [r7, #8]
 800145e:	4413      	add	r3, r2
 8001460:	b2ca      	uxtb	r2, r1
 8001462:	701a      	strb	r2, [r3, #0]
			data[i+3] = block[0] & 0xFF;
 8001464:	6939      	ldr	r1, [r7, #16]
 8001466:	7ffb      	ldrb	r3, [r7, #31]
 8001468:	3303      	adds	r3, #3
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	4413      	add	r3, r2
 800146e:	b2ca      	uxtb	r2, r1
 8001470:	701a      	strb	r2, [r3, #0]
 8001472:	e01d      	b.n	80014b0 <SecUart_EncryptBlock+0x1c4>
		} else {
			// Записываем только нужное количество байт
			for (uint8_t j = 0; j < 4 && i + j < size; j++) {
 8001474:	2300      	movs	r3, #0
 8001476:	773b      	strb	r3, [r7, #28]
 8001478:	e011      	b.n	800149e <SecUart_EncryptBlock+0x1b2>
				data[i+j] = (block[0] >> ((3-j) * 8)) & 0xFF;
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	7f3b      	ldrb	r3, [r7, #28]
 800147e:	f1c3 0303 	rsb	r3, r3, #3
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	fa22 f103 	lsr.w	r1, r2, r3
 8001488:	7ffa      	ldrb	r2, [r7, #31]
 800148a:	7f3b      	ldrb	r3, [r7, #28]
 800148c:	4413      	add	r3, r2
 800148e:	461a      	mov	r2, r3
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	4413      	add	r3, r2
 8001494:	b2ca      	uxtb	r2, r1
 8001496:	701a      	strb	r2, [r3, #0]
			for (uint8_t j = 0; j < 4 && i + j < size; j++) {
 8001498:	7f3b      	ldrb	r3, [r7, #28]
 800149a:	3301      	adds	r3, #1
 800149c:	773b      	strb	r3, [r7, #28]
 800149e:	7f3b      	ldrb	r3, [r7, #28]
 80014a0:	2b03      	cmp	r3, #3
 80014a2:	d805      	bhi.n	80014b0 <SecUart_EncryptBlock+0x1c4>
 80014a4:	7ffa      	ldrb	r2, [r7, #31]
 80014a6:	7f3b      	ldrb	r3, [r7, #28]
 80014a8:	441a      	add	r2, r3
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	dbe4      	blt.n	800147a <SecUart_EncryptBlock+0x18e>
			}
		}

		if (i + 7 < size) {
 80014b0:	7ffb      	ldrb	r3, [r7, #31]
 80014b2:	1dda      	adds	r2, r3, #7
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	da1f      	bge.n	80014fa <SecUart_EncryptBlock+0x20e>
			data[i+4] = (block[1] >> 24) & 0xFF;
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	0e19      	lsrs	r1, r3, #24
 80014be:	7ffb      	ldrb	r3, [r7, #31]
 80014c0:	3304      	adds	r3, #4
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	4413      	add	r3, r2
 80014c6:	b2ca      	uxtb	r2, r1
 80014c8:	701a      	strb	r2, [r3, #0]
			data[i+5] = (block[1] >> 16) & 0xFF;
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	0c19      	lsrs	r1, r3, #16
 80014ce:	7ffb      	ldrb	r3, [r7, #31]
 80014d0:	3305      	adds	r3, #5
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	4413      	add	r3, r2
 80014d6:	b2ca      	uxtb	r2, r1
 80014d8:	701a      	strb	r2, [r3, #0]
			data[i+6] = (block[1] >> 8) & 0xFF;
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	0a19      	lsrs	r1, r3, #8
 80014de:	7ffb      	ldrb	r3, [r7, #31]
 80014e0:	3306      	adds	r3, #6
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	4413      	add	r3, r2
 80014e6:	b2ca      	uxtb	r2, r1
 80014e8:	701a      	strb	r2, [r3, #0]
			data[i+7] = block[1] & 0xFF;
 80014ea:	6979      	ldr	r1, [r7, #20]
 80014ec:	7ffb      	ldrb	r3, [r7, #31]
 80014ee:	3307      	adds	r3, #7
 80014f0:	68ba      	ldr	r2, [r7, #8]
 80014f2:	4413      	add	r3, r2
 80014f4:	b2ca      	uxtb	r2, r1
 80014f6:	701a      	strb	r2, [r3, #0]
 80014f8:	e01f      	b.n	800153a <SecUart_EncryptBlock+0x24e>
		} else {
			// Записываем только нужное количество байт
			for (uint8_t j = 0; j < 4 && i + 4 + j < size; j++) {
 80014fa:	2300      	movs	r3, #0
 80014fc:	76fb      	strb	r3, [r7, #27]
 80014fe:	e012      	b.n	8001526 <SecUart_EncryptBlock+0x23a>
				data[i+4+j] = (block[1] >> ((3-j) * 8)) & 0xFF;
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	7efb      	ldrb	r3, [r7, #27]
 8001504:	f1c3 0303 	rsb	r3, r3, #3
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	fa22 f103 	lsr.w	r1, r2, r3
 800150e:	7ffb      	ldrb	r3, [r7, #31]
 8001510:	1d1a      	adds	r2, r3, #4
 8001512:	7efb      	ldrb	r3, [r7, #27]
 8001514:	4413      	add	r3, r2
 8001516:	461a      	mov	r2, r3
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	4413      	add	r3, r2
 800151c:	b2ca      	uxtb	r2, r1
 800151e:	701a      	strb	r2, [r3, #0]
			for (uint8_t j = 0; j < 4 && i + 4 + j < size; j++) {
 8001520:	7efb      	ldrb	r3, [r7, #27]
 8001522:	3301      	adds	r3, #1
 8001524:	76fb      	strb	r3, [r7, #27]
 8001526:	7efb      	ldrb	r3, [r7, #27]
 8001528:	2b03      	cmp	r3, #3
 800152a:	d806      	bhi.n	800153a <SecUart_EncryptBlock+0x24e>
 800152c:	7ffb      	ldrb	r3, [r7, #31]
 800152e:	1d1a      	adds	r2, r3, #4
 8001530:	7efb      	ldrb	r3, [r7, #27]
 8001532:	441a      	add	r2, r3
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	429a      	cmp	r2, r3
 8001538:	dbe2      	blt.n	8001500 <SecUart_EncryptBlock+0x214>
	for (uint8_t i = 0; i < padded_size; i += SECUART_BLOCK_SIZE) {
 800153a:	7ffb      	ldrb	r3, [r7, #31]
 800153c:	3308      	adds	r3, #8
 800153e:	77fb      	strb	r3, [r7, #31]
 8001540:	7ffa      	ldrb	r2, [r7, #31]
 8001542:	7ebb      	ldrb	r3, [r7, #26]
 8001544:	429a      	cmp	r2, r3
 8001546:	f4ff aee4 	bcc.w	8001312 <SecUart_EncryptBlock+0x26>
			}
		}
	}
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	3720      	adds	r7, #32
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <SecUart_DecryptBlock>:

/**
 * @brief Расшифрование блока данных
 */
static void SecUart_DecryptBlock(const SpeckContext *ctx, uint8_t *data, uint8_t size) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	4613      	mov	r3, r2
 8001560:	71fb      	strb	r3, [r7, #7]
	uint8_t padded_size = ((size + SECUART_BLOCK_SIZE - 1) / SECUART_BLOCK_SIZE) * SECUART_BLOCK_SIZE;
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	3307      	adds	r3, #7
 8001566:	2b00      	cmp	r3, #0
 8001568:	da00      	bge.n	800156c <SecUart_DecryptBlock+0x18>
 800156a:	3307      	adds	r3, #7
 800156c:	10db      	asrs	r3, r3, #3
 800156e:	b2db      	uxtb	r3, r3
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	76bb      	strb	r3, [r7, #26]

	// Обрабатываем данные блоками по 8 байт (64 бит)
	for (uint8_t i = 0; i < padded_size; i += SECUART_BLOCK_SIZE) {
 8001574:	2300      	movs	r3, #0
 8001576:	77fb      	strb	r3, [r7, #31]
 8001578:	e116      	b.n	80017a8 <SecUart_DecryptBlock+0x254>
		uint32_t block[2];

		// Преобразуем 8 байт в два 32-битных слова
		if (i + 3 < size) {
 800157a:	7ffb      	ldrb	r3, [r7, #31]
 800157c:	1cda      	adds	r2, r3, #3
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	429a      	cmp	r2, r3
 8001582:	da1a      	bge.n	80015ba <SecUart_DecryptBlock+0x66>
			block[0] = ((uint32_t)data[i] << 24) |
 8001584:	7ffb      	ldrb	r3, [r7, #31]
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	4413      	add	r3, r2
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	061a      	lsls	r2, r3, #24
					((uint32_t)data[i+1] << 16) |
 800158e:	7ffb      	ldrb	r3, [r7, #31]
 8001590:	3301      	adds	r3, #1
 8001592:	68b9      	ldr	r1, [r7, #8]
 8001594:	440b      	add	r3, r1
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	041b      	lsls	r3, r3, #16
			block[0] = ((uint32_t)data[i] << 24) |
 800159a:	431a      	orrs	r2, r3
					((uint32_t)data[i+2] << 8) |
 800159c:	7ffb      	ldrb	r3, [r7, #31]
 800159e:	3302      	adds	r3, #2
 80015a0:	68b9      	ldr	r1, [r7, #8]
 80015a2:	440b      	add	r3, r1
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	021b      	lsls	r3, r3, #8
					((uint32_t)data[i+1] << 16) |
 80015a8:	4313      	orrs	r3, r2
					data[i+3];
 80015aa:	7ffa      	ldrb	r2, [r7, #31]
 80015ac:	3203      	adds	r2, #3
 80015ae:	68b9      	ldr	r1, [r7, #8]
 80015b0:	440a      	add	r2, r1
 80015b2:	7812      	ldrb	r2, [r2, #0]
					((uint32_t)data[i+2] << 8) |
 80015b4:	4313      	orrs	r3, r2
			block[0] = ((uint32_t)data[i] << 24) |
 80015b6:	613b      	str	r3, [r7, #16]
 80015b8:	e021      	b.n	80015fe <SecUart_DecryptBlock+0xaa>
		} else {
			// Дополнение нулями, если недостаточно данных
			block[0] = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
			for (uint8_t j = 0; j < 4 && i + j < size; j++) {
 80015be:	2300      	movs	r3, #0
 80015c0:	77bb      	strb	r3, [r7, #30]
 80015c2:	e013      	b.n	80015ec <SecUart_DecryptBlock+0x98>
				block[0] |= ((uint32_t)data[i+j] << ((3-j) * 8));
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	7ff9      	ldrb	r1, [r7, #31]
 80015c8:	7fbb      	ldrb	r3, [r7, #30]
 80015ca:	440b      	add	r3, r1
 80015cc:	4619      	mov	r1, r3
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	440b      	add	r3, r1
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4619      	mov	r1, r3
 80015d6:	7fbb      	ldrb	r3, [r7, #30]
 80015d8:	f1c3 0303 	rsb	r3, r3, #3
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	fa01 f303 	lsl.w	r3, r1, r3
 80015e2:	4313      	orrs	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
			for (uint8_t j = 0; j < 4 && i + j < size; j++) {
 80015e6:	7fbb      	ldrb	r3, [r7, #30]
 80015e8:	3301      	adds	r3, #1
 80015ea:	77bb      	strb	r3, [r7, #30]
 80015ec:	7fbb      	ldrb	r3, [r7, #30]
 80015ee:	2b03      	cmp	r3, #3
 80015f0:	d805      	bhi.n	80015fe <SecUart_DecryptBlock+0xaa>
 80015f2:	7ffa      	ldrb	r2, [r7, #31]
 80015f4:	7fbb      	ldrb	r3, [r7, #30]
 80015f6:	441a      	add	r2, r3
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	dbe2      	blt.n	80015c4 <SecUart_DecryptBlock+0x70>
			}
		}

		if (i + 7 < size) {
 80015fe:	7ffb      	ldrb	r3, [r7, #31]
 8001600:	1dda      	adds	r2, r3, #7
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	429a      	cmp	r2, r3
 8001606:	da1b      	bge.n	8001640 <SecUart_DecryptBlock+0xec>
			block[1] = ((uint32_t)data[i+4] << 24) |
 8001608:	7ffb      	ldrb	r3, [r7, #31]
 800160a:	3304      	adds	r3, #4
 800160c:	68ba      	ldr	r2, [r7, #8]
 800160e:	4413      	add	r3, r2
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	061a      	lsls	r2, r3, #24
					((uint32_t)data[i+5] << 16) |
 8001614:	7ffb      	ldrb	r3, [r7, #31]
 8001616:	3305      	adds	r3, #5
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	440b      	add	r3, r1
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	041b      	lsls	r3, r3, #16
			block[1] = ((uint32_t)data[i+4] << 24) |
 8001620:	431a      	orrs	r2, r3
					((uint32_t)data[i+6] << 8) |
 8001622:	7ffb      	ldrb	r3, [r7, #31]
 8001624:	3306      	adds	r3, #6
 8001626:	68b9      	ldr	r1, [r7, #8]
 8001628:	440b      	add	r3, r1
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	021b      	lsls	r3, r3, #8
					((uint32_t)data[i+5] << 16) |
 800162e:	4313      	orrs	r3, r2
					data[i+7];
 8001630:	7ffa      	ldrb	r2, [r7, #31]
 8001632:	3207      	adds	r2, #7
 8001634:	68b9      	ldr	r1, [r7, #8]
 8001636:	440a      	add	r2, r1
 8001638:	7812      	ldrb	r2, [r2, #0]
					((uint32_t)data[i+6] << 8) |
 800163a:	4313      	orrs	r3, r2
			block[1] = ((uint32_t)data[i+4] << 24) |
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	e023      	b.n	8001688 <SecUart_DecryptBlock+0x134>
		} else {
			// Дополнение нулями, если недостаточно данных
			block[1] = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
			for (uint8_t j = 0; j < 4 && i + 4 + j < size; j++) {
 8001644:	2300      	movs	r3, #0
 8001646:	777b      	strb	r3, [r7, #29]
 8001648:	e014      	b.n	8001674 <SecUart_DecryptBlock+0x120>
				block[1] |= ((uint32_t)data[i+4+j] << ((3-j) * 8));
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	7ffb      	ldrb	r3, [r7, #31]
 800164e:	1d19      	adds	r1, r3, #4
 8001650:	7f7b      	ldrb	r3, [r7, #29]
 8001652:	440b      	add	r3, r1
 8001654:	4619      	mov	r1, r3
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	440b      	add	r3, r1
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	4619      	mov	r1, r3
 800165e:	7f7b      	ldrb	r3, [r7, #29]
 8001660:	f1c3 0303 	rsb	r3, r3, #3
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	fa01 f303 	lsl.w	r3, r1, r3
 800166a:	4313      	orrs	r3, r2
 800166c:	617b      	str	r3, [r7, #20]
			for (uint8_t j = 0; j < 4 && i + 4 + j < size; j++) {
 800166e:	7f7b      	ldrb	r3, [r7, #29]
 8001670:	3301      	adds	r3, #1
 8001672:	777b      	strb	r3, [r7, #29]
 8001674:	7f7b      	ldrb	r3, [r7, #29]
 8001676:	2b03      	cmp	r3, #3
 8001678:	d806      	bhi.n	8001688 <SecUart_DecryptBlock+0x134>
 800167a:	7ffb      	ldrb	r3, [r7, #31]
 800167c:	1d1a      	adds	r2, r3, #4
 800167e:	7f7b      	ldrb	r3, [r7, #29]
 8001680:	441a      	add	r2, r3
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	429a      	cmp	r2, r3
 8001686:	dbe0      	blt.n	800164a <SecUart_DecryptBlock+0xf6>
			}
		}

		// Расшифровываем блок
		speck_decrypt(ctx, block);
 8001688:	f107 0310 	add.w	r3, r7, #16
 800168c:	4619      	mov	r1, r3
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	f000 f987 	bl	80019a2 <speck_decrypt>

		// Преобразуем два 32-битных слова обратно в 8 байт
		// и записываем обратно в буфер
		if (i + 3 < size) {
 8001694:	7ffb      	ldrb	r3, [r7, #31]
 8001696:	1cda      	adds	r2, r3, #3
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	429a      	cmp	r2, r3
 800169c:	da1e      	bge.n	80016dc <SecUart_DecryptBlock+0x188>
			data[i] = (block[0] >> 24) & 0xFF;
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	0e19      	lsrs	r1, r3, #24
 80016a2:	7ffb      	ldrb	r3, [r7, #31]
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	4413      	add	r3, r2
 80016a8:	b2ca      	uxtb	r2, r1
 80016aa:	701a      	strb	r2, [r3, #0]
			data[i+1] = (block[0] >> 16) & 0xFF;
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	0c19      	lsrs	r1, r3, #16
 80016b0:	7ffb      	ldrb	r3, [r7, #31]
 80016b2:	3301      	adds	r3, #1
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	4413      	add	r3, r2
 80016b8:	b2ca      	uxtb	r2, r1
 80016ba:	701a      	strb	r2, [r3, #0]
			data[i+2] = (block[0] >> 8) & 0xFF;
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	0a19      	lsrs	r1, r3, #8
 80016c0:	7ffb      	ldrb	r3, [r7, #31]
 80016c2:	3302      	adds	r3, #2
 80016c4:	68ba      	ldr	r2, [r7, #8]
 80016c6:	4413      	add	r3, r2
 80016c8:	b2ca      	uxtb	r2, r1
 80016ca:	701a      	strb	r2, [r3, #0]
			data[i+3] = block[0] & 0xFF;
 80016cc:	6939      	ldr	r1, [r7, #16]
 80016ce:	7ffb      	ldrb	r3, [r7, #31]
 80016d0:	3303      	adds	r3, #3
 80016d2:	68ba      	ldr	r2, [r7, #8]
 80016d4:	4413      	add	r3, r2
 80016d6:	b2ca      	uxtb	r2, r1
 80016d8:	701a      	strb	r2, [r3, #0]
 80016da:	e01d      	b.n	8001718 <SecUart_DecryptBlock+0x1c4>
		} else {
			// Записываем только нужное количество байт
			for (uint8_t j = 0; j < 4 && i + j < size; j++) {
 80016dc:	2300      	movs	r3, #0
 80016de:	773b      	strb	r3, [r7, #28]
 80016e0:	e011      	b.n	8001706 <SecUart_DecryptBlock+0x1b2>
				data[i+j] = (block[0] >> ((3-j) * 8)) & 0xFF;
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	7f3b      	ldrb	r3, [r7, #28]
 80016e6:	f1c3 0303 	rsb	r3, r3, #3
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	fa22 f103 	lsr.w	r1, r2, r3
 80016f0:	7ffa      	ldrb	r2, [r7, #31]
 80016f2:	7f3b      	ldrb	r3, [r7, #28]
 80016f4:	4413      	add	r3, r2
 80016f6:	461a      	mov	r2, r3
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	4413      	add	r3, r2
 80016fc:	b2ca      	uxtb	r2, r1
 80016fe:	701a      	strb	r2, [r3, #0]
			for (uint8_t j = 0; j < 4 && i + j < size; j++) {
 8001700:	7f3b      	ldrb	r3, [r7, #28]
 8001702:	3301      	adds	r3, #1
 8001704:	773b      	strb	r3, [r7, #28]
 8001706:	7f3b      	ldrb	r3, [r7, #28]
 8001708:	2b03      	cmp	r3, #3
 800170a:	d805      	bhi.n	8001718 <SecUart_DecryptBlock+0x1c4>
 800170c:	7ffa      	ldrb	r2, [r7, #31]
 800170e:	7f3b      	ldrb	r3, [r7, #28]
 8001710:	441a      	add	r2, r3
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	429a      	cmp	r2, r3
 8001716:	dbe4      	blt.n	80016e2 <SecUart_DecryptBlock+0x18e>
			}
		}

		if (i + 7 < size) {
 8001718:	7ffb      	ldrb	r3, [r7, #31]
 800171a:	1dda      	adds	r2, r3, #7
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	429a      	cmp	r2, r3
 8001720:	da1f      	bge.n	8001762 <SecUart_DecryptBlock+0x20e>
			data[i+4] = (block[1] >> 24) & 0xFF;
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	0e19      	lsrs	r1, r3, #24
 8001726:	7ffb      	ldrb	r3, [r7, #31]
 8001728:	3304      	adds	r3, #4
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	4413      	add	r3, r2
 800172e:	b2ca      	uxtb	r2, r1
 8001730:	701a      	strb	r2, [r3, #0]
			data[i+5] = (block[1] >> 16) & 0xFF;
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	0c19      	lsrs	r1, r3, #16
 8001736:	7ffb      	ldrb	r3, [r7, #31]
 8001738:	3305      	adds	r3, #5
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	4413      	add	r3, r2
 800173e:	b2ca      	uxtb	r2, r1
 8001740:	701a      	strb	r2, [r3, #0]
			data[i+6] = (block[1] >> 8) & 0xFF;
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	0a19      	lsrs	r1, r3, #8
 8001746:	7ffb      	ldrb	r3, [r7, #31]
 8001748:	3306      	adds	r3, #6
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	4413      	add	r3, r2
 800174e:	b2ca      	uxtb	r2, r1
 8001750:	701a      	strb	r2, [r3, #0]
			data[i+7] = block[1] & 0xFF;
 8001752:	6979      	ldr	r1, [r7, #20]
 8001754:	7ffb      	ldrb	r3, [r7, #31]
 8001756:	3307      	adds	r3, #7
 8001758:	68ba      	ldr	r2, [r7, #8]
 800175a:	4413      	add	r3, r2
 800175c:	b2ca      	uxtb	r2, r1
 800175e:	701a      	strb	r2, [r3, #0]
 8001760:	e01f      	b.n	80017a2 <SecUart_DecryptBlock+0x24e>
		} else {
			// Записываем только нужное количество байт
			for (uint8_t j = 0; j < 4 && i + 4 + j < size; j++) {
 8001762:	2300      	movs	r3, #0
 8001764:	76fb      	strb	r3, [r7, #27]
 8001766:	e012      	b.n	800178e <SecUart_DecryptBlock+0x23a>
				data[i+4+j] = (block[1] >> ((3-j) * 8)) & 0xFF;
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	7efb      	ldrb	r3, [r7, #27]
 800176c:	f1c3 0303 	rsb	r3, r3, #3
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	fa22 f103 	lsr.w	r1, r2, r3
 8001776:	7ffb      	ldrb	r3, [r7, #31]
 8001778:	1d1a      	adds	r2, r3, #4
 800177a:	7efb      	ldrb	r3, [r7, #27]
 800177c:	4413      	add	r3, r2
 800177e:	461a      	mov	r2, r3
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	4413      	add	r3, r2
 8001784:	b2ca      	uxtb	r2, r1
 8001786:	701a      	strb	r2, [r3, #0]
			for (uint8_t j = 0; j < 4 && i + 4 + j < size; j++) {
 8001788:	7efb      	ldrb	r3, [r7, #27]
 800178a:	3301      	adds	r3, #1
 800178c:	76fb      	strb	r3, [r7, #27]
 800178e:	7efb      	ldrb	r3, [r7, #27]
 8001790:	2b03      	cmp	r3, #3
 8001792:	d806      	bhi.n	80017a2 <SecUart_DecryptBlock+0x24e>
 8001794:	7ffb      	ldrb	r3, [r7, #31]
 8001796:	1d1a      	adds	r2, r3, #4
 8001798:	7efb      	ldrb	r3, [r7, #27]
 800179a:	441a      	add	r2, r3
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	429a      	cmp	r2, r3
 80017a0:	dbe2      	blt.n	8001768 <SecUart_DecryptBlock+0x214>
	for (uint8_t i = 0; i < padded_size; i += SECUART_BLOCK_SIZE) {
 80017a2:	7ffb      	ldrb	r3, [r7, #31]
 80017a4:	3308      	adds	r3, #8
 80017a6:	77fb      	strb	r3, [r7, #31]
 80017a8:	7ffa      	ldrb	r2, [r7, #31]
 80017aa:	7ebb      	ldrb	r3, [r7, #26]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	f4ff aee4 	bcc.w	800157a <SecUart_DecryptBlock+0x26>
			}
		}
	}
}
 80017b2:	bf00      	nop
 80017b4:	bf00      	nop
 80017b6:	3720      	adds	r7, #32
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <SecUart_CalculateMAC>:

/**
 * @brief Вычисление MAC для данных
 */
static void SecUart_CalculateMAC(const SpeckContext *ctx, const uint8_t *data, uint8_t size, uint8_t *mac) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	603b      	str	r3, [r7, #0]
 80017c8:	4613      	mov	r3, r2
 80017ca:	71fb      	strb	r3, [r7, #7]
	speck_mac(ctx, data, size, mac);
 80017cc:	79fa      	ldrb	r2, [r7, #7]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f000 f923 	bl	8001a1e <speck_mac>
}
 80017d8:	bf00      	nop
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <SecUart_VerifyMAC>:

/**
 * @brief Проверка MAC для данных
 */
static bool SecUart_VerifyMAC(const SpeckContext *ctx, const uint8_t *data, uint8_t size, const uint8_t *mac) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	603b      	str	r3, [r7, #0]
 80017ec:	4613      	mov	r3, r2
 80017ee:	71fb      	strb	r3, [r7, #7]
	uint8_t calculated_mac[SECUART_MAC_SIZE];

	// Вычисляем MAC
	SecUart_CalculateMAC(ctx, data, size, calculated_mac);
 80017f0:	f107 0310 	add.w	r3, r7, #16
 80017f4:	79fa      	ldrb	r2, [r7, #7]
 80017f6:	68b9      	ldr	r1, [r7, #8]
 80017f8:	68f8      	ldr	r0, [r7, #12]
 80017fa:	f7ff ffdf 	bl	80017bc <SecUart_CalculateMAC>

	// Сравниваем MAC
	return (memcmp(calculated_mac, mac, SECUART_MAC_SIZE) == 0);
 80017fe:	f107 0310 	add.w	r3, r7, #16
 8001802:	2208      	movs	r2, #8
 8001804:	6839      	ldr	r1, [r7, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f003 fdb8 	bl	800537c <memcmp>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	bf0c      	ite	eq
 8001812:	2301      	moveq	r3, #1
 8001814:	2300      	movne	r3, #0
 8001816:	b2db      	uxtb	r3, r3
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <ror32>:
 * @brief Циклический сдвиг вправо для 32-битного слова
 * @param x Значение для сдвига
 * @param n Количество бит для сдвига
 * @return Результат циклического сдвига
 */
static inline uint32_t ror32(uint32_t x, uint32_t n) {
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
    return (x >> n) | (x << (32 - n));
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	fa62 f303 	ror.w	r3, r2, r3
}
 8001832:	4618      	mov	r0, r3
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <rol32>:
 * @brief Циклический сдвиг влево для 32-битного слова
 * @param x Значение для сдвига
 * @param n Количество бит для сдвига
 * @return Результат циклического сдвига
 */
static inline uint32_t rol32(uint32_t x, uint32_t n) {
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
 8001846:	6039      	str	r1, [r7, #0]
    return (x << n) | (x >> (32 - n));
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	f1c3 0320 	rsb	r3, r3, #32
 8001850:	fa62 f303 	ror.w	r3, r2, r3
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <speck_init>:

void speck_init(SpeckContext *ctx, const uint32_t *key) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b08e      	sub	sp, #56	@ 0x38
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
    // Параметры алгоритма Speck для 32-битных слов (согласно спецификации)
    const uint32_t alpha = 8; // Параметр сдвига
 800186a:	2308      	movs	r3, #8
 800186c:	633b      	str	r3, [r7, #48]	@ 0x30
    const uint32_t beta = 3;  // Параметр сдвига
 800186e:	2303      	movs	r3, #3
 8001870:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Раундовые ключи для алгоритма
    uint32_t k[4];

    // Копируем ключ в рабочий буфер
    k[0] = key[0];
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	61bb      	str	r3, [r7, #24]
    k[1] = key[1];
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	3304      	adds	r3, #4
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	61fb      	str	r3, [r7, #28]
    k[2] = key[2];
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	3308      	adds	r3, #8
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	623b      	str	r3, [r7, #32]
    k[3] = key[3];
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	330c      	adds	r3, #12
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	627b      	str	r3, [r7, #36]	@ 0x24

    // Расписание ключей для Speck64/128 (27 раундов)
    uint32_t i;
    uint32_t l[3] = {k[1], k[2], k[3]};
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	6a3b      	ldr	r3, [r7, #32]
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189a:	617b      	str	r3, [r7, #20]

    ctx->round_keys[0] = k[0];
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	601a      	str	r2, [r3, #0]

    for (i = 0; i < 26; i++) {
 80018a2:	2300      	movs	r3, #0
 80018a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80018a6:	e039      	b.n	800191c <speck_init+0xbc>
        uint32_t idx = i % 3;
 80018a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80018aa:	4b20      	ldr	r3, [pc, #128]	@ (800192c <speck_init+0xcc>)
 80018ac:	fba3 1302 	umull	r1, r3, r3, r2
 80018b0:	0859      	lsrs	r1, r3, #1
 80018b2:	460b      	mov	r3, r1
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	440b      	add	r3, r1
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	62bb      	str	r3, [r7, #40]	@ 0x28
        l[idx] = ((ror32(l[idx], alpha) + ctx->round_keys[i]) ^ i);
 80018bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	3338      	adds	r3, #56	@ 0x38
 80018c2:	443b      	add	r3, r7
 80018c4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80018c8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff ffa8 	bl	8001820 <ror32>
 80018d0:	4601      	mov	r1, r0
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80018d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018da:	18ca      	adds	r2, r1, r3
 80018dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018de:	405a      	eors	r2, r3
 80018e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	3338      	adds	r3, #56	@ 0x38
 80018e6:	443b      	add	r3, r7
 80018e8:	f843 2c2c 	str.w	r2, [r3, #-44]
        ctx->round_keys[i+1] = rol32(ctx->round_keys[i], beta) ^ l[idx];
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80018f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff ffa1 	bl	800183e <rol32>
 80018fc:	4601      	mov	r1, r0
 80018fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	3338      	adds	r3, #56	@ 0x38
 8001904:	443b      	add	r3, r7
 8001906:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800190a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800190c:	3201      	adds	r2, #1
 800190e:	4059      	eors	r1, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 26; i++) {
 8001916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001918:	3301      	adds	r3, #1
 800191a:	637b      	str	r3, [r7, #52]	@ 0x34
 800191c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800191e:	2b19      	cmp	r3, #25
 8001920:	d9c2      	bls.n	80018a8 <speck_init+0x48>
    }
}
 8001922:	bf00      	nop
 8001924:	bf00      	nop
 8001926:	3738      	adds	r7, #56	@ 0x38
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	aaaaaaab 	.word	0xaaaaaaab

08001930 <speck_encrypt>:

void speck_encrypt(const SpeckContext *ctx, uint32_t *block) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
    // Параметры алгоритма Speck (согласно спецификации)
    const uint32_t alpha = 8; // Параметр сдвига
 800193a:	2308      	movs	r3, #8
 800193c:	613b      	str	r3, [r7, #16]
    const uint32_t beta = 3;  // Параметр сдвига
 800193e:	2303      	movs	r3, #3
 8001940:	60fb      	str	r3, [r7, #12]

    uint32_t x = block[0];
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	61fb      	str	r3, [r7, #28]
    uint32_t y = block[1];
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	61bb      	str	r3, [r7, #24]

    // Применяем 27 раундов шифрования
    for (uint32_t i = 0; i < 27; i++) {
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
 8001952:	e018      	b.n	8001986 <speck_encrypt+0x56>
        x = ror32(x, alpha);
 8001954:	6939      	ldr	r1, [r7, #16]
 8001956:	69f8      	ldr	r0, [r7, #28]
 8001958:	f7ff ff62 	bl	8001820 <ror32>
 800195c:	61f8      	str	r0, [r7, #28]
        x = (x + y) ^ ctx->round_keys[i];
 800195e:	69fa      	ldr	r2, [r7, #28]
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	441a      	add	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6979      	ldr	r1, [r7, #20]
 8001968:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800196c:	4053      	eors	r3, r2
 800196e:	61fb      	str	r3, [r7, #28]
        y = rol32(y, beta) ^ x;
 8001970:	68f9      	ldr	r1, [r7, #12]
 8001972:	69b8      	ldr	r0, [r7, #24]
 8001974:	f7ff ff63 	bl	800183e <rol32>
 8001978:	4602      	mov	r2, r0
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	4053      	eors	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
    for (uint32_t i = 0; i < 27; i++) {
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	3301      	adds	r3, #1
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	2b1a      	cmp	r3, #26
 800198a:	d9e3      	bls.n	8001954 <speck_encrypt+0x24>
    }

    block[0] = x;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	69fa      	ldr	r2, [r7, #28]
 8001990:	601a      	str	r2, [r3, #0]
    block[1] = y;
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	3304      	adds	r3, #4
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	601a      	str	r2, [r3, #0]
}
 800199a:	bf00      	nop
 800199c:	3720      	adds	r7, #32
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <speck_decrypt>:

void speck_decrypt(const SpeckContext *ctx, uint32_t *block) {
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b088      	sub	sp, #32
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	6039      	str	r1, [r7, #0]
    // Параметры алгоритма Speck (согласно спецификации)
    const uint32_t alpha = 8; // Параметр сдвига
 80019ac:	2308      	movs	r3, #8
 80019ae:	613b      	str	r3, [r7, #16]
    const uint32_t beta = 3;  // Параметр сдвига
 80019b0:	2303      	movs	r3, #3
 80019b2:	60fb      	str	r3, [r7, #12]

    uint32_t x = block[0];
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	61fb      	str	r3, [r7, #28]
    uint32_t y = block[1];
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	61bb      	str	r3, [r7, #24]

    // Выполняем 27 раундов расшифрования в обратном порядке
    for (uint32_t i = 0; i < 27; i++) {
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	e01d      	b.n	8001a02 <speck_decrypt+0x60>
        uint32_t round_key = ctx->round_keys[26 - i];
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f1c3 021a 	rsb	r2, r3, #26
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d2:	60bb      	str	r3, [r7, #8]

        y = y ^ x;
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	4053      	eors	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        y = ror32(y, beta);
 80019dc:	68f9      	ldr	r1, [r7, #12]
 80019de:	69b8      	ldr	r0, [r7, #24]
 80019e0:	f7ff ff1e 	bl	8001820 <ror32>
 80019e4:	61b8      	str	r0, [r7, #24]
        x = ((x ^ round_key) - y);
 80019e6:	69fa      	ldr	r2, [r7, #28]
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	405a      	eors	r2, r3
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	61fb      	str	r3, [r7, #28]
        x = rol32(x, alpha);
 80019f2:	6939      	ldr	r1, [r7, #16]
 80019f4:	69f8      	ldr	r0, [r7, #28]
 80019f6:	f7ff ff22 	bl	800183e <rol32>
 80019fa:	61f8      	str	r0, [r7, #28]
    for (uint32_t i = 0; i < 27; i++) {
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	3301      	adds	r3, #1
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	2b1a      	cmp	r3, #26
 8001a06:	d9de      	bls.n	80019c6 <speck_decrypt+0x24>
    }

    block[0] = x;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	69fa      	ldr	r2, [r7, #28]
 8001a0c:	601a      	str	r2, [r3, #0]
    block[1] = y;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	3304      	adds	r3, #4
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	601a      	str	r2, [r3, #0]
}
 8001a16:	bf00      	nop
 8001a18:	3720      	adds	r7, #32
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <speck_mac>:

void speck_mac(const SpeckContext *ctx, const uint8_t *data, size_t len, uint8_t *mac) {
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b08c      	sub	sp, #48	@ 0x30
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	60f8      	str	r0, [r7, #12]
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	603b      	str	r3, [r7, #0]
    uint32_t mac_block[2] = {0, 0}; // Инициализационный вектор - нули
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61bb      	str	r3, [r7, #24]
 8001a30:	2300      	movs	r3, #0
 8001a32:	61fb      	str	r3, [r7, #28]
    uint32_t block[2];
    uint8_t *padded_data;
    size_t padded_len;

    // Дополняем данные до кратности 8 байт (64 бит)
    padded_len = ((len + 7) / 8) * 8;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3307      	adds	r3, #7
 8001a38:	f023 0307 	bic.w	r3, r3, #7
 8001a3c:	627b      	str	r3, [r7, #36]	@ 0x24
    padded_data = (uint8_t*)calloc(padded_len, 1);
 8001a3e:	2101      	movs	r1, #1
 8001a40:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001a42:	f003 fb71 	bl	8005128 <calloc>
 8001a46:	4603      	mov	r3, r0
 8001a48:	623b      	str	r3, [r7, #32]
    if (padded_data == NULL) {
 8001a4a:	6a3b      	ldr	r3, [r7, #32]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d07b      	beq.n	8001b48 <speck_mac+0x12a>
        return; // Ошибка выделения памяти
    }

    // Копируем исходные данные в дополненный буфер
    memcpy(padded_data, data, len);
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	68b9      	ldr	r1, [r7, #8]
 8001a54:	6a38      	ldr	r0, [r7, #32]
 8001a56:	f003 fce5 	bl	8005424 <memcpy>

    // Обрабатываем данные блоками по 8 байт (64 бит) - CBC-MAC на основе Speck
    for (size_t i = 0; i < padded_len; i += 8) {
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a5e:	e049      	b.n	8001af4 <speck_mac+0xd6>
        // Преобразуем 8 байт в два 32-битных слова (big-endian)
        block[0] = ((uint32_t)padded_data[i] << 24) |
 8001a60:	6a3a      	ldr	r2, [r7, #32]
 8001a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a64:	4413      	add	r3, r2
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	061a      	lsls	r2, r3, #24
                  ((uint32_t)padded_data[i+1] << 16) |
 8001a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	6a39      	ldr	r1, [r7, #32]
 8001a70:	440b      	add	r3, r1
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	041b      	lsls	r3, r3, #16
        block[0] = ((uint32_t)padded_data[i] << 24) |
 8001a76:	431a      	orrs	r2, r3
                  ((uint32_t)padded_data[i+2] << 8) |
 8001a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	6a39      	ldr	r1, [r7, #32]
 8001a7e:	440b      	add	r3, r1
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	021b      	lsls	r3, r3, #8
                  ((uint32_t)padded_data[i+1] << 16) |
 8001a84:	4313      	orrs	r3, r2
                  padded_data[i+3];
 8001a86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a88:	3203      	adds	r2, #3
 8001a8a:	6a39      	ldr	r1, [r7, #32]
 8001a8c:	440a      	add	r2, r1
 8001a8e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)padded_data[i+2] << 8) |
 8001a90:	4313      	orrs	r3, r2
        block[0] = ((uint32_t)padded_data[i] << 24) |
 8001a92:	613b      	str	r3, [r7, #16]

        block[1] = ((uint32_t)padded_data[i+4] << 24) |
 8001a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a96:	3304      	adds	r3, #4
 8001a98:	6a3a      	ldr	r2, [r7, #32]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)padded_data[i+5] << 16) |
 8001aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aa2:	3305      	adds	r3, #5
 8001aa4:	6a39      	ldr	r1, [r7, #32]
 8001aa6:	440b      	add	r3, r1
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	041b      	lsls	r3, r3, #16
        block[1] = ((uint32_t)padded_data[i+4] << 24) |
 8001aac:	431a      	orrs	r2, r3
                  ((uint32_t)padded_data[i+6] << 8) |
 8001aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ab0:	3306      	adds	r3, #6
 8001ab2:	6a39      	ldr	r1, [r7, #32]
 8001ab4:	440b      	add	r3, r1
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	021b      	lsls	r3, r3, #8
                  ((uint32_t)padded_data[i+5] << 16) |
 8001aba:	4313      	orrs	r3, r2
                  padded_data[i+7];
 8001abc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001abe:	3207      	adds	r2, #7
 8001ac0:	6a39      	ldr	r1, [r7, #32]
 8001ac2:	440a      	add	r2, r1
 8001ac4:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)padded_data[i+6] << 8) |
 8001ac6:	4313      	orrs	r3, r2
        block[1] = ((uint32_t)padded_data[i+4] << 24) |
 8001ac8:	617b      	str	r3, [r7, #20]

        // XOR с предыдущим результатом (для CBC режима)
        block[0] ^= mac_block[0];
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	4053      	eors	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        block[1] ^= mac_block[1];
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	4053      	eors	r3, r2
 8001ad8:	617b      	str	r3, [r7, #20]

        // Шифруем блок
        speck_encrypt(ctx, block);
 8001ada:	f107 0310 	add.w	r3, r7, #16
 8001ade:	4619      	mov	r1, r3
 8001ae0:	68f8      	ldr	r0, [r7, #12]
 8001ae2:	f7ff ff25 	bl	8001930 <speck_encrypt>

        // Сохраняем результат для следующей итерации
        mac_block[0] = block[0];
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	61bb      	str	r3, [r7, #24]
        mac_block[1] = block[1];
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < padded_len; i += 8) {
 8001aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001af0:	3308      	adds	r3, #8
 8001af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001af4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d3b1      	bcc.n	8001a60 <speck_mac+0x42>
    }

    free(padded_data);
 8001afc:	6a38      	ldr	r0, [r7, #32]
 8001afe:	f003 fb2f 	bl	8005160 <free>

    // Преобразуем 64-битный MAC (2 слова по 32 бита) в 8 байт
    for (int i = 0; i < 4; i++) {
 8001b02:	2300      	movs	r3, #0
 8001b04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b06:	e01b      	b.n	8001b40 <speck_mac+0x122>
        mac[i] = (mac_block[0] >> (24 - i*8)) & 0xFF;
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b0c:	f1c3 0303 	rsb	r3, r3, #3
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	fa22 f103 	lsr.w	r1, r2, r3
 8001b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	b2ca      	uxtb	r2, r1
 8001b1e:	701a      	strb	r2, [r3, #0]
        mac[i+4] = (mac_block[1] >> (24 - i*8)) & 0xFF;
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b24:	f1c3 0303 	rsb	r3, r3, #3
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	fa22 f103 	lsr.w	r1, r2, r3
 8001b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b30:	3304      	adds	r3, #4
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	4413      	add	r3, r2
 8001b36:	b2ca      	uxtb	r2, r1
 8001b38:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 8001b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b42:	2b03      	cmp	r3, #3
 8001b44:	dde0      	ble.n	8001b08 <speck_mac+0xea>
 8001b46:	e000      	b.n	8001b4a <speck_mac+0x12c>
        return; // Ошибка выделения памяти
 8001b48:	bf00      	nop
    }
}
 8001b4a:	3730      	adds	r7, #48	@ 0x30
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	607b      	str	r3, [r7, #4]
 8001b5a:	4b10      	ldr	r3, [pc, #64]	@ (8001b9c <HAL_MspInit+0x4c>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5e:	4a0f      	ldr	r2, [pc, #60]	@ (8001b9c <HAL_MspInit+0x4c>)
 8001b60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b66:	4b0d      	ldr	r3, [pc, #52]	@ (8001b9c <HAL_MspInit+0x4c>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b6e:	607b      	str	r3, [r7, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	603b      	str	r3, [r7, #0]
 8001b76:	4b09      	ldr	r3, [pc, #36]	@ (8001b9c <HAL_MspInit+0x4c>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	4a08      	ldr	r2, [pc, #32]	@ (8001b9c <HAL_MspInit+0x4c>)
 8001b7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b82:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <HAL_MspInit+0x4c>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b8a:	603b      	str	r3, [r7, #0]
 8001b8c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b8e:	2007      	movs	r0, #7
 8001b90:	f000 fc6e 	bl	8002470 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b94:	bf00      	nop
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40023800 	.word	0x40023800

08001ba0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08e      	sub	sp, #56	@ 0x38
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a7b      	ldr	r2, [pc, #492]	@ (8001dac <HAL_UART_MspInit+0x20c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	f040 8094 	bne.w	8001cec <HAL_UART_MspInit+0x14c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	623b      	str	r3, [r7, #32]
 8001bc8:	4b79      	ldr	r3, [pc, #484]	@ (8001db0 <HAL_UART_MspInit+0x210>)
 8001bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bcc:	4a78      	ldr	r2, [pc, #480]	@ (8001db0 <HAL_UART_MspInit+0x210>)
 8001bce:	f043 0310 	orr.w	r3, r3, #16
 8001bd2:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bd4:	4b76      	ldr	r3, [pc, #472]	@ (8001db0 <HAL_UART_MspInit+0x210>)
 8001bd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd8:	f003 0310 	and.w	r3, r3, #16
 8001bdc:	623b      	str	r3, [r7, #32]
 8001bde:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be0:	2300      	movs	r3, #0
 8001be2:	61fb      	str	r3, [r7, #28]
 8001be4:	4b72      	ldr	r3, [pc, #456]	@ (8001db0 <HAL_UART_MspInit+0x210>)
 8001be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be8:	4a71      	ldr	r2, [pc, #452]	@ (8001db0 <HAL_UART_MspInit+0x210>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf0:	4b6f      	ldr	r3, [pc, #444]	@ (8001db0 <HAL_UART_MspInit+0x210>)
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	61fb      	str	r3, [r7, #28]
 8001bfa:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001bfc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001c00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	2302      	movs	r3, #2
 8001c04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c0e:	2307      	movs	r3, #7
 8001c10:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c16:	4619      	mov	r1, r3
 8001c18:	4866      	ldr	r0, [pc, #408]	@ (8001db4 <HAL_UART_MspInit+0x214>)
 8001c1a:	f001 f879 	bl	8002d10 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001c1e:	4b66      	ldr	r3, [pc, #408]	@ (8001db8 <HAL_UART_MspInit+0x218>)
 8001c20:	4a66      	ldr	r2, [pc, #408]	@ (8001dbc <HAL_UART_MspInit+0x21c>)
 8001c22:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001c24:	4b64      	ldr	r3, [pc, #400]	@ (8001db8 <HAL_UART_MspInit+0x218>)
 8001c26:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001c2a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c2c:	4b62      	ldr	r3, [pc, #392]	@ (8001db8 <HAL_UART_MspInit+0x218>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c32:	4b61      	ldr	r3, [pc, #388]	@ (8001db8 <HAL_UART_MspInit+0x218>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c38:	4b5f      	ldr	r3, [pc, #380]	@ (8001db8 <HAL_UART_MspInit+0x218>)
 8001c3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c3e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c40:	4b5d      	ldr	r3, [pc, #372]	@ (8001db8 <HAL_UART_MspInit+0x218>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c46:	4b5c      	ldr	r3, [pc, #368]	@ (8001db8 <HAL_UART_MspInit+0x218>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001c4c:	4b5a      	ldr	r3, [pc, #360]	@ (8001db8 <HAL_UART_MspInit+0x218>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001c52:	4b59      	ldr	r3, [pc, #356]	@ (8001db8 <HAL_UART_MspInit+0x218>)
 8001c54:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c58:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c5a:	4b57      	ldr	r3, [pc, #348]	@ (8001db8 <HAL_UART_MspInit+0x218>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001c60:	4855      	ldr	r0, [pc, #340]	@ (8001db8 <HAL_UART_MspInit+0x218>)
 8001c62:	f000 fc47 	bl	80024f4 <HAL_DMA_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001c6c:	f7ff f808 	bl	8000c80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a51      	ldr	r2, [pc, #324]	@ (8001db8 <HAL_UART_MspInit+0x218>)
 8001c74:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c76:	4a50      	ldr	r2, [pc, #320]	@ (8001db8 <HAL_UART_MspInit+0x218>)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001c7c:	4b50      	ldr	r3, [pc, #320]	@ (8001dc0 <HAL_UART_MspInit+0x220>)
 8001c7e:	4a51      	ldr	r2, [pc, #324]	@ (8001dc4 <HAL_UART_MspInit+0x224>)
 8001c80:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001c82:	4b4f      	ldr	r3, [pc, #316]	@ (8001dc0 <HAL_UART_MspInit+0x220>)
 8001c84:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001c88:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c8a:	4b4d      	ldr	r3, [pc, #308]	@ (8001dc0 <HAL_UART_MspInit+0x220>)
 8001c8c:	2240      	movs	r2, #64	@ 0x40
 8001c8e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c90:	4b4b      	ldr	r3, [pc, #300]	@ (8001dc0 <HAL_UART_MspInit+0x220>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c96:	4b4a      	ldr	r3, [pc, #296]	@ (8001dc0 <HAL_UART_MspInit+0x220>)
 8001c98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c9c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c9e:	4b48      	ldr	r3, [pc, #288]	@ (8001dc0 <HAL_UART_MspInit+0x220>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ca4:	4b46      	ldr	r3, [pc, #280]	@ (8001dc0 <HAL_UART_MspInit+0x220>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001caa:	4b45      	ldr	r3, [pc, #276]	@ (8001dc0 <HAL_UART_MspInit+0x220>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001cb0:	4b43      	ldr	r3, [pc, #268]	@ (8001dc0 <HAL_UART_MspInit+0x220>)
 8001cb2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001cb6:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cb8:	4b41      	ldr	r3, [pc, #260]	@ (8001dc0 <HAL_UART_MspInit+0x220>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001cbe:	4840      	ldr	r0, [pc, #256]	@ (8001dc0 <HAL_UART_MspInit+0x220>)
 8001cc0:	f000 fc18 	bl	80024f4 <HAL_DMA_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8001cca:	f7fe ffd9 	bl	8000c80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a3b      	ldr	r2, [pc, #236]	@ (8001dc0 <HAL_UART_MspInit+0x220>)
 8001cd2:	639a      	str	r2, [r3, #56]	@ 0x38
 8001cd4:	4a3a      	ldr	r2, [pc, #232]	@ (8001dc0 <HAL_UART_MspInit+0x220>)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2100      	movs	r1, #0
 8001cde:	2025      	movs	r0, #37	@ 0x25
 8001ce0:	f000 fbd1 	bl	8002486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ce4:	2025      	movs	r0, #37	@ 0x25
 8001ce6:	f000 fbea 	bl	80024be <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8001cea:	e10b      	b.n	8001f04 <HAL_UART_MspInit+0x364>
  else if(huart->Instance==USART2)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a35      	ldr	r2, [pc, #212]	@ (8001dc8 <HAL_UART_MspInit+0x228>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d16e      	bne.n	8001dd4 <HAL_UART_MspInit+0x234>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61bb      	str	r3, [r7, #24]
 8001cfa:	4b2d      	ldr	r3, [pc, #180]	@ (8001db0 <HAL_UART_MspInit+0x210>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfe:	4a2c      	ldr	r2, [pc, #176]	@ (8001db0 <HAL_UART_MspInit+0x210>)
 8001d00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d06:	4b2a      	ldr	r3, [pc, #168]	@ (8001db0 <HAL_UART_MspInit+0x210>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0e:	61bb      	str	r3, [r7, #24]
 8001d10:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]
 8001d16:	4b26      	ldr	r3, [pc, #152]	@ (8001db0 <HAL_UART_MspInit+0x210>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1a:	4a25      	ldr	r2, [pc, #148]	@ (8001db0 <HAL_UART_MspInit+0x210>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d22:	4b23      	ldr	r3, [pc, #140]	@ (8001db0 <HAL_UART_MspInit+0x210>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d2e:	230c      	movs	r3, #12
 8001d30:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	2302      	movs	r3, #2
 8001d34:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d3e:	2307      	movs	r3, #7
 8001d40:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d46:	4619      	mov	r1, r3
 8001d48:	481a      	ldr	r0, [pc, #104]	@ (8001db4 <HAL_UART_MspInit+0x214>)
 8001d4a:	f000 ffe1 	bl	8002d10 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001d4e:	4b1f      	ldr	r3, [pc, #124]	@ (8001dcc <HAL_UART_MspInit+0x22c>)
 8001d50:	4a1f      	ldr	r2, [pc, #124]	@ (8001dd0 <HAL_UART_MspInit+0x230>)
 8001d52:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001d54:	4b1d      	ldr	r3, [pc, #116]	@ (8001dcc <HAL_UART_MspInit+0x22c>)
 8001d56:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001d5a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dcc <HAL_UART_MspInit+0x22c>)
 8001d5e:	2240      	movs	r2, #64	@ 0x40
 8001d60:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d62:	4b1a      	ldr	r3, [pc, #104]	@ (8001dcc <HAL_UART_MspInit+0x22c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d68:	4b18      	ldr	r3, [pc, #96]	@ (8001dcc <HAL_UART_MspInit+0x22c>)
 8001d6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d6e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d70:	4b16      	ldr	r3, [pc, #88]	@ (8001dcc <HAL_UART_MspInit+0x22c>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d76:	4b15      	ldr	r3, [pc, #84]	@ (8001dcc <HAL_UART_MspInit+0x22c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001d7c:	4b13      	ldr	r3, [pc, #76]	@ (8001dcc <HAL_UART_MspInit+0x22c>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d82:	4b12      	ldr	r3, [pc, #72]	@ (8001dcc <HAL_UART_MspInit+0x22c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d88:	4b10      	ldr	r3, [pc, #64]	@ (8001dcc <HAL_UART_MspInit+0x22c>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001d8e:	480f      	ldr	r0, [pc, #60]	@ (8001dcc <HAL_UART_MspInit+0x22c>)
 8001d90:	f000 fbb0 	bl	80024f4 <HAL_DMA_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <HAL_UART_MspInit+0x1fe>
      Error_Handler();
 8001d9a:	f7fe ff71 	bl	8000c80 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a0a      	ldr	r2, [pc, #40]	@ (8001dcc <HAL_UART_MspInit+0x22c>)
 8001da2:	639a      	str	r2, [r3, #56]	@ 0x38
 8001da4:	4a09      	ldr	r2, [pc, #36]	@ (8001dcc <HAL_UART_MspInit+0x22c>)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001daa:	e0ab      	b.n	8001f04 <HAL_UART_MspInit+0x364>
 8001dac:	40011000 	.word	0x40011000
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40020000 	.word	0x40020000
 8001db8:	20000150 	.word	0x20000150
 8001dbc:	40026440 	.word	0x40026440
 8001dc0:	200001b0 	.word	0x200001b0
 8001dc4:	400264b8 	.word	0x400264b8
 8001dc8:	40004400 	.word	0x40004400
 8001dcc:	20000210 	.word	0x20000210
 8001dd0:	400260a0 	.word	0x400260a0
  else if(huart->Instance==USART6)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a4c      	ldr	r2, [pc, #304]	@ (8001f0c <HAL_UART_MspInit+0x36c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	f040 8092 	bne.w	8001f04 <HAL_UART_MspInit+0x364>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001de0:	2300      	movs	r3, #0
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	4b4a      	ldr	r3, [pc, #296]	@ (8001f10 <HAL_UART_MspInit+0x370>)
 8001de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de8:	4a49      	ldr	r2, [pc, #292]	@ (8001f10 <HAL_UART_MspInit+0x370>)
 8001dea:	f043 0320 	orr.w	r3, r3, #32
 8001dee:	6453      	str	r3, [r2, #68]	@ 0x44
 8001df0:	4b47      	ldr	r3, [pc, #284]	@ (8001f10 <HAL_UART_MspInit+0x370>)
 8001df2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df4:	f003 0320 	and.w	r3, r3, #32
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	4b43      	ldr	r3, [pc, #268]	@ (8001f10 <HAL_UART_MspInit+0x370>)
 8001e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e04:	4a42      	ldr	r2, [pc, #264]	@ (8001f10 <HAL_UART_MspInit+0x370>)
 8001e06:	f043 0304 	orr.w	r3, r3, #4
 8001e0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0c:	4b40      	ldr	r3, [pc, #256]	@ (8001f10 <HAL_UART_MspInit+0x370>)
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e18:	23c0      	movs	r3, #192	@ 0xc0
 8001e1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e24:	2303      	movs	r3, #3
 8001e26:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001e28:	2308      	movs	r3, #8
 8001e2a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e30:	4619      	mov	r1, r3
 8001e32:	4838      	ldr	r0, [pc, #224]	@ (8001f14 <HAL_UART_MspInit+0x374>)
 8001e34:	f000 ff6c 	bl	8002d10 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001e38:	4b37      	ldr	r3, [pc, #220]	@ (8001f18 <HAL_UART_MspInit+0x378>)
 8001e3a:	4a38      	ldr	r2, [pc, #224]	@ (8001f1c <HAL_UART_MspInit+0x37c>)
 8001e3c:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001e3e:	4b36      	ldr	r3, [pc, #216]	@ (8001f18 <HAL_UART_MspInit+0x378>)
 8001e40:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001e44:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e46:	4b34      	ldr	r3, [pc, #208]	@ (8001f18 <HAL_UART_MspInit+0x378>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e4c:	4b32      	ldr	r3, [pc, #200]	@ (8001f18 <HAL_UART_MspInit+0x378>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e52:	4b31      	ldr	r3, [pc, #196]	@ (8001f18 <HAL_UART_MspInit+0x378>)
 8001e54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e58:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f18 <HAL_UART_MspInit+0x378>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e60:	4b2d      	ldr	r3, [pc, #180]	@ (8001f18 <HAL_UART_MspInit+0x378>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001e66:	4b2c      	ldr	r3, [pc, #176]	@ (8001f18 <HAL_UART_MspInit+0x378>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001e6c:	4b2a      	ldr	r3, [pc, #168]	@ (8001f18 <HAL_UART_MspInit+0x378>)
 8001e6e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001e72:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e74:	4b28      	ldr	r3, [pc, #160]	@ (8001f18 <HAL_UART_MspInit+0x378>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001e7a:	4827      	ldr	r0, [pc, #156]	@ (8001f18 <HAL_UART_MspInit+0x378>)
 8001e7c:	f000 fb3a 	bl	80024f4 <HAL_DMA_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_UART_MspInit+0x2ea>
      Error_Handler();
 8001e86:	f7fe fefb 	bl	8000c80 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a22      	ldr	r2, [pc, #136]	@ (8001f18 <HAL_UART_MspInit+0x378>)
 8001e8e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e90:	4a21      	ldr	r2, [pc, #132]	@ (8001f18 <HAL_UART_MspInit+0x378>)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8001e96:	4b22      	ldr	r3, [pc, #136]	@ (8001f20 <HAL_UART_MspInit+0x380>)
 8001e98:	4a22      	ldr	r2, [pc, #136]	@ (8001f24 <HAL_UART_MspInit+0x384>)
 8001e9a:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8001e9c:	4b20      	ldr	r3, [pc, #128]	@ (8001f20 <HAL_UART_MspInit+0x380>)
 8001e9e:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001ea2:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f20 <HAL_UART_MspInit+0x380>)
 8001ea6:	2240      	movs	r2, #64	@ 0x40
 8001ea8:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8001f20 <HAL_UART_MspInit+0x380>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f20 <HAL_UART_MspInit+0x380>)
 8001eb2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001eb6:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001eb8:	4b19      	ldr	r3, [pc, #100]	@ (8001f20 <HAL_UART_MspInit+0x380>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ebe:	4b18      	ldr	r3, [pc, #96]	@ (8001f20 <HAL_UART_MspInit+0x380>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8001ec4:	4b16      	ldr	r3, [pc, #88]	@ (8001f20 <HAL_UART_MspInit+0x380>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001eca:	4b15      	ldr	r3, [pc, #84]	@ (8001f20 <HAL_UART_MspInit+0x380>)
 8001ecc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ed0:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ed2:	4b13      	ldr	r3, [pc, #76]	@ (8001f20 <HAL_UART_MspInit+0x380>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001ed8:	4811      	ldr	r0, [pc, #68]	@ (8001f20 <HAL_UART_MspInit+0x380>)
 8001eda:	f000 fb0b 	bl	80024f4 <HAL_DMA_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HAL_UART_MspInit+0x348>
      Error_Handler();
 8001ee4:	f7fe fecc 	bl	8000c80 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a0d      	ldr	r2, [pc, #52]	@ (8001f20 <HAL_UART_MspInit+0x380>)
 8001eec:	639a      	str	r2, [r3, #56]	@ 0x38
 8001eee:	4a0c      	ldr	r2, [pc, #48]	@ (8001f20 <HAL_UART_MspInit+0x380>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	2047      	movs	r0, #71	@ 0x47
 8001efa:	f000 fac4 	bl	8002486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001efe:	2047      	movs	r0, #71	@ 0x47
 8001f00:	f000 fadd 	bl	80024be <HAL_NVIC_EnableIRQ>
}
 8001f04:	bf00      	nop
 8001f06:	3738      	adds	r7, #56	@ 0x38
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40011400 	.word	0x40011400
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40020800 	.word	0x40020800
 8001f18:	20000270 	.word	0x20000270
 8001f1c:	40026428 	.word	0x40026428
 8001f20:	200002d0 	.word	0x200002d0
 8001f24:	400264a0 	.word	0x400264a0

08001f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f2c:	bf00      	nop
 8001f2e:	e7fd      	b.n	8001f2c <NMI_Handler+0x4>

08001f30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f34:	bf00      	nop
 8001f36:	e7fd      	b.n	8001f34 <HardFault_Handler+0x4>

08001f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f3c:	bf00      	nop
 8001f3e:	e7fd      	b.n	8001f3c <MemManage_Handler+0x4>

08001f40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f44:	bf00      	nop
 8001f46:	e7fd      	b.n	8001f44 <BusFault_Handler+0x4>

08001f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f4c:	bf00      	nop
 8001f4e:	e7fd      	b.n	8001f4c <UsageFault_Handler+0x4>

08001f50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f7e:	f000 f963 	bl	8002248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001f8c:	4802      	ldr	r0, [pc, #8]	@ (8001f98 <DMA1_Stream6_IRQHandler+0x10>)
 8001f8e:	f000 fc49 	bl	8002824 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000210 	.word	0x20000210

08001f9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b096      	sub	sp, #88	@ 0x58
 8001fa0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN USART1_IRQn 0 */
  // Явно проверяем флаги USART
  uint32_t isrflags = READ_REG(huart1.Instance->SR);
 8001fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800201c <USART1_IRQHandler+0x80>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t cr1its = READ_REG(huart1.Instance->CR1);
 8001faa:	4b1c      	ldr	r3, [pc, #112]	@ (800201c <USART1_IRQHandler+0x80>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	64bb      	str	r3, [r7, #72]	@ 0x48

  // Для отладки
  static uint32_t idle_count = 0;

  // Проверяем наличие флага IDLE и разрешения прерывания по IDLE
  if ((isrflags & UART_FLAG_IDLE) != RESET) {
 8001fb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001fb4:	f003 0310 	and.w	r3, r3, #16
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d027      	beq.n	800200c <USART1_IRQHandler+0x70>
    // Сбрасываем флаг IDLE чтением SR и затем DR
    __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8001fc0:	4b16      	ldr	r3, [pc, #88]	@ (800201c <USART1_IRQHandler+0x80>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8001fc8:	4b14      	ldr	r3, [pc, #80]	@ (800201c <USART1_IRQHandler+0x80>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	647b      	str	r3, [r7, #68]	@ 0x44
 8001fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

    // Инкрементируем счетчик IDLE для отладки
    idle_count++;
 8001fd2:	4b13      	ldr	r3, [pc, #76]	@ (8002020 <USART1_IRQHandler+0x84>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	4a11      	ldr	r2, [pc, #68]	@ (8002020 <USART1_IRQHandler+0x84>)
 8001fda:	6013      	str	r3, [r2, #0]

    // Буфер для отладочного сообщения
    char debug[64];
    sprintf(debug, "IDLE detected (#%lu), SR=0x%lX, CR1=0x%lX\r\n",
 8001fdc:	4b10      	ldr	r3, [pc, #64]	@ (8002020 <USART1_IRQHandler+0x84>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	1d38      	adds	r0, r7, #4
 8001fe2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001fe8:	490e      	ldr	r1, [pc, #56]	@ (8002024 <USART1_IRQHandler+0x88>)
 8001fea:	f003 f9a5 	bl	8005338 <siprintf>
            idle_count, isrflags, cr1its);
    HAL_UART_Transmit(&huart2, (uint8_t*)debug, strlen(debug), 100);
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe f8f5 	bl	80001e0 <strlen>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	1d39      	adds	r1, r7, #4
 8001ffc:	2364      	movs	r3, #100	@ 0x64
 8001ffe:	480a      	ldr	r0, [pc, #40]	@ (8002028 <USART1_IRQHandler+0x8c>)
 8002000:	f001 fd26 	bl	8003a50 <HAL_UART_Transmit>

    // Вызываем обработчик IDLE-прерывания
    HAL_UARTEx_RxEventCallback(&huart1, 0);
 8002004:	2100      	movs	r1, #0
 8002006:	4805      	ldr	r0, [pc, #20]	@ (800201c <USART1_IRQHandler+0x80>)
 8002008:	f7fe fad8 	bl	80005bc <HAL_UARTEx_RxEventCallback>
  }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800200c:	4803      	ldr	r0, [pc, #12]	@ (800201c <USART1_IRQHandler+0x80>)
 800200e:	f001 ff4b 	bl	8003ea8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	3750      	adds	r7, #80	@ 0x50
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000078 	.word	0x20000078
 8002020:	200005e4 	.word	0x200005e4
 8002024:	08005ea0 	.word	0x08005ea0
 8002028:	200000c0 	.word	0x200000c0

0800202c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002030:	4802      	ldr	r0, [pc, #8]	@ (800203c <DMA2_Stream1_IRQHandler+0x10>)
 8002032:	f000 fbf7 	bl	8002824 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20000270 	.word	0x20000270

08002040 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002044:	4802      	ldr	r0, [pc, #8]	@ (8002050 <DMA2_Stream2_IRQHandler+0x10>)
 8002046:	f000 fbed 	bl	8002824 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000150 	.word	0x20000150

08002054 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002058:	4802      	ldr	r0, [pc, #8]	@ (8002064 <DMA2_Stream6_IRQHandler+0x10>)
 800205a:	f000 fbe3 	bl	8002824 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	200002d0 	.word	0x200002d0

08002068 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800206c:	4802      	ldr	r0, [pc, #8]	@ (8002078 <DMA2_Stream7_IRQHandler+0x10>)
 800206e:	f000 fbd9 	bl	8002824 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200001b0 	.word	0x200001b0

0800207c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  // Проверяем признак прерывания IDLE
  if (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE)) {
 8002082:	4b0e      	ldr	r3, [pc, #56]	@ (80020bc <USART6_IRQHandler+0x40>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0310 	and.w	r3, r3, #16
 800208c:	2b10      	cmp	r3, #16
 800208e:	d10e      	bne.n	80020ae <USART6_IRQHandler+0x32>
    // Сбрасываем флаг IDLE
    __HAL_UART_CLEAR_IDLEFLAG(&huart6);
 8002090:	2300      	movs	r3, #0
 8002092:	607b      	str	r3, [r7, #4]
 8002094:	4b09      	ldr	r3, [pc, #36]	@ (80020bc <USART6_IRQHandler+0x40>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	607b      	str	r3, [r7, #4]
 800209c:	4b07      	ldr	r3, [pc, #28]	@ (80020bc <USART6_IRQHandler+0x40>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	607b      	str	r3, [r7, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]

    // Вызываем обработчик IDLE-прерывания
    HAL_UARTEx_RxEventCallback(&huart6, 0);
 80020a6:	2100      	movs	r1, #0
 80020a8:	4804      	ldr	r0, [pc, #16]	@ (80020bc <USART6_IRQHandler+0x40>)
 80020aa:	f7fe fa87 	bl	80005bc <HAL_UARTEx_RxEventCallback>
  }
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80020ae:	4803      	ldr	r0, [pc, #12]	@ (80020bc <USART6_IRQHandler+0x40>)
 80020b0:	f001 fefa 	bl	8003ea8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000108 	.word	0x20000108

080020c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020c8:	4a14      	ldr	r2, [pc, #80]	@ (800211c <_sbrk+0x5c>)
 80020ca:	4b15      	ldr	r3, [pc, #84]	@ (8002120 <_sbrk+0x60>)
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020d4:	4b13      	ldr	r3, [pc, #76]	@ (8002124 <_sbrk+0x64>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d102      	bne.n	80020e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020dc:	4b11      	ldr	r3, [pc, #68]	@ (8002124 <_sbrk+0x64>)
 80020de:	4a12      	ldr	r2, [pc, #72]	@ (8002128 <_sbrk+0x68>)
 80020e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020e2:	4b10      	ldr	r3, [pc, #64]	@ (8002124 <_sbrk+0x64>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d207      	bcs.n	8002100 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020f0:	f003 f96c 	bl	80053cc <__errno>
 80020f4:	4603      	mov	r3, r0
 80020f6:	220c      	movs	r2, #12
 80020f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020fa:	f04f 33ff 	mov.w	r3, #4294967295
 80020fe:	e009      	b.n	8002114 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002100:	4b08      	ldr	r3, [pc, #32]	@ (8002124 <_sbrk+0x64>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002106:	4b07      	ldr	r3, [pc, #28]	@ (8002124 <_sbrk+0x64>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4413      	add	r3, r2
 800210e:	4a05      	ldr	r2, [pc, #20]	@ (8002124 <_sbrk+0x64>)
 8002110:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002112:	68fb      	ldr	r3, [r7, #12]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20020000 	.word	0x20020000
 8002120:	00000400 	.word	0x00000400
 8002124:	200005e8 	.word	0x200005e8
 8002128:	20000738 	.word	0x20000738

0800212c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002130:	4b06      	ldr	r3, [pc, #24]	@ (800214c <SystemInit+0x20>)
 8002132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002136:	4a05      	ldr	r2, [pc, #20]	@ (800214c <SystemInit+0x20>)
 8002138:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800213c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002150:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002188 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002154:	f7ff ffea 	bl	800212c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002158:	480c      	ldr	r0, [pc, #48]	@ (800218c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800215a:	490d      	ldr	r1, [pc, #52]	@ (8002190 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800215c:	4a0d      	ldr	r2, [pc, #52]	@ (8002194 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800215e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002160:	e002      	b.n	8002168 <LoopCopyDataInit>

08002162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002166:	3304      	adds	r3, #4

08002168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800216a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800216c:	d3f9      	bcc.n	8002162 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800216e:	4a0a      	ldr	r2, [pc, #40]	@ (8002198 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002170:	4c0a      	ldr	r4, [pc, #40]	@ (800219c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002174:	e001      	b.n	800217a <LoopFillZerobss>

08002176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002178:	3204      	adds	r2, #4

0800217a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800217a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800217c:	d3fb      	bcc.n	8002176 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800217e:	f003 f92b 	bl	80053d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002182:	f7fe fb67 	bl	8000854 <main>
  bx  lr    
 8002186:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002188:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800218c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002190:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002194:	08005f40 	.word	0x08005f40
  ldr r2, =_sbss
 8002198:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800219c:	20000738 	.word	0x20000738

080021a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021a0:	e7fe      	b.n	80021a0 <ADC_IRQHandler>
	...

080021a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021a8:	4b0e      	ldr	r3, [pc, #56]	@ (80021e4 <HAL_Init+0x40>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a0d      	ldr	r2, [pc, #52]	@ (80021e4 <HAL_Init+0x40>)
 80021ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021b4:	4b0b      	ldr	r3, [pc, #44]	@ (80021e4 <HAL_Init+0x40>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a0a      	ldr	r2, [pc, #40]	@ (80021e4 <HAL_Init+0x40>)
 80021ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c0:	4b08      	ldr	r3, [pc, #32]	@ (80021e4 <HAL_Init+0x40>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a07      	ldr	r2, [pc, #28]	@ (80021e4 <HAL_Init+0x40>)
 80021c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021cc:	2003      	movs	r0, #3
 80021ce:	f000 f94f 	bl	8002470 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021d2:	2000      	movs	r0, #0
 80021d4:	f000 f808 	bl	80021e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021d8:	f7ff fcba 	bl	8001b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40023c00 	.word	0x40023c00

080021e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021f0:	4b12      	ldr	r3, [pc, #72]	@ (800223c <HAL_InitTick+0x54>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	4b12      	ldr	r3, [pc, #72]	@ (8002240 <HAL_InitTick+0x58>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	4619      	mov	r1, r3
 80021fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002202:	fbb2 f3f3 	udiv	r3, r2, r3
 8002206:	4618      	mov	r0, r3
 8002208:	f000 f967 	bl	80024da <HAL_SYSTICK_Config>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e00e      	b.n	8002234 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b0f      	cmp	r3, #15
 800221a:	d80a      	bhi.n	8002232 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800221c:	2200      	movs	r2, #0
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	f04f 30ff 	mov.w	r0, #4294967295
 8002224:	f000 f92f 	bl	8002486 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002228:	4a06      	ldr	r2, [pc, #24]	@ (8002244 <HAL_InitTick+0x5c>)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	e000      	b.n	8002234 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
}
 8002234:	4618      	mov	r0, r3
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000000 	.word	0x20000000
 8002240:	20000008 	.word	0x20000008
 8002244:	20000004 	.word	0x20000004

08002248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800224c:	4b06      	ldr	r3, [pc, #24]	@ (8002268 <HAL_IncTick+0x20>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	461a      	mov	r2, r3
 8002252:	4b06      	ldr	r3, [pc, #24]	@ (800226c <HAL_IncTick+0x24>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4413      	add	r3, r2
 8002258:	4a04      	ldr	r2, [pc, #16]	@ (800226c <HAL_IncTick+0x24>)
 800225a:	6013      	str	r3, [r2, #0]
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	20000008 	.word	0x20000008
 800226c:	200005ec 	.word	0x200005ec

08002270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return uwTick;
 8002274:	4b03      	ldr	r3, [pc, #12]	@ (8002284 <HAL_GetTick+0x14>)
 8002276:	681b      	ldr	r3, [r3, #0]
}
 8002278:	4618      	mov	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	200005ec 	.word	0x200005ec

08002288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002290:	f7ff ffee 	bl	8002270 <HAL_GetTick>
 8002294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a0:	d005      	beq.n	80022ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022a2:	4b0a      	ldr	r3, [pc, #40]	@ (80022cc <HAL_Delay+0x44>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	461a      	mov	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4413      	add	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022ae:	bf00      	nop
 80022b0:	f7ff ffde 	bl	8002270 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d8f7      	bhi.n	80022b0 <HAL_Delay+0x28>
  {
  }
}
 80022c0:	bf00      	nop
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000008 	.word	0x20000008

080022d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002314 <__NVIC_SetPriorityGrouping+0x44>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022ec:	4013      	ands	r3, r2
 80022ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002302:	4a04      	ldr	r2, [pc, #16]	@ (8002314 <__NVIC_SetPriorityGrouping+0x44>)
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	60d3      	str	r3, [r2, #12]
}
 8002308:	bf00      	nop
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800231c:	4b04      	ldr	r3, [pc, #16]	@ (8002330 <__NVIC_GetPriorityGrouping+0x18>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	0a1b      	lsrs	r3, r3, #8
 8002322:	f003 0307 	and.w	r3, r3, #7
}
 8002326:	4618      	mov	r0, r3
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	2b00      	cmp	r3, #0
 8002344:	db0b      	blt.n	800235e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	f003 021f 	and.w	r2, r3, #31
 800234c:	4907      	ldr	r1, [pc, #28]	@ (800236c <__NVIC_EnableIRQ+0x38>)
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	095b      	lsrs	r3, r3, #5
 8002354:	2001      	movs	r0, #1
 8002356:	fa00 f202 	lsl.w	r2, r0, r2
 800235a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	e000e100 	.word	0xe000e100

08002370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	6039      	str	r1, [r7, #0]
 800237a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800237c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002380:	2b00      	cmp	r3, #0
 8002382:	db0a      	blt.n	800239a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	b2da      	uxtb	r2, r3
 8002388:	490c      	ldr	r1, [pc, #48]	@ (80023bc <__NVIC_SetPriority+0x4c>)
 800238a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238e:	0112      	lsls	r2, r2, #4
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	440b      	add	r3, r1
 8002394:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002398:	e00a      	b.n	80023b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	b2da      	uxtb	r2, r3
 800239e:	4908      	ldr	r1, [pc, #32]	@ (80023c0 <__NVIC_SetPriority+0x50>)
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	3b04      	subs	r3, #4
 80023a8:	0112      	lsls	r2, r2, #4
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	440b      	add	r3, r1
 80023ae:	761a      	strb	r2, [r3, #24]
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	e000e100 	.word	0xe000e100
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b089      	sub	sp, #36	@ 0x24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f1c3 0307 	rsb	r3, r3, #7
 80023de:	2b04      	cmp	r3, #4
 80023e0:	bf28      	it	cs
 80023e2:	2304      	movcs	r3, #4
 80023e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	3304      	adds	r3, #4
 80023ea:	2b06      	cmp	r3, #6
 80023ec:	d902      	bls.n	80023f4 <NVIC_EncodePriority+0x30>
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3b03      	subs	r3, #3
 80023f2:	e000      	b.n	80023f6 <NVIC_EncodePriority+0x32>
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f8:	f04f 32ff 	mov.w	r2, #4294967295
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43da      	mvns	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	401a      	ands	r2, r3
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800240c:	f04f 31ff 	mov.w	r1, #4294967295
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	fa01 f303 	lsl.w	r3, r1, r3
 8002416:	43d9      	mvns	r1, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800241c:	4313      	orrs	r3, r2
         );
}
 800241e:	4618      	mov	r0, r3
 8002420:	3724      	adds	r7, #36	@ 0x24
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
	...

0800242c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3b01      	subs	r3, #1
 8002438:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800243c:	d301      	bcc.n	8002442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800243e:	2301      	movs	r3, #1
 8002440:	e00f      	b.n	8002462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002442:	4a0a      	ldr	r2, [pc, #40]	@ (800246c <SysTick_Config+0x40>)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3b01      	subs	r3, #1
 8002448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800244a:	210f      	movs	r1, #15
 800244c:	f04f 30ff 	mov.w	r0, #4294967295
 8002450:	f7ff ff8e 	bl	8002370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002454:	4b05      	ldr	r3, [pc, #20]	@ (800246c <SysTick_Config+0x40>)
 8002456:	2200      	movs	r2, #0
 8002458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800245a:	4b04      	ldr	r3, [pc, #16]	@ (800246c <SysTick_Config+0x40>)
 800245c:	2207      	movs	r2, #7
 800245e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	e000e010 	.word	0xe000e010

08002470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f7ff ff29 	bl	80022d0 <__NVIC_SetPriorityGrouping>
}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002486:	b580      	push	{r7, lr}
 8002488:	b086      	sub	sp, #24
 800248a:	af00      	add	r7, sp, #0
 800248c:	4603      	mov	r3, r0
 800248e:	60b9      	str	r1, [r7, #8]
 8002490:	607a      	str	r2, [r7, #4]
 8002492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002498:	f7ff ff3e 	bl	8002318 <__NVIC_GetPriorityGrouping>
 800249c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	68b9      	ldr	r1, [r7, #8]
 80024a2:	6978      	ldr	r0, [r7, #20]
 80024a4:	f7ff ff8e 	bl	80023c4 <NVIC_EncodePriority>
 80024a8:	4602      	mov	r2, r0
 80024aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ae:	4611      	mov	r1, r2
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff ff5d 	bl	8002370 <__NVIC_SetPriority>
}
 80024b6:	bf00      	nop
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b082      	sub	sp, #8
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	4603      	mov	r3, r0
 80024c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff ff31 	bl	8002334 <__NVIC_EnableIRQ>
}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7ff ffa2 	bl	800242c <SysTick_Config>
 80024e8:	4603      	mov	r3, r0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
	...

080024f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002500:	f7ff feb6 	bl	8002270 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e099      	b.n	8002644 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2202      	movs	r2, #2
 8002514:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0201 	bic.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002530:	e00f      	b.n	8002552 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002532:	f7ff fe9d 	bl	8002270 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b05      	cmp	r3, #5
 800253e:	d908      	bls.n	8002552 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2220      	movs	r2, #32
 8002544:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2203      	movs	r2, #3
 800254a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e078      	b.n	8002644 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1e8      	bne.n	8002532 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	4b38      	ldr	r3, [pc, #224]	@ (800264c <HAL_DMA_Init+0x158>)
 800256c:	4013      	ands	r3, r2
 800256e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800257e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800258a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002596:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d107      	bne.n	80025bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b4:	4313      	orrs	r3, r2
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f023 0307 	bic.w	r3, r3, #7
 80025d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	4313      	orrs	r3, r2
 80025dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	d117      	bne.n	8002616 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00e      	beq.n	8002616 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 fb0d 	bl	8002c18 <DMA_CheckFifoParam>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d008      	beq.n	8002616 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2240      	movs	r2, #64	@ 0x40
 8002608:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002612:	2301      	movs	r3, #1
 8002614:	e016      	b.n	8002644 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 fac4 	bl	8002bac <DMA_CalcBaseAndBitshift>
 8002624:	4603      	mov	r3, r0
 8002626:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800262c:	223f      	movs	r2, #63	@ 0x3f
 800262e:	409a      	lsls	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	f010803f 	.word	0xf010803f

08002650 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
 800265c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800265e:	2300      	movs	r3, #0
 8002660:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002666:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800266e:	2b01      	cmp	r3, #1
 8002670:	d101      	bne.n	8002676 <HAL_DMA_Start_IT+0x26>
 8002672:	2302      	movs	r3, #2
 8002674:	e040      	b.n	80026f8 <HAL_DMA_Start_IT+0xa8>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b01      	cmp	r3, #1
 8002688:	d12f      	bne.n	80026ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2202      	movs	r2, #2
 800268e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	68b9      	ldr	r1, [r7, #8]
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 fa56 	bl	8002b50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a8:	223f      	movs	r2, #63	@ 0x3f
 80026aa:	409a      	lsls	r2, r3
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0216 	orr.w	r2, r2, #22
 80026be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d007      	beq.n	80026d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0208 	orr.w	r2, r2, #8
 80026d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0201 	orr.w	r2, r2, #1
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	e005      	b.n	80026f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80026f2:	2302      	movs	r3, #2
 80026f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80026f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800270c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800270e:	f7ff fdaf 	bl	8002270 <HAL_GetTick>
 8002712:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d008      	beq.n	8002732 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2280      	movs	r2, #128	@ 0x80
 8002724:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e052      	b.n	80027d8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0216 	bic.w	r2, r2, #22
 8002740:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695a      	ldr	r2, [r3, #20]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002750:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002756:	2b00      	cmp	r3, #0
 8002758:	d103      	bne.n	8002762 <HAL_DMA_Abort+0x62>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800275e:	2b00      	cmp	r3, #0
 8002760:	d007      	beq.n	8002772 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0208 	bic.w	r2, r2, #8
 8002770:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0201 	bic.w	r2, r2, #1
 8002780:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002782:	e013      	b.n	80027ac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002784:	f7ff fd74 	bl	8002270 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b05      	cmp	r3, #5
 8002790:	d90c      	bls.n	80027ac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2220      	movs	r2, #32
 8002796:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2203      	movs	r2, #3
 800279c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e015      	b.n	80027d8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1e4      	bne.n	8002784 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027be:	223f      	movs	r2, #63	@ 0x3f
 80027c0:	409a      	lsls	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d004      	beq.n	80027fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2280      	movs	r2, #128	@ 0x80
 80027f8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e00c      	b.n	8002818 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2205      	movs	r2, #5
 8002802:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0201 	bic.w	r2, r2, #1
 8002814:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002830:	4b8e      	ldr	r3, [pc, #568]	@ (8002a6c <HAL_DMA_IRQHandler+0x248>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a8e      	ldr	r2, [pc, #568]	@ (8002a70 <HAL_DMA_IRQHandler+0x24c>)
 8002836:	fba2 2303 	umull	r2, r3, r2, r3
 800283a:	0a9b      	lsrs	r3, r3, #10
 800283c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002842:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800284e:	2208      	movs	r2, #8
 8002850:	409a      	lsls	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	4013      	ands	r3, r2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d01a      	beq.n	8002890 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b00      	cmp	r3, #0
 8002866:	d013      	beq.n	8002890 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0204 	bic.w	r2, r2, #4
 8002876:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800287c:	2208      	movs	r2, #8
 800287e:	409a      	lsls	r2, r3
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002888:	f043 0201 	orr.w	r2, r3, #1
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002894:	2201      	movs	r2, #1
 8002896:	409a      	lsls	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4013      	ands	r3, r2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d012      	beq.n	80028c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00b      	beq.n	80028c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b2:	2201      	movs	r2, #1
 80028b4:	409a      	lsls	r2, r3
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028be:	f043 0202 	orr.w	r2, r3, #2
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ca:	2204      	movs	r2, #4
 80028cc:	409a      	lsls	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	4013      	ands	r3, r2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d012      	beq.n	80028fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00b      	beq.n	80028fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028e8:	2204      	movs	r2, #4
 80028ea:	409a      	lsls	r2, r3
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f4:	f043 0204 	orr.w	r2, r3, #4
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002900:	2210      	movs	r2, #16
 8002902:	409a      	lsls	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4013      	ands	r3, r2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d043      	beq.n	8002994 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b00      	cmp	r3, #0
 8002918:	d03c      	beq.n	8002994 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800291e:	2210      	movs	r2, #16
 8002920:	409a      	lsls	r2, r3
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d018      	beq.n	8002966 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d108      	bne.n	8002954 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002946:	2b00      	cmp	r3, #0
 8002948:	d024      	beq.n	8002994 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	4798      	blx	r3
 8002952:	e01f      	b.n	8002994 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002958:	2b00      	cmp	r3, #0
 800295a:	d01b      	beq.n	8002994 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	4798      	blx	r3
 8002964:	e016      	b.n	8002994 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002970:	2b00      	cmp	r3, #0
 8002972:	d107      	bne.n	8002984 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0208 	bic.w	r2, r2, #8
 8002982:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002998:	2220      	movs	r2, #32
 800299a:	409a      	lsls	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4013      	ands	r3, r2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 808f 	beq.w	8002ac4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0310 	and.w	r3, r3, #16
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 8087 	beq.w	8002ac4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ba:	2220      	movs	r2, #32
 80029bc:	409a      	lsls	r2, r3
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b05      	cmp	r3, #5
 80029cc:	d136      	bne.n	8002a3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0216 	bic.w	r2, r2, #22
 80029dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	695a      	ldr	r2, [r3, #20]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d103      	bne.n	80029fe <HAL_DMA_IRQHandler+0x1da>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d007      	beq.n	8002a0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0208 	bic.w	r2, r2, #8
 8002a0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a12:	223f      	movs	r2, #63	@ 0x3f
 8002a14:	409a      	lsls	r2, r3
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d07e      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	4798      	blx	r3
        }
        return;
 8002a3a:	e079      	b.n	8002b30 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d01d      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10d      	bne.n	8002a74 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d031      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	4798      	blx	r3
 8002a68:	e02c      	b.n	8002ac4 <HAL_DMA_IRQHandler+0x2a0>
 8002a6a:	bf00      	nop
 8002a6c:	20000000 	.word	0x20000000
 8002a70:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d023      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	4798      	blx	r3
 8002a84:	e01e      	b.n	8002ac4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10f      	bne.n	8002ab4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0210 	bic.w	r2, r2, #16
 8002aa2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d032      	beq.n	8002b32 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d022      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2205      	movs	r2, #5
 8002adc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0201 	bic.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	3301      	adds	r3, #1
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d307      	bcc.n	8002b0c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f2      	bne.n	8002af0 <HAL_DMA_IRQHandler+0x2cc>
 8002b0a:	e000      	b.n	8002b0e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b0c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d005      	beq.n	8002b32 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	4798      	blx	r3
 8002b2e:	e000      	b.n	8002b32 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b30:	bf00      	nop
    }
  }
}
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
 8002b5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b40      	cmp	r3, #64	@ 0x40
 8002b7c:	d108      	bne.n	8002b90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b8e:	e007      	b.n	8002ba0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	60da      	str	r2, [r3, #12]
}
 8002ba0:	bf00      	nop
 8002ba2:	3714      	adds	r7, #20
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	3b10      	subs	r3, #16
 8002bbc:	4a14      	ldr	r2, [pc, #80]	@ (8002c10 <DMA_CalcBaseAndBitshift+0x64>)
 8002bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc2:	091b      	lsrs	r3, r3, #4
 8002bc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bc6:	4a13      	ldr	r2, [pc, #76]	@ (8002c14 <DMA_CalcBaseAndBitshift+0x68>)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4413      	add	r3, r2
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	d909      	bls.n	8002bee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002be2:	f023 0303 	bic.w	r3, r3, #3
 8002be6:	1d1a      	adds	r2, r3, #4
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	659a      	str	r2, [r3, #88]	@ 0x58
 8002bec:	e007      	b.n	8002bfe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002bf6:	f023 0303 	bic.w	r3, r3, #3
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	aaaaaaab 	.word	0xaaaaaaab
 8002c14:	08005ef4 	.word	0x08005ef4

08002c18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c20:	2300      	movs	r3, #0
 8002c22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d11f      	bne.n	8002c72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2b03      	cmp	r3, #3
 8002c36:	d856      	bhi.n	8002ce6 <DMA_CheckFifoParam+0xce>
 8002c38:	a201      	add	r2, pc, #4	@ (adr r2, 8002c40 <DMA_CheckFifoParam+0x28>)
 8002c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3e:	bf00      	nop
 8002c40:	08002c51 	.word	0x08002c51
 8002c44:	08002c63 	.word	0x08002c63
 8002c48:	08002c51 	.word	0x08002c51
 8002c4c:	08002ce7 	.word	0x08002ce7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d046      	beq.n	8002cea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c60:	e043      	b.n	8002cea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c66:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c6a:	d140      	bne.n	8002cee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c70:	e03d      	b.n	8002cee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c7a:	d121      	bne.n	8002cc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	d837      	bhi.n	8002cf2 <DMA_CheckFifoParam+0xda>
 8002c82:	a201      	add	r2, pc, #4	@ (adr r2, 8002c88 <DMA_CheckFifoParam+0x70>)
 8002c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c88:	08002c99 	.word	0x08002c99
 8002c8c:	08002c9f 	.word	0x08002c9f
 8002c90:	08002c99 	.word	0x08002c99
 8002c94:	08002cb1 	.word	0x08002cb1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c9c:	e030      	b.n	8002d00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d025      	beq.n	8002cf6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cae:	e022      	b.n	8002cf6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002cb8:	d11f      	bne.n	8002cfa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002cbe:	e01c      	b.n	8002cfa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d903      	bls.n	8002cce <DMA_CheckFifoParam+0xb6>
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	d003      	beq.n	8002cd4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ccc:	e018      	b.n	8002d00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	73fb      	strb	r3, [r7, #15]
      break;
 8002cd2:	e015      	b.n	8002d00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00e      	beq.n	8002cfe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ce4:	e00b      	b.n	8002cfe <DMA_CheckFifoParam+0xe6>
      break;
 8002ce6:	bf00      	nop
 8002ce8:	e00a      	b.n	8002d00 <DMA_CheckFifoParam+0xe8>
      break;
 8002cea:	bf00      	nop
 8002cec:	e008      	b.n	8002d00 <DMA_CheckFifoParam+0xe8>
      break;
 8002cee:	bf00      	nop
 8002cf0:	e006      	b.n	8002d00 <DMA_CheckFifoParam+0xe8>
      break;
 8002cf2:	bf00      	nop
 8002cf4:	e004      	b.n	8002d00 <DMA_CheckFifoParam+0xe8>
      break;
 8002cf6:	bf00      	nop
 8002cf8:	e002      	b.n	8002d00 <DMA_CheckFifoParam+0xe8>
      break;   
 8002cfa:	bf00      	nop
 8002cfc:	e000      	b.n	8002d00 <DMA_CheckFifoParam+0xe8>
      break;
 8002cfe:	bf00      	nop
    }
  } 
  
  return status; 
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop

08002d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b089      	sub	sp, #36	@ 0x24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d26:	2300      	movs	r3, #0
 8002d28:	61fb      	str	r3, [r7, #28]
 8002d2a:	e159      	b.n	8002fe0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	f040 8148 	bne.w	8002fda <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d005      	beq.n	8002d62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d130      	bne.n	8002dc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	2203      	movs	r2, #3
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	43db      	mvns	r3, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4013      	ands	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d98:	2201      	movs	r2, #1
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4013      	ands	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	091b      	lsrs	r3, r3, #4
 8002dae:	f003 0201 	and.w	r2, r3, #1
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 0303 	and.w	r3, r3, #3
 8002dcc:	2b03      	cmp	r3, #3
 8002dce:	d017      	beq.n	8002e00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	2203      	movs	r2, #3
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d123      	bne.n	8002e54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	08da      	lsrs	r2, r3, #3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3208      	adds	r2, #8
 8002e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	220f      	movs	r2, #15
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	691a      	ldr	r2, [r3, #16]
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	08da      	lsrs	r2, r3, #3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3208      	adds	r2, #8
 8002e4e:	69b9      	ldr	r1, [r7, #24]
 8002e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	2203      	movs	r2, #3
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 0203 	and.w	r2, r3, #3
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 80a2 	beq.w	8002fda <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	4b57      	ldr	r3, [pc, #348]	@ (8002ff8 <HAL_GPIO_Init+0x2e8>)
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9e:	4a56      	ldr	r2, [pc, #344]	@ (8002ff8 <HAL_GPIO_Init+0x2e8>)
 8002ea0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ea4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ea6:	4b54      	ldr	r3, [pc, #336]	@ (8002ff8 <HAL_GPIO_Init+0x2e8>)
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eb2:	4a52      	ldr	r2, [pc, #328]	@ (8002ffc <HAL_GPIO_Init+0x2ec>)
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	089b      	lsrs	r3, r3, #2
 8002eb8:	3302      	adds	r3, #2
 8002eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	220f      	movs	r2, #15
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a49      	ldr	r2, [pc, #292]	@ (8003000 <HAL_GPIO_Init+0x2f0>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d019      	beq.n	8002f12 <HAL_GPIO_Init+0x202>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a48      	ldr	r2, [pc, #288]	@ (8003004 <HAL_GPIO_Init+0x2f4>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d013      	beq.n	8002f0e <HAL_GPIO_Init+0x1fe>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a47      	ldr	r2, [pc, #284]	@ (8003008 <HAL_GPIO_Init+0x2f8>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d00d      	beq.n	8002f0a <HAL_GPIO_Init+0x1fa>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a46      	ldr	r2, [pc, #280]	@ (800300c <HAL_GPIO_Init+0x2fc>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d007      	beq.n	8002f06 <HAL_GPIO_Init+0x1f6>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a45      	ldr	r2, [pc, #276]	@ (8003010 <HAL_GPIO_Init+0x300>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d101      	bne.n	8002f02 <HAL_GPIO_Init+0x1f2>
 8002efe:	2304      	movs	r3, #4
 8002f00:	e008      	b.n	8002f14 <HAL_GPIO_Init+0x204>
 8002f02:	2307      	movs	r3, #7
 8002f04:	e006      	b.n	8002f14 <HAL_GPIO_Init+0x204>
 8002f06:	2303      	movs	r3, #3
 8002f08:	e004      	b.n	8002f14 <HAL_GPIO_Init+0x204>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e002      	b.n	8002f14 <HAL_GPIO_Init+0x204>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <HAL_GPIO_Init+0x204>
 8002f12:	2300      	movs	r3, #0
 8002f14:	69fa      	ldr	r2, [r7, #28]
 8002f16:	f002 0203 	and.w	r2, r2, #3
 8002f1a:	0092      	lsls	r2, r2, #2
 8002f1c:	4093      	lsls	r3, r2
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f24:	4935      	ldr	r1, [pc, #212]	@ (8002ffc <HAL_GPIO_Init+0x2ec>)
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	089b      	lsrs	r3, r3, #2
 8002f2a:	3302      	adds	r3, #2
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f32:	4b38      	ldr	r3, [pc, #224]	@ (8003014 <HAL_GPIO_Init+0x304>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f56:	4a2f      	ldr	r2, [pc, #188]	@ (8003014 <HAL_GPIO_Init+0x304>)
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8003014 <HAL_GPIO_Init+0x304>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	43db      	mvns	r3, r3
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f80:	4a24      	ldr	r2, [pc, #144]	@ (8003014 <HAL_GPIO_Init+0x304>)
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f86:	4b23      	ldr	r3, [pc, #140]	@ (8003014 <HAL_GPIO_Init+0x304>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4013      	ands	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002faa:	4a1a      	ldr	r2, [pc, #104]	@ (8003014 <HAL_GPIO_Init+0x304>)
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fb0:	4b18      	ldr	r3, [pc, #96]	@ (8003014 <HAL_GPIO_Init+0x304>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d003      	beq.n	8002fd4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fd4:	4a0f      	ldr	r2, [pc, #60]	@ (8003014 <HAL_GPIO_Init+0x304>)
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	61fb      	str	r3, [r7, #28]
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	2b0f      	cmp	r3, #15
 8002fe4:	f67f aea2 	bls.w	8002d2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fe8:	bf00      	nop
 8002fea:	bf00      	nop
 8002fec:	3724      	adds	r7, #36	@ 0x24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	40013800 	.word	0x40013800
 8003000:	40020000 	.word	0x40020000
 8003004:	40020400 	.word	0x40020400
 8003008:	40020800 	.word	0x40020800
 800300c:	40020c00 	.word	0x40020c00
 8003010:	40021000 	.word	0x40021000
 8003014:	40013c00 	.word	0x40013c00

08003018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	460b      	mov	r3, r1
 8003022:	807b      	strh	r3, [r7, #2]
 8003024:	4613      	mov	r3, r2
 8003026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003028:	787b      	ldrb	r3, [r7, #1]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800302e:	887a      	ldrh	r2, [r7, #2]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003034:	e003      	b.n	800303e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003036:	887b      	ldrh	r3, [r7, #2]
 8003038:	041a      	lsls	r2, r3, #16
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	619a      	str	r2, [r3, #24]
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800304a:	b480      	push	{r7}
 800304c:	b085      	sub	sp, #20
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	460b      	mov	r3, r1
 8003054:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800305c:	887a      	ldrh	r2, [r7, #2]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	4013      	ands	r3, r2
 8003062:	041a      	lsls	r2, r3, #16
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	43d9      	mvns	r1, r3
 8003068:	887b      	ldrh	r3, [r7, #2]
 800306a:	400b      	ands	r3, r1
 800306c:	431a      	orrs	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	619a      	str	r2, [r3, #24]
}
 8003072:	bf00      	nop
 8003074:	3714      	adds	r7, #20
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
	...

08003080 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e267      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d075      	beq.n	800318a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800309e:	4b88      	ldr	r3, [pc, #544]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 030c 	and.w	r3, r3, #12
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d00c      	beq.n	80030c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030aa:	4b85      	ldr	r3, [pc, #532]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030b2:	2b08      	cmp	r3, #8
 80030b4:	d112      	bne.n	80030dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030b6:	4b82      	ldr	r3, [pc, #520]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030c2:	d10b      	bne.n	80030dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c4:	4b7e      	ldr	r3, [pc, #504]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d05b      	beq.n	8003188 <HAL_RCC_OscConfig+0x108>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d157      	bne.n	8003188 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e242      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030e4:	d106      	bne.n	80030f4 <HAL_RCC_OscConfig+0x74>
 80030e6:	4b76      	ldr	r3, [pc, #472]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a75      	ldr	r2, [pc, #468]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 80030ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	e01d      	b.n	8003130 <HAL_RCC_OscConfig+0xb0>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030fc:	d10c      	bne.n	8003118 <HAL_RCC_OscConfig+0x98>
 80030fe:	4b70      	ldr	r3, [pc, #448]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a6f      	ldr	r2, [pc, #444]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 8003104:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	4b6d      	ldr	r3, [pc, #436]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a6c      	ldr	r2, [pc, #432]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 8003110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	e00b      	b.n	8003130 <HAL_RCC_OscConfig+0xb0>
 8003118:	4b69      	ldr	r3, [pc, #420]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a68      	ldr	r2, [pc, #416]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 800311e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003122:	6013      	str	r3, [r2, #0]
 8003124:	4b66      	ldr	r3, [pc, #408]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a65      	ldr	r2, [pc, #404]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 800312a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800312e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d013      	beq.n	8003160 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003138:	f7ff f89a 	bl	8002270 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003140:	f7ff f896 	bl	8002270 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b64      	cmp	r3, #100	@ 0x64
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e207      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003152:	4b5b      	ldr	r3, [pc, #364]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0f0      	beq.n	8003140 <HAL_RCC_OscConfig+0xc0>
 800315e:	e014      	b.n	800318a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003160:	f7ff f886 	bl	8002270 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003168:	f7ff f882 	bl	8002270 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b64      	cmp	r3, #100	@ 0x64
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e1f3      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800317a:	4b51      	ldr	r3, [pc, #324]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f0      	bne.n	8003168 <HAL_RCC_OscConfig+0xe8>
 8003186:	e000      	b.n	800318a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d063      	beq.n	800325e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003196:	4b4a      	ldr	r3, [pc, #296]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 030c 	and.w	r3, r3, #12
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00b      	beq.n	80031ba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031a2:	4b47      	ldr	r3, [pc, #284]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031aa:	2b08      	cmp	r3, #8
 80031ac:	d11c      	bne.n	80031e8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ae:	4b44      	ldr	r3, [pc, #272]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d116      	bne.n	80031e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ba:	4b41      	ldr	r3, [pc, #260]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d005      	beq.n	80031d2 <HAL_RCC_OscConfig+0x152>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d001      	beq.n	80031d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e1c7      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d2:	4b3b      	ldr	r3, [pc, #236]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	4937      	ldr	r1, [pc, #220]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031e6:	e03a      	b.n	800325e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d020      	beq.n	8003232 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031f0:	4b34      	ldr	r3, [pc, #208]	@ (80032c4 <HAL_RCC_OscConfig+0x244>)
 80031f2:	2201      	movs	r2, #1
 80031f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f6:	f7ff f83b 	bl	8002270 <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031fc:	e008      	b.n	8003210 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031fe:	f7ff f837 	bl	8002270 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e1a8      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003210:	4b2b      	ldr	r3, [pc, #172]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0f0      	beq.n	80031fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800321c:	4b28      	ldr	r3, [pc, #160]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	4925      	ldr	r1, [pc, #148]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 800322c:	4313      	orrs	r3, r2
 800322e:	600b      	str	r3, [r1, #0]
 8003230:	e015      	b.n	800325e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003232:	4b24      	ldr	r3, [pc, #144]	@ (80032c4 <HAL_RCC_OscConfig+0x244>)
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003238:	f7ff f81a 	bl	8002270 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003240:	f7ff f816 	bl	8002270 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e187      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003252:	4b1b      	ldr	r3, [pc, #108]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f0      	bne.n	8003240 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d036      	beq.n	80032d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d016      	beq.n	80032a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003272:	4b15      	ldr	r3, [pc, #84]	@ (80032c8 <HAL_RCC_OscConfig+0x248>)
 8003274:	2201      	movs	r2, #1
 8003276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003278:	f7fe fffa 	bl	8002270 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003280:	f7fe fff6 	bl	8002270 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e167      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003292:	4b0b      	ldr	r3, [pc, #44]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 8003294:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0f0      	beq.n	8003280 <HAL_RCC_OscConfig+0x200>
 800329e:	e01b      	b.n	80032d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032a0:	4b09      	ldr	r3, [pc, #36]	@ (80032c8 <HAL_RCC_OscConfig+0x248>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a6:	f7fe ffe3 	bl	8002270 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ac:	e00e      	b.n	80032cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ae:	f7fe ffdf 	bl	8002270 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d907      	bls.n	80032cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e150      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
 80032c0:	40023800 	.word	0x40023800
 80032c4:	42470000 	.word	0x42470000
 80032c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032cc:	4b88      	ldr	r3, [pc, #544]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 80032ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1ea      	bne.n	80032ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 8097 	beq.w	8003414 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032e6:	2300      	movs	r3, #0
 80032e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ea:	4b81      	ldr	r3, [pc, #516]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 80032ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10f      	bne.n	8003316 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032f6:	2300      	movs	r3, #0
 80032f8:	60bb      	str	r3, [r7, #8]
 80032fa:	4b7d      	ldr	r3, [pc, #500]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 80032fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fe:	4a7c      	ldr	r2, [pc, #496]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 8003300:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003304:	6413      	str	r3, [r2, #64]	@ 0x40
 8003306:	4b7a      	ldr	r3, [pc, #488]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 8003308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800330e:	60bb      	str	r3, [r7, #8]
 8003310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003312:	2301      	movs	r3, #1
 8003314:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003316:	4b77      	ldr	r3, [pc, #476]	@ (80034f4 <HAL_RCC_OscConfig+0x474>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800331e:	2b00      	cmp	r3, #0
 8003320:	d118      	bne.n	8003354 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003322:	4b74      	ldr	r3, [pc, #464]	@ (80034f4 <HAL_RCC_OscConfig+0x474>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a73      	ldr	r2, [pc, #460]	@ (80034f4 <HAL_RCC_OscConfig+0x474>)
 8003328:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800332c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800332e:	f7fe ff9f 	bl	8002270 <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003336:	f7fe ff9b 	bl	8002270 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e10c      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003348:	4b6a      	ldr	r3, [pc, #424]	@ (80034f4 <HAL_RCC_OscConfig+0x474>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0f0      	beq.n	8003336 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d106      	bne.n	800336a <HAL_RCC_OscConfig+0x2ea>
 800335c:	4b64      	ldr	r3, [pc, #400]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 800335e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003360:	4a63      	ldr	r2, [pc, #396]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	6713      	str	r3, [r2, #112]	@ 0x70
 8003368:	e01c      	b.n	80033a4 <HAL_RCC_OscConfig+0x324>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	2b05      	cmp	r3, #5
 8003370:	d10c      	bne.n	800338c <HAL_RCC_OscConfig+0x30c>
 8003372:	4b5f      	ldr	r3, [pc, #380]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 8003374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003376:	4a5e      	ldr	r2, [pc, #376]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 8003378:	f043 0304 	orr.w	r3, r3, #4
 800337c:	6713      	str	r3, [r2, #112]	@ 0x70
 800337e:	4b5c      	ldr	r3, [pc, #368]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003382:	4a5b      	ldr	r2, [pc, #364]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 8003384:	f043 0301 	orr.w	r3, r3, #1
 8003388:	6713      	str	r3, [r2, #112]	@ 0x70
 800338a:	e00b      	b.n	80033a4 <HAL_RCC_OscConfig+0x324>
 800338c:	4b58      	ldr	r3, [pc, #352]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 800338e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003390:	4a57      	ldr	r2, [pc, #348]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 8003392:	f023 0301 	bic.w	r3, r3, #1
 8003396:	6713      	str	r3, [r2, #112]	@ 0x70
 8003398:	4b55      	ldr	r3, [pc, #340]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 800339a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800339c:	4a54      	ldr	r2, [pc, #336]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 800339e:	f023 0304 	bic.w	r3, r3, #4
 80033a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d015      	beq.n	80033d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ac:	f7fe ff60 	bl	8002270 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b2:	e00a      	b.n	80033ca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b4:	f7fe ff5c 	bl	8002270 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e0cb      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ca:	4b49      	ldr	r3, [pc, #292]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 80033cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0ee      	beq.n	80033b4 <HAL_RCC_OscConfig+0x334>
 80033d6:	e014      	b.n	8003402 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033d8:	f7fe ff4a 	bl	8002270 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033de:	e00a      	b.n	80033f6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e0:	f7fe ff46 	bl	8002270 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e0b5      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033f6:	4b3e      	ldr	r3, [pc, #248]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 80033f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1ee      	bne.n	80033e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003402:	7dfb      	ldrb	r3, [r7, #23]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d105      	bne.n	8003414 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003408:	4b39      	ldr	r3, [pc, #228]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 800340a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340c:	4a38      	ldr	r2, [pc, #224]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 800340e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003412:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 80a1 	beq.w	8003560 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800341e:	4b34      	ldr	r3, [pc, #208]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b08      	cmp	r3, #8
 8003428:	d05c      	beq.n	80034e4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	2b02      	cmp	r3, #2
 8003430:	d141      	bne.n	80034b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003432:	4b31      	ldr	r3, [pc, #196]	@ (80034f8 <HAL_RCC_OscConfig+0x478>)
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003438:	f7fe ff1a 	bl	8002270 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003440:	f7fe ff16 	bl	8002270 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e087      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003452:	4b27      	ldr	r3, [pc, #156]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f0      	bne.n	8003440 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69da      	ldr	r2, [r3, #28]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	431a      	orrs	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346c:	019b      	lsls	r3, r3, #6
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003474:	085b      	lsrs	r3, r3, #1
 8003476:	3b01      	subs	r3, #1
 8003478:	041b      	lsls	r3, r3, #16
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003480:	061b      	lsls	r3, r3, #24
 8003482:	491b      	ldr	r1, [pc, #108]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 8003484:	4313      	orrs	r3, r2
 8003486:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003488:	4b1b      	ldr	r3, [pc, #108]	@ (80034f8 <HAL_RCC_OscConfig+0x478>)
 800348a:	2201      	movs	r2, #1
 800348c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348e:	f7fe feef 	bl	8002270 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003496:	f7fe feeb 	bl	8002270 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e05c      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a8:	4b11      	ldr	r3, [pc, #68]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0f0      	beq.n	8003496 <HAL_RCC_OscConfig+0x416>
 80034b4:	e054      	b.n	8003560 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034b6:	4b10      	ldr	r3, [pc, #64]	@ (80034f8 <HAL_RCC_OscConfig+0x478>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034bc:	f7fe fed8 	bl	8002270 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c4:	f7fe fed4 	bl	8002270 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e045      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034d6:	4b06      	ldr	r3, [pc, #24]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1f0      	bne.n	80034c4 <HAL_RCC_OscConfig+0x444>
 80034e2:	e03d      	b.n	8003560 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d107      	bne.n	80034fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e038      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
 80034f0:	40023800 	.word	0x40023800
 80034f4:	40007000 	.word	0x40007000
 80034f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034fc:	4b1b      	ldr	r3, [pc, #108]	@ (800356c <HAL_RCC_OscConfig+0x4ec>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d028      	beq.n	800355c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003514:	429a      	cmp	r2, r3
 8003516:	d121      	bne.n	800355c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003522:	429a      	cmp	r2, r3
 8003524:	d11a      	bne.n	800355c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800352c:	4013      	ands	r3, r2
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003532:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003534:	4293      	cmp	r3, r2
 8003536:	d111      	bne.n	800355c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003542:	085b      	lsrs	r3, r3, #1
 8003544:	3b01      	subs	r3, #1
 8003546:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003548:	429a      	cmp	r2, r3
 800354a:	d107      	bne.n	800355c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003556:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003558:	429a      	cmp	r2, r3
 800355a:	d001      	beq.n	8003560 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e000      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3718      	adds	r7, #24
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40023800 	.word	0x40023800

08003570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e0cc      	b.n	800371e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003584:	4b68      	ldr	r3, [pc, #416]	@ (8003728 <HAL_RCC_ClockConfig+0x1b8>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d90c      	bls.n	80035ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003592:	4b65      	ldr	r3, [pc, #404]	@ (8003728 <HAL_RCC_ClockConfig+0x1b8>)
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800359a:	4b63      	ldr	r3, [pc, #396]	@ (8003728 <HAL_RCC_ClockConfig+0x1b8>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d001      	beq.n	80035ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e0b8      	b.n	800371e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d020      	beq.n	80035fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d005      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035c4:	4b59      	ldr	r3, [pc, #356]	@ (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	4a58      	ldr	r2, [pc, #352]	@ (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80035ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80035ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0308 	and.w	r3, r3, #8
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d005      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035dc:	4b53      	ldr	r3, [pc, #332]	@ (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	4a52      	ldr	r2, [pc, #328]	@ (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80035e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80035e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035e8:	4b50      	ldr	r3, [pc, #320]	@ (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	494d      	ldr	r1, [pc, #308]	@ (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d044      	beq.n	8003690 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d107      	bne.n	800361e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360e:	4b47      	ldr	r3, [pc, #284]	@ (800372c <HAL_RCC_ClockConfig+0x1bc>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d119      	bne.n	800364e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e07f      	b.n	800371e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2b02      	cmp	r3, #2
 8003624:	d003      	beq.n	800362e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800362a:	2b03      	cmp	r3, #3
 800362c:	d107      	bne.n	800363e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800362e:	4b3f      	ldr	r3, [pc, #252]	@ (800372c <HAL_RCC_ClockConfig+0x1bc>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d109      	bne.n	800364e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e06f      	b.n	800371e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800363e:	4b3b      	ldr	r3, [pc, #236]	@ (800372c <HAL_RCC_ClockConfig+0x1bc>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e067      	b.n	800371e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800364e:	4b37      	ldr	r3, [pc, #220]	@ (800372c <HAL_RCC_ClockConfig+0x1bc>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f023 0203 	bic.w	r2, r3, #3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	4934      	ldr	r1, [pc, #208]	@ (800372c <HAL_RCC_ClockConfig+0x1bc>)
 800365c:	4313      	orrs	r3, r2
 800365e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003660:	f7fe fe06 	bl	8002270 <HAL_GetTick>
 8003664:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003666:	e00a      	b.n	800367e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003668:	f7fe fe02 	bl	8002270 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003676:	4293      	cmp	r3, r2
 8003678:	d901      	bls.n	800367e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e04f      	b.n	800371e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367e:	4b2b      	ldr	r3, [pc, #172]	@ (800372c <HAL_RCC_ClockConfig+0x1bc>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 020c 	and.w	r2, r3, #12
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	429a      	cmp	r2, r3
 800368e:	d1eb      	bne.n	8003668 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003690:	4b25      	ldr	r3, [pc, #148]	@ (8003728 <HAL_RCC_ClockConfig+0x1b8>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d20c      	bcs.n	80036b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369e:	4b22      	ldr	r3, [pc, #136]	@ (8003728 <HAL_RCC_ClockConfig+0x1b8>)
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a6:	4b20      	ldr	r3, [pc, #128]	@ (8003728 <HAL_RCC_ClockConfig+0x1b8>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d001      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e032      	b.n	800371e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d008      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036c4:	4b19      	ldr	r3, [pc, #100]	@ (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	4916      	ldr	r1, [pc, #88]	@ (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d009      	beq.n	80036f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036e2:	4b12      	ldr	r3, [pc, #72]	@ (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	490e      	ldr	r1, [pc, #56]	@ (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036f6:	f000 f821 	bl	800373c <HAL_RCC_GetSysClockFreq>
 80036fa:	4602      	mov	r2, r0
 80036fc:	4b0b      	ldr	r3, [pc, #44]	@ (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	091b      	lsrs	r3, r3, #4
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	490a      	ldr	r1, [pc, #40]	@ (8003730 <HAL_RCC_ClockConfig+0x1c0>)
 8003708:	5ccb      	ldrb	r3, [r1, r3]
 800370a:	fa22 f303 	lsr.w	r3, r2, r3
 800370e:	4a09      	ldr	r2, [pc, #36]	@ (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 8003710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003712:	4b09      	ldr	r3, [pc, #36]	@ (8003738 <HAL_RCC_ClockConfig+0x1c8>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f7fe fd66 	bl	80021e8 <HAL_InitTick>

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	40023c00 	.word	0x40023c00
 800372c:	40023800 	.word	0x40023800
 8003730:	08005edc 	.word	0x08005edc
 8003734:	20000000 	.word	0x20000000
 8003738:	20000004 	.word	0x20000004

0800373c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800373c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003740:	b094      	sub	sp, #80	@ 0x50
 8003742:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003748:	2300      	movs	r3, #0
 800374a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003754:	4b79      	ldr	r3, [pc, #484]	@ (800393c <HAL_RCC_GetSysClockFreq+0x200>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 030c 	and.w	r3, r3, #12
 800375c:	2b08      	cmp	r3, #8
 800375e:	d00d      	beq.n	800377c <HAL_RCC_GetSysClockFreq+0x40>
 8003760:	2b08      	cmp	r3, #8
 8003762:	f200 80e1 	bhi.w	8003928 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003766:	2b00      	cmp	r3, #0
 8003768:	d002      	beq.n	8003770 <HAL_RCC_GetSysClockFreq+0x34>
 800376a:	2b04      	cmp	r3, #4
 800376c:	d003      	beq.n	8003776 <HAL_RCC_GetSysClockFreq+0x3a>
 800376e:	e0db      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003770:	4b73      	ldr	r3, [pc, #460]	@ (8003940 <HAL_RCC_GetSysClockFreq+0x204>)
 8003772:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003774:	e0db      	b.n	800392e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003776:	4b73      	ldr	r3, [pc, #460]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x208>)
 8003778:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800377a:	e0d8      	b.n	800392e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800377c:	4b6f      	ldr	r3, [pc, #444]	@ (800393c <HAL_RCC_GetSysClockFreq+0x200>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003784:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003786:	4b6d      	ldr	r3, [pc, #436]	@ (800393c <HAL_RCC_GetSysClockFreq+0x200>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d063      	beq.n	800385a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003792:	4b6a      	ldr	r3, [pc, #424]	@ (800393c <HAL_RCC_GetSysClockFreq+0x200>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	099b      	lsrs	r3, r3, #6
 8003798:	2200      	movs	r2, #0
 800379a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800379c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800379e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80037a6:	2300      	movs	r3, #0
 80037a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80037aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80037ae:	4622      	mov	r2, r4
 80037b0:	462b      	mov	r3, r5
 80037b2:	f04f 0000 	mov.w	r0, #0
 80037b6:	f04f 0100 	mov.w	r1, #0
 80037ba:	0159      	lsls	r1, r3, #5
 80037bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037c0:	0150      	lsls	r0, r2, #5
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	4621      	mov	r1, r4
 80037c8:	1a51      	subs	r1, r2, r1
 80037ca:	6139      	str	r1, [r7, #16]
 80037cc:	4629      	mov	r1, r5
 80037ce:	eb63 0301 	sbc.w	r3, r3, r1
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	f04f 0200 	mov.w	r2, #0
 80037d8:	f04f 0300 	mov.w	r3, #0
 80037dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037e0:	4659      	mov	r1, fp
 80037e2:	018b      	lsls	r3, r1, #6
 80037e4:	4651      	mov	r1, sl
 80037e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037ea:	4651      	mov	r1, sl
 80037ec:	018a      	lsls	r2, r1, #6
 80037ee:	4651      	mov	r1, sl
 80037f0:	ebb2 0801 	subs.w	r8, r2, r1
 80037f4:	4659      	mov	r1, fp
 80037f6:	eb63 0901 	sbc.w	r9, r3, r1
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	f04f 0300 	mov.w	r3, #0
 8003802:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003806:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800380a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800380e:	4690      	mov	r8, r2
 8003810:	4699      	mov	r9, r3
 8003812:	4623      	mov	r3, r4
 8003814:	eb18 0303 	adds.w	r3, r8, r3
 8003818:	60bb      	str	r3, [r7, #8]
 800381a:	462b      	mov	r3, r5
 800381c:	eb49 0303 	adc.w	r3, r9, r3
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	f04f 0200 	mov.w	r2, #0
 8003826:	f04f 0300 	mov.w	r3, #0
 800382a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800382e:	4629      	mov	r1, r5
 8003830:	024b      	lsls	r3, r1, #9
 8003832:	4621      	mov	r1, r4
 8003834:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003838:	4621      	mov	r1, r4
 800383a:	024a      	lsls	r2, r1, #9
 800383c:	4610      	mov	r0, r2
 800383e:	4619      	mov	r1, r3
 8003840:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003842:	2200      	movs	r2, #0
 8003844:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003846:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003848:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800384c:	f7fc fd20 	bl	8000290 <__aeabi_uldivmod>
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	4613      	mov	r3, r2
 8003856:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003858:	e058      	b.n	800390c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800385a:	4b38      	ldr	r3, [pc, #224]	@ (800393c <HAL_RCC_GetSysClockFreq+0x200>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	099b      	lsrs	r3, r3, #6
 8003860:	2200      	movs	r2, #0
 8003862:	4618      	mov	r0, r3
 8003864:	4611      	mov	r1, r2
 8003866:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800386a:	623b      	str	r3, [r7, #32]
 800386c:	2300      	movs	r3, #0
 800386e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003870:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003874:	4642      	mov	r2, r8
 8003876:	464b      	mov	r3, r9
 8003878:	f04f 0000 	mov.w	r0, #0
 800387c:	f04f 0100 	mov.w	r1, #0
 8003880:	0159      	lsls	r1, r3, #5
 8003882:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003886:	0150      	lsls	r0, r2, #5
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	4641      	mov	r1, r8
 800388e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003892:	4649      	mov	r1, r9
 8003894:	eb63 0b01 	sbc.w	fp, r3, r1
 8003898:	f04f 0200 	mov.w	r2, #0
 800389c:	f04f 0300 	mov.w	r3, #0
 80038a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038ac:	ebb2 040a 	subs.w	r4, r2, sl
 80038b0:	eb63 050b 	sbc.w	r5, r3, fp
 80038b4:	f04f 0200 	mov.w	r2, #0
 80038b8:	f04f 0300 	mov.w	r3, #0
 80038bc:	00eb      	lsls	r3, r5, #3
 80038be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038c2:	00e2      	lsls	r2, r4, #3
 80038c4:	4614      	mov	r4, r2
 80038c6:	461d      	mov	r5, r3
 80038c8:	4643      	mov	r3, r8
 80038ca:	18e3      	adds	r3, r4, r3
 80038cc:	603b      	str	r3, [r7, #0]
 80038ce:	464b      	mov	r3, r9
 80038d0:	eb45 0303 	adc.w	r3, r5, r3
 80038d4:	607b      	str	r3, [r7, #4]
 80038d6:	f04f 0200 	mov.w	r2, #0
 80038da:	f04f 0300 	mov.w	r3, #0
 80038de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038e2:	4629      	mov	r1, r5
 80038e4:	028b      	lsls	r3, r1, #10
 80038e6:	4621      	mov	r1, r4
 80038e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038ec:	4621      	mov	r1, r4
 80038ee:	028a      	lsls	r2, r1, #10
 80038f0:	4610      	mov	r0, r2
 80038f2:	4619      	mov	r1, r3
 80038f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038f6:	2200      	movs	r2, #0
 80038f8:	61bb      	str	r3, [r7, #24]
 80038fa:	61fa      	str	r2, [r7, #28]
 80038fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003900:	f7fc fcc6 	bl	8000290 <__aeabi_uldivmod>
 8003904:	4602      	mov	r2, r0
 8003906:	460b      	mov	r3, r1
 8003908:	4613      	mov	r3, r2
 800390a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800390c:	4b0b      	ldr	r3, [pc, #44]	@ (800393c <HAL_RCC_GetSysClockFreq+0x200>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	0c1b      	lsrs	r3, r3, #16
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	3301      	adds	r3, #1
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800391c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800391e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003920:	fbb2 f3f3 	udiv	r3, r2, r3
 8003924:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003926:	e002      	b.n	800392e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003928:	4b05      	ldr	r3, [pc, #20]	@ (8003940 <HAL_RCC_GetSysClockFreq+0x204>)
 800392a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800392c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800392e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003930:	4618      	mov	r0, r3
 8003932:	3750      	adds	r7, #80	@ 0x50
 8003934:	46bd      	mov	sp, r7
 8003936:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800393a:	bf00      	nop
 800393c:	40023800 	.word	0x40023800
 8003940:	00f42400 	.word	0x00f42400
 8003944:	007a1200 	.word	0x007a1200

08003948 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800394c:	4b03      	ldr	r3, [pc, #12]	@ (800395c <HAL_RCC_GetHCLKFreq+0x14>)
 800394e:	681b      	ldr	r3, [r3, #0]
}
 8003950:	4618      	mov	r0, r3
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	20000000 	.word	0x20000000

08003960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003964:	f7ff fff0 	bl	8003948 <HAL_RCC_GetHCLKFreq>
 8003968:	4602      	mov	r2, r0
 800396a:	4b05      	ldr	r3, [pc, #20]	@ (8003980 <HAL_RCC_GetPCLK1Freq+0x20>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	0a9b      	lsrs	r3, r3, #10
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	4903      	ldr	r1, [pc, #12]	@ (8003984 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003976:	5ccb      	ldrb	r3, [r1, r3]
 8003978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800397c:	4618      	mov	r0, r3
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40023800 	.word	0x40023800
 8003984:	08005eec 	.word	0x08005eec

08003988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800398c:	f7ff ffdc 	bl	8003948 <HAL_RCC_GetHCLKFreq>
 8003990:	4602      	mov	r2, r0
 8003992:	4b05      	ldr	r3, [pc, #20]	@ (80039a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	0b5b      	lsrs	r3, r3, #13
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	4903      	ldr	r1, [pc, #12]	@ (80039ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800399e:	5ccb      	ldrb	r3, [r1, r3]
 80039a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40023800 	.word	0x40023800
 80039ac:	08005eec 	.word	0x08005eec

080039b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e042      	b.n	8003a48 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d106      	bne.n	80039dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7fe f8e2 	bl	8001ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2224      	movs	r2, #36	@ 0x24
 80039e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68da      	ldr	r2, [r3, #12]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f001 f923 	bl	8004c40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	691a      	ldr	r2, [r3, #16]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695a      	ldr	r2, [r3, #20]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68da      	ldr	r2, [r3, #12]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08a      	sub	sp, #40	@ 0x28
 8003a54:	af02      	add	r7, sp, #8
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	603b      	str	r3, [r7, #0]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a60:	2300      	movs	r3, #0
 8003a62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b20      	cmp	r3, #32
 8003a6e:	d175      	bne.n	8003b5c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <HAL_UART_Transmit+0x2c>
 8003a76:	88fb      	ldrh	r3, [r7, #6]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e06e      	b.n	8003b5e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2221      	movs	r2, #33	@ 0x21
 8003a8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a8e:	f7fe fbef 	bl	8002270 <HAL_GetTick>
 8003a92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	88fa      	ldrh	r2, [r7, #6]
 8003a98:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	88fa      	ldrh	r2, [r7, #6]
 8003a9e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aa8:	d108      	bne.n	8003abc <HAL_UART_Transmit+0x6c>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d104      	bne.n	8003abc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	61bb      	str	r3, [r7, #24]
 8003aba:	e003      	b.n	8003ac4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ac4:	e02e      	b.n	8003b24 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2200      	movs	r2, #0
 8003ace:	2180      	movs	r1, #128	@ 0x80
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 fdfc 	bl	80046ce <UART_WaitOnFlagUntilTimeout>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d005      	beq.n	8003ae8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e03a      	b.n	8003b5e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10b      	bne.n	8003b06 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	881b      	ldrh	r3, [r3, #0]
 8003af2:	461a      	mov	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003afc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	3302      	adds	r3, #2
 8003b02:	61bb      	str	r3, [r7, #24]
 8003b04:	e007      	b.n	8003b16 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	781a      	ldrb	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	3301      	adds	r3, #1
 8003b14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1cb      	bne.n	8003ac6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2200      	movs	r2, #0
 8003b36:	2140      	movs	r1, #64	@ 0x40
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 fdc8 	bl	80046ce <UART_WaitOnFlagUntilTimeout>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d005      	beq.n	8003b50 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2220      	movs	r2, #32
 8003b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e006      	b.n	8003b5e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	e000      	b.n	8003b5e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b5c:	2302      	movs	r3, #2
  }
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3720      	adds	r7, #32
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
	...

08003b68 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b08c      	sub	sp, #48	@ 0x30
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	4613      	mov	r3, r2
 8003b74:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b20      	cmp	r3, #32
 8003b80:	d156      	bne.n	8003c30 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d002      	beq.n	8003b8e <HAL_UART_Transmit_DMA+0x26>
 8003b88:	88fb      	ldrh	r3, [r7, #6]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e04f      	b.n	8003c32 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	88fa      	ldrh	r2, [r7, #6]
 8003b9c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	88fa      	ldrh	r2, [r7, #6]
 8003ba2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2221      	movs	r2, #33	@ 0x21
 8003bae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb6:	4a21      	ldr	r2, [pc, #132]	@ (8003c3c <HAL_UART_Transmit_DMA+0xd4>)
 8003bb8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bbe:	4a20      	ldr	r2, [pc, #128]	@ (8003c40 <HAL_UART_Transmit_DMA+0xd8>)
 8003bc0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc6:	4a1f      	ldr	r2, [pc, #124]	@ (8003c44 <HAL_UART_Transmit_DMA+0xdc>)
 8003bc8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bce:	2200      	movs	r2, #0
 8003bd0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003bd2:	f107 0308 	add.w	r3, r7, #8
 8003bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bde:	6819      	ldr	r1, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	3304      	adds	r3, #4
 8003be6:	461a      	mov	r2, r3
 8003be8:	88fb      	ldrh	r3, [r7, #6]
 8003bea:	f7fe fd31 	bl	8002650 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003bf6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3314      	adds	r3, #20
 8003bfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	e853 3f00 	ldrex	r3, [r3]
 8003c06:	617b      	str	r3, [r7, #20]
   return(result);
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3314      	adds	r3, #20
 8003c16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c18:	627a      	str	r2, [r7, #36]	@ 0x24
 8003c1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1c:	6a39      	ldr	r1, [r7, #32]
 8003c1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c20:	e841 2300 	strex	r3, r2, [r1]
 8003c24:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e5      	bne.n	8003bf8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	e000      	b.n	8003c32 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003c30:	2302      	movs	r3, #2
  }
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3730      	adds	r7, #48	@ 0x30
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	0800441d 	.word	0x0800441d
 8003c40:	080044b7 	.word	0x080044b7
 8003c44:	0800463b 	.word	0x0800463b

08003c48 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	4613      	mov	r3, r2
 8003c54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b20      	cmp	r3, #32
 8003c60:	d112      	bne.n	8003c88 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d002      	beq.n	8003c6e <HAL_UART_Receive_DMA+0x26>
 8003c68:	88fb      	ldrh	r3, [r7, #6]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e00b      	b.n	8003c8a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003c78:	88fb      	ldrh	r3, [r7, #6]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	68b9      	ldr	r1, [r7, #8]
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 fd7e 	bl	8004780 <UART_Start_Receive_DMA>
 8003c84:	4603      	mov	r3, r0
 8003c86:	e000      	b.n	8003c8a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003c88:	2302      	movs	r3, #2
  }
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b08e      	sub	sp, #56	@ 0x38
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	330c      	adds	r3, #12
 8003ca0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	e853 3f00 	ldrex	r3, [r3]
 8003ca8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003cb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	330c      	adds	r3, #12
 8003cb8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003cba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cbe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cc2:	e841 2300 	strex	r3, r2, [r1]
 8003cc6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1e5      	bne.n	8003c9a <HAL_UART_AbortTransmit+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd8:	2b80      	cmp	r3, #128	@ 0x80
 8003cda:	d136      	bne.n	8003d4a <HAL_UART_AbortTransmit+0xb8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	3314      	adds	r3, #20
 8003ce2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	e853 3f00 	ldrex	r3, [r3]
 8003cea:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cf2:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	3314      	adds	r3, #20
 8003cfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cfc:	61ba      	str	r2, [r7, #24]
 8003cfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d00:	6979      	ldr	r1, [r7, #20]
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	e841 2300 	strex	r3, r2, [r1]
 8003d08:	613b      	str	r3, [r7, #16]
   return(result);
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1e5      	bne.n	8003cdc <HAL_UART_AbortTransmit+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d018      	beq.n	8003d4a <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7fe fceb 	bl	8002700 <HAL_DMA_Abort>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00c      	beq.n	8003d4a <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7fe feff 	bl	8002b38 <HAL_DMA_GetError>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b20      	cmp	r3, #32
 8003d3e:	d104      	bne.n	8003d4a <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2210      	movs	r2, #16
 8003d44:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e007      	b.n	8003d5a <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0x00U;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	84da      	strh	r2, [r3, #38]	@ 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3738      	adds	r7, #56	@ 0x38
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b09a      	sub	sp, #104	@ 0x68
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	330c      	adds	r3, #12
 8003d70:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d74:	e853 3f00 	ldrex	r3, [r3]
 8003d78:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003d7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d80:	667b      	str	r3, [r7, #100]	@ 0x64
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	330c      	adds	r3, #12
 8003d88:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003d8a:	657a      	str	r2, [r7, #84]	@ 0x54
 8003d8c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003d90:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003d92:	e841 2300 	strex	r3, r2, [r1]
 8003d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003d98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1e5      	bne.n	8003d6a <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3314      	adds	r3, #20
 8003da4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003da8:	e853 3f00 	ldrex	r3, [r3]
 8003dac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db0:	f023 0301 	bic.w	r3, r3, #1
 8003db4:	663b      	str	r3, [r7, #96]	@ 0x60
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	3314      	adds	r3, #20
 8003dbc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003dbe:	643a      	str	r2, [r7, #64]	@ 0x40
 8003dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003dc4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003dc6:	e841 2300 	strex	r3, r2, [r1]
 8003dca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1e5      	bne.n	8003d9e <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d119      	bne.n	8003e0e <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	330c      	adds	r3, #12
 8003de0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de2:	6a3b      	ldr	r3, [r7, #32]
 8003de4:	e853 3f00 	ldrex	r3, [r3]
 8003de8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	f023 0310 	bic.w	r3, r3, #16
 8003df0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	330c      	adds	r3, #12
 8003df8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003dfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e02:	e841 2300 	strex	r3, r2, [r1]
 8003e06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1e5      	bne.n	8003dda <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e18:	2b40      	cmp	r3, #64	@ 0x40
 8003e1a:	d136      	bne.n	8003e8a <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	3314      	adds	r3, #20
 8003e22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	e853 3f00 	ldrex	r3, [r3]
 8003e2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e32:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	3314      	adds	r3, #20
 8003e3a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e3c:	61ba      	str	r2, [r7, #24]
 8003e3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e40:	6979      	ldr	r1, [r7, #20]
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	e841 2300 	strex	r3, r2, [r1]
 8003e48:	613b      	str	r3, [r7, #16]
   return(result);
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1e5      	bne.n	8003e1c <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d018      	beq.n	8003e8a <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fe fc4b 	bl	8002700 <HAL_DMA_Abort>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00c      	beq.n	8003e8a <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7fe fe5f 	bl	8002b38 <HAL_DMA_GetError>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b20      	cmp	r3, #32
 8003e7e:	d104      	bne.n	8003e8a <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2210      	movs	r2, #16
 8003e84:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e00a      	b.n	8003ea0 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2220      	movs	r2, #32
 8003e94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3768      	adds	r7, #104	@ 0x68
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b0ba      	sub	sp, #232	@ 0xe8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003ee6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10f      	bne.n	8003f0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ef2:	f003 0320 	and.w	r3, r3, #32
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d009      	beq.n	8003f0e <HAL_UART_IRQHandler+0x66>
 8003efa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003efe:	f003 0320 	and.w	r3, r3, #32
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 fddb 	bl	8004ac2 <UART_Receive_IT>
      return;
 8003f0c:	e25b      	b.n	80043c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 80de 	beq.w	80040d4 <HAL_UART_IRQHandler+0x22c>
 8003f18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d106      	bne.n	8003f32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f28:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 80d1 	beq.w	80040d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00b      	beq.n	8003f56 <HAL_UART_IRQHandler+0xae>
 8003f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d005      	beq.n	8003f56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4e:	f043 0201 	orr.w	r2, r3, #1
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f5a:	f003 0304 	and.w	r3, r3, #4
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00b      	beq.n	8003f7a <HAL_UART_IRQHandler+0xd2>
 8003f62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d005      	beq.n	8003f7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f72:	f043 0202 	orr.w	r2, r3, #2
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00b      	beq.n	8003f9e <HAL_UART_IRQHandler+0xf6>
 8003f86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d005      	beq.n	8003f9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f96:	f043 0204 	orr.w	r2, r3, #4
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fa2:	f003 0308 	and.w	r3, r3, #8
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d011      	beq.n	8003fce <HAL_UART_IRQHandler+0x126>
 8003faa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fae:	f003 0320 	and.w	r3, r3, #32
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d105      	bne.n	8003fc2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003fb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d005      	beq.n	8003fce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc6:	f043 0208 	orr.w	r2, r3, #8
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 81f2 	beq.w	80043bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fdc:	f003 0320 	and.w	r3, r3, #32
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d008      	beq.n	8003ff6 <HAL_UART_IRQHandler+0x14e>
 8003fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fe8:	f003 0320 	and.w	r3, r3, #32
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d002      	beq.n	8003ff6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 fd66 	bl	8004ac2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004000:	2b40      	cmp	r3, #64	@ 0x40
 8004002:	bf0c      	ite	eq
 8004004:	2301      	moveq	r3, #1
 8004006:	2300      	movne	r3, #0
 8004008:	b2db      	uxtb	r3, r3
 800400a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d103      	bne.n	8004022 <HAL_UART_IRQHandler+0x17a>
 800401a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800401e:	2b00      	cmp	r3, #0
 8004020:	d04f      	beq.n	80040c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 fc6e 	bl	8004904 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004032:	2b40      	cmp	r3, #64	@ 0x40
 8004034:	d141      	bne.n	80040ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	3314      	adds	r3, #20
 800403c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004040:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004044:	e853 3f00 	ldrex	r3, [r3]
 8004048:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800404c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004050:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004054:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	3314      	adds	r3, #20
 800405e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004062:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004066:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800406e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004072:	e841 2300 	strex	r3, r2, [r1]
 8004076:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800407a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1d9      	bne.n	8004036 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004086:	2b00      	cmp	r3, #0
 8004088:	d013      	beq.n	80040b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800408e:	4a7e      	ldr	r2, [pc, #504]	@ (8004288 <HAL_UART_IRQHandler+0x3e0>)
 8004090:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004096:	4618      	mov	r0, r3
 8004098:	f7fe fba2 	bl	80027e0 <HAL_DMA_Abort_IT>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d016      	beq.n	80040d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80040ac:	4610      	mov	r0, r2
 80040ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b0:	e00e      	b.n	80040d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f9a8 	bl	8004408 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b8:	e00a      	b.n	80040d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f9a4 	bl	8004408 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c0:	e006      	b.n	80040d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f9a0 	bl	8004408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80040ce:	e175      	b.n	80043bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d0:	bf00      	nop
    return;
 80040d2:	e173      	b.n	80043bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d8:	2b01      	cmp	r3, #1
 80040da:	f040 814f 	bne.w	800437c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80040de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040e2:	f003 0310 	and.w	r3, r3, #16
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f000 8148 	beq.w	800437c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80040ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040f0:	f003 0310 	and.w	r3, r3, #16
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f000 8141 	beq.w	800437c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040fa:	2300      	movs	r3, #0
 80040fc:	60bb      	str	r3, [r7, #8]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	60bb      	str	r3, [r7, #8]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	60bb      	str	r3, [r7, #8]
 800410e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800411a:	2b40      	cmp	r3, #64	@ 0x40
 800411c:	f040 80b6 	bne.w	800428c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800412c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 8145 	beq.w	80043c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800413a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800413e:	429a      	cmp	r2, r3
 8004140:	f080 813e 	bcs.w	80043c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800414a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004156:	f000 8088 	beq.w	800426a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	330c      	adds	r3, #12
 8004160:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004164:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004168:	e853 3f00 	ldrex	r3, [r3]
 800416c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004170:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004174:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004178:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	330c      	adds	r3, #12
 8004182:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004186:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800418a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004192:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004196:	e841 2300 	strex	r3, r2, [r1]
 800419a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800419e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1d9      	bne.n	800415a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	3314      	adds	r3, #20
 80041ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041b0:	e853 3f00 	ldrex	r3, [r3]
 80041b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80041b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041b8:	f023 0301 	bic.w	r3, r3, #1
 80041bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	3314      	adds	r3, #20
 80041c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80041ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80041ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80041d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80041d6:	e841 2300 	strex	r3, r2, [r1]
 80041da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80041dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1e1      	bne.n	80041a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	3314      	adds	r3, #20
 80041e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041ec:	e853 3f00 	ldrex	r3, [r3]
 80041f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80041f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3314      	adds	r3, #20
 8004202:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004206:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004208:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800420c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800420e:	e841 2300 	strex	r3, r2, [r1]
 8004212:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004214:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1e3      	bne.n	80041e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2220      	movs	r2, #32
 800421e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	330c      	adds	r3, #12
 800422e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004230:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004232:	e853 3f00 	ldrex	r3, [r3]
 8004236:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004238:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800423a:	f023 0310 	bic.w	r3, r3, #16
 800423e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	330c      	adds	r3, #12
 8004248:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800424c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800424e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004250:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004252:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004254:	e841 2300 	strex	r3, r2, [r1]
 8004258:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800425a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1e3      	bne.n	8004228 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004264:	4618      	mov	r0, r3
 8004266:	f7fe fa4b 	bl	8002700 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2202      	movs	r2, #2
 800426e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004278:	b29b      	uxth	r3, r3
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	b29b      	uxth	r3, r3
 800427e:	4619      	mov	r1, r3
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7fc f99b 	bl	80005bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004286:	e09b      	b.n	80043c0 <HAL_UART_IRQHandler+0x518>
 8004288:	080049cb 	.word	0x080049cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004294:	b29b      	uxth	r3, r3
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f000 808e 	beq.w	80043c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80042a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 8089 	beq.w	80043c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	330c      	adds	r3, #12
 80042b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042bc:	e853 3f00 	ldrex	r3, [r3]
 80042c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	330c      	adds	r3, #12
 80042d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80042d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80042d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042de:	e841 2300 	strex	r3, r2, [r1]
 80042e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1e3      	bne.n	80042b2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3314      	adds	r3, #20
 80042f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f4:	e853 3f00 	ldrex	r3, [r3]
 80042f8:	623b      	str	r3, [r7, #32]
   return(result);
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	f023 0301 	bic.w	r3, r3, #1
 8004300:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3314      	adds	r3, #20
 800430a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800430e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004310:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004312:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004314:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004316:	e841 2300 	strex	r3, r2, [r1]
 800431a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800431c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1e3      	bne.n	80042ea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2220      	movs	r2, #32
 8004326:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	330c      	adds	r3, #12
 8004336:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	e853 3f00 	ldrex	r3, [r3]
 800433e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f023 0310 	bic.w	r3, r3, #16
 8004346:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	330c      	adds	r3, #12
 8004350:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004354:	61fa      	str	r2, [r7, #28]
 8004356:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004358:	69b9      	ldr	r1, [r7, #24]
 800435a:	69fa      	ldr	r2, [r7, #28]
 800435c:	e841 2300 	strex	r3, r2, [r1]
 8004360:	617b      	str	r3, [r7, #20]
   return(result);
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1e3      	bne.n	8004330 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800436e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004372:	4619      	mov	r1, r3
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7fc f921 	bl	80005bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800437a:	e023      	b.n	80043c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800437c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004384:	2b00      	cmp	r3, #0
 8004386:	d009      	beq.n	800439c <HAL_UART_IRQHandler+0x4f4>
 8004388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800438c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 fb2c 	bl	80049f2 <UART_Transmit_IT>
    return;
 800439a:	e014      	b.n	80043c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800439c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00e      	beq.n	80043c6 <HAL_UART_IRQHandler+0x51e>
 80043a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d008      	beq.n	80043c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 fb6c 	bl	8004a92 <UART_EndTransmit_IT>
    return;
 80043ba:	e004      	b.n	80043c6 <HAL_UART_IRQHandler+0x51e>
    return;
 80043bc:	bf00      	nop
 80043be:	e002      	b.n	80043c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80043c0:	bf00      	nop
 80043c2:	e000      	b.n	80043c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80043c4:	bf00      	nop
  }
}
 80043c6:	37e8      	adds	r7, #232	@ 0xe8
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b090      	sub	sp, #64	@ 0x40
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004428:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004434:	2b00      	cmp	r3, #0
 8004436:	d137      	bne.n	80044a8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800443a:	2200      	movs	r2, #0
 800443c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800443e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	3314      	adds	r3, #20
 8004444:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004448:	e853 3f00 	ldrex	r3, [r3]
 800444c:	623b      	str	r3, [r7, #32]
   return(result);
 800444e:	6a3b      	ldr	r3, [r7, #32]
 8004450:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004454:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	3314      	adds	r3, #20
 800445c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800445e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004460:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004462:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004464:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004466:	e841 2300 	strex	r3, r2, [r1]
 800446a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800446c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1e5      	bne.n	800443e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	330c      	adds	r3, #12
 8004478:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	e853 3f00 	ldrex	r3, [r3]
 8004480:	60fb      	str	r3, [r7, #12]
   return(result);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004488:	637b      	str	r3, [r7, #52]	@ 0x34
 800448a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	330c      	adds	r3, #12
 8004490:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004492:	61fa      	str	r2, [r7, #28]
 8004494:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004496:	69b9      	ldr	r1, [r7, #24]
 8004498:	69fa      	ldr	r2, [r7, #28]
 800449a:	e841 2300 	strex	r3, r2, [r1]
 800449e:	617b      	str	r3, [r7, #20]
   return(result);
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1e5      	bne.n	8004472 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80044a6:	e002      	b.n	80044ae <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80044a8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80044aa:	f7fc f897 	bl	80005dc <HAL_UART_TxCpltCallback>
}
 80044ae:	bf00      	nop
 80044b0:	3740      	adds	r7, #64	@ 0x40
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b084      	sub	sp, #16
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044c2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f7ff ff81 	bl	80043cc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044ca:	bf00      	nop
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b09c      	sub	sp, #112	@ 0x70
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044de:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d172      	bne.n	80045d4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80044ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044f0:	2200      	movs	r2, #0
 80044f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	330c      	adds	r3, #12
 80044fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044fe:	e853 3f00 	ldrex	r3, [r3]
 8004502:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004504:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004506:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800450a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800450c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	330c      	adds	r3, #12
 8004512:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004514:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004516:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004518:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800451a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800451c:	e841 2300 	strex	r3, r2, [r1]
 8004520:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004522:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1e5      	bne.n	80044f4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004528:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	3314      	adds	r3, #20
 800452e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004532:	e853 3f00 	ldrex	r3, [r3]
 8004536:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800453a:	f023 0301 	bic.w	r3, r3, #1
 800453e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004540:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	3314      	adds	r3, #20
 8004546:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004548:	647a      	str	r2, [r7, #68]	@ 0x44
 800454a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800454e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004550:	e841 2300 	strex	r3, r2, [r1]
 8004554:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1e5      	bne.n	8004528 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800455c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	3314      	adds	r3, #20
 8004562:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004566:	e853 3f00 	ldrex	r3, [r3]
 800456a:	623b      	str	r3, [r7, #32]
   return(result);
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004572:	663b      	str	r3, [r7, #96]	@ 0x60
 8004574:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	3314      	adds	r3, #20
 800457a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800457c:	633a      	str	r2, [r7, #48]	@ 0x30
 800457e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004580:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004582:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004584:	e841 2300 	strex	r3, r2, [r1]
 8004588:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800458a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1e5      	bne.n	800455c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004590:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004592:	2220      	movs	r2, #32
 8004594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004598:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800459a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459c:	2b01      	cmp	r3, #1
 800459e:	d119      	bne.n	80045d4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	330c      	adds	r3, #12
 80045a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	e853 3f00 	ldrex	r3, [r3]
 80045ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f023 0310 	bic.w	r3, r3, #16
 80045b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	330c      	adds	r3, #12
 80045be:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80045c0:	61fa      	str	r2, [r7, #28]
 80045c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c4:	69b9      	ldr	r1, [r7, #24]
 80045c6:	69fa      	ldr	r2, [r7, #28]
 80045c8:	e841 2300 	strex	r3, r2, [r1]
 80045cc:	617b      	str	r3, [r7, #20]
   return(result);
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1e5      	bne.n	80045a0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045d6:	2200      	movs	r2, #0
 80045d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d106      	bne.n	80045f0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80045e6:	4619      	mov	r1, r3
 80045e8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80045ea:	f7fb ffe7 	bl	80005bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045ee:	e002      	b.n	80045f6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80045f0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80045f2:	f7ff fef5 	bl	80043e0 <HAL_UART_RxCpltCallback>
}
 80045f6:	bf00      	nop
 80045f8:	3770      	adds	r7, #112	@ 0x70
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b084      	sub	sp, #16
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800460a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2201      	movs	r2, #1
 8004610:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004616:	2b01      	cmp	r3, #1
 8004618:	d108      	bne.n	800462c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800461e:	085b      	lsrs	r3, r3, #1
 8004620:	b29b      	uxth	r3, r3
 8004622:	4619      	mov	r1, r3
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f7fb ffc9 	bl	80005bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800462a:	e002      	b.n	8004632 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f7ff fee1 	bl	80043f4 <HAL_UART_RxHalfCpltCallback>
}
 8004632:	bf00      	nop
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b084      	sub	sp, #16
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004642:	2300      	movs	r3, #0
 8004644:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800464a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004656:	2b80      	cmp	r3, #128	@ 0x80
 8004658:	bf0c      	ite	eq
 800465a:	2301      	moveq	r3, #1
 800465c:	2300      	movne	r3, #0
 800465e:	b2db      	uxtb	r3, r3
 8004660:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b21      	cmp	r3, #33	@ 0x21
 800466c:	d108      	bne.n	8004680 <UART_DMAError+0x46>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d005      	beq.n	8004680 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	2200      	movs	r2, #0
 8004678:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800467a:	68b8      	ldr	r0, [r7, #8]
 800467c:	f000 f91a 	bl	80048b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800468a:	2b40      	cmp	r3, #64	@ 0x40
 800468c:	bf0c      	ite	eq
 800468e:	2301      	moveq	r3, #1
 8004690:	2300      	movne	r3, #0
 8004692:	b2db      	uxtb	r3, r3
 8004694:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b22      	cmp	r3, #34	@ 0x22
 80046a0:	d108      	bne.n	80046b4 <UART_DMAError+0x7a>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d005      	beq.n	80046b4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	2200      	movs	r2, #0
 80046ac:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80046ae:	68b8      	ldr	r0, [r7, #8]
 80046b0:	f000 f928 	bl	8004904 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b8:	f043 0210 	orr.w	r2, r3, #16
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046c0:	68b8      	ldr	r0, [r7, #8]
 80046c2:	f7ff fea1 	bl	8004408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046c6:	bf00      	nop
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b086      	sub	sp, #24
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	60f8      	str	r0, [r7, #12]
 80046d6:	60b9      	str	r1, [r7, #8]
 80046d8:	603b      	str	r3, [r7, #0]
 80046da:	4613      	mov	r3, r2
 80046dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046de:	e03b      	b.n	8004758 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046e0:	6a3b      	ldr	r3, [r7, #32]
 80046e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e6:	d037      	beq.n	8004758 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046e8:	f7fd fdc2 	bl	8002270 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	6a3a      	ldr	r2, [r7, #32]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d302      	bcc.n	80046fe <UART_WaitOnFlagUntilTimeout+0x30>
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e03a      	b.n	8004778 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	d023      	beq.n	8004758 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2b80      	cmp	r3, #128	@ 0x80
 8004714:	d020      	beq.n	8004758 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	2b40      	cmp	r3, #64	@ 0x40
 800471a:	d01d      	beq.n	8004758 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0308 	and.w	r3, r3, #8
 8004726:	2b08      	cmp	r3, #8
 8004728:	d116      	bne.n	8004758 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800472a:	2300      	movs	r3, #0
 800472c:	617b      	str	r3, [r7, #20]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	617b      	str	r3, [r7, #20]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	617b      	str	r3, [r7, #20]
 800473e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 f8df 	bl	8004904 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2208      	movs	r2, #8
 800474a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e00f      	b.n	8004778 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	4013      	ands	r3, r2
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	429a      	cmp	r2, r3
 8004766:	bf0c      	ite	eq
 8004768:	2301      	moveq	r3, #1
 800476a:	2300      	movne	r3, #0
 800476c:	b2db      	uxtb	r3, r3
 800476e:	461a      	mov	r2, r3
 8004770:	79fb      	ldrb	r3, [r7, #7]
 8004772:	429a      	cmp	r2, r3
 8004774:	d0b4      	beq.n	80046e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3718      	adds	r7, #24
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b098      	sub	sp, #96	@ 0x60
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	4613      	mov	r3, r2
 800478c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	88fa      	ldrh	r2, [r7, #6]
 8004798:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2222      	movs	r2, #34	@ 0x22
 80047a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ac:	4a3e      	ldr	r2, [pc, #248]	@ (80048a8 <UART_Start_Receive_DMA+0x128>)
 80047ae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047b4:	4a3d      	ldr	r2, [pc, #244]	@ (80048ac <UART_Start_Receive_DMA+0x12c>)
 80047b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047bc:	4a3c      	ldr	r2, [pc, #240]	@ (80048b0 <UART_Start_Receive_DMA+0x130>)
 80047be:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c4:	2200      	movs	r2, #0
 80047c6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80047c8:	f107 0308 	add.w	r3, r7, #8
 80047cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	3304      	adds	r3, #4
 80047d8:	4619      	mov	r1, r3
 80047da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	88fb      	ldrh	r3, [r7, #6]
 80047e0:	f7fd ff36 	bl	8002650 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80047e4:	2300      	movs	r3, #0
 80047e6:	613b      	str	r3, [r7, #16]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	613b      	str	r3, [r7, #16]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	613b      	str	r3, [r7, #16]
 80047f8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d019      	beq.n	8004836 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	330c      	adds	r3, #12
 8004808:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800480c:	e853 3f00 	ldrex	r3, [r3]
 8004810:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004814:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004818:	65bb      	str	r3, [r7, #88]	@ 0x58
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	330c      	adds	r3, #12
 8004820:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004822:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004824:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004826:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004828:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800482a:	e841 2300 	strex	r3, r2, [r1]
 800482e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004830:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1e5      	bne.n	8004802 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	3314      	adds	r3, #20
 800483c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004840:	e853 3f00 	ldrex	r3, [r3]
 8004844:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004848:	f043 0301 	orr.w	r3, r3, #1
 800484c:	657b      	str	r3, [r7, #84]	@ 0x54
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	3314      	adds	r3, #20
 8004854:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004856:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004858:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800485c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800485e:	e841 2300 	strex	r3, r2, [r1]
 8004862:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1e5      	bne.n	8004836 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	3314      	adds	r3, #20
 8004870:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	e853 3f00 	ldrex	r3, [r3]
 8004878:	617b      	str	r3, [r7, #20]
   return(result);
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004880:	653b      	str	r3, [r7, #80]	@ 0x50
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	3314      	adds	r3, #20
 8004888:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800488a:	627a      	str	r2, [r7, #36]	@ 0x24
 800488c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488e:	6a39      	ldr	r1, [r7, #32]
 8004890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004892:	e841 2300 	strex	r3, r2, [r1]
 8004896:	61fb      	str	r3, [r7, #28]
   return(result);
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1e5      	bne.n	800486a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3760      	adds	r7, #96	@ 0x60
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	080044d3 	.word	0x080044d3
 80048ac:	080045ff 	.word	0x080045ff
 80048b0:	0800463b 	.word	0x0800463b

080048b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b089      	sub	sp, #36	@ 0x24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	330c      	adds	r3, #12
 80048c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	e853 3f00 	ldrex	r3, [r3]
 80048ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80048d2:	61fb      	str	r3, [r7, #28]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	330c      	adds	r3, #12
 80048da:	69fa      	ldr	r2, [r7, #28]
 80048dc:	61ba      	str	r2, [r7, #24]
 80048de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e0:	6979      	ldr	r1, [r7, #20]
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	e841 2300 	strex	r3, r2, [r1]
 80048e8:	613b      	str	r3, [r7, #16]
   return(result);
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1e5      	bne.n	80048bc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2220      	movs	r2, #32
 80048f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80048f8:	bf00      	nop
 80048fa:	3724      	adds	r7, #36	@ 0x24
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004904:	b480      	push	{r7}
 8004906:	b095      	sub	sp, #84	@ 0x54
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	330c      	adds	r3, #12
 8004912:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004916:	e853 3f00 	ldrex	r3, [r3]
 800491a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800491c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800491e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004922:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	330c      	adds	r3, #12
 800492a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800492c:	643a      	str	r2, [r7, #64]	@ 0x40
 800492e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004930:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004932:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004934:	e841 2300 	strex	r3, r2, [r1]
 8004938:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800493a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1e5      	bne.n	800490c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	3314      	adds	r3, #20
 8004946:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	e853 3f00 	ldrex	r3, [r3]
 800494e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	f023 0301 	bic.w	r3, r3, #1
 8004956:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	3314      	adds	r3, #20
 800495e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004960:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004962:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004964:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004966:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004968:	e841 2300 	strex	r3, r2, [r1]
 800496c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800496e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1e5      	bne.n	8004940 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004978:	2b01      	cmp	r3, #1
 800497a:	d119      	bne.n	80049b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	330c      	adds	r3, #12
 8004982:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	e853 3f00 	ldrex	r3, [r3]
 800498a:	60bb      	str	r3, [r7, #8]
   return(result);
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f023 0310 	bic.w	r3, r3, #16
 8004992:	647b      	str	r3, [r7, #68]	@ 0x44
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	330c      	adds	r3, #12
 800499a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800499c:	61ba      	str	r2, [r7, #24]
 800499e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a0:	6979      	ldr	r1, [r7, #20]
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	e841 2300 	strex	r3, r2, [r1]
 80049a8:	613b      	str	r3, [r7, #16]
   return(result);
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1e5      	bne.n	800497c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80049be:	bf00      	nop
 80049c0:	3754      	adds	r7, #84	@ 0x54
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b084      	sub	sp, #16
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f7ff fd0f 	bl	8004408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049ea:	bf00      	nop
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b085      	sub	sp, #20
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b21      	cmp	r3, #33	@ 0x21
 8004a04:	d13e      	bne.n	8004a84 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a0e:	d114      	bne.n	8004a3a <UART_Transmit_IT+0x48>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d110      	bne.n	8004a3a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	881b      	ldrh	r3, [r3, #0]
 8004a22:	461a      	mov	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a2c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	1c9a      	adds	r2, r3, #2
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	621a      	str	r2, [r3, #32]
 8004a38:	e008      	b.n	8004a4c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	1c59      	adds	r1, r3, #1
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6211      	str	r1, [r2, #32]
 8004a44:	781a      	ldrb	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	3b01      	subs	r3, #1
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	4619      	mov	r1, r3
 8004a5a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10f      	bne.n	8004a80 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68da      	ldr	r2, [r3, #12]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a80:	2300      	movs	r3, #0
 8004a82:	e000      	b.n	8004a86 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a84:	2302      	movs	r3, #2
  }
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b082      	sub	sp, #8
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68da      	ldr	r2, [r3, #12]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004aa8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2220      	movs	r2, #32
 8004aae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7fb fd92 	bl	80005dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b08c      	sub	sp, #48	@ 0x30
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b22      	cmp	r3, #34	@ 0x22
 8004ad4:	f040 80ae 	bne.w	8004c34 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ae0:	d117      	bne.n	8004b12 <UART_Receive_IT+0x50>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d113      	bne.n	8004b12 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004aea:	2300      	movs	r3, #0
 8004aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b0a:	1c9a      	adds	r2, r3, #2
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b10:	e026      	b.n	8004b60 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b24:	d007      	beq.n	8004b36 <UART_Receive_IT+0x74>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10a      	bne.n	8004b44 <UART_Receive_IT+0x82>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d106      	bne.n	8004b44 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	b2da      	uxtb	r2, r3
 8004b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b40:	701a      	strb	r2, [r3, #0]
 8004b42:	e008      	b.n	8004b56 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b50:	b2da      	uxtb	r2, r3
 8004b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b54:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	3b01      	subs	r3, #1
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d15d      	bne.n	8004c30 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f022 0220 	bic.w	r2, r2, #32
 8004b82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	695a      	ldr	r2, [r3, #20]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 0201 	bic.w	r2, r2, #1
 8004ba2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d135      	bne.n	8004c26 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	330c      	adds	r3, #12
 8004bc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	e853 3f00 	ldrex	r3, [r3]
 8004bce:	613b      	str	r3, [r7, #16]
   return(result);
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	f023 0310 	bic.w	r3, r3, #16
 8004bd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	330c      	adds	r3, #12
 8004bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004be0:	623a      	str	r2, [r7, #32]
 8004be2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be4:	69f9      	ldr	r1, [r7, #28]
 8004be6:	6a3a      	ldr	r2, [r7, #32]
 8004be8:	e841 2300 	strex	r3, r2, [r1]
 8004bec:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1e5      	bne.n	8004bc0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0310 	and.w	r3, r3, #16
 8004bfe:	2b10      	cmp	r3, #16
 8004c00:	d10a      	bne.n	8004c18 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c02:	2300      	movs	r3, #0
 8004c04:	60fb      	str	r3, [r7, #12]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7fb fccc 	bl	80005bc <HAL_UARTEx_RxEventCallback>
 8004c24:	e002      	b.n	8004c2c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7ff fbda 	bl	80043e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	e002      	b.n	8004c36 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004c30:	2300      	movs	r3, #0
 8004c32:	e000      	b.n	8004c36 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004c34:	2302      	movs	r3, #2
  }
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3730      	adds	r7, #48	@ 0x30
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
	...

08004c40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c44:	b0c0      	sub	sp, #256	@ 0x100
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c5c:	68d9      	ldr	r1, [r3, #12]
 8004c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	ea40 0301 	orr.w	r3, r0, r1
 8004c68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c6e:	689a      	ldr	r2, [r3, #8]
 8004c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	431a      	orrs	r2, r3
 8004c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004c98:	f021 010c 	bic.w	r1, r1, #12
 8004c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004ca6:	430b      	orrs	r3, r1
 8004ca8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cba:	6999      	ldr	r1, [r3, #24]
 8004cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	ea40 0301 	orr.w	r3, r0, r1
 8004cc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	4b8f      	ldr	r3, [pc, #572]	@ (8004f0c <UART_SetConfig+0x2cc>)
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d005      	beq.n	8004ce0 <UART_SetConfig+0xa0>
 8004cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	4b8d      	ldr	r3, [pc, #564]	@ (8004f10 <UART_SetConfig+0x2d0>)
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d104      	bne.n	8004cea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ce0:	f7fe fe52 	bl	8003988 <HAL_RCC_GetPCLK2Freq>
 8004ce4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004ce8:	e003      	b.n	8004cf2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cea:	f7fe fe39 	bl	8003960 <HAL_RCC_GetPCLK1Freq>
 8004cee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cfc:	f040 810c 	bne.w	8004f18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d04:	2200      	movs	r2, #0
 8004d06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d0a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004d0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004d12:	4622      	mov	r2, r4
 8004d14:	462b      	mov	r3, r5
 8004d16:	1891      	adds	r1, r2, r2
 8004d18:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004d1a:	415b      	adcs	r3, r3
 8004d1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d22:	4621      	mov	r1, r4
 8004d24:	eb12 0801 	adds.w	r8, r2, r1
 8004d28:	4629      	mov	r1, r5
 8004d2a:	eb43 0901 	adc.w	r9, r3, r1
 8004d2e:	f04f 0200 	mov.w	r2, #0
 8004d32:	f04f 0300 	mov.w	r3, #0
 8004d36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d42:	4690      	mov	r8, r2
 8004d44:	4699      	mov	r9, r3
 8004d46:	4623      	mov	r3, r4
 8004d48:	eb18 0303 	adds.w	r3, r8, r3
 8004d4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d50:	462b      	mov	r3, r5
 8004d52:	eb49 0303 	adc.w	r3, r9, r3
 8004d56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d66:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004d6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004d6e:	460b      	mov	r3, r1
 8004d70:	18db      	adds	r3, r3, r3
 8004d72:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d74:	4613      	mov	r3, r2
 8004d76:	eb42 0303 	adc.w	r3, r2, r3
 8004d7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004d80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004d84:	f7fb fa84 	bl	8000290 <__aeabi_uldivmod>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4b61      	ldr	r3, [pc, #388]	@ (8004f14 <UART_SetConfig+0x2d4>)
 8004d8e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d92:	095b      	lsrs	r3, r3, #5
 8004d94:	011c      	lsls	r4, r3, #4
 8004d96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004da0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004da4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004da8:	4642      	mov	r2, r8
 8004daa:	464b      	mov	r3, r9
 8004dac:	1891      	adds	r1, r2, r2
 8004dae:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004db0:	415b      	adcs	r3, r3
 8004db2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004db4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004db8:	4641      	mov	r1, r8
 8004dba:	eb12 0a01 	adds.w	sl, r2, r1
 8004dbe:	4649      	mov	r1, r9
 8004dc0:	eb43 0b01 	adc.w	fp, r3, r1
 8004dc4:	f04f 0200 	mov.w	r2, #0
 8004dc8:	f04f 0300 	mov.w	r3, #0
 8004dcc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004dd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004dd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004dd8:	4692      	mov	sl, r2
 8004dda:	469b      	mov	fp, r3
 8004ddc:	4643      	mov	r3, r8
 8004dde:	eb1a 0303 	adds.w	r3, sl, r3
 8004de2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004de6:	464b      	mov	r3, r9
 8004de8:	eb4b 0303 	adc.w	r3, fp, r3
 8004dec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004dfc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004e00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004e04:	460b      	mov	r3, r1
 8004e06:	18db      	adds	r3, r3, r3
 8004e08:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	eb42 0303 	adc.w	r3, r2, r3
 8004e10:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004e16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004e1a:	f7fb fa39 	bl	8000290 <__aeabi_uldivmod>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	460b      	mov	r3, r1
 8004e22:	4611      	mov	r1, r2
 8004e24:	4b3b      	ldr	r3, [pc, #236]	@ (8004f14 <UART_SetConfig+0x2d4>)
 8004e26:	fba3 2301 	umull	r2, r3, r3, r1
 8004e2a:	095b      	lsrs	r3, r3, #5
 8004e2c:	2264      	movs	r2, #100	@ 0x64
 8004e2e:	fb02 f303 	mul.w	r3, r2, r3
 8004e32:	1acb      	subs	r3, r1, r3
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004e3a:	4b36      	ldr	r3, [pc, #216]	@ (8004f14 <UART_SetConfig+0x2d4>)
 8004e3c:	fba3 2302 	umull	r2, r3, r3, r2
 8004e40:	095b      	lsrs	r3, r3, #5
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004e48:	441c      	add	r4, r3
 8004e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e54:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004e58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004e5c:	4642      	mov	r2, r8
 8004e5e:	464b      	mov	r3, r9
 8004e60:	1891      	adds	r1, r2, r2
 8004e62:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004e64:	415b      	adcs	r3, r3
 8004e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004e6c:	4641      	mov	r1, r8
 8004e6e:	1851      	adds	r1, r2, r1
 8004e70:	6339      	str	r1, [r7, #48]	@ 0x30
 8004e72:	4649      	mov	r1, r9
 8004e74:	414b      	adcs	r3, r1
 8004e76:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e78:	f04f 0200 	mov.w	r2, #0
 8004e7c:	f04f 0300 	mov.w	r3, #0
 8004e80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004e84:	4659      	mov	r1, fp
 8004e86:	00cb      	lsls	r3, r1, #3
 8004e88:	4651      	mov	r1, sl
 8004e8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e8e:	4651      	mov	r1, sl
 8004e90:	00ca      	lsls	r2, r1, #3
 8004e92:	4610      	mov	r0, r2
 8004e94:	4619      	mov	r1, r3
 8004e96:	4603      	mov	r3, r0
 8004e98:	4642      	mov	r2, r8
 8004e9a:	189b      	adds	r3, r3, r2
 8004e9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ea0:	464b      	mov	r3, r9
 8004ea2:	460a      	mov	r2, r1
 8004ea4:	eb42 0303 	adc.w	r3, r2, r3
 8004ea8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004eb8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004ebc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	18db      	adds	r3, r3, r3
 8004ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	eb42 0303 	adc.w	r3, r2, r3
 8004ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ece:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ed2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004ed6:	f7fb f9db 	bl	8000290 <__aeabi_uldivmod>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	4b0d      	ldr	r3, [pc, #52]	@ (8004f14 <UART_SetConfig+0x2d4>)
 8004ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ee4:	095b      	lsrs	r3, r3, #5
 8004ee6:	2164      	movs	r1, #100	@ 0x64
 8004ee8:	fb01 f303 	mul.w	r3, r1, r3
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	00db      	lsls	r3, r3, #3
 8004ef0:	3332      	adds	r3, #50	@ 0x32
 8004ef2:	4a08      	ldr	r2, [pc, #32]	@ (8004f14 <UART_SetConfig+0x2d4>)
 8004ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef8:	095b      	lsrs	r3, r3, #5
 8004efa:	f003 0207 	and.w	r2, r3, #7
 8004efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4422      	add	r2, r4
 8004f06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f08:	e106      	b.n	8005118 <UART_SetConfig+0x4d8>
 8004f0a:	bf00      	nop
 8004f0c:	40011000 	.word	0x40011000
 8004f10:	40011400 	.word	0x40011400
 8004f14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f22:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004f26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004f2a:	4642      	mov	r2, r8
 8004f2c:	464b      	mov	r3, r9
 8004f2e:	1891      	adds	r1, r2, r2
 8004f30:	6239      	str	r1, [r7, #32]
 8004f32:	415b      	adcs	r3, r3
 8004f34:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f3a:	4641      	mov	r1, r8
 8004f3c:	1854      	adds	r4, r2, r1
 8004f3e:	4649      	mov	r1, r9
 8004f40:	eb43 0501 	adc.w	r5, r3, r1
 8004f44:	f04f 0200 	mov.w	r2, #0
 8004f48:	f04f 0300 	mov.w	r3, #0
 8004f4c:	00eb      	lsls	r3, r5, #3
 8004f4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f52:	00e2      	lsls	r2, r4, #3
 8004f54:	4614      	mov	r4, r2
 8004f56:	461d      	mov	r5, r3
 8004f58:	4643      	mov	r3, r8
 8004f5a:	18e3      	adds	r3, r4, r3
 8004f5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f60:	464b      	mov	r3, r9
 8004f62:	eb45 0303 	adc.w	r3, r5, r3
 8004f66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f76:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f7a:	f04f 0200 	mov.w	r2, #0
 8004f7e:	f04f 0300 	mov.w	r3, #0
 8004f82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004f86:	4629      	mov	r1, r5
 8004f88:	008b      	lsls	r3, r1, #2
 8004f8a:	4621      	mov	r1, r4
 8004f8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f90:	4621      	mov	r1, r4
 8004f92:	008a      	lsls	r2, r1, #2
 8004f94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004f98:	f7fb f97a 	bl	8000290 <__aeabi_uldivmod>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	4b60      	ldr	r3, [pc, #384]	@ (8005124 <UART_SetConfig+0x4e4>)
 8004fa2:	fba3 2302 	umull	r2, r3, r3, r2
 8004fa6:	095b      	lsrs	r3, r3, #5
 8004fa8:	011c      	lsls	r4, r3, #4
 8004faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004fb4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004fb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004fbc:	4642      	mov	r2, r8
 8004fbe:	464b      	mov	r3, r9
 8004fc0:	1891      	adds	r1, r2, r2
 8004fc2:	61b9      	str	r1, [r7, #24]
 8004fc4:	415b      	adcs	r3, r3
 8004fc6:	61fb      	str	r3, [r7, #28]
 8004fc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fcc:	4641      	mov	r1, r8
 8004fce:	1851      	adds	r1, r2, r1
 8004fd0:	6139      	str	r1, [r7, #16]
 8004fd2:	4649      	mov	r1, r9
 8004fd4:	414b      	adcs	r3, r1
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	f04f 0200 	mov.w	r2, #0
 8004fdc:	f04f 0300 	mov.w	r3, #0
 8004fe0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fe4:	4659      	mov	r1, fp
 8004fe6:	00cb      	lsls	r3, r1, #3
 8004fe8:	4651      	mov	r1, sl
 8004fea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fee:	4651      	mov	r1, sl
 8004ff0:	00ca      	lsls	r2, r1, #3
 8004ff2:	4610      	mov	r0, r2
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	4642      	mov	r2, r8
 8004ffa:	189b      	adds	r3, r3, r2
 8004ffc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005000:	464b      	mov	r3, r9
 8005002:	460a      	mov	r2, r1
 8005004:	eb42 0303 	adc.w	r3, r2, r3
 8005008:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800500c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005016:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005018:	f04f 0200 	mov.w	r2, #0
 800501c:	f04f 0300 	mov.w	r3, #0
 8005020:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005024:	4649      	mov	r1, r9
 8005026:	008b      	lsls	r3, r1, #2
 8005028:	4641      	mov	r1, r8
 800502a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800502e:	4641      	mov	r1, r8
 8005030:	008a      	lsls	r2, r1, #2
 8005032:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005036:	f7fb f92b 	bl	8000290 <__aeabi_uldivmod>
 800503a:	4602      	mov	r2, r0
 800503c:	460b      	mov	r3, r1
 800503e:	4611      	mov	r1, r2
 8005040:	4b38      	ldr	r3, [pc, #224]	@ (8005124 <UART_SetConfig+0x4e4>)
 8005042:	fba3 2301 	umull	r2, r3, r3, r1
 8005046:	095b      	lsrs	r3, r3, #5
 8005048:	2264      	movs	r2, #100	@ 0x64
 800504a:	fb02 f303 	mul.w	r3, r2, r3
 800504e:	1acb      	subs	r3, r1, r3
 8005050:	011b      	lsls	r3, r3, #4
 8005052:	3332      	adds	r3, #50	@ 0x32
 8005054:	4a33      	ldr	r2, [pc, #204]	@ (8005124 <UART_SetConfig+0x4e4>)
 8005056:	fba2 2303 	umull	r2, r3, r2, r3
 800505a:	095b      	lsrs	r3, r3, #5
 800505c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005060:	441c      	add	r4, r3
 8005062:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005066:	2200      	movs	r2, #0
 8005068:	673b      	str	r3, [r7, #112]	@ 0x70
 800506a:	677a      	str	r2, [r7, #116]	@ 0x74
 800506c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005070:	4642      	mov	r2, r8
 8005072:	464b      	mov	r3, r9
 8005074:	1891      	adds	r1, r2, r2
 8005076:	60b9      	str	r1, [r7, #8]
 8005078:	415b      	adcs	r3, r3
 800507a:	60fb      	str	r3, [r7, #12]
 800507c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005080:	4641      	mov	r1, r8
 8005082:	1851      	adds	r1, r2, r1
 8005084:	6039      	str	r1, [r7, #0]
 8005086:	4649      	mov	r1, r9
 8005088:	414b      	adcs	r3, r1
 800508a:	607b      	str	r3, [r7, #4]
 800508c:	f04f 0200 	mov.w	r2, #0
 8005090:	f04f 0300 	mov.w	r3, #0
 8005094:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005098:	4659      	mov	r1, fp
 800509a:	00cb      	lsls	r3, r1, #3
 800509c:	4651      	mov	r1, sl
 800509e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050a2:	4651      	mov	r1, sl
 80050a4:	00ca      	lsls	r2, r1, #3
 80050a6:	4610      	mov	r0, r2
 80050a8:	4619      	mov	r1, r3
 80050aa:	4603      	mov	r3, r0
 80050ac:	4642      	mov	r2, r8
 80050ae:	189b      	adds	r3, r3, r2
 80050b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050b2:	464b      	mov	r3, r9
 80050b4:	460a      	mov	r2, r1
 80050b6:	eb42 0303 	adc.w	r3, r2, r3
 80050ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80050bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80050c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80050c8:	f04f 0200 	mov.w	r2, #0
 80050cc:	f04f 0300 	mov.w	r3, #0
 80050d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80050d4:	4649      	mov	r1, r9
 80050d6:	008b      	lsls	r3, r1, #2
 80050d8:	4641      	mov	r1, r8
 80050da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050de:	4641      	mov	r1, r8
 80050e0:	008a      	lsls	r2, r1, #2
 80050e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80050e6:	f7fb f8d3 	bl	8000290 <__aeabi_uldivmod>
 80050ea:	4602      	mov	r2, r0
 80050ec:	460b      	mov	r3, r1
 80050ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005124 <UART_SetConfig+0x4e4>)
 80050f0:	fba3 1302 	umull	r1, r3, r3, r2
 80050f4:	095b      	lsrs	r3, r3, #5
 80050f6:	2164      	movs	r1, #100	@ 0x64
 80050f8:	fb01 f303 	mul.w	r3, r1, r3
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	3332      	adds	r3, #50	@ 0x32
 8005102:	4a08      	ldr	r2, [pc, #32]	@ (8005124 <UART_SetConfig+0x4e4>)
 8005104:	fba2 2303 	umull	r2, r3, r2, r3
 8005108:	095b      	lsrs	r3, r3, #5
 800510a:	f003 020f 	and.w	r2, r3, #15
 800510e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4422      	add	r2, r4
 8005116:	609a      	str	r2, [r3, #8]
}
 8005118:	bf00      	nop
 800511a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800511e:	46bd      	mov	sp, r7
 8005120:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005124:	51eb851f 	.word	0x51eb851f

08005128 <calloc>:
 8005128:	4b02      	ldr	r3, [pc, #8]	@ (8005134 <calloc+0xc>)
 800512a:	460a      	mov	r2, r1
 800512c:	4601      	mov	r1, r0
 800512e:	6818      	ldr	r0, [r3, #0]
 8005130:	f000 b802 	b.w	8005138 <_calloc_r>
 8005134:	2000000c 	.word	0x2000000c

08005138 <_calloc_r>:
 8005138:	b570      	push	{r4, r5, r6, lr}
 800513a:	fba1 5402 	umull	r5, r4, r1, r2
 800513e:	b934      	cbnz	r4, 800514e <_calloc_r+0x16>
 8005140:	4629      	mov	r1, r5
 8005142:	f000 f837 	bl	80051b4 <_malloc_r>
 8005146:	4606      	mov	r6, r0
 8005148:	b928      	cbnz	r0, 8005156 <_calloc_r+0x1e>
 800514a:	4630      	mov	r0, r6
 800514c:	bd70      	pop	{r4, r5, r6, pc}
 800514e:	220c      	movs	r2, #12
 8005150:	6002      	str	r2, [r0, #0]
 8005152:	2600      	movs	r6, #0
 8005154:	e7f9      	b.n	800514a <_calloc_r+0x12>
 8005156:	462a      	mov	r2, r5
 8005158:	4621      	mov	r1, r4
 800515a:	f000 f91f 	bl	800539c <memset>
 800515e:	e7f4      	b.n	800514a <_calloc_r+0x12>

08005160 <free>:
 8005160:	4b02      	ldr	r3, [pc, #8]	@ (800516c <free+0xc>)
 8005162:	4601      	mov	r1, r0
 8005164:	6818      	ldr	r0, [r3, #0]
 8005166:	f000 b96b 	b.w	8005440 <_free_r>
 800516a:	bf00      	nop
 800516c:	2000000c 	.word	0x2000000c

08005170 <sbrk_aligned>:
 8005170:	b570      	push	{r4, r5, r6, lr}
 8005172:	4e0f      	ldr	r6, [pc, #60]	@ (80051b0 <sbrk_aligned+0x40>)
 8005174:	460c      	mov	r4, r1
 8005176:	6831      	ldr	r1, [r6, #0]
 8005178:	4605      	mov	r5, r0
 800517a:	b911      	cbnz	r1, 8005182 <sbrk_aligned+0x12>
 800517c:	f000 f916 	bl	80053ac <_sbrk_r>
 8005180:	6030      	str	r0, [r6, #0]
 8005182:	4621      	mov	r1, r4
 8005184:	4628      	mov	r0, r5
 8005186:	f000 f911 	bl	80053ac <_sbrk_r>
 800518a:	1c43      	adds	r3, r0, #1
 800518c:	d103      	bne.n	8005196 <sbrk_aligned+0x26>
 800518e:	f04f 34ff 	mov.w	r4, #4294967295
 8005192:	4620      	mov	r0, r4
 8005194:	bd70      	pop	{r4, r5, r6, pc}
 8005196:	1cc4      	adds	r4, r0, #3
 8005198:	f024 0403 	bic.w	r4, r4, #3
 800519c:	42a0      	cmp	r0, r4
 800519e:	d0f8      	beq.n	8005192 <sbrk_aligned+0x22>
 80051a0:	1a21      	subs	r1, r4, r0
 80051a2:	4628      	mov	r0, r5
 80051a4:	f000 f902 	bl	80053ac <_sbrk_r>
 80051a8:	3001      	adds	r0, #1
 80051aa:	d1f2      	bne.n	8005192 <sbrk_aligned+0x22>
 80051ac:	e7ef      	b.n	800518e <sbrk_aligned+0x1e>
 80051ae:	bf00      	nop
 80051b0:	200005f0 	.word	0x200005f0

080051b4 <_malloc_r>:
 80051b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051b8:	1ccd      	adds	r5, r1, #3
 80051ba:	f025 0503 	bic.w	r5, r5, #3
 80051be:	3508      	adds	r5, #8
 80051c0:	2d0c      	cmp	r5, #12
 80051c2:	bf38      	it	cc
 80051c4:	250c      	movcc	r5, #12
 80051c6:	2d00      	cmp	r5, #0
 80051c8:	4606      	mov	r6, r0
 80051ca:	db01      	blt.n	80051d0 <_malloc_r+0x1c>
 80051cc:	42a9      	cmp	r1, r5
 80051ce:	d904      	bls.n	80051da <_malloc_r+0x26>
 80051d0:	230c      	movs	r3, #12
 80051d2:	6033      	str	r3, [r6, #0]
 80051d4:	2000      	movs	r0, #0
 80051d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80052b0 <_malloc_r+0xfc>
 80051de:	f000 f869 	bl	80052b4 <__malloc_lock>
 80051e2:	f8d8 3000 	ldr.w	r3, [r8]
 80051e6:	461c      	mov	r4, r3
 80051e8:	bb44      	cbnz	r4, 800523c <_malloc_r+0x88>
 80051ea:	4629      	mov	r1, r5
 80051ec:	4630      	mov	r0, r6
 80051ee:	f7ff ffbf 	bl	8005170 <sbrk_aligned>
 80051f2:	1c43      	adds	r3, r0, #1
 80051f4:	4604      	mov	r4, r0
 80051f6:	d158      	bne.n	80052aa <_malloc_r+0xf6>
 80051f8:	f8d8 4000 	ldr.w	r4, [r8]
 80051fc:	4627      	mov	r7, r4
 80051fe:	2f00      	cmp	r7, #0
 8005200:	d143      	bne.n	800528a <_malloc_r+0xd6>
 8005202:	2c00      	cmp	r4, #0
 8005204:	d04b      	beq.n	800529e <_malloc_r+0xea>
 8005206:	6823      	ldr	r3, [r4, #0]
 8005208:	4639      	mov	r1, r7
 800520a:	4630      	mov	r0, r6
 800520c:	eb04 0903 	add.w	r9, r4, r3
 8005210:	f000 f8cc 	bl	80053ac <_sbrk_r>
 8005214:	4581      	cmp	r9, r0
 8005216:	d142      	bne.n	800529e <_malloc_r+0xea>
 8005218:	6821      	ldr	r1, [r4, #0]
 800521a:	1a6d      	subs	r5, r5, r1
 800521c:	4629      	mov	r1, r5
 800521e:	4630      	mov	r0, r6
 8005220:	f7ff ffa6 	bl	8005170 <sbrk_aligned>
 8005224:	3001      	adds	r0, #1
 8005226:	d03a      	beq.n	800529e <_malloc_r+0xea>
 8005228:	6823      	ldr	r3, [r4, #0]
 800522a:	442b      	add	r3, r5
 800522c:	6023      	str	r3, [r4, #0]
 800522e:	f8d8 3000 	ldr.w	r3, [r8]
 8005232:	685a      	ldr	r2, [r3, #4]
 8005234:	bb62      	cbnz	r2, 8005290 <_malloc_r+0xdc>
 8005236:	f8c8 7000 	str.w	r7, [r8]
 800523a:	e00f      	b.n	800525c <_malloc_r+0xa8>
 800523c:	6822      	ldr	r2, [r4, #0]
 800523e:	1b52      	subs	r2, r2, r5
 8005240:	d420      	bmi.n	8005284 <_malloc_r+0xd0>
 8005242:	2a0b      	cmp	r2, #11
 8005244:	d917      	bls.n	8005276 <_malloc_r+0xc2>
 8005246:	1961      	adds	r1, r4, r5
 8005248:	42a3      	cmp	r3, r4
 800524a:	6025      	str	r5, [r4, #0]
 800524c:	bf18      	it	ne
 800524e:	6059      	strne	r1, [r3, #4]
 8005250:	6863      	ldr	r3, [r4, #4]
 8005252:	bf08      	it	eq
 8005254:	f8c8 1000 	streq.w	r1, [r8]
 8005258:	5162      	str	r2, [r4, r5]
 800525a:	604b      	str	r3, [r1, #4]
 800525c:	4630      	mov	r0, r6
 800525e:	f000 f82f 	bl	80052c0 <__malloc_unlock>
 8005262:	f104 000b 	add.w	r0, r4, #11
 8005266:	1d23      	adds	r3, r4, #4
 8005268:	f020 0007 	bic.w	r0, r0, #7
 800526c:	1ac2      	subs	r2, r0, r3
 800526e:	bf1c      	itt	ne
 8005270:	1a1b      	subne	r3, r3, r0
 8005272:	50a3      	strne	r3, [r4, r2]
 8005274:	e7af      	b.n	80051d6 <_malloc_r+0x22>
 8005276:	6862      	ldr	r2, [r4, #4]
 8005278:	42a3      	cmp	r3, r4
 800527a:	bf0c      	ite	eq
 800527c:	f8c8 2000 	streq.w	r2, [r8]
 8005280:	605a      	strne	r2, [r3, #4]
 8005282:	e7eb      	b.n	800525c <_malloc_r+0xa8>
 8005284:	4623      	mov	r3, r4
 8005286:	6864      	ldr	r4, [r4, #4]
 8005288:	e7ae      	b.n	80051e8 <_malloc_r+0x34>
 800528a:	463c      	mov	r4, r7
 800528c:	687f      	ldr	r7, [r7, #4]
 800528e:	e7b6      	b.n	80051fe <_malloc_r+0x4a>
 8005290:	461a      	mov	r2, r3
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	42a3      	cmp	r3, r4
 8005296:	d1fb      	bne.n	8005290 <_malloc_r+0xdc>
 8005298:	2300      	movs	r3, #0
 800529a:	6053      	str	r3, [r2, #4]
 800529c:	e7de      	b.n	800525c <_malloc_r+0xa8>
 800529e:	230c      	movs	r3, #12
 80052a0:	6033      	str	r3, [r6, #0]
 80052a2:	4630      	mov	r0, r6
 80052a4:	f000 f80c 	bl	80052c0 <__malloc_unlock>
 80052a8:	e794      	b.n	80051d4 <_malloc_r+0x20>
 80052aa:	6005      	str	r5, [r0, #0]
 80052ac:	e7d6      	b.n	800525c <_malloc_r+0xa8>
 80052ae:	bf00      	nop
 80052b0:	200005f4 	.word	0x200005f4

080052b4 <__malloc_lock>:
 80052b4:	4801      	ldr	r0, [pc, #4]	@ (80052bc <__malloc_lock+0x8>)
 80052b6:	f000 b8b3 	b.w	8005420 <__retarget_lock_acquire_recursive>
 80052ba:	bf00      	nop
 80052bc:	20000734 	.word	0x20000734

080052c0 <__malloc_unlock>:
 80052c0:	4801      	ldr	r0, [pc, #4]	@ (80052c8 <__malloc_unlock+0x8>)
 80052c2:	f000 b8ae 	b.w	8005422 <__retarget_lock_release_recursive>
 80052c6:	bf00      	nop
 80052c8:	20000734 	.word	0x20000734

080052cc <sniprintf>:
 80052cc:	b40c      	push	{r2, r3}
 80052ce:	b530      	push	{r4, r5, lr}
 80052d0:	4b18      	ldr	r3, [pc, #96]	@ (8005334 <sniprintf+0x68>)
 80052d2:	1e0c      	subs	r4, r1, #0
 80052d4:	681d      	ldr	r5, [r3, #0]
 80052d6:	b09d      	sub	sp, #116	@ 0x74
 80052d8:	da08      	bge.n	80052ec <sniprintf+0x20>
 80052da:	238b      	movs	r3, #139	@ 0x8b
 80052dc:	602b      	str	r3, [r5, #0]
 80052de:	f04f 30ff 	mov.w	r0, #4294967295
 80052e2:	b01d      	add	sp, #116	@ 0x74
 80052e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052e8:	b002      	add	sp, #8
 80052ea:	4770      	bx	lr
 80052ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80052f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80052f4:	f04f 0300 	mov.w	r3, #0
 80052f8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80052fa:	bf14      	ite	ne
 80052fc:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005300:	4623      	moveq	r3, r4
 8005302:	9304      	str	r3, [sp, #16]
 8005304:	9307      	str	r3, [sp, #28]
 8005306:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800530a:	9002      	str	r0, [sp, #8]
 800530c:	9006      	str	r0, [sp, #24]
 800530e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005312:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005314:	ab21      	add	r3, sp, #132	@ 0x84
 8005316:	a902      	add	r1, sp, #8
 8005318:	4628      	mov	r0, r5
 800531a:	9301      	str	r3, [sp, #4]
 800531c:	f000 f936 	bl	800558c <_svfiprintf_r>
 8005320:	1c43      	adds	r3, r0, #1
 8005322:	bfbc      	itt	lt
 8005324:	238b      	movlt	r3, #139	@ 0x8b
 8005326:	602b      	strlt	r3, [r5, #0]
 8005328:	2c00      	cmp	r4, #0
 800532a:	d0da      	beq.n	80052e2 <sniprintf+0x16>
 800532c:	9b02      	ldr	r3, [sp, #8]
 800532e:	2200      	movs	r2, #0
 8005330:	701a      	strb	r2, [r3, #0]
 8005332:	e7d6      	b.n	80052e2 <sniprintf+0x16>
 8005334:	2000000c 	.word	0x2000000c

08005338 <siprintf>:
 8005338:	b40e      	push	{r1, r2, r3}
 800533a:	b510      	push	{r4, lr}
 800533c:	b09d      	sub	sp, #116	@ 0x74
 800533e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005340:	9002      	str	r0, [sp, #8]
 8005342:	9006      	str	r0, [sp, #24]
 8005344:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005348:	480a      	ldr	r0, [pc, #40]	@ (8005374 <siprintf+0x3c>)
 800534a:	9107      	str	r1, [sp, #28]
 800534c:	9104      	str	r1, [sp, #16]
 800534e:	490a      	ldr	r1, [pc, #40]	@ (8005378 <siprintf+0x40>)
 8005350:	f853 2b04 	ldr.w	r2, [r3], #4
 8005354:	9105      	str	r1, [sp, #20]
 8005356:	2400      	movs	r4, #0
 8005358:	a902      	add	r1, sp, #8
 800535a:	6800      	ldr	r0, [r0, #0]
 800535c:	9301      	str	r3, [sp, #4]
 800535e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005360:	f000 f914 	bl	800558c <_svfiprintf_r>
 8005364:	9b02      	ldr	r3, [sp, #8]
 8005366:	701c      	strb	r4, [r3, #0]
 8005368:	b01d      	add	sp, #116	@ 0x74
 800536a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800536e:	b003      	add	sp, #12
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	2000000c 	.word	0x2000000c
 8005378:	ffff0208 	.word	0xffff0208

0800537c <memcmp>:
 800537c:	b510      	push	{r4, lr}
 800537e:	3901      	subs	r1, #1
 8005380:	4402      	add	r2, r0
 8005382:	4290      	cmp	r0, r2
 8005384:	d101      	bne.n	800538a <memcmp+0xe>
 8005386:	2000      	movs	r0, #0
 8005388:	e005      	b.n	8005396 <memcmp+0x1a>
 800538a:	7803      	ldrb	r3, [r0, #0]
 800538c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005390:	42a3      	cmp	r3, r4
 8005392:	d001      	beq.n	8005398 <memcmp+0x1c>
 8005394:	1b18      	subs	r0, r3, r4
 8005396:	bd10      	pop	{r4, pc}
 8005398:	3001      	adds	r0, #1
 800539a:	e7f2      	b.n	8005382 <memcmp+0x6>

0800539c <memset>:
 800539c:	4402      	add	r2, r0
 800539e:	4603      	mov	r3, r0
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d100      	bne.n	80053a6 <memset+0xa>
 80053a4:	4770      	bx	lr
 80053a6:	f803 1b01 	strb.w	r1, [r3], #1
 80053aa:	e7f9      	b.n	80053a0 <memset+0x4>

080053ac <_sbrk_r>:
 80053ac:	b538      	push	{r3, r4, r5, lr}
 80053ae:	4d06      	ldr	r5, [pc, #24]	@ (80053c8 <_sbrk_r+0x1c>)
 80053b0:	2300      	movs	r3, #0
 80053b2:	4604      	mov	r4, r0
 80053b4:	4608      	mov	r0, r1
 80053b6:	602b      	str	r3, [r5, #0]
 80053b8:	f7fc fe82 	bl	80020c0 <_sbrk>
 80053bc:	1c43      	adds	r3, r0, #1
 80053be:	d102      	bne.n	80053c6 <_sbrk_r+0x1a>
 80053c0:	682b      	ldr	r3, [r5, #0]
 80053c2:	b103      	cbz	r3, 80053c6 <_sbrk_r+0x1a>
 80053c4:	6023      	str	r3, [r4, #0]
 80053c6:	bd38      	pop	{r3, r4, r5, pc}
 80053c8:	20000730 	.word	0x20000730

080053cc <__errno>:
 80053cc:	4b01      	ldr	r3, [pc, #4]	@ (80053d4 <__errno+0x8>)
 80053ce:	6818      	ldr	r0, [r3, #0]
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	2000000c 	.word	0x2000000c

080053d8 <__libc_init_array>:
 80053d8:	b570      	push	{r4, r5, r6, lr}
 80053da:	4d0d      	ldr	r5, [pc, #52]	@ (8005410 <__libc_init_array+0x38>)
 80053dc:	4c0d      	ldr	r4, [pc, #52]	@ (8005414 <__libc_init_array+0x3c>)
 80053de:	1b64      	subs	r4, r4, r5
 80053e0:	10a4      	asrs	r4, r4, #2
 80053e2:	2600      	movs	r6, #0
 80053e4:	42a6      	cmp	r6, r4
 80053e6:	d109      	bne.n	80053fc <__libc_init_array+0x24>
 80053e8:	4d0b      	ldr	r5, [pc, #44]	@ (8005418 <__libc_init_array+0x40>)
 80053ea:	4c0c      	ldr	r4, [pc, #48]	@ (800541c <__libc_init_array+0x44>)
 80053ec:	f000 fba6 	bl	8005b3c <_init>
 80053f0:	1b64      	subs	r4, r4, r5
 80053f2:	10a4      	asrs	r4, r4, #2
 80053f4:	2600      	movs	r6, #0
 80053f6:	42a6      	cmp	r6, r4
 80053f8:	d105      	bne.n	8005406 <__libc_init_array+0x2e>
 80053fa:	bd70      	pop	{r4, r5, r6, pc}
 80053fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005400:	4798      	blx	r3
 8005402:	3601      	adds	r6, #1
 8005404:	e7ee      	b.n	80053e4 <__libc_init_array+0xc>
 8005406:	f855 3b04 	ldr.w	r3, [r5], #4
 800540a:	4798      	blx	r3
 800540c:	3601      	adds	r6, #1
 800540e:	e7f2      	b.n	80053f6 <__libc_init_array+0x1e>
 8005410:	08005f38 	.word	0x08005f38
 8005414:	08005f38 	.word	0x08005f38
 8005418:	08005f38 	.word	0x08005f38
 800541c:	08005f3c 	.word	0x08005f3c

08005420 <__retarget_lock_acquire_recursive>:
 8005420:	4770      	bx	lr

08005422 <__retarget_lock_release_recursive>:
 8005422:	4770      	bx	lr

08005424 <memcpy>:
 8005424:	440a      	add	r2, r1
 8005426:	4291      	cmp	r1, r2
 8005428:	f100 33ff 	add.w	r3, r0, #4294967295
 800542c:	d100      	bne.n	8005430 <memcpy+0xc>
 800542e:	4770      	bx	lr
 8005430:	b510      	push	{r4, lr}
 8005432:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005436:	f803 4f01 	strb.w	r4, [r3, #1]!
 800543a:	4291      	cmp	r1, r2
 800543c:	d1f9      	bne.n	8005432 <memcpy+0xe>
 800543e:	bd10      	pop	{r4, pc}

08005440 <_free_r>:
 8005440:	b538      	push	{r3, r4, r5, lr}
 8005442:	4605      	mov	r5, r0
 8005444:	2900      	cmp	r1, #0
 8005446:	d041      	beq.n	80054cc <_free_r+0x8c>
 8005448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800544c:	1f0c      	subs	r4, r1, #4
 800544e:	2b00      	cmp	r3, #0
 8005450:	bfb8      	it	lt
 8005452:	18e4      	addlt	r4, r4, r3
 8005454:	f7ff ff2e 	bl	80052b4 <__malloc_lock>
 8005458:	4a1d      	ldr	r2, [pc, #116]	@ (80054d0 <_free_r+0x90>)
 800545a:	6813      	ldr	r3, [r2, #0]
 800545c:	b933      	cbnz	r3, 800546c <_free_r+0x2c>
 800545e:	6063      	str	r3, [r4, #4]
 8005460:	6014      	str	r4, [r2, #0]
 8005462:	4628      	mov	r0, r5
 8005464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005468:	f7ff bf2a 	b.w	80052c0 <__malloc_unlock>
 800546c:	42a3      	cmp	r3, r4
 800546e:	d908      	bls.n	8005482 <_free_r+0x42>
 8005470:	6820      	ldr	r0, [r4, #0]
 8005472:	1821      	adds	r1, r4, r0
 8005474:	428b      	cmp	r3, r1
 8005476:	bf01      	itttt	eq
 8005478:	6819      	ldreq	r1, [r3, #0]
 800547a:	685b      	ldreq	r3, [r3, #4]
 800547c:	1809      	addeq	r1, r1, r0
 800547e:	6021      	streq	r1, [r4, #0]
 8005480:	e7ed      	b.n	800545e <_free_r+0x1e>
 8005482:	461a      	mov	r2, r3
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	b10b      	cbz	r3, 800548c <_free_r+0x4c>
 8005488:	42a3      	cmp	r3, r4
 800548a:	d9fa      	bls.n	8005482 <_free_r+0x42>
 800548c:	6811      	ldr	r1, [r2, #0]
 800548e:	1850      	adds	r0, r2, r1
 8005490:	42a0      	cmp	r0, r4
 8005492:	d10b      	bne.n	80054ac <_free_r+0x6c>
 8005494:	6820      	ldr	r0, [r4, #0]
 8005496:	4401      	add	r1, r0
 8005498:	1850      	adds	r0, r2, r1
 800549a:	4283      	cmp	r3, r0
 800549c:	6011      	str	r1, [r2, #0]
 800549e:	d1e0      	bne.n	8005462 <_free_r+0x22>
 80054a0:	6818      	ldr	r0, [r3, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	6053      	str	r3, [r2, #4]
 80054a6:	4408      	add	r0, r1
 80054a8:	6010      	str	r0, [r2, #0]
 80054aa:	e7da      	b.n	8005462 <_free_r+0x22>
 80054ac:	d902      	bls.n	80054b4 <_free_r+0x74>
 80054ae:	230c      	movs	r3, #12
 80054b0:	602b      	str	r3, [r5, #0]
 80054b2:	e7d6      	b.n	8005462 <_free_r+0x22>
 80054b4:	6820      	ldr	r0, [r4, #0]
 80054b6:	1821      	adds	r1, r4, r0
 80054b8:	428b      	cmp	r3, r1
 80054ba:	bf04      	itt	eq
 80054bc:	6819      	ldreq	r1, [r3, #0]
 80054be:	685b      	ldreq	r3, [r3, #4]
 80054c0:	6063      	str	r3, [r4, #4]
 80054c2:	bf04      	itt	eq
 80054c4:	1809      	addeq	r1, r1, r0
 80054c6:	6021      	streq	r1, [r4, #0]
 80054c8:	6054      	str	r4, [r2, #4]
 80054ca:	e7ca      	b.n	8005462 <_free_r+0x22>
 80054cc:	bd38      	pop	{r3, r4, r5, pc}
 80054ce:	bf00      	nop
 80054d0:	200005f4 	.word	0x200005f4

080054d4 <__ssputs_r>:
 80054d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054d8:	688e      	ldr	r6, [r1, #8]
 80054da:	461f      	mov	r7, r3
 80054dc:	42be      	cmp	r6, r7
 80054de:	680b      	ldr	r3, [r1, #0]
 80054e0:	4682      	mov	sl, r0
 80054e2:	460c      	mov	r4, r1
 80054e4:	4690      	mov	r8, r2
 80054e6:	d82d      	bhi.n	8005544 <__ssputs_r+0x70>
 80054e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80054ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80054f0:	d026      	beq.n	8005540 <__ssputs_r+0x6c>
 80054f2:	6965      	ldr	r5, [r4, #20]
 80054f4:	6909      	ldr	r1, [r1, #16]
 80054f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054fa:	eba3 0901 	sub.w	r9, r3, r1
 80054fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005502:	1c7b      	adds	r3, r7, #1
 8005504:	444b      	add	r3, r9
 8005506:	106d      	asrs	r5, r5, #1
 8005508:	429d      	cmp	r5, r3
 800550a:	bf38      	it	cc
 800550c:	461d      	movcc	r5, r3
 800550e:	0553      	lsls	r3, r2, #21
 8005510:	d527      	bpl.n	8005562 <__ssputs_r+0x8e>
 8005512:	4629      	mov	r1, r5
 8005514:	f7ff fe4e 	bl	80051b4 <_malloc_r>
 8005518:	4606      	mov	r6, r0
 800551a:	b360      	cbz	r0, 8005576 <__ssputs_r+0xa2>
 800551c:	6921      	ldr	r1, [r4, #16]
 800551e:	464a      	mov	r2, r9
 8005520:	f7ff ff80 	bl	8005424 <memcpy>
 8005524:	89a3      	ldrh	r3, [r4, #12]
 8005526:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800552a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800552e:	81a3      	strh	r3, [r4, #12]
 8005530:	6126      	str	r6, [r4, #16]
 8005532:	6165      	str	r5, [r4, #20]
 8005534:	444e      	add	r6, r9
 8005536:	eba5 0509 	sub.w	r5, r5, r9
 800553a:	6026      	str	r6, [r4, #0]
 800553c:	60a5      	str	r5, [r4, #8]
 800553e:	463e      	mov	r6, r7
 8005540:	42be      	cmp	r6, r7
 8005542:	d900      	bls.n	8005546 <__ssputs_r+0x72>
 8005544:	463e      	mov	r6, r7
 8005546:	6820      	ldr	r0, [r4, #0]
 8005548:	4632      	mov	r2, r6
 800554a:	4641      	mov	r1, r8
 800554c:	f000 faa6 	bl	8005a9c <memmove>
 8005550:	68a3      	ldr	r3, [r4, #8]
 8005552:	1b9b      	subs	r3, r3, r6
 8005554:	60a3      	str	r3, [r4, #8]
 8005556:	6823      	ldr	r3, [r4, #0]
 8005558:	4433      	add	r3, r6
 800555a:	6023      	str	r3, [r4, #0]
 800555c:	2000      	movs	r0, #0
 800555e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005562:	462a      	mov	r2, r5
 8005564:	f000 fab4 	bl	8005ad0 <_realloc_r>
 8005568:	4606      	mov	r6, r0
 800556a:	2800      	cmp	r0, #0
 800556c:	d1e0      	bne.n	8005530 <__ssputs_r+0x5c>
 800556e:	6921      	ldr	r1, [r4, #16]
 8005570:	4650      	mov	r0, sl
 8005572:	f7ff ff65 	bl	8005440 <_free_r>
 8005576:	230c      	movs	r3, #12
 8005578:	f8ca 3000 	str.w	r3, [sl]
 800557c:	89a3      	ldrh	r3, [r4, #12]
 800557e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005582:	81a3      	strh	r3, [r4, #12]
 8005584:	f04f 30ff 	mov.w	r0, #4294967295
 8005588:	e7e9      	b.n	800555e <__ssputs_r+0x8a>
	...

0800558c <_svfiprintf_r>:
 800558c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005590:	4698      	mov	r8, r3
 8005592:	898b      	ldrh	r3, [r1, #12]
 8005594:	061b      	lsls	r3, r3, #24
 8005596:	b09d      	sub	sp, #116	@ 0x74
 8005598:	4607      	mov	r7, r0
 800559a:	460d      	mov	r5, r1
 800559c:	4614      	mov	r4, r2
 800559e:	d510      	bpl.n	80055c2 <_svfiprintf_r+0x36>
 80055a0:	690b      	ldr	r3, [r1, #16]
 80055a2:	b973      	cbnz	r3, 80055c2 <_svfiprintf_r+0x36>
 80055a4:	2140      	movs	r1, #64	@ 0x40
 80055a6:	f7ff fe05 	bl	80051b4 <_malloc_r>
 80055aa:	6028      	str	r0, [r5, #0]
 80055ac:	6128      	str	r0, [r5, #16]
 80055ae:	b930      	cbnz	r0, 80055be <_svfiprintf_r+0x32>
 80055b0:	230c      	movs	r3, #12
 80055b2:	603b      	str	r3, [r7, #0]
 80055b4:	f04f 30ff 	mov.w	r0, #4294967295
 80055b8:	b01d      	add	sp, #116	@ 0x74
 80055ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055be:	2340      	movs	r3, #64	@ 0x40
 80055c0:	616b      	str	r3, [r5, #20]
 80055c2:	2300      	movs	r3, #0
 80055c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80055c6:	2320      	movs	r3, #32
 80055c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80055cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80055d0:	2330      	movs	r3, #48	@ 0x30
 80055d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005770 <_svfiprintf_r+0x1e4>
 80055d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80055da:	f04f 0901 	mov.w	r9, #1
 80055de:	4623      	mov	r3, r4
 80055e0:	469a      	mov	sl, r3
 80055e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055e6:	b10a      	cbz	r2, 80055ec <_svfiprintf_r+0x60>
 80055e8:	2a25      	cmp	r2, #37	@ 0x25
 80055ea:	d1f9      	bne.n	80055e0 <_svfiprintf_r+0x54>
 80055ec:	ebba 0b04 	subs.w	fp, sl, r4
 80055f0:	d00b      	beq.n	800560a <_svfiprintf_r+0x7e>
 80055f2:	465b      	mov	r3, fp
 80055f4:	4622      	mov	r2, r4
 80055f6:	4629      	mov	r1, r5
 80055f8:	4638      	mov	r0, r7
 80055fa:	f7ff ff6b 	bl	80054d4 <__ssputs_r>
 80055fe:	3001      	adds	r0, #1
 8005600:	f000 80a7 	beq.w	8005752 <_svfiprintf_r+0x1c6>
 8005604:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005606:	445a      	add	r2, fp
 8005608:	9209      	str	r2, [sp, #36]	@ 0x24
 800560a:	f89a 3000 	ldrb.w	r3, [sl]
 800560e:	2b00      	cmp	r3, #0
 8005610:	f000 809f 	beq.w	8005752 <_svfiprintf_r+0x1c6>
 8005614:	2300      	movs	r3, #0
 8005616:	f04f 32ff 	mov.w	r2, #4294967295
 800561a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800561e:	f10a 0a01 	add.w	sl, sl, #1
 8005622:	9304      	str	r3, [sp, #16]
 8005624:	9307      	str	r3, [sp, #28]
 8005626:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800562a:	931a      	str	r3, [sp, #104]	@ 0x68
 800562c:	4654      	mov	r4, sl
 800562e:	2205      	movs	r2, #5
 8005630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005634:	484e      	ldr	r0, [pc, #312]	@ (8005770 <_svfiprintf_r+0x1e4>)
 8005636:	f7fa fddb 	bl	80001f0 <memchr>
 800563a:	9a04      	ldr	r2, [sp, #16]
 800563c:	b9d8      	cbnz	r0, 8005676 <_svfiprintf_r+0xea>
 800563e:	06d0      	lsls	r0, r2, #27
 8005640:	bf44      	itt	mi
 8005642:	2320      	movmi	r3, #32
 8005644:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005648:	0711      	lsls	r1, r2, #28
 800564a:	bf44      	itt	mi
 800564c:	232b      	movmi	r3, #43	@ 0x2b
 800564e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005652:	f89a 3000 	ldrb.w	r3, [sl]
 8005656:	2b2a      	cmp	r3, #42	@ 0x2a
 8005658:	d015      	beq.n	8005686 <_svfiprintf_r+0xfa>
 800565a:	9a07      	ldr	r2, [sp, #28]
 800565c:	4654      	mov	r4, sl
 800565e:	2000      	movs	r0, #0
 8005660:	f04f 0c0a 	mov.w	ip, #10
 8005664:	4621      	mov	r1, r4
 8005666:	f811 3b01 	ldrb.w	r3, [r1], #1
 800566a:	3b30      	subs	r3, #48	@ 0x30
 800566c:	2b09      	cmp	r3, #9
 800566e:	d94b      	bls.n	8005708 <_svfiprintf_r+0x17c>
 8005670:	b1b0      	cbz	r0, 80056a0 <_svfiprintf_r+0x114>
 8005672:	9207      	str	r2, [sp, #28]
 8005674:	e014      	b.n	80056a0 <_svfiprintf_r+0x114>
 8005676:	eba0 0308 	sub.w	r3, r0, r8
 800567a:	fa09 f303 	lsl.w	r3, r9, r3
 800567e:	4313      	orrs	r3, r2
 8005680:	9304      	str	r3, [sp, #16]
 8005682:	46a2      	mov	sl, r4
 8005684:	e7d2      	b.n	800562c <_svfiprintf_r+0xa0>
 8005686:	9b03      	ldr	r3, [sp, #12]
 8005688:	1d19      	adds	r1, r3, #4
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	9103      	str	r1, [sp, #12]
 800568e:	2b00      	cmp	r3, #0
 8005690:	bfbb      	ittet	lt
 8005692:	425b      	neglt	r3, r3
 8005694:	f042 0202 	orrlt.w	r2, r2, #2
 8005698:	9307      	strge	r3, [sp, #28]
 800569a:	9307      	strlt	r3, [sp, #28]
 800569c:	bfb8      	it	lt
 800569e:	9204      	strlt	r2, [sp, #16]
 80056a0:	7823      	ldrb	r3, [r4, #0]
 80056a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80056a4:	d10a      	bne.n	80056bc <_svfiprintf_r+0x130>
 80056a6:	7863      	ldrb	r3, [r4, #1]
 80056a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80056aa:	d132      	bne.n	8005712 <_svfiprintf_r+0x186>
 80056ac:	9b03      	ldr	r3, [sp, #12]
 80056ae:	1d1a      	adds	r2, r3, #4
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	9203      	str	r2, [sp, #12]
 80056b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80056b8:	3402      	adds	r4, #2
 80056ba:	9305      	str	r3, [sp, #20]
 80056bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005780 <_svfiprintf_r+0x1f4>
 80056c0:	7821      	ldrb	r1, [r4, #0]
 80056c2:	2203      	movs	r2, #3
 80056c4:	4650      	mov	r0, sl
 80056c6:	f7fa fd93 	bl	80001f0 <memchr>
 80056ca:	b138      	cbz	r0, 80056dc <_svfiprintf_r+0x150>
 80056cc:	9b04      	ldr	r3, [sp, #16]
 80056ce:	eba0 000a 	sub.w	r0, r0, sl
 80056d2:	2240      	movs	r2, #64	@ 0x40
 80056d4:	4082      	lsls	r2, r0
 80056d6:	4313      	orrs	r3, r2
 80056d8:	3401      	adds	r4, #1
 80056da:	9304      	str	r3, [sp, #16]
 80056dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056e0:	4824      	ldr	r0, [pc, #144]	@ (8005774 <_svfiprintf_r+0x1e8>)
 80056e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80056e6:	2206      	movs	r2, #6
 80056e8:	f7fa fd82 	bl	80001f0 <memchr>
 80056ec:	2800      	cmp	r0, #0
 80056ee:	d036      	beq.n	800575e <_svfiprintf_r+0x1d2>
 80056f0:	4b21      	ldr	r3, [pc, #132]	@ (8005778 <_svfiprintf_r+0x1ec>)
 80056f2:	bb1b      	cbnz	r3, 800573c <_svfiprintf_r+0x1b0>
 80056f4:	9b03      	ldr	r3, [sp, #12]
 80056f6:	3307      	adds	r3, #7
 80056f8:	f023 0307 	bic.w	r3, r3, #7
 80056fc:	3308      	adds	r3, #8
 80056fe:	9303      	str	r3, [sp, #12]
 8005700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005702:	4433      	add	r3, r6
 8005704:	9309      	str	r3, [sp, #36]	@ 0x24
 8005706:	e76a      	b.n	80055de <_svfiprintf_r+0x52>
 8005708:	fb0c 3202 	mla	r2, ip, r2, r3
 800570c:	460c      	mov	r4, r1
 800570e:	2001      	movs	r0, #1
 8005710:	e7a8      	b.n	8005664 <_svfiprintf_r+0xd8>
 8005712:	2300      	movs	r3, #0
 8005714:	3401      	adds	r4, #1
 8005716:	9305      	str	r3, [sp, #20]
 8005718:	4619      	mov	r1, r3
 800571a:	f04f 0c0a 	mov.w	ip, #10
 800571e:	4620      	mov	r0, r4
 8005720:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005724:	3a30      	subs	r2, #48	@ 0x30
 8005726:	2a09      	cmp	r2, #9
 8005728:	d903      	bls.n	8005732 <_svfiprintf_r+0x1a6>
 800572a:	2b00      	cmp	r3, #0
 800572c:	d0c6      	beq.n	80056bc <_svfiprintf_r+0x130>
 800572e:	9105      	str	r1, [sp, #20]
 8005730:	e7c4      	b.n	80056bc <_svfiprintf_r+0x130>
 8005732:	fb0c 2101 	mla	r1, ip, r1, r2
 8005736:	4604      	mov	r4, r0
 8005738:	2301      	movs	r3, #1
 800573a:	e7f0      	b.n	800571e <_svfiprintf_r+0x192>
 800573c:	ab03      	add	r3, sp, #12
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	462a      	mov	r2, r5
 8005742:	4b0e      	ldr	r3, [pc, #56]	@ (800577c <_svfiprintf_r+0x1f0>)
 8005744:	a904      	add	r1, sp, #16
 8005746:	4638      	mov	r0, r7
 8005748:	f3af 8000 	nop.w
 800574c:	1c42      	adds	r2, r0, #1
 800574e:	4606      	mov	r6, r0
 8005750:	d1d6      	bne.n	8005700 <_svfiprintf_r+0x174>
 8005752:	89ab      	ldrh	r3, [r5, #12]
 8005754:	065b      	lsls	r3, r3, #25
 8005756:	f53f af2d 	bmi.w	80055b4 <_svfiprintf_r+0x28>
 800575a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800575c:	e72c      	b.n	80055b8 <_svfiprintf_r+0x2c>
 800575e:	ab03      	add	r3, sp, #12
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	462a      	mov	r2, r5
 8005764:	4b05      	ldr	r3, [pc, #20]	@ (800577c <_svfiprintf_r+0x1f0>)
 8005766:	a904      	add	r1, sp, #16
 8005768:	4638      	mov	r0, r7
 800576a:	f000 f879 	bl	8005860 <_printf_i>
 800576e:	e7ed      	b.n	800574c <_svfiprintf_r+0x1c0>
 8005770:	08005efc 	.word	0x08005efc
 8005774:	08005f06 	.word	0x08005f06
 8005778:	00000000 	.word	0x00000000
 800577c:	080054d5 	.word	0x080054d5
 8005780:	08005f02 	.word	0x08005f02

08005784 <_printf_common>:
 8005784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005788:	4616      	mov	r6, r2
 800578a:	4698      	mov	r8, r3
 800578c:	688a      	ldr	r2, [r1, #8]
 800578e:	690b      	ldr	r3, [r1, #16]
 8005790:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005794:	4293      	cmp	r3, r2
 8005796:	bfb8      	it	lt
 8005798:	4613      	movlt	r3, r2
 800579a:	6033      	str	r3, [r6, #0]
 800579c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80057a0:	4607      	mov	r7, r0
 80057a2:	460c      	mov	r4, r1
 80057a4:	b10a      	cbz	r2, 80057aa <_printf_common+0x26>
 80057a6:	3301      	adds	r3, #1
 80057a8:	6033      	str	r3, [r6, #0]
 80057aa:	6823      	ldr	r3, [r4, #0]
 80057ac:	0699      	lsls	r1, r3, #26
 80057ae:	bf42      	ittt	mi
 80057b0:	6833      	ldrmi	r3, [r6, #0]
 80057b2:	3302      	addmi	r3, #2
 80057b4:	6033      	strmi	r3, [r6, #0]
 80057b6:	6825      	ldr	r5, [r4, #0]
 80057b8:	f015 0506 	ands.w	r5, r5, #6
 80057bc:	d106      	bne.n	80057cc <_printf_common+0x48>
 80057be:	f104 0a19 	add.w	sl, r4, #25
 80057c2:	68e3      	ldr	r3, [r4, #12]
 80057c4:	6832      	ldr	r2, [r6, #0]
 80057c6:	1a9b      	subs	r3, r3, r2
 80057c8:	42ab      	cmp	r3, r5
 80057ca:	dc26      	bgt.n	800581a <_printf_common+0x96>
 80057cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80057d0:	6822      	ldr	r2, [r4, #0]
 80057d2:	3b00      	subs	r3, #0
 80057d4:	bf18      	it	ne
 80057d6:	2301      	movne	r3, #1
 80057d8:	0692      	lsls	r2, r2, #26
 80057da:	d42b      	bmi.n	8005834 <_printf_common+0xb0>
 80057dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80057e0:	4641      	mov	r1, r8
 80057e2:	4638      	mov	r0, r7
 80057e4:	47c8      	blx	r9
 80057e6:	3001      	adds	r0, #1
 80057e8:	d01e      	beq.n	8005828 <_printf_common+0xa4>
 80057ea:	6823      	ldr	r3, [r4, #0]
 80057ec:	6922      	ldr	r2, [r4, #16]
 80057ee:	f003 0306 	and.w	r3, r3, #6
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	bf02      	ittt	eq
 80057f6:	68e5      	ldreq	r5, [r4, #12]
 80057f8:	6833      	ldreq	r3, [r6, #0]
 80057fa:	1aed      	subeq	r5, r5, r3
 80057fc:	68a3      	ldr	r3, [r4, #8]
 80057fe:	bf0c      	ite	eq
 8005800:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005804:	2500      	movne	r5, #0
 8005806:	4293      	cmp	r3, r2
 8005808:	bfc4      	itt	gt
 800580a:	1a9b      	subgt	r3, r3, r2
 800580c:	18ed      	addgt	r5, r5, r3
 800580e:	2600      	movs	r6, #0
 8005810:	341a      	adds	r4, #26
 8005812:	42b5      	cmp	r5, r6
 8005814:	d11a      	bne.n	800584c <_printf_common+0xc8>
 8005816:	2000      	movs	r0, #0
 8005818:	e008      	b.n	800582c <_printf_common+0xa8>
 800581a:	2301      	movs	r3, #1
 800581c:	4652      	mov	r2, sl
 800581e:	4641      	mov	r1, r8
 8005820:	4638      	mov	r0, r7
 8005822:	47c8      	blx	r9
 8005824:	3001      	adds	r0, #1
 8005826:	d103      	bne.n	8005830 <_printf_common+0xac>
 8005828:	f04f 30ff 	mov.w	r0, #4294967295
 800582c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005830:	3501      	adds	r5, #1
 8005832:	e7c6      	b.n	80057c2 <_printf_common+0x3e>
 8005834:	18e1      	adds	r1, r4, r3
 8005836:	1c5a      	adds	r2, r3, #1
 8005838:	2030      	movs	r0, #48	@ 0x30
 800583a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800583e:	4422      	add	r2, r4
 8005840:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005844:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005848:	3302      	adds	r3, #2
 800584a:	e7c7      	b.n	80057dc <_printf_common+0x58>
 800584c:	2301      	movs	r3, #1
 800584e:	4622      	mov	r2, r4
 8005850:	4641      	mov	r1, r8
 8005852:	4638      	mov	r0, r7
 8005854:	47c8      	blx	r9
 8005856:	3001      	adds	r0, #1
 8005858:	d0e6      	beq.n	8005828 <_printf_common+0xa4>
 800585a:	3601      	adds	r6, #1
 800585c:	e7d9      	b.n	8005812 <_printf_common+0x8e>
	...

08005860 <_printf_i>:
 8005860:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005864:	7e0f      	ldrb	r7, [r1, #24]
 8005866:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005868:	2f78      	cmp	r7, #120	@ 0x78
 800586a:	4691      	mov	r9, r2
 800586c:	4680      	mov	r8, r0
 800586e:	460c      	mov	r4, r1
 8005870:	469a      	mov	sl, r3
 8005872:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005876:	d807      	bhi.n	8005888 <_printf_i+0x28>
 8005878:	2f62      	cmp	r7, #98	@ 0x62
 800587a:	d80a      	bhi.n	8005892 <_printf_i+0x32>
 800587c:	2f00      	cmp	r7, #0
 800587e:	f000 80d1 	beq.w	8005a24 <_printf_i+0x1c4>
 8005882:	2f58      	cmp	r7, #88	@ 0x58
 8005884:	f000 80b8 	beq.w	80059f8 <_printf_i+0x198>
 8005888:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800588c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005890:	e03a      	b.n	8005908 <_printf_i+0xa8>
 8005892:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005896:	2b15      	cmp	r3, #21
 8005898:	d8f6      	bhi.n	8005888 <_printf_i+0x28>
 800589a:	a101      	add	r1, pc, #4	@ (adr r1, 80058a0 <_printf_i+0x40>)
 800589c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058a0:	080058f9 	.word	0x080058f9
 80058a4:	0800590d 	.word	0x0800590d
 80058a8:	08005889 	.word	0x08005889
 80058ac:	08005889 	.word	0x08005889
 80058b0:	08005889 	.word	0x08005889
 80058b4:	08005889 	.word	0x08005889
 80058b8:	0800590d 	.word	0x0800590d
 80058bc:	08005889 	.word	0x08005889
 80058c0:	08005889 	.word	0x08005889
 80058c4:	08005889 	.word	0x08005889
 80058c8:	08005889 	.word	0x08005889
 80058cc:	08005a0b 	.word	0x08005a0b
 80058d0:	08005937 	.word	0x08005937
 80058d4:	080059c5 	.word	0x080059c5
 80058d8:	08005889 	.word	0x08005889
 80058dc:	08005889 	.word	0x08005889
 80058e0:	08005a2d 	.word	0x08005a2d
 80058e4:	08005889 	.word	0x08005889
 80058e8:	08005937 	.word	0x08005937
 80058ec:	08005889 	.word	0x08005889
 80058f0:	08005889 	.word	0x08005889
 80058f4:	080059cd 	.word	0x080059cd
 80058f8:	6833      	ldr	r3, [r6, #0]
 80058fa:	1d1a      	adds	r2, r3, #4
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6032      	str	r2, [r6, #0]
 8005900:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005904:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005908:	2301      	movs	r3, #1
 800590a:	e09c      	b.n	8005a46 <_printf_i+0x1e6>
 800590c:	6833      	ldr	r3, [r6, #0]
 800590e:	6820      	ldr	r0, [r4, #0]
 8005910:	1d19      	adds	r1, r3, #4
 8005912:	6031      	str	r1, [r6, #0]
 8005914:	0606      	lsls	r6, r0, #24
 8005916:	d501      	bpl.n	800591c <_printf_i+0xbc>
 8005918:	681d      	ldr	r5, [r3, #0]
 800591a:	e003      	b.n	8005924 <_printf_i+0xc4>
 800591c:	0645      	lsls	r5, r0, #25
 800591e:	d5fb      	bpl.n	8005918 <_printf_i+0xb8>
 8005920:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005924:	2d00      	cmp	r5, #0
 8005926:	da03      	bge.n	8005930 <_printf_i+0xd0>
 8005928:	232d      	movs	r3, #45	@ 0x2d
 800592a:	426d      	negs	r5, r5
 800592c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005930:	4858      	ldr	r0, [pc, #352]	@ (8005a94 <_printf_i+0x234>)
 8005932:	230a      	movs	r3, #10
 8005934:	e011      	b.n	800595a <_printf_i+0xfa>
 8005936:	6821      	ldr	r1, [r4, #0]
 8005938:	6833      	ldr	r3, [r6, #0]
 800593a:	0608      	lsls	r0, r1, #24
 800593c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005940:	d402      	bmi.n	8005948 <_printf_i+0xe8>
 8005942:	0649      	lsls	r1, r1, #25
 8005944:	bf48      	it	mi
 8005946:	b2ad      	uxthmi	r5, r5
 8005948:	2f6f      	cmp	r7, #111	@ 0x6f
 800594a:	4852      	ldr	r0, [pc, #328]	@ (8005a94 <_printf_i+0x234>)
 800594c:	6033      	str	r3, [r6, #0]
 800594e:	bf14      	ite	ne
 8005950:	230a      	movne	r3, #10
 8005952:	2308      	moveq	r3, #8
 8005954:	2100      	movs	r1, #0
 8005956:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800595a:	6866      	ldr	r6, [r4, #4]
 800595c:	60a6      	str	r6, [r4, #8]
 800595e:	2e00      	cmp	r6, #0
 8005960:	db05      	blt.n	800596e <_printf_i+0x10e>
 8005962:	6821      	ldr	r1, [r4, #0]
 8005964:	432e      	orrs	r6, r5
 8005966:	f021 0104 	bic.w	r1, r1, #4
 800596a:	6021      	str	r1, [r4, #0]
 800596c:	d04b      	beq.n	8005a06 <_printf_i+0x1a6>
 800596e:	4616      	mov	r6, r2
 8005970:	fbb5 f1f3 	udiv	r1, r5, r3
 8005974:	fb03 5711 	mls	r7, r3, r1, r5
 8005978:	5dc7      	ldrb	r7, [r0, r7]
 800597a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800597e:	462f      	mov	r7, r5
 8005980:	42bb      	cmp	r3, r7
 8005982:	460d      	mov	r5, r1
 8005984:	d9f4      	bls.n	8005970 <_printf_i+0x110>
 8005986:	2b08      	cmp	r3, #8
 8005988:	d10b      	bne.n	80059a2 <_printf_i+0x142>
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	07df      	lsls	r7, r3, #31
 800598e:	d508      	bpl.n	80059a2 <_printf_i+0x142>
 8005990:	6923      	ldr	r3, [r4, #16]
 8005992:	6861      	ldr	r1, [r4, #4]
 8005994:	4299      	cmp	r1, r3
 8005996:	bfde      	ittt	le
 8005998:	2330      	movle	r3, #48	@ 0x30
 800599a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800599e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80059a2:	1b92      	subs	r2, r2, r6
 80059a4:	6122      	str	r2, [r4, #16]
 80059a6:	f8cd a000 	str.w	sl, [sp]
 80059aa:	464b      	mov	r3, r9
 80059ac:	aa03      	add	r2, sp, #12
 80059ae:	4621      	mov	r1, r4
 80059b0:	4640      	mov	r0, r8
 80059b2:	f7ff fee7 	bl	8005784 <_printf_common>
 80059b6:	3001      	adds	r0, #1
 80059b8:	d14a      	bne.n	8005a50 <_printf_i+0x1f0>
 80059ba:	f04f 30ff 	mov.w	r0, #4294967295
 80059be:	b004      	add	sp, #16
 80059c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059c4:	6823      	ldr	r3, [r4, #0]
 80059c6:	f043 0320 	orr.w	r3, r3, #32
 80059ca:	6023      	str	r3, [r4, #0]
 80059cc:	4832      	ldr	r0, [pc, #200]	@ (8005a98 <_printf_i+0x238>)
 80059ce:	2778      	movs	r7, #120	@ 0x78
 80059d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80059d4:	6823      	ldr	r3, [r4, #0]
 80059d6:	6831      	ldr	r1, [r6, #0]
 80059d8:	061f      	lsls	r7, r3, #24
 80059da:	f851 5b04 	ldr.w	r5, [r1], #4
 80059de:	d402      	bmi.n	80059e6 <_printf_i+0x186>
 80059e0:	065f      	lsls	r7, r3, #25
 80059e2:	bf48      	it	mi
 80059e4:	b2ad      	uxthmi	r5, r5
 80059e6:	6031      	str	r1, [r6, #0]
 80059e8:	07d9      	lsls	r1, r3, #31
 80059ea:	bf44      	itt	mi
 80059ec:	f043 0320 	orrmi.w	r3, r3, #32
 80059f0:	6023      	strmi	r3, [r4, #0]
 80059f2:	b11d      	cbz	r5, 80059fc <_printf_i+0x19c>
 80059f4:	2310      	movs	r3, #16
 80059f6:	e7ad      	b.n	8005954 <_printf_i+0xf4>
 80059f8:	4826      	ldr	r0, [pc, #152]	@ (8005a94 <_printf_i+0x234>)
 80059fa:	e7e9      	b.n	80059d0 <_printf_i+0x170>
 80059fc:	6823      	ldr	r3, [r4, #0]
 80059fe:	f023 0320 	bic.w	r3, r3, #32
 8005a02:	6023      	str	r3, [r4, #0]
 8005a04:	e7f6      	b.n	80059f4 <_printf_i+0x194>
 8005a06:	4616      	mov	r6, r2
 8005a08:	e7bd      	b.n	8005986 <_printf_i+0x126>
 8005a0a:	6833      	ldr	r3, [r6, #0]
 8005a0c:	6825      	ldr	r5, [r4, #0]
 8005a0e:	6961      	ldr	r1, [r4, #20]
 8005a10:	1d18      	adds	r0, r3, #4
 8005a12:	6030      	str	r0, [r6, #0]
 8005a14:	062e      	lsls	r6, r5, #24
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	d501      	bpl.n	8005a1e <_printf_i+0x1be>
 8005a1a:	6019      	str	r1, [r3, #0]
 8005a1c:	e002      	b.n	8005a24 <_printf_i+0x1c4>
 8005a1e:	0668      	lsls	r0, r5, #25
 8005a20:	d5fb      	bpl.n	8005a1a <_printf_i+0x1ba>
 8005a22:	8019      	strh	r1, [r3, #0]
 8005a24:	2300      	movs	r3, #0
 8005a26:	6123      	str	r3, [r4, #16]
 8005a28:	4616      	mov	r6, r2
 8005a2a:	e7bc      	b.n	80059a6 <_printf_i+0x146>
 8005a2c:	6833      	ldr	r3, [r6, #0]
 8005a2e:	1d1a      	adds	r2, r3, #4
 8005a30:	6032      	str	r2, [r6, #0]
 8005a32:	681e      	ldr	r6, [r3, #0]
 8005a34:	6862      	ldr	r2, [r4, #4]
 8005a36:	2100      	movs	r1, #0
 8005a38:	4630      	mov	r0, r6
 8005a3a:	f7fa fbd9 	bl	80001f0 <memchr>
 8005a3e:	b108      	cbz	r0, 8005a44 <_printf_i+0x1e4>
 8005a40:	1b80      	subs	r0, r0, r6
 8005a42:	6060      	str	r0, [r4, #4]
 8005a44:	6863      	ldr	r3, [r4, #4]
 8005a46:	6123      	str	r3, [r4, #16]
 8005a48:	2300      	movs	r3, #0
 8005a4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a4e:	e7aa      	b.n	80059a6 <_printf_i+0x146>
 8005a50:	6923      	ldr	r3, [r4, #16]
 8005a52:	4632      	mov	r2, r6
 8005a54:	4649      	mov	r1, r9
 8005a56:	4640      	mov	r0, r8
 8005a58:	47d0      	blx	sl
 8005a5a:	3001      	adds	r0, #1
 8005a5c:	d0ad      	beq.n	80059ba <_printf_i+0x15a>
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	079b      	lsls	r3, r3, #30
 8005a62:	d413      	bmi.n	8005a8c <_printf_i+0x22c>
 8005a64:	68e0      	ldr	r0, [r4, #12]
 8005a66:	9b03      	ldr	r3, [sp, #12]
 8005a68:	4298      	cmp	r0, r3
 8005a6a:	bfb8      	it	lt
 8005a6c:	4618      	movlt	r0, r3
 8005a6e:	e7a6      	b.n	80059be <_printf_i+0x15e>
 8005a70:	2301      	movs	r3, #1
 8005a72:	4632      	mov	r2, r6
 8005a74:	4649      	mov	r1, r9
 8005a76:	4640      	mov	r0, r8
 8005a78:	47d0      	blx	sl
 8005a7a:	3001      	adds	r0, #1
 8005a7c:	d09d      	beq.n	80059ba <_printf_i+0x15a>
 8005a7e:	3501      	adds	r5, #1
 8005a80:	68e3      	ldr	r3, [r4, #12]
 8005a82:	9903      	ldr	r1, [sp, #12]
 8005a84:	1a5b      	subs	r3, r3, r1
 8005a86:	42ab      	cmp	r3, r5
 8005a88:	dcf2      	bgt.n	8005a70 <_printf_i+0x210>
 8005a8a:	e7eb      	b.n	8005a64 <_printf_i+0x204>
 8005a8c:	2500      	movs	r5, #0
 8005a8e:	f104 0619 	add.w	r6, r4, #25
 8005a92:	e7f5      	b.n	8005a80 <_printf_i+0x220>
 8005a94:	08005f0d 	.word	0x08005f0d
 8005a98:	08005f1e 	.word	0x08005f1e

08005a9c <memmove>:
 8005a9c:	4288      	cmp	r0, r1
 8005a9e:	b510      	push	{r4, lr}
 8005aa0:	eb01 0402 	add.w	r4, r1, r2
 8005aa4:	d902      	bls.n	8005aac <memmove+0x10>
 8005aa6:	4284      	cmp	r4, r0
 8005aa8:	4623      	mov	r3, r4
 8005aaa:	d807      	bhi.n	8005abc <memmove+0x20>
 8005aac:	1e43      	subs	r3, r0, #1
 8005aae:	42a1      	cmp	r1, r4
 8005ab0:	d008      	beq.n	8005ac4 <memmove+0x28>
 8005ab2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ab6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005aba:	e7f8      	b.n	8005aae <memmove+0x12>
 8005abc:	4402      	add	r2, r0
 8005abe:	4601      	mov	r1, r0
 8005ac0:	428a      	cmp	r2, r1
 8005ac2:	d100      	bne.n	8005ac6 <memmove+0x2a>
 8005ac4:	bd10      	pop	{r4, pc}
 8005ac6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005aca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ace:	e7f7      	b.n	8005ac0 <memmove+0x24>

08005ad0 <_realloc_r>:
 8005ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ad4:	4607      	mov	r7, r0
 8005ad6:	4614      	mov	r4, r2
 8005ad8:	460d      	mov	r5, r1
 8005ada:	b921      	cbnz	r1, 8005ae6 <_realloc_r+0x16>
 8005adc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ae0:	4611      	mov	r1, r2
 8005ae2:	f7ff bb67 	b.w	80051b4 <_malloc_r>
 8005ae6:	b92a      	cbnz	r2, 8005af4 <_realloc_r+0x24>
 8005ae8:	f7ff fcaa 	bl	8005440 <_free_r>
 8005aec:	4625      	mov	r5, r4
 8005aee:	4628      	mov	r0, r5
 8005af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005af4:	f000 f81a 	bl	8005b2c <_malloc_usable_size_r>
 8005af8:	4284      	cmp	r4, r0
 8005afa:	4606      	mov	r6, r0
 8005afc:	d802      	bhi.n	8005b04 <_realloc_r+0x34>
 8005afe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005b02:	d8f4      	bhi.n	8005aee <_realloc_r+0x1e>
 8005b04:	4621      	mov	r1, r4
 8005b06:	4638      	mov	r0, r7
 8005b08:	f7ff fb54 	bl	80051b4 <_malloc_r>
 8005b0c:	4680      	mov	r8, r0
 8005b0e:	b908      	cbnz	r0, 8005b14 <_realloc_r+0x44>
 8005b10:	4645      	mov	r5, r8
 8005b12:	e7ec      	b.n	8005aee <_realloc_r+0x1e>
 8005b14:	42b4      	cmp	r4, r6
 8005b16:	4622      	mov	r2, r4
 8005b18:	4629      	mov	r1, r5
 8005b1a:	bf28      	it	cs
 8005b1c:	4632      	movcs	r2, r6
 8005b1e:	f7ff fc81 	bl	8005424 <memcpy>
 8005b22:	4629      	mov	r1, r5
 8005b24:	4638      	mov	r0, r7
 8005b26:	f7ff fc8b 	bl	8005440 <_free_r>
 8005b2a:	e7f1      	b.n	8005b10 <_realloc_r+0x40>

08005b2c <_malloc_usable_size_r>:
 8005b2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b30:	1f18      	subs	r0, r3, #4
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	bfbc      	itt	lt
 8005b36:	580b      	ldrlt	r3, [r1, r0]
 8005b38:	18c0      	addlt	r0, r0, r3
 8005b3a:	4770      	bx	lr

08005b3c <_init>:
 8005b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b3e:	bf00      	nop
 8005b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b42:	bc08      	pop	{r3}
 8005b44:	469e      	mov	lr, r3
 8005b46:	4770      	bx	lr

08005b48 <_fini>:
 8005b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b4a:	bf00      	nop
 8005b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b4e:	bc08      	pop	{r3}
 8005b50:	469e      	mov	lr, r3
 8005b52:	4770      	bx	lr
